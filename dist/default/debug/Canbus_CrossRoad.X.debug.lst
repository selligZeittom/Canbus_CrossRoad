

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Thu May 17 16:16:54 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F87K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    46                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    47  0000                     
    48                           ; Version 1.42
    49                           ; Generated 13/04/2017 GMT
    50                           ; 
    51                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC18F87K22 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     
    83                           	psect	idataCOMRAM
    84  00257C                     __pidataCOMRAM:
    85                           	opt stack 0
    86                           
    87                           ;initializer for Can_Isr@nbTxBuf
    88  00257C  03                 	db	3
    89                           
    90                           	psect	idataBANK0
    91  002556                     __pidataBANK0:
    92                           	opt stack 0
    93                           
    94                           ;initializer for Mcp2515ReadCanId@F8123
    95  002556  03                 	db	3
    96  002557  00                 	db	0
    97  002558  00                 	db	0
    98  002559  00                 	db	0
    99  00255A  00                 	db	0
   100  00255B  00                 	db	0
   101                           
   102                           ;initializer for Mcp2515_Init@F8112
   103  00255C  05                 	db	5
   104  00255D  0F                 	db	15
   105  00255E  E0                 	db	224
   106  00255F  80                 	db	128
   107                           
   108                           ;initializer for Can_GetStatus@F8264
   109  002560  05                 	db	5
   110  002561  2C                 	db	44
   111  002562  1C                 	db	28
   112  002563  00                 	db	0
   113                           
   114                           ;initializer for Mcp2515GetNextFreeTXBuf@F8153
   115  002564  30                 	db	48
   116  002565  40                 	db	64
   117  002566  50                 	db	80
   118                           
   119                           ;initializer for Mcp2515_Init@F8114
   120  002567  02                 	db	2
   121  002568  00                 	db	0
   122  002569  00                 	db	0
   123                           
   124                           ;initializer for Can_GetStatus@F8262
   125  00256A  03                 	db	3
   126  00256B  2C                 	db	44
   127  00256C  00                 	db	0
   128                           
   129                           	psect	smallconst
   130  001000                     __psmallconst:
   131                           	opt stack 0
   132  001000  00                 	db	0
   133  001001                     _canSpeed1000k:
   134                           	opt stack 0
   135  001001  00                 	db	0
   136  001002  01                 	db	1
   137  001003  00                 	db	0
   138  001004  03                 	db	3
   139  001005  01                 	db	1
   140  001006  01                 	db	1
   141  001007  01                 	db	1
   142  001008                     __end_of_canSpeed1000k:
   143                           	opt stack 0
   144  001008                     _canSpeed800k:
   145                           	opt stack 0
   146  001008  00                 	db	0
   147  001009  01                 	db	1
   148  00100A  02                 	db	2
   149  00100B  03                 	db	3
   150  00100C  01                 	db	1
   151  00100D  01                 	db	1
   152  00100E  01                 	db	1
   153  00100F                     __end_of_canSpeed800k:
   154                           	opt stack 0
   155  00100F                     _canSpeed500k:
   156                           	opt stack 0
   157  00100F  01                 	db	1
   158  001010  01                 	db	1
   159  001011  00                 	db	0
   160  001012  03                 	db	3
   161  001013  01                 	db	1
   162  001014  01                 	db	1
   163  001015  01                 	db	1
   164  001016                     __end_of_canSpeed500k:
   165                           	opt stack 0
   166  001016                     _canSpeed250k:
   167                           	opt stack 0
   168  001016  03                 	db	3
   169  001017  01                 	db	1
   170  001018  00                 	db	0
   171  001019  03                 	db	3
   172  00101A  01                 	db	1
   173  00101B  01                 	db	1
   174  00101C  01                 	db	1
   175  00101D                     __end_of_canSpeed250k:
   176                           	opt stack 0
   177  00101D                     _canSpeed100k:
   178                           	opt stack 0
   179  00101D  07                 	db	7
   180  00101E  01                 	db	1
   181  00101F  02                 	db	2
   182  001020  03                 	db	3
   183  001021  01                 	db	1
   184  001022  01                 	db	1
   185  001023  01                 	db	1
   186  001024                     __end_of_canSpeed100k:
   187                           	opt stack 0
   188  001024                     _canSpeed50k:
   189                           	opt stack 0
   190  001024  0F                 	db	15
   191  001025  01                 	db	1
   192  001026  02                 	db	2
   193  001027  03                 	db	3
   194  001028  01                 	db	1
   195  001029  01                 	db	1
   196  00102A  01                 	db	1
   197  00102B                     __end_of_canSpeed50k:
   198                           	opt stack 0
   199  00102B                     _canSpeed20k:
   200                           	opt stack 0
   201  00102B  13                 	db	19
   202  00102C  01                 	db	1
   203  00102D  06                 	db	6
   204  00102E  06                 	db	6
   205  00102F  04                 	db	4
   206  001030  01                 	db	1
   207  001031  01                 	db	1
   208  001032                     __end_of_canSpeed20k:
   209                           	opt stack 0
   210  001032                     _canSpeed10k:
   211                           	opt stack 0
   212  001032  1F                 	db	31
   213  001033  01                 	db	1
   214  001034  07                 	db	7
   215  001035  07                 	db	7
   216  001036  07                 	db	7
   217  001037  01                 	db	1
   218  001038  01                 	db	1
   219  001039                     __end_of_canSpeed10k:
   220                           	opt stack 0
   221  001039                     _canSpeed125k:
   222                           	opt stack 0
   223  001039  07                 	db	7
   224  00103A  01                 	db	1
   225  00103B  00                 	db	0
   226  00103C  03                 	db	3
   227  00103D  01                 	db	1
   228  00103E  01                 	db	1
   229  00103F  01                 	db	1
   230  001040                     __end_of_canSpeed125k:
   231                           	opt stack 0
   232  0000                     _SPBRG1	set	4015
   233  0000                     _SPBRGH1	set	4052
   234  0000                     _OSCCON	set	4051
   235  0000                     _TXREG	set	4013
   236  0000                     _SSPBUF	set	4041
   237  0000                     _SSPCON1	set	4038
   238  0000                     _TXEN1	set	32101
   239  0000                     _CREN1	set	32092
   240  0000                     _SPEN1	set	32095
   241  0000                     _SYNC1	set	32100
   242  0000                     _BRG161	set	31531
   243  0000                     _BRGH1	set	32098
   244  0000                     _LATG0	set	31864
   245  0000                     _TRISG0	set	31936
   246  0000                     _PLLEN	set	31966
   247  0000                     _TXIF	set	31988
   248  0000                     _RB3	set	31755
   249  0000                     _SSP1IF	set	31987
   250  0000                     _SSPIF	set	31987
   251  0000                     _LATD1	set	31841
   252  0000                     _INTEDG3	set	32651
   253  0000                     _SSPEN1	set	32309
   254  0000                     _CKP1	set	32308
   255  0000                     _CKE1	set	32318
   256  0000                     _TRISD1	set	31913
   257  0000                     _TRISC3	set	31907
   258  0000                     _TRISC5	set	31909
   259  0000                     _TRISC4	set	31908
   260  0000                     _LATF7	set	31863
   261  0000                     _LATF6	set	31862
   262  0000                     _TRISF7	set	31935
   263  0000                     _TRISF6	set	31934
   264  0000                     _INT3IF	set	32642
   265  0000                     _INT3IE	set	32645
   266  0000                     _GIE	set	32663
   267  0000                     _PEIE	set	32662
   268                           
   269                           ; #config settings
   270  001040  00                 	db	0	; dummy byte at the end
   271  0000                     
   272                           	psect	cinit
   273  00216E                     __pcinit:
   274                           	opt stack 0
   275  00216E                     start_initialization:
   276                           	opt stack 0
   277  00216E                     __initialization:
   278                           	opt stack 0
   279                           
   280                           ; Initialize objects allocated to BANK0 (23 bytes)
   281                           ; load TBLPTR registers with __pidataBANK0
   282  00216E  0E56               	movlw	low __pidataBANK0
   283  002170  6EF6               	movwf	tblptrl,c
   284  002172  0E25               	movlw	high __pidataBANK0
   285  002174  6EF7               	movwf	tblptrh,c
   286  002176  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   287  002178  6EF8               	movwf	tblptru,c
   288  00217A  EE00  F0DE         	lfsr	0,__pdataBANK0
   289  00217E  EE10 F017          	lfsr	1,23
   290  002182                     copy_data0:
   291  002182  0009               	tblrd		*+
   292  002184  CFF5 FFEE          	movff	tablat,postinc0
   293  002188  50E5               	movf	postdec1,w,c
   294  00218A  50E1               	movf	fsr1l,w,c
   295  00218C  E1FA               	bnz	copy_data0
   296                           
   297                           ; Initialize objects allocated to COMRAM (1 bytes)
   298                           ; load TBLPTR registers with __pidataCOMRAM
   299  00218E  0E7C               	movlw	low __pidataCOMRAM
   300  002190  6EF6               	movwf	tblptrl,c
   301  002192  0E25               	movlw	high __pidataCOMRAM
   302  002194  6EF7               	movwf	tblptrh,c
   303  002196  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   304  002198  6EF8               	movwf	tblptru,c
   305  00219A  0009               	tblrd		*+	;fetch initializer
   306  00219C  CFF5 F05E          	movff	tablat,__pdataCOMRAM
   307                           
   308                           ; Clear objects allocated to BANK1 (136 bytes)
   309  0021A0  EE01  F000         	lfsr	0,__pbssBANK1
   310  0021A4  0E88               	movlw	136
   311  0021A6                     clear_0:
   312  0021A6  6AEE               	clrf	postinc0,c
   313  0021A8  06E8               	decf	wreg,f,c
   314  0021AA  E1FD               	bnz	clear_0
   315                           
   316                           ; Clear objects allocated to BANK0 (57 bytes)
   317  0021AC  EE00  F0A5         	lfsr	0,__pbssBANK0
   318  0021B0  0E39               	movlw	57
   319  0021B2                     clear_1:
   320  0021B2  6AEE               	clrf	postinc0,c
   321  0021B4  06E8               	decf	wreg,f,c
   322  0021B6  E1FD               	bnz	clear_1
   323                           
   324                           ; Clear objects allocated to COMRAM (6 bytes)
   325  0021B8  6A5D               	clrf	(__pbssCOMRAM+5)& (0+255),c
   326  0021BA  6A5C               	clrf	(__pbssCOMRAM+4)& (0+255),c
   327  0021BC  6A5B               	clrf	(__pbssCOMRAM+3)& (0+255),c
   328  0021BE  6A5A               	clrf	(__pbssCOMRAM+2)& (0+255),c
   329  0021C0  6A59               	clrf	(__pbssCOMRAM+1)& (0+255),c
   330  0021C2  6A58               	clrf	__pbssCOMRAM& (0+255),c
   331  0021C4                     end_of_initialization:
   332                           	opt stack 0
   333  0021C4                     __end_of__initialization:
   334                           	opt stack 0
   335  0021C4  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   336  0021C6  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   337  0021C8  0E00               	movlw	low (__Lsmallconst shr (0+16))
   338  0021CA  6EF8               	movwf	tblptru,c
   339  0021CC  0E10               	movlw	high __Lsmallconst
   340  0021CE  6EF7               	movwf	tblptrh,c
   341  0021D0  0100               	movlb	0
   342  0021D2  EFB7  F012         	goto	_main	;jump to C main() function
   343                           tblptru	equ	0xFF8
   344                           tblptrh	equ	0xFF7
   345                           tblptrl	equ	0xFF6
   346                           tablat	equ	0xFF5
   347                           postinc0	equ	0xFEE
   348                           wreg	equ	0xFE8
   349                           postdec1	equ	0xFE5
   350                           fsr1l	equ	0xFE1
   351                           
   352                           	psect	bssCOMRAM
   353  000058                     __pbssCOMRAM:
   354                           	opt stack 0
   355  000058                     _nbTx2:
   356                           	opt stack 0
   357  000058                     	ds	1
   358  000059                     _nbTx1:
   359                           	opt stack 0
   360  000059                     	ds	1
   361  00005A                     _nbTx0:
   362                           	opt stack 0
   363  00005A                     	ds	1
   364  00005B                     _txBufferPtrOut:
   365                           	opt stack 0
   366  00005B                     	ds	1
   367  00005C                     _rxBufferCount:
   368                           	opt stack 0
   369  00005C                     	ds	1
   370  00005D                     _rxBufferPtrIn:
   371                           	opt stack 0
   372  00005D                     	ds	1
   373                           tblptru	equ	0xFF8
   374                           tblptrh	equ	0xFF7
   375                           tblptrl	equ	0xFF6
   376                           tablat	equ	0xFF5
   377                           postinc0	equ	0xFEE
   378                           wreg	equ	0xFE8
   379                           postdec1	equ	0xFE5
   380                           fsr1l	equ	0xFE1
   381                           
   382                           	psect	dataCOMRAM
   383  00005E                     __pdataCOMRAM:
   384                           	opt stack 0
   385  00005E                     Can_Isr@nbTxBuf:
   386                           	opt stack 0
   387  00005E                     	ds	1
   388                           tblptru	equ	0xFF8
   389                           tblptrh	equ	0xFF7
   390                           tblptrl	equ	0xFF6
   391                           tablat	equ	0xFF5
   392                           postinc0	equ	0xFEE
   393                           wreg	equ	0xFE8
   394                           postdec1	equ	0xFE5
   395                           fsr1l	equ	0xFE1
   396                           
   397                           	psect	bssBANK0
   398  0000A5                     __pbssBANK0:
   399                           	opt stack 0
   400  0000A5                     Mcp2515Sleep@F8117:
   401                           	opt stack 0
   402  0000A5                     	ds	3
   403  0000A8                     _txBufferCount:
   404                           	opt stack 0
   405  0000A8                     	ds	1
   406  0000A9                     _txBufferPtrIn:
   407                           	opt stack 0
   408  0000A9                     	ds	1
   409  0000AA                     _rxBufferPtrOut:
   410                           	opt stack 0
   411  0000AA                     	ds	1
   412  0000AB                     _id:
   413                           	opt stack 0
   414  0000AB                     	ds	1
   415  0000AC                     _filter:
   416                           	opt stack 0
   417  0000AC                     	ds	33
   418  0000CD                     _message:
   419                           	opt stack 0
   420  0000CD                     	ds	17
   421                           tblptru	equ	0xFF8
   422                           tblptrh	equ	0xFF7
   423                           tblptrl	equ	0xFF6
   424                           tablat	equ	0xFF5
   425                           postinc0	equ	0xFEE
   426                           wreg	equ	0xFE8
   427                           postdec1	equ	0xFE5
   428                           fsr1l	equ	0xFE1
   429                           
   430                           	psect	dataBANK0
   431  0000DE                     __pdataBANK0:
   432                           	opt stack 0
   433  0000DE                     Mcp2515ReadCanId@F8123:
   434                           	opt stack 0
   435  0000DE                     	ds	6
   436  0000E4                     Mcp2515_Init@F8112:
   437                           	opt stack 0
   438  0000E4                     	ds	4
   439  0000E8                     Can_GetStatus@F8264:
   440                           	opt stack 0
   441  0000E8                     	ds	4
   442  0000EC                     Mcp2515GetNextFreeTXBuf@F8153:
   443                           	opt stack 0
   444  0000EC                     	ds	3
   445  0000EF                     Mcp2515_Init@F8114:
   446                           	opt stack 0
   447  0000EF                     	ds	3
   448  0000F2                     Can_GetStatus@F8262:
   449                           	opt stack 0
   450  0000F2                     	ds	3
   451                           tblptru	equ	0xFF8
   452                           tblptrh	equ	0xFF7
   453                           tblptrl	equ	0xFF6
   454                           tablat	equ	0xFF5
   455                           postinc0	equ	0xFEE
   456                           wreg	equ	0xFE8
   457                           postdec1	equ	0xFE5
   458                           fsr1l	equ	0xFE1
   459                           
   460                           	psect	bssBANK1
   461  000100                     __pbssBANK1:
   462                           	opt stack 0
   463  000100                     _txBuffer:
   464                           	opt stack 0
   465  000100                     	ds	68
   466  000144                     _rxBuffer:
   467                           	opt stack 0
   468  000144                     	ds	68
   469                           tblptru	equ	0xFF8
   470                           tblptrh	equ	0xFF7
   471                           tblptrl	equ	0xFF6
   472                           tablat	equ	0xFF5
   473                           postinc0	equ	0xFEE
   474                           wreg	equ	0xFE8
   475                           postdec1	equ	0xFE5
   476                           fsr1l	equ	0xFE1
   477                           
   478                           	psect	cstackBANK0
   479  000060                     __pcstackBANK0:
   480                           	opt stack 0
   481  000060                     Can_GetMessage@msgPtr:
   482                           	opt stack 0
   483  000060                     Can_PutMessage@msgPtr:
   484                           	opt stack 0
   485  000060                     SPIRW@tx:
   486                           	opt stack 0
   487                           
   488                           ; 2 bytes @ 0x0
   489  000060                     	ds	2
   490  000062                     ??_Can_PutMessage:
   491  000062                     ??_Can_GetMessage:
   492  000062                     SPIRW@rx:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x2
   496  000062                     	ds	2
   497  000064                     Can_GetMessage@i:
   498                           	opt stack 0
   499  000064                     Can_PutMessage@i:
   500                           	opt stack 0
   501  000064                     SPIRW@size:
   502                           	opt stack 0
   503                           
   504                           ; 4 bytes @ 0x4
   505  000064                     	ds	1
   506  000065                     readID@retVal:
   507                           	opt stack 0
   508                           
   509                           ; 1 bytes @ 0x5
   510  000065                     	ds	3
   511  000068                     SPIRW@i:
   512                           	opt stack 0
   513                           
   514                           ; 4 bytes @ 0x8
   515  000068                     	ds	4
   516  00006C                     Spi_Write@tx:
   517                           	opt stack 0
   518                           
   519                           ; 2 bytes @ 0xC
   520  00006C                     	ds	2
   521  00006E                     Spi_Write@size:
   522                           	opt stack 0
   523                           
   524                           ; 4 bytes @ 0xE
   525  00006E                     	ds	4
   526  000072                     Mcp2515_Reset@cmd:
   527                           	opt stack 0
   528  000072                     Mcp2515WriteCanId@ext:
   529                           	opt stack 0
   530                           
   531                           ; 1 bytes @ 0x12
   532  000072                     	ds	1
   533  000073                     Mcp2515_Reset@i:
   534                           	opt stack 0
   535  000073                     Mcp2515WriteCanId@can_id:
   536                           	opt stack 0
   537                           
   538                           ; 4 bytes @ 0x13
   539  000073                     	ds	4
   540  000077                     ??_Mcp2515WriteCanId:
   541                           
   542                           ; 1 bytes @ 0x17
   543  000077                     	ds	3
   544  00007A                     Mcp2515WriteCanId@mcp_addr:
   545                           	opt stack 0
   546                           
   547                           ; 1 bytes @ 0x1A
   548  00007A                     	ds	1
   549  00007B                     Mcp2515WriteCanId@buf:
   550                           	opt stack 0
   551                           
   552                           ; 6 bytes @ 0x1B
   553  00007B                     	ds	6
   554  000081                     Mcp2515WriteCanId@canid:
   555                           	opt stack 0
   556                           
   557                           ; 2 bytes @ 0x21
   558  000081                     	ds	2
   559  000083                     Mcp2515_Init@speedCfg:
   560                           	opt stack 0
   561                           
   562                           ; 2 bytes @ 0x23
   563  000083                     	ds	2
   564  000085                     Mcp2515_Init@filterCfg:
   565                           	opt stack 0
   566                           
   567                           ; 2 bytes @ 0x25
   568  000085                     	ds	2
   569  000087                     ??_Mcp2515_Init:
   570                           
   571                           ; 1 bytes @ 0x27
   572  000087                     	ds	13
   573  000094                     Mcp2515_Init@i:
   574                           	opt stack 0
   575                           
   576                           ; 1 bytes @ 0x34
   577  000094                     	ds	1
   578  000095                     Mcp2515_Init@cmdMask4:
   579                           	opt stack 0
   580                           
   581                           ; 4 bytes @ 0x35
   582  000095                     	ds	4
   583  000099                     Mcp2515_Init@cmdWrite3:
   584                           	opt stack 0
   585                           
   586                           ; 3 bytes @ 0x39
   587  000099                     	ds	3
   588  00009C                     Can_Init@speedCfg:
   589                           	opt stack 0
   590                           
   591                           ; 2 bytes @ 0x3C
   592  00009C                     	ds	2
   593  00009E                     Can_Init@filterCfg:
   594                           	opt stack 0
   595                           
   596                           ; 2 bytes @ 0x3E
   597  00009E                     	ds	2
   598  0000A0                     
   599                           ; 2 bytes @ 0x40
   600  0000A0                     	ds	2
   601  0000A2                     
   602                           ; 3 bytes @ 0x42
   603  0000A2                     	ds	3
   604  0000A5                     tblptru	equ	0xFF8
   605                           tblptrh	equ	0xFF7
   606                           tblptrl	equ	0xFF6
   607                           tablat	equ	0xFF5
   608                           postinc0	equ	0xFEE
   609                           wreg	equ	0xFE8
   610                           postdec1	equ	0xFE5
   611                           fsr1l	equ	0xFE1
   612                           
   613                           ; 1 bytes @ 0x45
   614                           
   615                           	psect	cstackCOMRAM
   616  000001                     __pcstackCOMRAM:
   617                           	opt stack 0
   618  000001                     memcpy@d1:
   619                           	opt stack 0
   620  000001                     i2SPIRW@tx:
   621                           	opt stack 0
   622                           
   623                           ; 2 bytes @ 0x0
   624  000001                     	ds	2
   625  000003                     memcpy@s1:
   626                           	opt stack 0
   627  000003                     i2SPIRW@rx:
   628                           	opt stack 0
   629                           
   630                           ; 2 bytes @ 0x2
   631  000003                     	ds	2
   632  000005                     memcpy@n:
   633                           	opt stack 0
   634  000005                     i2SPIRW@size:
   635                           	opt stack 0
   636                           
   637                           ; 4 bytes @ 0x4
   638  000005                     	ds	2
   639  000007                     memcpy@d:
   640                           	opt stack 0
   641                           
   642                           ; 2 bytes @ 0x6
   643  000007                     	ds	2
   644  000009                     memcpy@s:
   645                           	opt stack 0
   646  000009                     i2SPIRW@i:
   647                           	opt stack 0
   648                           
   649                           ; 4 bytes @ 0x8
   650  000009                     	ds	2
   651  00000B                     memcpy@tmp:
   652                           	opt stack 0
   653                           
   654                           ; 1 bytes @ 0xA
   655  00000B                     	ds	2
   656  00000D                     Spi_ReadWrite@rx_tx:
   657                           	opt stack 0
   658  00000D                     i2Spi_Write@tx:
   659                           	opt stack 0
   660                           
   661                           ; 2 bytes @ 0xC
   662  00000D                     	ds	2
   663  00000F                     Spi_ReadWrite@size:
   664                           	opt stack 0
   665  00000F                     i2Spi_Write@size:
   666                           	opt stack 0
   667                           
   668                           ; 4 bytes @ 0xE
   669  00000F                     	ds	4
   670  000013                     i2Mcp2515WriteCanId@ext:
   671                           	opt stack 0
   672  000013                     Mcp2515ReadCanId@ext:
   673                           	opt stack 0
   674  000013                     Mcp2515GetNextFreeTXBuf@txbuf_n:
   675                           	opt stack 0
   676  000013                     Can_GetStatus@msg4:
   677                           	opt stack 0
   678                           
   679                           ; 4 bytes @ 0x12
   680  000013                     	ds	1
   681  000014                     i2Mcp2515WriteCanId@can_id:
   682                           	opt stack 0
   683                           
   684                           ; 4 bytes @ 0x13
   685  000014                     	ds	1
   686  000015                     ??_Mcp2515GetNextFreeTXBuf:
   687  000015                     Mcp2515ReadCanId@can_id:
   688                           	opt stack 0
   689                           
   690                           ; 2 bytes @ 0x14
   691  000015                     	ds	1
   692  000016                     Mcp2515GetNextFreeTXBuf@ctrlregs:
   693                           	opt stack 0
   694                           
   695                           ; 3 bytes @ 0x15
   696  000016                     	ds	1
   697  000017                     ??_Mcp2515ReadCanId:
   698  000017                     Can_GetStatus@msg:
   699                           	opt stack 0
   700                           
   701                           ; 3 bytes @ 0x16
   702  000017                     	ds	1
   703  000018                     ??i2_Mcp2515WriteCanId:
   704                           
   705                           ; 1 bytes @ 0x17
   706  000018                     	ds	1
   707  000019                     Mcp2515GetNextFreeTXBuf@buf:
   708                           	opt stack 0
   709                           
   710                           ; 3 bytes @ 0x18
   711  000019                     	ds	1
   712  00001A                     Can_GetStatus@status:
   713                           	opt stack 0
   714                           
   715                           ; 1 bytes @ 0x19
   716  00001A                     	ds	1
   717  00001B                     i2Mcp2515WriteCanId@mcp_addr:
   718                           	opt stack 0
   719                           
   720                           ; 1 bytes @ 0x1A
   721  00001B                     	ds	1
   722  00001C                     Mcp2515GetNextFreeTXBuf@i:
   723                           	opt stack 0
   724  00001C                     i2Mcp2515WriteCanId@buf:
   725                           	opt stack 0
   726                           
   727                           ; 6 bytes @ 0x1B
   728  00001C                     	ds	6
   729  000022                     i2Mcp2515WriteCanId@canid:
   730                           	opt stack 0
   731                           
   732                           ; 2 bytes @ 0x21
   733  000022                     	ds	2
   734  000024                     Mcp2515WriteCanMsg@msg:
   735                           	opt stack 0
   736                           
   737                           ; 2 bytes @ 0x23
   738  000024                     	ds	2
   739  000026                     ??_Mcp2515WriteCanMsg:
   740                           
   741                           ; 1 bytes @ 0x25
   742  000026                     	ds	2
   743  000028                     Mcp2515WriteCanMsg@buf:
   744                           	opt stack 0
   745                           
   746                           ; 10 bytes @ 0x27
   747  000028                     	ds	1
   748  000029                     Mcp2515ReadCanId@mcp_addr:
   749                           	opt stack 0
   750                           
   751                           ; 1 bytes @ 0x28
   752  000029                     	ds	1
   753  00002A                     Mcp2515ReadCanId@msg:
   754                           	opt stack 0
   755                           
   756                           ; 6 bytes @ 0x29
   757  00002A                     	ds	6
   758  000030                     Mcp2515ReadCanMsg@msg:
   759                           	opt stack 0
   760                           
   761                           ; 2 bytes @ 0x2F
   762  000030                     	ds	2
   763  000032                     ??_Mcp2515ReadCanMsg:
   764  000032                     Mcp2515WriteCanMsg@buffer_sidh_addr:
   765                           	opt stack 0
   766                           
   767                           ; 1 bytes @ 0x31
   768  000032                     	ds	1
   769  000033                     Mcp2515WriteCanMsg@dlc:
   770                           	opt stack 0
   771                           
   772                           ; 1 bytes @ 0x32
   773  000033                     	ds	1
   774  000034                     Mcp2515WriteCanMsg@mcp_addr:
   775                           	opt stack 0
   776  000034                     Mcp2515ReadCanMsg@cmd:
   777                           	opt stack 0
   778                           
   779                           ; 10 bytes @ 0x33
   780  000034                     	ds	1
   781  000035                     Mcp2515WriteCanMsg@i:
   782                           	opt stack 0
   783                           
   784                           ; 1 bytes @ 0x34
   785  000035                     	ds	1
   786  000036                     Can_SendMessage@msg:
   787                           	opt stack 0
   788                           
   789                           ; 2 bytes @ 0x35
   790  000036                     	ds	2
   791  000038                     Can_SendMessage@buf:
   792                           	opt stack 0
   793                           
   794                           ; 4 bytes @ 0x37
   795  000038                     	ds	4
   796  00003C                     Can_SendMessage@res:
   797                           	opt stack 0
   798                           
   799                           ; 1 bytes @ 0x3B
   800  00003C                     	ds	1
   801  00003D                     Can_SendMessage@txbuf_n:
   802                           	opt stack 0
   803                           
   804                           ; 1 bytes @ 0x3C
   805  00003D                     	ds	1
   806  00003E                     Mcp2515ReadCanMsg@mcp_addr:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x3D
   810  00003E                     	ds	1
   811  00003F                     Can_ReadMessage@msg:
   812                           	opt stack 0
   813                           
   814                           ; 2 bytes @ 0x3E
   815  00003F                     	ds	2
   816  000041                     Can_ReadMessage@buf:
   817                           	opt stack 0
   818                           
   819                           ; 4 bytes @ 0x40
   820  000041                     	ds	4
   821  000045                     Can_ReadInBuffer@error:
   822                           	opt stack 0
   823                           
   824                           ; 1 bytes @ 0x44
   825  000045                     	ds	1
   826  000046                     Can_ReadInBuffer@rdStatus:
   827                           	opt stack 0
   828                           
   829                           ; 1 bytes @ 0x45
   830  000046                     	ds	1
   831  000047                     Can_ReadInBuffer@i:
   832                           	opt stack 0
   833                           
   834                           ; 1 bytes @ 0x46
   835  000047                     	ds	1
   836  000048                     ??_Can_Isr:
   837                           
   838                           ; 1 bytes @ 0x47
   839  000048                     	ds	1
   840  000049                     Can_Isr@retCode:
   841                           	opt stack 0
   842                           
   843                           ; 1 bytes @ 0x48
   844  000049                     	ds	1
   845  00004A                     ??_high_isr:
   846                           
   847                           ; 1 bytes @ 0x49
   848  00004A                     	ds	14
   849                           tblptru	equ	0xFF8
   850                           tblptrh	equ	0xFF7
   851                           tblptrl	equ	0xFF6
   852                           tablat	equ	0xFF5
   853                           postinc0	equ	0xFEE
   854                           wreg	equ	0xFE8
   855                           postdec1	equ	0xFE5
   856                           fsr1l	equ	0xFE1
   857                           
   858 ;;
   859 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   860 ;;
   861 ;; *************** function _main *****************
   862 ;; Defined at:
   863 ;;		line 59 in file "main.c"
   864 ;; Parameters:    Size  Location     Type
   865 ;;  argc            2   64[BANK0 ] int 
   866 ;;  argv            3   66[BANK0 ] PTR PTR unsigned char 
   867 ;; Auto vars:     Size  Location     Type
   868 ;;		None
   869 ;; Return value:  Size  Location     Type
   870 ;;                  2   64[BANK0 ] int 
   871 ;; Registers used:
   872 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   873 ;; Tracked objects:
   874 ;;		On entry : 0/0
   875 ;;		On exit  : 0/0
   876 ;;		Unchanged: 0/0
   877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   878 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   881 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   882 ;;Total ram usage:        5 bytes
   883 ;; Hardware stack levels required when called:   14
   884 ;; This function calls:
   885 ;;		_init
   886 ;; This function is called by:
   887 ;;		Startup code after reset
   888 ;; This function uses a non-reentrant model
   889 ;;
   890                           
   891                           	psect	text0
   892  00256E                     __ptext0:
   893                           	opt stack 0
   894  00256E                     _main:
   895                           	opt stack 17
   896                           
   897                           ;main.c: 60: init();
   898                           
   899                           ;incstack = 0
   900  00256E  ECEB  F010         	call	_init	;wreg free
   901                           
   902                           ;main.c: 61: return (0);
   903                           ;	Return value of _main is never used
   904  002572  EF47  F000         	goto	start
   905  002576                     __end_of_main:
   906                           	opt stack 0
   907                           tblptru	equ	0xFF8
   908                           tblptrh	equ	0xFF7
   909                           tblptrl	equ	0xFF6
   910                           tablat	equ	0xFF5
   911                           postinc0	equ	0xFEE
   912                           wreg	equ	0xFE8
   913                           postdec1	equ	0xFE5
   914                           fsr1l	equ	0xFE1
   915                           
   916 ;; *************** function _init *****************
   917 ;; Defined at:
   918 ;;		line 30 in file "main.c"
   919 ;; Parameters:    Size  Location     Type
   920 ;;		None
   921 ;; Auto vars:     Size  Location     Type
   922 ;;		None
   923 ;; Return value:  Size  Location     Type
   924 ;;                  1    wreg      void 
   925 ;; Registers used:
   926 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   927 ;; Tracked objects:
   928 ;;		On entry : 0/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   936 ;;Total ram usage:        0 bytes
   937 ;; Hardware stack levels used:    1
   938 ;; Hardware stack levels required when called:   13
   939 ;; This function calls:
   940 ;;		_Can_Init
   941 ;;		_readID
   942 ;; This function is called by:
   943 ;;		_main
   944 ;; This function uses a non-reentrant model
   945 ;;
   946                           
   947                           	psect	text1
   948  0021D6                     __ptext1:
   949                           	opt stack 0
   950  0021D6                     _init:
   951                           	opt stack 17
   952                           
   953                           ;main.c: 31: Can_Init( &canSpeed125k , &filter);
   954                           
   955                           ;incstack = 0
   956  0021D6  0E39               	movlw	low _canSpeed125k
   957  0021D8  0100               	movlb	0	; () banked
   958  0021DA  6F9C               	movwf	Can_Init@speedCfg& (0+255),b
   959  0021DC  0E10               	movlw	high _canSpeed125k
   960  0021DE  0100               	movlb	0	; () banked
   961  0021E0  6F9D               	movwf	(Can_Init@speedCfg+1)& (0+255),b
   962  0021E2  0EAC               	movlw	low _filter
   963  0021E4  0100               	movlb	0	; () banked
   964  0021E6  6F9E               	movwf	Can_Init@filterCfg& (0+255),b
   965  0021E8  0E00               	movlw	high _filter
   966  0021EA  0100               	movlb	0	; () banked
   967  0021EC  6F9F               	movwf	(Can_Init@filterCfg+1)& (0+255),b
   968  0021EE  EC46  F012         	call	_Can_Init	;wreg free
   969                           
   970                           ;main.c: 32: PEIE = 1;
   971  0021F2  8CF2               	bsf	intcon,6,c	;volatile
   972                           
   973                           ;main.c: 33: GIE = 1;
   974  0021F4  8EF2               	bsf	intcon,7,c	;volatile
   975                           
   976                           ;main.c: 34: id = readID();
   977  0021F6  ECB4  F011         	call	_readID	;wreg free
   978  0021FA  0100               	movlb	0	; () banked
   979  0021FC  6FAB               	movwf	_id& (0+255),b
   980                           
   981                           ; BSR set to: 0
   982                           ;main.c: 35: filter.mask0 = 0X00F;
   983  0021FE  0E0F               	movlw	15
   984  002200  0100               	movlb	0	; () banked
   985  002202  6FAC               	movwf	_filter& (0+255),b
   986  002204  0E00               	movlw	0
   987  002206  6FAD               	movwf	(_filter+1)& (0+255),b
   988  002208  0E00               	movlw	0
   989  00220A  6FAE               	movwf	(_filter+2)& (0+255),b
   990  00220C  0E00               	movlw	0
   991  00220E  6FAF               	movwf	(_filter+3)& (0+255),b
   992                           
   993                           ; BSR set to: 0
   994                           ;main.c: 36: filter.filter0 = id;
   995  002210  0100               	movlb	0	; () banked
   996  002212  51AB               	movf	_id& (0+255),w,b
   997  002214  0100               	movlb	0	; () banked
   998  002216  6FB4               	movwf	(_filter+8)& (0+255),b
   999  002218  6BB5               	clrf	(_filter+9)& (0+255),b
  1000  00221A  6BB6               	clrf	(_filter+10)& (0+255),b
  1001  00221C  6BB7               	clrf	(_filter+11)& (0+255),b
  1002                           
  1003                           ; BSR set to: 0
  1004                           ;main.c: 37: Can_Init( &canSpeed125k , &filter);
  1005  00221E  0E39               	movlw	low _canSpeed125k
  1006  002220  0100               	movlb	0	; () banked
  1007  002222  6F9C               	movwf	Can_Init@speedCfg& (0+255),b
  1008  002224  0E10               	movlw	high _canSpeed125k
  1009  002226  0100               	movlb	0	; () banked
  1010  002228  6F9D               	movwf	(Can_Init@speedCfg+1)& (0+255),b
  1011  00222A  0EAC               	movlw	low _filter
  1012  00222C  0100               	movlb	0	; () banked
  1013  00222E  6F9E               	movwf	Can_Init@filterCfg& (0+255),b
  1014  002230  0E00               	movlw	high _filter
  1015  002232  0100               	movlb	0	; () banked
  1016  002234  6F9F               	movwf	(Can_Init@filterCfg+1)& (0+255),b
  1017  002236  EC46  F012         	call	_Can_Init	;wreg free
  1018  00223A  0012               	return		;funcret
  1019  00223C                     __end_of_init:
  1020                           	opt stack 0
  1021                           tblptru	equ	0xFF8
  1022                           tblptrh	equ	0xFF7
  1023                           tblptrl	equ	0xFF6
  1024                           tablat	equ	0xFF5
  1025                           intcon	equ	0xFF2
  1026                           postinc0	equ	0xFEE
  1027                           wreg	equ	0xFE8
  1028                           postdec1	equ	0xFE5
  1029                           fsr1l	equ	0xFE1
  1030                           
  1031 ;; *************** function _readID *****************
  1032 ;; Defined at:
  1033 ;;		line 41 in file "main.c"
  1034 ;; Parameters:    Size  Location     Type
  1035 ;;		None
  1036 ;; Auto vars:     Size  Location     Type
  1037 ;;  retVal          1    5[BANK0 ] unsigned char 
  1038 ;; Return value:  Size  Location     Type
  1039 ;;                  1    wreg      unsigned char 
  1040 ;; Registers used:
  1041 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1042 ;; Tracked objects:
  1043 ;;		On entry : 0/0
  1044 ;;		On exit  : 0/0
  1045 ;;		Unchanged: 0/0
  1046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1048 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1050 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1051 ;;Total ram usage:        1 bytes
  1052 ;; Hardware stack levels used:    1
  1053 ;; Hardware stack levels required when called:    9
  1054 ;; This function calls:
  1055 ;;		_Can_GetMessage
  1056 ;;		_Can_PutMessage
  1057 ;; This function is called by:
  1058 ;;		_init
  1059 ;; This function uses a non-reentrant model
  1060 ;;
  1061                           
  1062                           	psect	text2
  1063  002368                     __ptext2:
  1064                           	opt stack 0
  1065  002368                     _readID:
  1066                           	opt stack 20
  1067                           
  1068                           ;main.c: 42: uint8_t retVal = 0;
  1069                           
  1070                           ;incstack = 0
  1071  002368  0E00               	movlw	0
  1072  00236A  0100               	movlb	0	; () banked
  1073  00236C  6F65               	movwf	readID@retVal& (0+255),b
  1074                           
  1075                           ;main.c: 45: message.identifier = ((10<<7) | 0xF) ;
  1076  00236E  0E0F               	movlw	15
  1077  002370  0100               	movlb	0	; () banked
  1078  002372  6FCE               	movwf	(_message+1)& (0+255),b
  1079  002374  0E05               	movlw	5
  1080  002376  6FCF               	movwf	(_message+2)& (0+255),b
  1081  002378  0E00               	movlw	0
  1082  00237A  6FD0               	movwf	(_message+3)& (0+255),b
  1083  00237C  0E00               	movlw	0
  1084  00237E  6FD1               	movwf	(_message+4)& (0+255),b
  1085                           
  1086                           ;main.c: 46: message.dta[0] = 0;
  1087  002380  0E00               	movlw	0
  1088  002382  0100               	movlb	0	; () banked
  1089  002384  6FD3               	movwf	(_message+6)& (0+255),b
  1090                           
  1091                           ;main.c: 47: message.rtr = 1;
  1092  002386  0E01               	movlw	1
  1093  002388  0100               	movlb	0	; () banked
  1094  00238A  6FDB               	movwf	(_message+14)& (0+255),b
  1095                           
  1096                           ; BSR set to: 0
  1097                           ;main.c: 50: Can_PutMessage(&message);
  1098  00238C  0ECD               	movlw	low _message
  1099  00238E  0100               	movlb	0	; () banked
  1100  002390  6F60               	movwf	Can_PutMessage@msgPtr& (0+255),b
  1101  002392  0E00               	movlw	high _message
  1102  002394  0100               	movlb	0	; () banked
  1103  002396  6F61               	movwf	(Can_PutMessage@msgPtr+1)& (0+255),b
  1104  002398  ECED  F00B         	call	_Can_PutMessage	;wreg free
  1105  00239C                     l2051:
  1106  00239C  0ECD               	movlw	low _message
  1107  00239E  0100               	movlb	0	; () banked
  1108  0023A0  6F60               	movwf	Can_GetMessage@msgPtr& (0+255),b
  1109  0023A2  0E00               	movlw	high _message
  1110  0023A4  0100               	movlb	0	; () banked
  1111  0023A6  6F61               	movwf	(Can_GetMessage@msgPtr+1)& (0+255),b
  1112  0023A8  ECC0  F00C         	call	_Can_GetMessage	;wreg free
  1113  0023AC  0900               	iorlw	0
  1114  0023AE  A4D8               	btfss	status,2,c
  1115  0023B0  D7F5               	goto	l2051
  1116                           
  1117                           ;main.c: 55: retVal = message.dta[0];
  1118  0023B2  C0D3  F065         	movff	_message+6,readID@retVal
  1119                           
  1120                           ;main.c: 57: return retVal;
  1121  0023B6  0100               	movlb	0	; () banked
  1122  0023B8  5165               	movf	readID@retVal& (0+255),w,b
  1123  0023BA  0012               	return	
  1124  0023BC                     __end_of_readID:
  1125                           	opt stack 0
  1126                           tblptru	equ	0xFF8
  1127                           tblptrh	equ	0xFF7
  1128                           tblptrl	equ	0xFF6
  1129                           tablat	equ	0xFF5
  1130                           intcon	equ	0xFF2
  1131                           postinc0	equ	0xFEE
  1132                           wreg	equ	0xFE8
  1133                           postdec1	equ	0xFE5
  1134                           fsr1l	equ	0xFE1
  1135                           status	equ	0xFD8
  1136                           
  1137 ;; *************** function _Can_PutMessage *****************
  1138 ;; Defined at:
  1139 ;;		line 200 in file "can.c"
  1140 ;; Parameters:    Size  Location     Type
  1141 ;;  msgPtr          2    0[BANK0 ] PTR struct CANMESSAGE
  1142 ;;		 -> message(17), 
  1143 ;; Auto vars:     Size  Location     Type
  1144 ;;  i               1    4[BANK0 ] unsigned char 
  1145 ;; Return value:  Size  Location     Type
  1146 ;;                  1    wreg      unsigned char 
  1147 ;; Registers used:
  1148 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1149 ;; Tracked objects:
  1150 ;;		On entry : 0/0
  1151 ;;		On exit  : 0/0
  1152 ;;		Unchanged: 0/0
  1153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1154 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1155 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1156 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1157 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1158 ;;Total ram usage:        5 bytes
  1159 ;; Hardware stack levels used:    1
  1160 ;; Hardware stack levels required when called:    8
  1161 ;; This function calls:
  1162 ;;		Nothing
  1163 ;; This function is called by:
  1164 ;;		_readID
  1165 ;; This function uses a non-reentrant model
  1166 ;;
  1167                           
  1168                           	psect	text3
  1169  0017DA                     __ptext3:
  1170                           	opt stack 0
  1171  0017DA                     _Can_PutMessage:
  1172                           	opt stack 20
  1173                           
  1174                           ;can.c: 202: uint8_t i;
  1175                           ;can.c: 204: if((txBufferCount) < 4)
  1176                           
  1177                           ; BSR set to: 0
  1178                           ;incstack = 0
  1179  0017DA  0E04               	movlw	4
  1180  0017DC  0100               	movlb	0	; () banked
  1181  0017DE  61A8               	cpfslt	_txBufferCount& (0+255),b
  1182  0017E0  0012               	return	
  1183                           
  1184                           ; BSR set to: 0
  1185                           ;can.c: 205: {
  1186                           ;can.c: 206: txBuffer[txBufferPtrIn].dlc = msgPtr->dlc;
  1187  0017E2  0100               	movlb	0	; () banked
  1188  0017E4  EE20 F005          	lfsr	2,5
  1189  0017E8  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  1190  0017EA  26D9               	addwf	fsr2l,f,c
  1191  0017EC  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  1192  0017EE  22DA               	addwfc	fsr2h,f,c
  1193  0017F0  0100               	movlb	0	; () banked
  1194  0017F2  51A9               	movf	_txBufferPtrIn& (0+255),w,b
  1195  0017F4  0D11               	mullw	17
  1196  0017F6  0E05               	movlw	5
  1197  0017F8  26F3               	addwf	prodl,f,c
  1198  0017FA  0E00               	movlw	0
  1199  0017FC  22F4               	addwfc	prodh,f,c
  1200  0017FE  0E00               	movlw	low _txBuffer
  1201  001800  24F3               	addwf	prodl,w,c
  1202  001802  6EE1               	movwf	fsr1l,c
  1203  001804  0E01               	movlw	high _txBuffer
  1204  001806  20F4               	addwfc	prodh,w,c
  1205  001808  6EE2               	movwf	fsr1h,c
  1206  00180A  CFDF FFE7          	movff	indf2,indf1
  1207                           
  1208                           ;can.c: 207: txBuffer[txBufferPtrIn].extended_identifier = msgPtr->extended_identifier;
  1209  00180E  C060  FFD9         	movff	Can_PutMessage@msgPtr,fsr2l
  1210  001812  C061  FFDA         	movff	Can_PutMessage@msgPtr+1,fsr2h
  1211  001816  0100               	movlb	0	; () banked
  1212  001818  51A9               	movf	_txBufferPtrIn& (0+255),w,b
  1213  00181A  0D11               	mullw	17
  1214  00181C  0E00               	movlw	low _txBuffer
  1215  00181E  24F3               	addwf	prodl,w,c
  1216  001820  6EE1               	movwf	fsr1l,c
  1217  001822  0E01               	movlw	high _txBuffer
  1218  001824  20F4               	addwfc	prodh,w,c
  1219  001826  6EE2               	movwf	fsr1h,c
  1220  001828  CFDF FFE7          	movff	indf2,indf1
  1221                           
  1222                           ;can.c: 208: txBuffer[txBufferPtrIn].filhit = msgPtr->filhit;
  1223  00182C  0100               	movlb	0	; () banked
  1224  00182E  EE20 F00F          	lfsr	2,15
  1225  001832  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  1226  001834  26D9               	addwf	fsr2l,f,c
  1227  001836  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  1228  001838  22DA               	addwfc	fsr2h,f,c
  1229  00183A  0100               	movlb	0	; () banked
  1230  00183C  51A9               	movf	_txBufferPtrIn& (0+255),w,b
  1231  00183E  0D11               	mullw	17
  1232  001840  0E0F               	movlw	15
  1233  001842  26F3               	addwf	prodl,f,c
  1234  001844  0E00               	movlw	0
  1235  001846  22F4               	addwfc	prodh,f,c
  1236  001848  0E00               	movlw	low _txBuffer
  1237  00184A  24F3               	addwf	prodl,w,c
  1238  00184C  6EE1               	movwf	fsr1l,c
  1239  00184E  0E01               	movlw	high _txBuffer
  1240  001850  20F4               	addwfc	prodh,w,c
  1241  001852  6EE2               	movwf	fsr1h,c
  1242  001854  CFDF FFE7          	movff	indf2,indf1
  1243                           
  1244                           ;can.c: 209: txBuffer[txBufferPtrIn].identifier = msgPtr->identifier;
  1245  001858  0100               	movlb	0	; () banked
  1246  00185A  EE20 F001          	lfsr	2,1
  1247  00185E  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  1248  001860  26D9               	addwf	fsr2l,f,c
  1249  001862  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  1250  001864  22DA               	addwfc	fsr2h,f,c
  1251  001866  0100               	movlb	0	; () banked
  1252  001868  51A9               	movf	_txBufferPtrIn& (0+255),w,b
  1253  00186A  0D11               	mullw	17
  1254  00186C  0E01               	movlw	1
  1255  00186E  26F3               	addwf	prodl,f,c
  1256  001870  0E00               	movlw	0
  1257  001872  22F4               	addwfc	prodh,f,c
  1258  001874  0E00               	movlw	low _txBuffer
  1259  001876  24F3               	addwf	prodl,w,c
  1260  001878  6EE1               	movwf	fsr1l,c
  1261  00187A  0E01               	movlw	high _txBuffer
  1262  00187C  20F4               	addwfc	prodh,w,c
  1263  00187E  6EE2               	movwf	fsr1h,c
  1264  001880  CFDE FFE6          	movff	postinc2,postinc1
  1265  001884  CFDE FFE6          	movff	postinc2,postinc1
  1266  001888  CFDE FFE6          	movff	postinc2,postinc1
  1267  00188C  CFDE FFE6          	movff	postinc2,postinc1
  1268                           
  1269                           ;can.c: 210: txBuffer[txBufferPtrIn].rtr = msgPtr->rtr;
  1270  001890  0100               	movlb	0	; () banked
  1271  001892  EE20 F00E          	lfsr	2,14
  1272  001896  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  1273  001898  26D9               	addwf	fsr2l,f,c
  1274  00189A  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  1275  00189C  22DA               	addwfc	fsr2h,f,c
  1276  00189E  0100               	movlb	0	; () banked
  1277  0018A0  51A9               	movf	_txBufferPtrIn& (0+255),w,b
  1278  0018A2  0D11               	mullw	17
  1279  0018A4  0E0E               	movlw	14
  1280  0018A6  26F3               	addwf	prodl,f,c
  1281  0018A8  0E00               	movlw	0
  1282  0018AA  22F4               	addwfc	prodh,f,c
  1283  0018AC  0E00               	movlw	low _txBuffer
  1284  0018AE  24F3               	addwf	prodl,w,c
  1285  0018B0  6EE1               	movwf	fsr1l,c
  1286  0018B2  0E01               	movlw	high _txBuffer
  1287  0018B4  20F4               	addwfc	prodh,w,c
  1288  0018B6  6EE2               	movwf	fsr1h,c
  1289  0018B8  CFDF FFE7          	movff	indf2,indf1
  1290                           
  1291                           ;can.c: 211: txBuffer[txBufferPtrIn].txPrio = msgPtr->txPrio;
  1292  0018BC  0100               	movlb	0	; () banked
  1293  0018BE  EE20 F010          	lfsr	2,16
  1294  0018C2  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  1295  0018C4  26D9               	addwf	fsr2l,f,c
  1296  0018C6  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  1297  0018C8  22DA               	addwfc	fsr2h,f,c
  1298  0018CA  0100               	movlb	0	; () banked
  1299  0018CC  51A9               	movf	_txBufferPtrIn& (0+255),w,b
  1300  0018CE  0D11               	mullw	17
  1301  0018D0  0E10               	movlw	16
  1302  0018D2  26F3               	addwf	prodl,f,c
  1303  0018D4  0E00               	movlw	0
  1304  0018D6  22F4               	addwfc	prodh,f,c
  1305  0018D8  0E00               	movlw	low _txBuffer
  1306  0018DA  24F3               	addwf	prodl,w,c
  1307  0018DC  6EE1               	movwf	fsr1l,c
  1308  0018DE  0E01               	movlw	high _txBuffer
  1309  0018E0  20F4               	addwfc	prodh,w,c
  1310  0018E2  6EE2               	movwf	fsr1h,c
  1311  0018E4  CFDF FFE7          	movff	indf2,indf1
  1312                           
  1313                           ; BSR set to: 0
  1314                           ;can.c: 212: for(i=0;i< msgPtr->dlc;i++)
  1315  0018E8  0E00               	movlw	0
  1316  0018EA  0100               	movlb	0	; () banked
  1317  0018EC  6F64               	movwf	Can_PutMessage@i& (0+255),b
  1318  0018EE  D031               	goto	l1817
  1319  0018F0                     l1813:
  1320                           
  1321                           ; BSR set to: 0
  1322                           ;can.c: 213: {
  1323                           ;can.c: 214: txBuffer[txBufferPtrIn].dta[i] = msgPtr->dta[i];
  1324  0018F0  0100               	movlb	0	; () banked
  1325  0018F2  5164               	movf	Can_PutMessage@i& (0+255),w,b
  1326  0018F4  0D01               	mullw	1
  1327  0018F6  0E06               	movlw	6
  1328  0018F8  26F3               	addwf	prodl,f,c
  1329  0018FA  0E00               	movlw	0
  1330  0018FC  22F4               	addwfc	prodh,f,c
  1331  0018FE  50F3               	movf	prodl,w,c
  1332  001900  0100               	movlb	0	; () banked
  1333  001902  2560               	addwf	Can_PutMessage@msgPtr& (0+255),w,b
  1334  001904  6ED9               	movwf	fsr2l,c
  1335  001906  50F4               	movf	prodh,w,c
  1336  001908  0100               	movlb	0	; () banked
  1337  00190A  2161               	addwfc	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  1338  00190C  6EDA               	movwf	fsr2h,c
  1339  00190E  0100               	movlb	0	; () banked
  1340  001910  5164               	movf	Can_PutMessage@i& (0+255),w,b
  1341  001912  0D01               	mullw	1
  1342  001914  0E06               	movlw	6
  1343  001916  26F3               	addwf	prodl,f,c
  1344  001918  0E00               	movlw	0
  1345  00191A  22F4               	addwfc	prodh,f,c
  1346  00191C  0E00               	movlw	low _txBuffer
  1347  00191E  0100               	movlb	0	; () banked
  1348  001920  6F62               	movwf	??_Can_PutMessage& (0+255),b
  1349  001922  0E01               	movlw	high _txBuffer
  1350  001924  0100               	movlb	0	; () banked
  1351  001926  6F63               	movwf	(??_Can_PutMessage+1)& (0+255),b
  1352  001928  50F3               	movf	prodl,w,c
  1353  00192A  0100               	movlb	0	; () banked
  1354  00192C  2762               	addwf	??_Can_PutMessage& (0+255),f,b
  1355  00192E  50F4               	movf	prodh,w,c
  1356  001930  0100               	movlb	0	; () banked
  1357  001932  2363               	addwfc	(??_Can_PutMessage+1)& (0+255),f,b
  1358  001934  0100               	movlb	0	; () banked
  1359  001936  51A9               	movf	_txBufferPtrIn& (0+255),w,b
  1360  001938  0D11               	mullw	17
  1361  00193A  50F3               	movf	prodl,w,c
  1362  00193C  0100               	movlb	0	; () banked
  1363  00193E  2562               	addwf	??_Can_PutMessage& (0+255),w,b
  1364  001940  6EE1               	movwf	fsr1l,c
  1365  001942  50F4               	movf	prodh,w,c
  1366  001944  0100               	movlb	0	; () banked
  1367  001946  2163               	addwfc	(??_Can_PutMessage+1)& (0+255),w,b
  1368  001948  6EE2               	movwf	fsr1h,c
  1369  00194A  CFDF FFE7          	movff	indf2,indf1
  1370                           
  1371                           ; BSR set to: 0
  1372  00194E  0100               	movlb	0	; () banked
  1373  001950  2B64               	incf	Can_PutMessage@i& (0+255),f,b
  1374  001952                     l1817:
  1375                           
  1376                           ; BSR set to: 0
  1377  001952  0100               	movlb	0	; () banked
  1378  001954  EE20 F005          	lfsr	2,5
  1379  001958  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  1380  00195A  26D9               	addwf	fsr2l,f,c
  1381  00195C  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  1382  00195E  22DA               	addwfc	fsr2h,f,c
  1383  001960  50DE               	movf	postinc2,w,c
  1384  001962  0100               	movlb	0	; () banked
  1385  001964  5D64               	subwf	Can_PutMessage@i& (0+255),w,b
  1386  001966  A0D8               	btfss	status,0,c
  1387  001968  D7C3               	goto	l1813
  1388                           
  1389                           ; BSR set to: 0
  1390                           ;can.c: 215: }
  1391                           ;can.c: 216: INT3IE = 0;
  1392  00196A  9AF0               	bcf	intcon3,5,c	;volatile
  1393                           
  1394                           ; BSR set to: 0
  1395                           ;can.c: 217: txBufferCount++;
  1396  00196C  0100               	movlb	0	; () banked
  1397  00196E  2BA8               	incf	_txBufferCount& (0+255),f,b
  1398                           
  1399                           ; BSR set to: 0
  1400                           ;can.c: 218: txBufferPtrIn = (txBufferPtrIn + 1) % 4;
  1401  001970  0100               	movlb	0	; () banked
  1402  001972  29A9               	incf	_txBufferPtrIn& (0+255),w,b
  1403  001974  0B03               	andlw	3
  1404  001976  0100               	movlb	0	; () banked
  1405  001978  6FA9               	movwf	_txBufferPtrIn& (0+255),b
  1406                           
  1407                           ; BSR set to: 0
  1408                           ;can.c: 219: INT3IE = 1;
  1409  00197A  8AF0               	bsf	intcon3,5,c	;volatile
  1410                           
  1411                           ; BSR set to: 0
  1412                           ;can.c: 220: INT3IF = 1;
  1413  00197C  84F0               	bsf	intcon3,2,c	;volatile
  1414                           
  1415                           ; BSR set to: 0
  1416                           ;can.c: 223: else
  1417                           ;can.c: 224: {
  1418                           ;can.c: 225: return 1;
  1419                           ;	Return value of _Can_PutMessage is never used
  1420                           
  1421                           ; BSR set to: 0
  1422                           ;can.c: 222: }
  1423                           
  1424                           ; BSR set to: 0
  1425                           ;can.c: 221: return 0;
  1426                           ;	Return value of _Can_PutMessage is never used
  1427  00197E  0012               	return	
  1428  001980                     __end_of_Can_PutMessage:
  1429                           	opt stack 0
  1430                           tblptru	equ	0xFF8
  1431                           tblptrh	equ	0xFF7
  1432                           tblptrl	equ	0xFF6
  1433                           tablat	equ	0xFF5
  1434                           prodh	equ	0xFF4
  1435                           prodl	equ	0xFF3
  1436                           intcon	equ	0xFF2
  1437                           intcon3	equ	0xFF0
  1438                           postinc0	equ	0xFEE
  1439                           wreg	equ	0xFE8
  1440                           indf1	equ	0xFE7
  1441                           postinc1	equ	0xFE6
  1442                           postdec1	equ	0xFE5
  1443                           fsr1h	equ	0xFE2
  1444                           fsr1l	equ	0xFE1
  1445                           indf2	equ	0xFDF
  1446                           postinc2	equ	0xFDE
  1447                           fsr2h	equ	0xFDA
  1448                           fsr2l	equ	0xFD9
  1449                           status	equ	0xFD8
  1450                           
  1451 ;; *************** function _Can_GetMessage *****************
  1452 ;; Defined at:
  1453 ;;		line 169 in file "can.c"
  1454 ;; Parameters:    Size  Location     Type
  1455 ;;  msgPtr          2    0[BANK0 ] PTR struct CANMESSAGE
  1456 ;;		 -> message(17), 
  1457 ;; Auto vars:     Size  Location     Type
  1458 ;;  i               1    4[BANK0 ] unsigned char 
  1459 ;; Return value:  Size  Location     Type
  1460 ;;                  1    wreg      unsigned char 
  1461 ;; Registers used:
  1462 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1463 ;; Tracked objects:
  1464 ;;		On entry : 0/0
  1465 ;;		On exit  : 0/0
  1466 ;;		Unchanged: 0/0
  1467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1468 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1469 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1470 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1471 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1472 ;;Total ram usage:        5 bytes
  1473 ;; Hardware stack levels used:    1
  1474 ;; Hardware stack levels required when called:    8
  1475 ;; This function calls:
  1476 ;;		Nothing
  1477 ;; This function is called by:
  1478 ;;		_readID
  1479 ;; This function uses a non-reentrant model
  1480 ;;
  1481                           
  1482                           	psect	text4
  1483  001980                     __ptext4:
  1484                           	opt stack 0
  1485  001980                     _Can_GetMessage:
  1486                           	opt stack 20
  1487                           
  1488                           ;can.c: 171: uint8_t i;
  1489                           ;can.c: 172: if(rxBufferCount > 0)
  1490                           
  1491                           ; BSR set to: 0
  1492                           ;incstack = 0
  1493  001980  505C               	movf	_rxBufferCount,w,c
  1494  001982  B4D8               	btfsc	status,2,c
  1495  001984  D0B8               	goto	l1851
  1496                           
  1497                           ;can.c: 173: {
  1498                           ;can.c: 174: msgPtr->dlc = rxBuffer[rxBufferPtrOut].dlc;
  1499  001986  0100               	movlb	0	; () banked
  1500  001988  51AA               	movf	_rxBufferPtrOut& (0+255),w,b
  1501  00198A  0D11               	mullw	17
  1502  00198C  0E05               	movlw	5
  1503  00198E  26F3               	addwf	prodl,f,c
  1504  001990  0E00               	movlw	0
  1505  001992  22F4               	addwfc	prodh,f,c
  1506  001994  0E44               	movlw	low _rxBuffer
  1507  001996  24F3               	addwf	prodl,w,c
  1508  001998  6ED9               	movwf	fsr2l,c
  1509  00199A  0E01               	movlw	high _rxBuffer
  1510  00199C  20F4               	addwfc	prodh,w,c
  1511  00199E  6EDA               	movwf	fsr2h,c
  1512  0019A0  0100               	movlb	0	; () banked
  1513  0019A2  EE10 F005          	lfsr	1,5
  1514  0019A6  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  1515  0019A8  26E1               	addwf	fsr1l,f,c
  1516  0019AA  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  1517  0019AC  22E2               	addwfc	fsr1h,f,c
  1518  0019AE  CFDF FFE7          	movff	indf2,indf1
  1519                           
  1520                           ;can.c: 175: msgPtr->extended_identifier = rxBuffer[rxBufferPtrOut].extended_identifier;
  1521  0019B2  0100               	movlb	0	; () banked
  1522  0019B4  51AA               	movf	_rxBufferPtrOut& (0+255),w,b
  1523  0019B6  0D11               	mullw	17
  1524  0019B8  0E44               	movlw	low _rxBuffer
  1525  0019BA  24F3               	addwf	prodl,w,c
  1526  0019BC  6ED9               	movwf	fsr2l,c
  1527  0019BE  0E01               	movlw	high _rxBuffer
  1528  0019C0  20F4               	addwfc	prodh,w,c
  1529  0019C2  6EDA               	movwf	fsr2h,c
  1530  0019C4  C060  FFE1         	movff	Can_GetMessage@msgPtr,fsr1l
  1531  0019C8  C061  FFE2         	movff	Can_GetMessage@msgPtr+1,fsr1h
  1532  0019CC  CFDF FFE7          	movff	indf2,indf1
  1533                           
  1534                           ;can.c: 176: msgPtr->filhit = rxBuffer[rxBufferPtrOut].filhit;
  1535  0019D0  0100               	movlb	0	; () banked
  1536  0019D2  51AA               	movf	_rxBufferPtrOut& (0+255),w,b
  1537  0019D4  0D11               	mullw	17
  1538  0019D6  0E0F               	movlw	15
  1539  0019D8  26F3               	addwf	prodl,f,c
  1540  0019DA  0E00               	movlw	0
  1541  0019DC  22F4               	addwfc	prodh,f,c
  1542  0019DE  0E44               	movlw	low _rxBuffer
  1543  0019E0  24F3               	addwf	prodl,w,c
  1544  0019E2  6ED9               	movwf	fsr2l,c
  1545  0019E4  0E01               	movlw	high _rxBuffer
  1546  0019E6  20F4               	addwfc	prodh,w,c
  1547  0019E8  6EDA               	movwf	fsr2h,c
  1548  0019EA  0100               	movlb	0	; () banked
  1549  0019EC  EE10 F00F          	lfsr	1,15
  1550  0019F0  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  1551  0019F2  26E1               	addwf	fsr1l,f,c
  1552  0019F4  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  1553  0019F6  22E2               	addwfc	fsr1h,f,c
  1554  0019F8  CFDF FFE7          	movff	indf2,indf1
  1555                           
  1556                           ;can.c: 177: msgPtr->identifier = rxBuffer[rxBufferPtrOut].identifier;
  1557  0019FC  0100               	movlb	0	; () banked
  1558  0019FE  51AA               	movf	_rxBufferPtrOut& (0+255),w,b
  1559  001A00  0D11               	mullw	17
  1560  001A02  0E01               	movlw	1
  1561  001A04  26F3               	addwf	prodl,f,c
  1562  001A06  0E00               	movlw	0
  1563  001A08  22F4               	addwfc	prodh,f,c
  1564  001A0A  0E44               	movlw	low _rxBuffer
  1565  001A0C  24F3               	addwf	prodl,w,c
  1566  001A0E  6ED9               	movwf	fsr2l,c
  1567  001A10  0E01               	movlw	high _rxBuffer
  1568  001A12  20F4               	addwfc	prodh,w,c
  1569  001A14  6EDA               	movwf	fsr2h,c
  1570  001A16  0100               	movlb	0	; () banked
  1571  001A18  EE10 F001          	lfsr	1,1
  1572  001A1C  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  1573  001A1E  26E1               	addwf	fsr1l,f,c
  1574  001A20  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  1575  001A22  22E2               	addwfc	fsr1h,f,c
  1576  001A24  CFDE FFE6          	movff	postinc2,postinc1
  1577  001A28  CFDE FFE6          	movff	postinc2,postinc1
  1578  001A2C  CFDE FFE6          	movff	postinc2,postinc1
  1579  001A30  CFDE FFE6          	movff	postinc2,postinc1
  1580                           
  1581                           ;can.c: 178: msgPtr->rtr = rxBuffer[rxBufferPtrOut].rtr;
  1582  001A34  0100               	movlb	0	; () banked
  1583  001A36  51AA               	movf	_rxBufferPtrOut& (0+255),w,b
  1584  001A38  0D11               	mullw	17
  1585  001A3A  0E0E               	movlw	14
  1586  001A3C  26F3               	addwf	prodl,f,c
  1587  001A3E  0E00               	movlw	0
  1588  001A40  22F4               	addwfc	prodh,f,c
  1589  001A42  0E44               	movlw	low _rxBuffer
  1590  001A44  24F3               	addwf	prodl,w,c
  1591  001A46  6ED9               	movwf	fsr2l,c
  1592  001A48  0E01               	movlw	high _rxBuffer
  1593  001A4A  20F4               	addwfc	prodh,w,c
  1594  001A4C  6EDA               	movwf	fsr2h,c
  1595  001A4E  0100               	movlb	0	; () banked
  1596  001A50  EE10 F00E          	lfsr	1,14
  1597  001A54  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  1598  001A56  26E1               	addwf	fsr1l,f,c
  1599  001A58  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  1600  001A5A  22E2               	addwfc	fsr1h,f,c
  1601  001A5C  CFDF FFE7          	movff	indf2,indf1
  1602                           
  1603                           ; BSR set to: 0
  1604                           ;can.c: 179: for(i=0;i< msgPtr->dlc;i++)
  1605  001A60  0E00               	movlw	0
  1606  001A62  0100               	movlb	0	; () banked
  1607  001A64  6F64               	movwf	Can_GetMessage@i& (0+255),b
  1608  001A66  D031               	goto	l1841
  1609  001A68                     l1837:
  1610                           
  1611                           ; BSR set to: 0
  1612                           ;can.c: 180: {
  1613                           ;can.c: 181: msgPtr->dta[i] = rxBuffer[rxBufferPtrOut].dta[i];
  1614  001A68  0100               	movlb	0	; () banked
  1615  001A6A  5164               	movf	Can_GetMessage@i& (0+255),w,b
  1616  001A6C  0D01               	mullw	1
  1617  001A6E  0E06               	movlw	6
  1618  001A70  26F3               	addwf	prodl,f,c
  1619  001A72  0E00               	movlw	0
  1620  001A74  22F4               	addwfc	prodh,f,c
  1621  001A76  0E44               	movlw	low _rxBuffer
  1622  001A78  0100               	movlb	0	; () banked
  1623  001A7A  6F62               	movwf	??_Can_GetMessage& (0+255),b
  1624  001A7C  0E01               	movlw	high _rxBuffer
  1625  001A7E  0100               	movlb	0	; () banked
  1626  001A80  6F63               	movwf	(??_Can_GetMessage+1)& (0+255),b
  1627  001A82  50F3               	movf	prodl,w,c
  1628  001A84  0100               	movlb	0	; () banked
  1629  001A86  2762               	addwf	??_Can_GetMessage& (0+255),f,b
  1630  001A88  50F4               	movf	prodh,w,c
  1631  001A8A  0100               	movlb	0	; () banked
  1632  001A8C  2363               	addwfc	(??_Can_GetMessage+1)& (0+255),f,b
  1633  001A8E  0100               	movlb	0	; () banked
  1634  001A90  51AA               	movf	_rxBufferPtrOut& (0+255),w,b
  1635  001A92  0D11               	mullw	17
  1636  001A94  50F3               	movf	prodl,w,c
  1637  001A96  0100               	movlb	0	; () banked
  1638  001A98  2562               	addwf	??_Can_GetMessage& (0+255),w,b
  1639  001A9A  6ED9               	movwf	fsr2l,c
  1640  001A9C  50F4               	movf	prodh,w,c
  1641  001A9E  0100               	movlb	0	; () banked
  1642  001AA0  2163               	addwfc	(??_Can_GetMessage+1)& (0+255),w,b
  1643  001AA2  6EDA               	movwf	fsr2h,c
  1644  001AA4  0100               	movlb	0	; () banked
  1645  001AA6  5164               	movf	Can_GetMessage@i& (0+255),w,b
  1646  001AA8  0D01               	mullw	1
  1647  001AAA  0E06               	movlw	6
  1648  001AAC  26F3               	addwf	prodl,f,c
  1649  001AAE  0E00               	movlw	0
  1650  001AB0  22F4               	addwfc	prodh,f,c
  1651  001AB2  50F3               	movf	prodl,w,c
  1652  001AB4  0100               	movlb	0	; () banked
  1653  001AB6  2560               	addwf	Can_GetMessage@msgPtr& (0+255),w,b
  1654  001AB8  6EE1               	movwf	fsr1l,c
  1655  001ABA  50F4               	movf	prodh,w,c
  1656  001ABC  0100               	movlb	0	; () banked
  1657  001ABE  2161               	addwfc	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  1658  001AC0  6EE2               	movwf	fsr1h,c
  1659  001AC2  CFDF FFE7          	movff	indf2,indf1
  1660                           
  1661                           ; BSR set to: 0
  1662  001AC6  0100               	movlb	0	; () banked
  1663  001AC8  2B64               	incf	Can_GetMessage@i& (0+255),f,b
  1664  001ACA                     l1841:
  1665                           
  1666                           ; BSR set to: 0
  1667  001ACA  0100               	movlb	0	; () banked
  1668  001ACC  EE20 F005          	lfsr	2,5
  1669  001AD0  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  1670  001AD2  26D9               	addwf	fsr2l,f,c
  1671  001AD4  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  1672  001AD6  22DA               	addwfc	fsr2h,f,c
  1673  001AD8  50DE               	movf	postinc2,w,c
  1674  001ADA  0100               	movlb	0	; () banked
  1675  001ADC  5D64               	subwf	Can_GetMessage@i& (0+255),w,b
  1676  001ADE  A0D8               	btfss	status,0,c
  1677  001AE0  D7C3               	goto	l1837
  1678                           
  1679                           ; BSR set to: 0
  1680                           ;can.c: 182: }
  1681                           ;can.c: 183: INT3IE = 0;
  1682  001AE2  9AF0               	bcf	intcon3,5,c	;volatile
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;can.c: 184: rxBufferPtrOut = (rxBufferPtrOut + 1) % 4;
  1686  001AE4  0100               	movlb	0	; () banked
  1687  001AE6  29AA               	incf	_rxBufferPtrOut& (0+255),w,b
  1688  001AE8  0B03               	andlw	3
  1689  001AEA  0100               	movlb	0	; () banked
  1690  001AEC  6FAA               	movwf	_rxBufferPtrOut& (0+255),b
  1691                           
  1692                           ; BSR set to: 0
  1693                           ;can.c: 185: rxBufferCount--;
  1694  001AEE  065C               	decf	_rxBufferCount,f,c
  1695                           
  1696                           ; BSR set to: 0
  1697                           ;can.c: 186: INT3IE = 1;
  1698  001AF0  8AF0               	bsf	intcon3,5,c	;volatile
  1699                           
  1700                           ;can.c: 187: return 0;
  1701  001AF2  0E00               	movlw	0
  1702                           
  1703                           ; BSR set to: 0
  1704  001AF4  0012               	return	
  1705  001AF6                     l1851:
  1706                           
  1707                           ;can.c: 188: }
  1708                           ;can.c: 189: return 1;
  1709  001AF6  0E01               	movlw	1
  1710  001AF8  0012               	return	
  1711  001AFA                     __end_of_Can_GetMessage:
  1712                           	opt stack 0
  1713                           tblptru	equ	0xFF8
  1714                           tblptrh	equ	0xFF7
  1715                           tblptrl	equ	0xFF6
  1716                           tablat	equ	0xFF5
  1717                           prodh	equ	0xFF4
  1718                           prodl	equ	0xFF3
  1719                           intcon	equ	0xFF2
  1720                           intcon3	equ	0xFF0
  1721                           postinc0	equ	0xFEE
  1722                           wreg	equ	0xFE8
  1723                           indf1	equ	0xFE7
  1724                           postinc1	equ	0xFE6
  1725                           postdec1	equ	0xFE5
  1726                           fsr1h	equ	0xFE2
  1727                           fsr1l	equ	0xFE1
  1728                           indf2	equ	0xFDF
  1729                           postinc2	equ	0xFDE
  1730                           fsr2h	equ	0xFDA
  1731                           fsr2l	equ	0xFD9
  1732                           status	equ	0xFD8
  1733                           
  1734 ;; *************** function _Can_Init *****************
  1735 ;; Defined at:
  1736 ;;		line 237 in file "can.c"
  1737 ;; Parameters:    Size  Location     Type
  1738 ;;  speedCfg        2   60[BANK0 ] PTR const struct CANSPEE
  1739 ;;		 -> canSpeed125k(7), 
  1740 ;;  filterCfg       2   62[BANK0 ] PTR struct CANFILTER
  1741 ;;		 -> filter(33), 
  1742 ;; Auto vars:     Size  Location     Type
  1743 ;;		None
  1744 ;; Return value:  Size  Location     Type
  1745 ;;                  1    wreg      void 
  1746 ;; Registers used:
  1747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1748 ;; Tracked objects:
  1749 ;;		On entry : 0/0
  1750 ;;		On exit  : 0/0
  1751 ;;		Unchanged: 0/0
  1752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1753 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1756 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1757 ;;Total ram usage:        4 bytes
  1758 ;; Hardware stack levels used:    1
  1759 ;; Hardware stack levels required when called:   12
  1760 ;; This function calls:
  1761 ;;		_Mcp2515_Init
  1762 ;; This function is called by:
  1763 ;;		_init
  1764 ;; This function uses a non-reentrant model
  1765 ;;
  1766                           
  1767                           	psect	text5
  1768  00248C                     __ptext5:
  1769                           	opt stack 0
  1770  00248C                     _Can_Init:
  1771                           	opt stack 17
  1772                           
  1773                           ;can.c: 240: TRISF6 = 0;
  1774                           
  1775                           ;incstack = 0
  1776  00248C  9C97               	bcf	3991,6,c	;volatile
  1777                           
  1778                           ;can.c: 241: TRISF7 = 0;
  1779  00248E  9E97               	bcf	3991,7,c	;volatile
  1780                           
  1781                           ;can.c: 242: LATF6 = 1;
  1782  002490  8C8E               	bsf	3982,6,c	;volatile
  1783                           
  1784                           ;can.c: 243: LATF7 = 0;
  1785  002492  9E8E               	bcf	3982,7,c	;volatile
  1786                           
  1787                           ;can.c: 244: TRISC4 = 1;
  1788  002494  8894               	bsf	3988,4,c	;volatile
  1789                           
  1790                           ;can.c: 245: TRISC5 = 0;
  1791  002496  9A94               	bcf	3988,5,c	;volatile
  1792                           
  1793                           ;can.c: 246: TRISC3 = 0;
  1794  002498  9694               	bcf	3988,3,c	;volatile
  1795                           
  1796                           ;can.c: 247: TRISD1 = 0;
  1797  00249A  9295               	bcf	3989,1,c	;volatile
  1798                           
  1799                           ;can.c: 251: CKE1 = 0;
  1800  00249C  9CC7               	bcf	4039,6,c	;volatile
  1801                           
  1802                           ;can.c: 252: CKP1 = 1;
  1803  00249E  88C6               	bsf	4038,4,c	;volatile
  1804                           
  1805                           ;can.c: 253: SSPCON1 = 0b00111010;
  1806  0024A0  0E3A               	movlw	58
  1807  0024A2  6EC6               	movwf	4038,c	;volatile
  1808                           
  1809                           ;can.c: 254: SSPEN1 = 1;
  1810  0024A4  8AC6               	bsf	4038,5,c	;volatile
  1811                           
  1812                           ;can.c: 258: Mcp2515_Init(speedCfg,filterCfg);
  1813  0024A6  C09C  F083         	movff	Can_Init@speedCfg,Mcp2515_Init@speedCfg
  1814  0024AA  C09D  F084         	movff	Can_Init@speedCfg+1,Mcp2515_Init@speedCfg+1
  1815  0024AE  C09E  F085         	movff	Can_Init@filterCfg,Mcp2515_Init@filterCfg
  1816  0024B2  C09F  F086         	movff	Can_Init@filterCfg+1,Mcp2515_Init@filterCfg+1
  1817  0024B6  EC21  F008         	call	_Mcp2515_Init	;wreg free
  1818                           
  1819                           ;can.c: 259: INT3IE = 1;
  1820  0024BA  8AF0               	bsf	intcon3,5,c	;volatile
  1821                           
  1822                           ;can.c: 260: INTEDG3 = 0;
  1823  0024BC  96F1               	bcf	intcon2,3,c	;volatile
  1824  0024BE  0012               	return		;funcret
  1825  0024C0                     __end_of_Can_Init:
  1826                           	opt stack 0
  1827                           tblptru	equ	0xFF8
  1828                           tblptrh	equ	0xFF7
  1829                           tblptrl	equ	0xFF6
  1830                           tablat	equ	0xFF5
  1831                           prodh	equ	0xFF4
  1832                           prodl	equ	0xFF3
  1833                           intcon	equ	0xFF2
  1834                           intcon2	equ	0xFF1
  1835                           intcon3	equ	0xFF0
  1836                           postinc0	equ	0xFEE
  1837                           wreg	equ	0xFE8
  1838                           indf1	equ	0xFE7
  1839                           postinc1	equ	0xFE6
  1840                           postdec1	equ	0xFE5
  1841                           fsr1h	equ	0xFE2
  1842                           fsr1l	equ	0xFE1
  1843                           indf2	equ	0xFDF
  1844                           postinc2	equ	0xFDE
  1845                           fsr2h	equ	0xFDA
  1846                           fsr2l	equ	0xFD9
  1847                           status	equ	0xFD8
  1848                           
  1849 ;; *************** function _Mcp2515_Init *****************
  1850 ;; Defined at:
  1851 ;;		line 38 in file "mcp2515.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;  speedCfg        2   35[BANK0 ] PTR const struct CANSPEE
  1854 ;;		 -> canSpeed125k(7), 
  1855 ;;  filterCfg       2   37[BANK0 ] PTR struct CANFILTER
  1856 ;;		 -> filter(33), 
  1857 ;; Auto vars:     Size  Location     Type
  1858 ;;  cmdMask4        4   53[BANK0 ] unsigned char [4]
  1859 ;;  cmdWrite3       3   57[BANK0 ] unsigned char [3]
  1860 ;;  i               1   52[BANK0 ] unsigned char 
  1861 ;; Return value:  Size  Location     Type
  1862 ;;                  1    wreg      void 
  1863 ;; Registers used:
  1864 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1865 ;; Tracked objects:
  1866 ;;		On entry : 0/0
  1867 ;;		On exit  : 0/0
  1868 ;;		Unchanged: 0/0
  1869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1870 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1871 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1872 ;;      Temps:          0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1873 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1874 ;;Total ram usage:       25 bytes
  1875 ;; Hardware stack levels used:    1
  1876 ;; Hardware stack levels required when called:   11
  1877 ;; This function calls:
  1878 ;;		_Mcp2515WriteCanId
  1879 ;;		_Mcp2515_Reset
  1880 ;;		_Spi_Write
  1881 ;; This function is called by:
  1882 ;;		_Can_Init
  1883 ;; This function uses a non-reentrant model
  1884 ;;
  1885                           
  1886                           	psect	text6
  1887  001042                     __ptext6:
  1888                           	opt stack 0
  1889  001042                     _Mcp2515_Init:
  1890                           	opt stack 17
  1891                           
  1892                           ;mcp2515.c: 40: uint8_t i;
  1893                           ;mcp2515.c: 41: uint8_t cmdMask4[]={0x05,0x0F,0xE0,0x80};
  1894                           
  1895                           ;incstack = 0
  1896  001042  C0E4  F095         	movff	Mcp2515_Init@F8112,Mcp2515_Init@cmdMask4
  1897  001046  C0E5  F096         	movff	Mcp2515_Init@F8112+1,Mcp2515_Init@cmdMask4+1
  1898  00104A  C0E6  F097         	movff	Mcp2515_Init@F8112+2,Mcp2515_Init@cmdMask4+2
  1899  00104E  C0E7  F098         	movff	Mcp2515_Init@F8112+3,Mcp2515_Init@cmdMask4+3
  1900                           
  1901                           ;mcp2515.c: 42: uint8_t cmdWrite3[]={0x02,0,0};
  1902  001052  C0EF  F099         	movff	Mcp2515_Init@F8114,Mcp2515_Init@cmdWrite3
  1903  001056  C0F0  F09A         	movff	Mcp2515_Init@F8114+1,Mcp2515_Init@cmdWrite3+1
  1904  00105A  C0F1  F09B         	movff	Mcp2515_Init@F8114+2,Mcp2515_Init@cmdWrite3+2
  1905                           
  1906                           ;mcp2515.c: 44: Mcp2515_Reset();
  1907  00105E  EC1E  F011         	call	_Mcp2515_Reset	;wreg free
  1908                           
  1909                           ;mcp2515.c: 48: Spi_Write(cmdMask4,sizeof(cmdMask4));
  1910  001062  0E95               	movlw	low Mcp2515_Init@cmdMask4
  1911  001064  0100               	movlb	0	; () banked
  1912  001066  6F6C               	movwf	Spi_Write@tx& (0+255),b
  1913  001068  0E00               	movlw	high Mcp2515_Init@cmdMask4
  1914  00106A  0100               	movlb	0	; () banked
  1915  00106C  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  1916  00106E  0E04               	movlw	4
  1917  001070  0100               	movlb	0	; () banked
  1918  001072  6F6E               	movwf	Spi_Write@size& (0+255),b
  1919  001074  0E00               	movlw	0
  1920  001076  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  1921  001078  0E00               	movlw	0
  1922  00107A  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  1923  00107C  0E00               	movlw	0
  1924  00107E  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  1925  001080  EC60  F012         	call	_Spi_Write	;wreg free
  1926                           
  1927                           ;mcp2515.c: 52: cmdWrite3[1] = 0x2A;
  1928  001084  0E2A               	movlw	42
  1929  001086  0100               	movlb	0	; () banked
  1930  001088  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  1931                           
  1932                           ; BSR set to: 0
  1933                           ;mcp2515.c: 53: cmdWrite3[2] = speedCfg->brp | speedCfg->sjw << 6;
  1934  00108A  C083  FFF6         	movff	Mcp2515_Init@speedCfg,tblptrl
  1935  00108E  C084  FFF7         	movff	Mcp2515_Init@speedCfg+1,tblptrh
  1936  001092                     	if	0	;tblptru may be non-zero
  1937  001092                     	endif
  1938  001092                     	if	0	;tblptru may be non-zero
  1939  001092                     	endif
  1940  001092  0008               	tblrd		*
  1941  001094  CFF5 F087          	movff	tablat,??_Mcp2515_Init
  1942  001098  0E01               	movlw	1
  1943  00109A  0100               	movlb	0	; () banked
  1944  00109C  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  1945  00109E  0100               	movlb	0	; () banked
  1946  0010A0  6F88               	movwf	(??_Mcp2515_Init+1)& (0+255),b
  1947  0010A2  0E00               	movlw	0
  1948  0010A4  0100               	movlb	0	; () banked
  1949  0010A6  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  1950  0010A8  0100               	movlb	0	; () banked
  1951  0010AA  6F89               	movwf	(??_Mcp2515_Init+2)& (0+255),b
  1952  0010AC  C088  FFF6         	movff	??_Mcp2515_Init+1,tblptrl
  1953  0010B0  C089  FFF7         	movff	??_Mcp2515_Init+2,tblptrh
  1954  0010B4                     	if	0	;tblptru may be non-zero
  1955  0010B4                     	endif
  1956  0010B4                     	if	0	;tblptru may be non-zero
  1957  0010B4                     	endif
  1958  0010B4  0008               	tblrd		*
  1959  0010B6  CFF5 F08A          	movff	tablat,??_Mcp2515_Init+3
  1960  0010BA  0E06               	movlw	6
  1961  0010BC  0100               	movlb	0	; () banked
  1962  0010BE  6F8B               	movwf	(??_Mcp2515_Init+4)& (0+255),b
  1963  0010C0                     u925:
  1964  0010C0  0100               	movlb	0	; () banked
  1965  0010C2  90D8               	bcf	status,0,c
  1966  0010C4  378A               	rlcf	(??_Mcp2515_Init+3)& (0+255),f,b
  1967  0010C6  0100               	movlb	0	; () banked
  1968  0010C8  2F8B               	decfsz	(??_Mcp2515_Init+4)& (0+255),f,b
  1969  0010CA  D7FA               	goto	u925
  1970  0010CC  0100               	movlb	0	; () banked
  1971  0010CE  518A               	movf	(??_Mcp2515_Init+3)& (0+255),w,b
  1972  0010D0  0100               	movlb	0	; () banked
  1973  0010D2  1187               	iorwf	??_Mcp2515_Init& (0+255),w,b
  1974  0010D4  0100               	movlb	0	; () banked
  1975  0010D6  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  1976                           
  1977                           ; BSR set to: 0
  1978                           ;mcp2515.c: 54: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  1979  0010D8  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  1980  0010DA  0100               	movlb	0	; () banked
  1981  0010DC  6F6C               	movwf	Spi_Write@tx& (0+255),b
  1982  0010DE  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  1983  0010E0  0100               	movlb	0	; () banked
  1984  0010E2  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  1985  0010E4  0E03               	movlw	3
  1986  0010E6  0100               	movlb	0	; () banked
  1987  0010E8  6F6E               	movwf	Spi_Write@size& (0+255),b
  1988  0010EA  0E00               	movlw	0
  1989  0010EC  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  1990  0010EE  0E00               	movlw	0
  1991  0010F0  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  1992  0010F2  0E00               	movlw	0
  1993  0010F4  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  1994  0010F6  EC60  F012         	call	_Spi_Write	;wreg free
  1995                           
  1996                           ;mcp2515.c: 56: cmdWrite3[1] = 0x29;
  1997  0010FA  0E29               	movlw	41
  1998  0010FC  0100               	movlb	0	; () banked
  1999  0010FE  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  2000                           
  2001                           ;mcp2515.c: 57: cmdWrite3[2] = speedCfg->prseg
  2002                           ;mcp2515.c: 58: | speedCfg->phseg1 << 3
  2003                           ;mcp2515.c: 59: | speedCfg->sam << 6
  2004                           ;mcp2515.c: 60: | speedCfg->btlmode << 7;
  2005  001100  0E02               	movlw	2
  2006  001102  0100               	movlb	0	; () banked
  2007  001104  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  2008  001106  0100               	movlb	0	; () banked
  2009  001108  6F87               	movwf	??_Mcp2515_Init& (0+255),b
  2010  00110A  0E00               	movlw	0
  2011  00110C  0100               	movlb	0	; () banked
  2012  00110E  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  2013  001110  0100               	movlb	0	; () banked
  2014  001112  6F88               	movwf	(??_Mcp2515_Init+1)& (0+255),b
  2015  001114  C087  FFF6         	movff	??_Mcp2515_Init,tblptrl
  2016  001118  C088  FFF7         	movff	??_Mcp2515_Init+1,tblptrh
  2017  00111C                     	if	0	;tblptru may be non-zero
  2018  00111C                     	endif
  2019  00111C                     	if	0	;tblptru may be non-zero
  2020  00111C                     	endif
  2021  00111C  0008               	tblrd		*
  2022  00111E  CFF5 F089          	movff	tablat,??_Mcp2515_Init+2
  2023  001122  0E06               	movlw	6
  2024  001124  0100               	movlb	0	; () banked
  2025  001126  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  2026  001128  0100               	movlb	0	; () banked
  2027  00112A  6F8A               	movwf	(??_Mcp2515_Init+3)& (0+255),b
  2028  00112C  0E00               	movlw	0
  2029  00112E  0100               	movlb	0	; () banked
  2030  001130  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  2031  001132  0100               	movlb	0	; () banked
  2032  001134  6F8B               	movwf	(??_Mcp2515_Init+4)& (0+255),b
  2033  001136  C08A  FFF6         	movff	??_Mcp2515_Init+3,tblptrl
  2034  00113A  C08B  FFF7         	movff	??_Mcp2515_Init+4,tblptrh
  2035  00113E                     	if	0	;tblptru may be non-zero
  2036  00113E                     	endif
  2037  00113E                     	if	0	;tblptru may be non-zero
  2038  00113E                     	endif
  2039  00113E  0008               	tblrd		*
  2040  001140  CFF5 F08C          	movff	tablat,??_Mcp2515_Init+5
  2041  001144  0E00               	movlw	0
  2042  001146  B18C               	btfsc	(??_Mcp2515_Init+5)& (0+255),0,b
  2043  001148  0E80               	movlw	128
  2044  00114A  6F8C               	movwf	(??_Mcp2515_Init+5)& (0+255),b
  2045  00114C  0E05               	movlw	5
  2046  00114E  0100               	movlb	0	; () banked
  2047  001150  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  2048  001152  0100               	movlb	0	; () banked
  2049  001154  6F8D               	movwf	(??_Mcp2515_Init+6)& (0+255),b
  2050  001156  0E00               	movlw	0
  2051  001158  0100               	movlb	0	; () banked
  2052  00115A  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  2053  00115C  0100               	movlb	0	; () banked
  2054  00115E  6F8E               	movwf	(??_Mcp2515_Init+7)& (0+255),b
  2055  001160  C08D  FFF6         	movff	??_Mcp2515_Init+6,tblptrl
  2056  001164  C08E  FFF7         	movff	??_Mcp2515_Init+7,tblptrh
  2057  001168                     	if	0	;tblptru may be non-zero
  2058  001168                     	endif
  2059  001168                     	if	0	;tblptru may be non-zero
  2060  001168                     	endif
  2061  001168  0008               	tblrd		*
  2062  00116A  CFF5 F08F          	movff	tablat,??_Mcp2515_Init+8
  2063  00116E  0E06               	movlw	6
  2064  001170  0100               	movlb	0	; () banked
  2065  001172  6F90               	movwf	(??_Mcp2515_Init+9)& (0+255),b
  2066  001174                     u935:
  2067  001174  0100               	movlb	0	; () banked
  2068  001176  90D8               	bcf	status,0,c
  2069  001178  378F               	rlcf	(??_Mcp2515_Init+8)& (0+255),f,b
  2070  00117A  0100               	movlb	0	; () banked
  2071  00117C  2F90               	decfsz	(??_Mcp2515_Init+9)& (0+255),f,b
  2072  00117E  D7FA               	goto	u935
  2073  001180  0E03               	movlw	3
  2074  001182  0100               	movlb	0	; () banked
  2075  001184  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  2076  001186  0100               	movlb	0	; () banked
  2077  001188  6F91               	movwf	(??_Mcp2515_Init+10)& (0+255),b
  2078  00118A  0E00               	movlw	0
  2079  00118C  0100               	movlb	0	; () banked
  2080  00118E  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  2081  001190  0100               	movlb	0	; () banked
  2082  001192  6F92               	movwf	(??_Mcp2515_Init+11)& (0+255),b
  2083  001194  C091  FFF6         	movff	??_Mcp2515_Init+10,tblptrl
  2084  001198  C092  FFF7         	movff	??_Mcp2515_Init+11,tblptrh
  2085  00119C                     	if	0	;tblptru may be non-zero
  2086  00119C                     	endif
  2087  00119C                     	if	0	;tblptru may be non-zero
  2088  00119C                     	endif
  2089  00119C  0008               	tblrd		*
  2090  00119E  CFF5 F093          	movff	tablat,??_Mcp2515_Init+12
  2091  0011A2  0100               	movlb	0	; () banked
  2092  0011A4  90D8               	bcf	status,0,c
  2093  0011A6  3793               	rlcf	(??_Mcp2515_Init+12)& (0+255),f,b
  2094  0011A8  0100               	movlb	0	; () banked
  2095  0011AA  90D8               	bcf	status,0,c
  2096  0011AC  3793               	rlcf	(??_Mcp2515_Init+12)& (0+255),f,b
  2097  0011AE  0100               	movlb	0	; () banked
  2098  0011B0  90D8               	bcf	status,0,c
  2099  0011B2  3593               	rlcf	(??_Mcp2515_Init+12)& (0+255),w,b
  2100  0011B4  0100               	movlb	0	; () banked
  2101  0011B6  118F               	iorwf	(??_Mcp2515_Init+8)& (0+255),w,b
  2102  0011B8  0100               	movlb	0	; () banked
  2103  0011BA  118C               	iorwf	(??_Mcp2515_Init+5)& (0+255),w,b
  2104  0011BC  0100               	movlb	0	; () banked
  2105  0011BE  1189               	iorwf	(??_Mcp2515_Init+2)& (0+255),w,b
  2106  0011C0  0100               	movlb	0	; () banked
  2107  0011C2  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  2108                           
  2109                           ; BSR set to: 0
  2110                           ;mcp2515.c: 61: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  2111  0011C4  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  2112  0011C6  0100               	movlb	0	; () banked
  2113  0011C8  6F6C               	movwf	Spi_Write@tx& (0+255),b
  2114  0011CA  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  2115  0011CC  0100               	movlb	0	; () banked
  2116  0011CE  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  2117  0011D0  0E03               	movlw	3
  2118  0011D2  0100               	movlb	0	; () banked
  2119  0011D4  6F6E               	movwf	Spi_Write@size& (0+255),b
  2120  0011D6  0E00               	movlw	0
  2121  0011D8  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  2122  0011DA  0E00               	movlw	0
  2123  0011DC  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  2124  0011DE  0E00               	movlw	0
  2125  0011E0  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  2126  0011E2  EC60  F012         	call	_Spi_Write	;wreg free
  2127                           
  2128                           ;mcp2515.c: 63: cmdWrite3[1] = 0x28;
  2129  0011E6  0E28               	movlw	40
  2130  0011E8  0100               	movlb	0	; () banked
  2131  0011EA  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  2132                           
  2133                           ; BSR set to: 0
  2134                           ;mcp2515.c: 64: cmdWrite3[2] = speedCfg->phseg2 | speedCfg->sjw << 6;
  2135  0011EC  0E04               	movlw	4
  2136  0011EE  0100               	movlb	0	; () banked
  2137  0011F0  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  2138  0011F2  0100               	movlb	0	; () banked
  2139  0011F4  6F87               	movwf	??_Mcp2515_Init& (0+255),b
  2140  0011F6  0E00               	movlw	0
  2141  0011F8  0100               	movlb	0	; () banked
  2142  0011FA  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  2143  0011FC  0100               	movlb	0	; () banked
  2144  0011FE  6F88               	movwf	(??_Mcp2515_Init+1)& (0+255),b
  2145  001200  C087  FFF6         	movff	??_Mcp2515_Init,tblptrl
  2146  001204  C088  FFF7         	movff	??_Mcp2515_Init+1,tblptrh
  2147  001208                     	if	0	;tblptru may be non-zero
  2148  001208                     	endif
  2149  001208                     	if	0	;tblptru may be non-zero
  2150  001208                     	endif
  2151  001208  0008               	tblrd		*
  2152  00120A  CFF5 F089          	movff	tablat,??_Mcp2515_Init+2
  2153  00120E  0E01               	movlw	1
  2154  001210  0100               	movlb	0	; () banked
  2155  001212  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  2156  001214  0100               	movlb	0	; () banked
  2157  001216  6F8A               	movwf	(??_Mcp2515_Init+3)& (0+255),b
  2158  001218  0E00               	movlw	0
  2159  00121A  0100               	movlb	0	; () banked
  2160  00121C  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  2161  00121E  0100               	movlb	0	; () banked
  2162  001220  6F8B               	movwf	(??_Mcp2515_Init+4)& (0+255),b
  2163  001222  C08A  FFF6         	movff	??_Mcp2515_Init+3,tblptrl
  2164  001226  C08B  FFF7         	movff	??_Mcp2515_Init+4,tblptrh
  2165  00122A                     	if	0	;tblptru may be non-zero
  2166  00122A                     	endif
  2167  00122A                     	if	0	;tblptru may be non-zero
  2168  00122A                     	endif
  2169  00122A  0008               	tblrd		*
  2170  00122C  CFF5 F08C          	movff	tablat,??_Mcp2515_Init+5
  2171  001230  0E06               	movlw	6
  2172  001232  0100               	movlb	0	; () banked
  2173  001234  6F8D               	movwf	(??_Mcp2515_Init+6)& (0+255),b
  2174  001236                     u945:
  2175  001236  0100               	movlb	0	; () banked
  2176  001238  90D8               	bcf	status,0,c
  2177  00123A  378C               	rlcf	(??_Mcp2515_Init+5)& (0+255),f,b
  2178  00123C  0100               	movlb	0	; () banked
  2179  00123E  2F8D               	decfsz	(??_Mcp2515_Init+6)& (0+255),f,b
  2180  001240  D7FA               	goto	u945
  2181  001242  0100               	movlb	0	; () banked
  2182  001244  518C               	movf	(??_Mcp2515_Init+5)& (0+255),w,b
  2183  001246  0100               	movlb	0	; () banked
  2184  001248  1189               	iorwf	(??_Mcp2515_Init+2)& (0+255),w,b
  2185  00124A  0100               	movlb	0	; () banked
  2186  00124C  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;mcp2515.c: 65: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  2190  00124E  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  2191  001250  0100               	movlb	0	; () banked
  2192  001252  6F6C               	movwf	Spi_Write@tx& (0+255),b
  2193  001254  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  2194  001256  0100               	movlb	0	; () banked
  2195  001258  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  2196  00125A  0E03               	movlw	3
  2197  00125C  0100               	movlb	0	; () banked
  2198  00125E  6F6E               	movwf	Spi_Write@size& (0+255),b
  2199  001260  0E00               	movlw	0
  2200  001262  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  2201  001264  0E00               	movlw	0
  2202  001266  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  2203  001268  0E00               	movlw	0
  2204  00126A  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  2205  00126C  EC60  F012         	call	_Spi_Write	;wreg free
  2206                           
  2207                           ;mcp2515.c: 69: Mcp2515WriteCanId(0x20,filterCfg->ext,filterCfg->mask0);
  2208  001270  0100               	movlb	0	; () banked
  2209  001272  EE20 F020          	lfsr	2,32
  2210  001276  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2211  001278  26D9               	addwf	fsr2l,f,c
  2212  00127A  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2213  00127C  22DA               	addwfc	fsr2h,f,c
  2214  00127E  50DF               	movf	indf2,w,c
  2215  001280  0100               	movlb	0	; () banked
  2216  001282  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  2217  001284  C085  FFD9         	movff	Mcp2515_Init@filterCfg,fsr2l
  2218  001288  C086  FFDA         	movff	Mcp2515_Init@filterCfg+1,fsr2h
  2219  00128C  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  2220  001290  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  2221  001294  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  2222  001298  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  2223  00129C  0E20               	movlw	32
  2224  00129E  EC98  F00E         	call	_Mcp2515WriteCanId
  2225                           
  2226                           ;mcp2515.c: 70: Mcp2515WriteCanId(0x24,filterCfg->ext,filterCfg->mask1);
  2227  0012A2  0100               	movlb	0	; () banked
  2228  0012A4  EE20 F020          	lfsr	2,32
  2229  0012A8  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2230  0012AA  26D9               	addwf	fsr2l,f,c
  2231  0012AC  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2232  0012AE  22DA               	addwfc	fsr2h,f,c
  2233  0012B0  50DF               	movf	indf2,w,c
  2234  0012B2  0100               	movlb	0	; () banked
  2235  0012B4  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  2236  0012B6  0100               	movlb	0	; () banked
  2237  0012B8  EE20 F004          	lfsr	2,4
  2238  0012BC  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2239  0012BE  26D9               	addwf	fsr2l,f,c
  2240  0012C0  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2241  0012C2  22DA               	addwfc	fsr2h,f,c
  2242  0012C4  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  2243  0012C8  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  2244  0012CC  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  2245  0012D0  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  2246  0012D4  0E24               	movlw	36
  2247  0012D6  EC98  F00E         	call	_Mcp2515WriteCanId
  2248                           
  2249                           ;mcp2515.c: 71: Mcp2515WriteCanId(0x00,filterCfg->ext,filterCfg->filter0);
  2250  0012DA  0100               	movlb	0	; () banked
  2251  0012DC  EE20 F020          	lfsr	2,32
  2252  0012E0  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2253  0012E2  26D9               	addwf	fsr2l,f,c
  2254  0012E4  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2255  0012E6  22DA               	addwfc	fsr2h,f,c
  2256  0012E8  50DF               	movf	indf2,w,c
  2257  0012EA  0100               	movlb	0	; () banked
  2258  0012EC  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  2259  0012EE  0100               	movlb	0	; () banked
  2260  0012F0  EE20 F008          	lfsr	2,8
  2261  0012F4  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2262  0012F6  26D9               	addwf	fsr2l,f,c
  2263  0012F8  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2264  0012FA  22DA               	addwfc	fsr2h,f,c
  2265  0012FC  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  2266  001300  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  2267  001304  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  2268  001308  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  2269  00130C  0E00               	movlw	0
  2270  00130E  EC98  F00E         	call	_Mcp2515WriteCanId
  2271                           
  2272                           ;mcp2515.c: 72: Mcp2515WriteCanId(0x04,filterCfg->ext,filterCfg->filter1);
  2273  001312  0100               	movlb	0	; () banked
  2274  001314  EE20 F020          	lfsr	2,32
  2275  001318  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2276  00131A  26D9               	addwf	fsr2l,f,c
  2277  00131C  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2278  00131E  22DA               	addwfc	fsr2h,f,c
  2279  001320  50DF               	movf	indf2,w,c
  2280  001322  0100               	movlb	0	; () banked
  2281  001324  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  2282  001326  0100               	movlb	0	; () banked
  2283  001328  EE20 F00C          	lfsr	2,12
  2284  00132C  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2285  00132E  26D9               	addwf	fsr2l,f,c
  2286  001330  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2287  001332  22DA               	addwfc	fsr2h,f,c
  2288  001334  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  2289  001338  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  2290  00133C  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  2291  001340  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  2292  001344  0E04               	movlw	4
  2293  001346  EC98  F00E         	call	_Mcp2515WriteCanId
  2294                           
  2295                           ;mcp2515.c: 73: Mcp2515WriteCanId(0x08,filterCfg->ext,filterCfg->filter2);
  2296  00134A  0100               	movlb	0	; () banked
  2297  00134C  EE20 F020          	lfsr	2,32
  2298  001350  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2299  001352  26D9               	addwf	fsr2l,f,c
  2300  001354  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2301  001356  22DA               	addwfc	fsr2h,f,c
  2302  001358  50DF               	movf	indf2,w,c
  2303  00135A  0100               	movlb	0	; () banked
  2304  00135C  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  2305  00135E  0100               	movlb	0	; () banked
  2306  001360  EE20 F010          	lfsr	2,16
  2307  001364  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2308  001366  26D9               	addwf	fsr2l,f,c
  2309  001368  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2310  00136A  22DA               	addwfc	fsr2h,f,c
  2311  00136C  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  2312  001370  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  2313  001374  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  2314  001378  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  2315  00137C  0E08               	movlw	8
  2316  00137E  EC98  F00E         	call	_Mcp2515WriteCanId
  2317                           
  2318                           ;mcp2515.c: 74: Mcp2515WriteCanId(0x10,filterCfg->ext,filterCfg->filter3);
  2319  001382  0100               	movlb	0	; () banked
  2320  001384  EE20 F020          	lfsr	2,32
  2321  001388  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2322  00138A  26D9               	addwf	fsr2l,f,c
  2323  00138C  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2324  00138E  22DA               	addwfc	fsr2h,f,c
  2325  001390  50DF               	movf	indf2,w,c
  2326  001392  0100               	movlb	0	; () banked
  2327  001394  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  2328  001396  0100               	movlb	0	; () banked
  2329  001398  EE20 F014          	lfsr	2,20
  2330  00139C  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2331  00139E  26D9               	addwf	fsr2l,f,c
  2332  0013A0  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2333  0013A2  22DA               	addwfc	fsr2h,f,c
  2334  0013A4  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  2335  0013A8  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  2336  0013AC  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  2337  0013B0  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  2338  0013B4  0E10               	movlw	16
  2339  0013B6  EC98  F00E         	call	_Mcp2515WriteCanId
  2340                           
  2341                           ;mcp2515.c: 75: Mcp2515WriteCanId(0x14,filterCfg->ext,filterCfg->filter4);
  2342  0013BA  0100               	movlb	0	; () banked
  2343  0013BC  EE20 F020          	lfsr	2,32
  2344  0013C0  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2345  0013C2  26D9               	addwf	fsr2l,f,c
  2346  0013C4  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2347  0013C6  22DA               	addwfc	fsr2h,f,c
  2348  0013C8  50DF               	movf	indf2,w,c
  2349  0013CA  0100               	movlb	0	; () banked
  2350  0013CC  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  2351  0013CE  0100               	movlb	0	; () banked
  2352  0013D0  EE20 F018          	lfsr	2,24
  2353  0013D4  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2354  0013D6  26D9               	addwf	fsr2l,f,c
  2355  0013D8  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2356  0013DA  22DA               	addwfc	fsr2h,f,c
  2357  0013DC  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  2358  0013E0  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  2359  0013E4  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  2360  0013E8  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  2361  0013EC  0E14               	movlw	20
  2362  0013EE  EC98  F00E         	call	_Mcp2515WriteCanId
  2363                           
  2364                           ;mcp2515.c: 76: Mcp2515WriteCanId(0x18,filterCfg->ext,filterCfg->filter5);
  2365  0013F2  0100               	movlb	0	; () banked
  2366  0013F4  EE20 F020          	lfsr	2,32
  2367  0013F8  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2368  0013FA  26D9               	addwf	fsr2l,f,c
  2369  0013FC  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2370  0013FE  22DA               	addwfc	fsr2h,f,c
  2371  001400  50DF               	movf	indf2,w,c
  2372  001402  0100               	movlb	0	; () banked
  2373  001404  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  2374  001406  0100               	movlb	0	; () banked
  2375  001408  EE20 F01C          	lfsr	2,28
  2376  00140C  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2377  00140E  26D9               	addwf	fsr2l,f,c
  2378  001410  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2379  001412  22DA               	addwfc	fsr2h,f,c
  2380  001414  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  2381  001418  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  2382  00141C  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  2383  001420  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  2384  001424  0E18               	movlw	24
  2385  001426  EC98  F00E         	call	_Mcp2515WriteCanId
  2386                           
  2387                           ;mcp2515.c: 80: cmdWrite3[2] = 0;
  2388  00142A  0E00               	movlw	0
  2389  00142C  0100               	movlb	0	; () banked
  2390  00142E  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  2391                           
  2392                           ;mcp2515.c: 81: for (i = 0; i < 14; i++)
  2393  001430  0E00               	movlw	0
  2394  001432  0100               	movlb	0	; () banked
  2395  001434  6F94               	movwf	Mcp2515_Init@i& (0+255),b
  2396  001436                     l1975:
  2397                           
  2398                           ; BSR set to: 0
  2399  001436  0E0D               	movlw	13
  2400  001438  0100               	movlb	0	; () banked
  2401  00143A  6594               	cpfsgt	Mcp2515_Init@i& (0+255),b
  2402  00143C  D001               	goto	l1979
  2403  00143E  D045               	goto	l1993
  2404  001440                     l1979:
  2405                           
  2406                           ; BSR set to: 0
  2407                           ;mcp2515.c: 82: {
  2408                           ;mcp2515.c: 83: cmdWrite3[1] = 0x30 + i;
  2409  001440  0100               	movlb	0	; () banked
  2410  001442  5194               	movf	Mcp2515_Init@i& (0+255),w,b
  2411  001444  0F30               	addlw	48
  2412  001446  0100               	movlb	0	; () banked
  2413  001448  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  2414                           
  2415                           ; BSR set to: 0
  2416                           ;mcp2515.c: 84: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  2417  00144A  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  2418  00144C  0100               	movlb	0	; () banked
  2419  00144E  6F6C               	movwf	Spi_Write@tx& (0+255),b
  2420  001450  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  2421  001452  0100               	movlb	0	; () banked
  2422  001454  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  2423  001456  0E03               	movlw	3
  2424  001458  0100               	movlb	0	; () banked
  2425  00145A  6F6E               	movwf	Spi_Write@size& (0+255),b
  2426  00145C  0E00               	movlw	0
  2427  00145E  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  2428  001460  0E00               	movlw	0
  2429  001462  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  2430  001464  0E00               	movlw	0
  2431  001466  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  2432  001468  EC60  F012         	call	_Spi_Write	;wreg free
  2433                           
  2434                           ;mcp2515.c: 85: cmdWrite3[1] = 0x40 + i;
  2435  00146C  0100               	movlb	0	; () banked
  2436  00146E  5194               	movf	Mcp2515_Init@i& (0+255),w,b
  2437  001470  0F40               	addlw	64
  2438  001472  0100               	movlb	0	; () banked
  2439  001474  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  2440                           
  2441                           ;mcp2515.c: 86: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  2442  001476  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  2443  001478  0100               	movlb	0	; () banked
  2444  00147A  6F6C               	movwf	Spi_Write@tx& (0+255),b
  2445  00147C  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  2446  00147E  0100               	movlb	0	; () banked
  2447  001480  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  2448  001482  0E03               	movlw	3
  2449  001484  0100               	movlb	0	; () banked
  2450  001486  6F6E               	movwf	Spi_Write@size& (0+255),b
  2451  001488  0E00               	movlw	0
  2452  00148A  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  2453  00148C  0E00               	movlw	0
  2454  00148E  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  2455  001490  0E00               	movlw	0
  2456  001492  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  2457  001494  EC60  F012         	call	_Spi_Write	;wreg free
  2458                           
  2459                           ;mcp2515.c: 87: cmdWrite3[1] = 0x50 + i;
  2460  001498  0100               	movlb	0	; () banked
  2461  00149A  5194               	movf	Mcp2515_Init@i& (0+255),w,b
  2462  00149C  0F50               	addlw	80
  2463  00149E  0100               	movlb	0	; () banked
  2464  0014A0  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  2465                           
  2466                           ; BSR set to: 0
  2467                           ;mcp2515.c: 88: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  2468  0014A2  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  2469  0014A4  0100               	movlb	0	; () banked
  2470  0014A6  6F6C               	movwf	Spi_Write@tx& (0+255),b
  2471  0014A8  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  2472  0014AA  0100               	movlb	0	; () banked
  2473  0014AC  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  2474  0014AE  0E03               	movlw	3
  2475  0014B0  0100               	movlb	0	; () banked
  2476  0014B2  6F6E               	movwf	Spi_Write@size& (0+255),b
  2477  0014B4  0E00               	movlw	0
  2478  0014B6  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  2479  0014B8  0E00               	movlw	0
  2480  0014BA  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  2481  0014BC  0E00               	movlw	0
  2482  0014BE  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  2483  0014C0  EC60  F012         	call	_Spi_Write	;wreg free
  2484  0014C4  0100               	movlb	0	; () banked
  2485  0014C6  2B94               	incf	Mcp2515_Init@i& (0+255),f,b
  2486  0014C8  D7B6               	goto	l1975
  2487  0014CA                     l1993:
  2488                           
  2489                           ; BSR set to: 0
  2490                           ;mcp2515.c: 89: }
  2491                           ;mcp2515.c: 93: cmdWrite3[2] = 0;
  2492  0014CA  0E00               	movlw	0
  2493  0014CC  0100               	movlb	0	; () banked
  2494  0014CE  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  2495                           
  2496                           ;mcp2515.c: 94: cmdWrite3[1] = 0x60;
  2497  0014D0  0E60               	movlw	96
  2498  0014D2  0100               	movlb	0	; () banked
  2499  0014D4  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  2500                           
  2501                           ; BSR set to: 0
  2502                           ;mcp2515.c: 95: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  2503  0014D6  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  2504  0014D8  0100               	movlb	0	; () banked
  2505  0014DA  6F6C               	movwf	Spi_Write@tx& (0+255),b
  2506  0014DC  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  2507  0014DE  0100               	movlb	0	; () banked
  2508  0014E0  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  2509  0014E2  0E03               	movlw	3
  2510  0014E4  0100               	movlb	0	; () banked
  2511  0014E6  6F6E               	movwf	Spi_Write@size& (0+255),b
  2512  0014E8  0E00               	movlw	0
  2513  0014EA  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  2514  0014EC  0E00               	movlw	0
  2515  0014EE  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  2516  0014F0  0E00               	movlw	0
  2517  0014F2  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  2518  0014F4  EC60  F012         	call	_Spi_Write	;wreg free
  2519                           
  2520                           ;mcp2515.c: 96: cmdWrite3[1] = 0x70;
  2521  0014F8  0E70               	movlw	112
  2522  0014FA  0100               	movlb	0	; () banked
  2523  0014FC  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  2524                           
  2525                           ;mcp2515.c: 97: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  2526  0014FE  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  2527  001500  0100               	movlb	0	; () banked
  2528  001502  6F6C               	movwf	Spi_Write@tx& (0+255),b
  2529  001504  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  2530  001506  0100               	movlb	0	; () banked
  2531  001508  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  2532  00150A  0E03               	movlw	3
  2533  00150C  0100               	movlb	0	; () banked
  2534  00150E  6F6E               	movwf	Spi_Write@size& (0+255),b
  2535  001510  0E00               	movlw	0
  2536  001512  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  2537  001514  0E00               	movlw	0
  2538  001516  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  2539  001518  0E00               	movlw	0
  2540  00151A  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  2541  00151C  EC60  F012         	call	_Spi_Write	;wreg free
  2542                           
  2543                           ;mcp2515.c: 101: cmdMask4[1] = 0x60;
  2544  001520  0E60               	movlw	96
  2545  001522  0100               	movlb	0	; () banked
  2546  001524  6F96               	movwf	(Mcp2515_Init@cmdMask4+1)& (0+255),b
  2547                           
  2548                           ; BSR set to: 0
  2549                           ;mcp2515.c: 102: cmdMask4[2] = 0x60 | (1<<2);
  2550  001526  0E64               	movlw	100
  2551  001528  0100               	movlb	0	; () banked
  2552  00152A  6F97               	movwf	(Mcp2515_Init@cmdMask4+2)& (0+255),b
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;mcp2515.c: 103: if(filterCfg->ext == 0)
  2556  00152C  0100               	movlb	0	; () banked
  2557  00152E  EE20 F020          	lfsr	2,32
  2558  001532  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2559  001534  26D9               	addwf	fsr2l,f,c
  2560  001536  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2561  001538  22DA               	addwfc	fsr2h,f,c
  2562  00153A  50DF               	movf	indf2,w,c
  2563  00153C  A4D8               	btfss	status,2,c
  2564  00153E  D002               	goto	l2007
  2565                           
  2566                           ; BSR set to: 0
  2567                           ;mcp2515.c: 104: {
  2568                           ;mcp2515.c: 105: cmdMask4[3] = 0x20 | (1<<2);
  2569  001540  0E24               	movlw	36
  2570  001542  D001               	goto	L1
  2571  001544                     l2007:
  2572                           
  2573                           ; BSR set to: 0
  2574                           ;mcp2515.c: 107: else
  2575                           ;mcp2515.c: 108: {
  2576                           ;mcp2515.c: 109: cmdMask4[3] = 0x40 | (1<<2);
  2577  001544  0E44               	movlw	68
  2578  001546                     L1:
  2579  001546  0100               	movlb	0	; () banked
  2580  001548  6F98               	movwf	(Mcp2515_Init@cmdMask4+3)& (0+255),b
  2581                           
  2582                           ; BSR set to: 0
  2583                           ;mcp2515.c: 110: }
  2584                           ;mcp2515.c: 111: Spi_Write(cmdMask4,sizeof(cmdMask4));
  2585                           
  2586                           ; BSR set to: 0
  2587  00154A  0E95               	movlw	low Mcp2515_Init@cmdMask4
  2588  00154C  0100               	movlb	0	; () banked
  2589  00154E  6F6C               	movwf	Spi_Write@tx& (0+255),b
  2590  001550  0E00               	movlw	high Mcp2515_Init@cmdMask4
  2591  001552  0100               	movlb	0	; () banked
  2592  001554  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  2593  001556  0E04               	movlw	4
  2594  001558  0100               	movlb	0	; () banked
  2595  00155A  6F6E               	movwf	Spi_Write@size& (0+255),b
  2596  00155C  0E00               	movlw	0
  2597  00155E  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  2598  001560  0E00               	movlw	0
  2599  001562  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  2600  001564  0E00               	movlw	0
  2601  001566  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  2602  001568  EC60  F012         	call	_Spi_Write	;wreg free
  2603                           
  2604                           ;mcp2515.c: 115: cmdMask4[1] = 0x70;
  2605  00156C  0E70               	movlw	112
  2606  00156E  0100               	movlb	0	; () banked
  2607  001570  6F96               	movwf	(Mcp2515_Init@cmdMask4+1)& (0+255),b
  2608                           
  2609                           ; BSR set to: 0
  2610                           ;mcp2515.c: 116: cmdMask4[2] = 0x60;
  2611  001572  0E60               	movlw	96
  2612  001574  0100               	movlb	0	; () banked
  2613  001576  6F97               	movwf	(Mcp2515_Init@cmdMask4+2)& (0+255),b
  2614                           
  2615                           ; BSR set to: 0
  2616                           ;mcp2515.c: 117: if(filterCfg->ext == 0)
  2617  001578  0100               	movlb	0	; () banked
  2618  00157A  EE20 F020          	lfsr	2,32
  2619  00157E  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2620  001580  26D9               	addwf	fsr2l,f,c
  2621  001582  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2622  001584  22DA               	addwfc	fsr2h,f,c
  2623  001586  50DF               	movf	indf2,w,c
  2624  001588  A4D8               	btfss	status,2,c
  2625  00158A  D002               	goto	l2019
  2626                           
  2627                           ; BSR set to: 0
  2628                           ;mcp2515.c: 118: {
  2629                           ;mcp2515.c: 119: cmdMask4[3] = 0x20;
  2630  00158C  0E20               	movlw	32
  2631  00158E  D001               	goto	L2
  2632  001590                     l2019:
  2633                           
  2634                           ; BSR set to: 0
  2635                           ;mcp2515.c: 121: else
  2636                           ;mcp2515.c: 122: {
  2637                           ;mcp2515.c: 123: cmdMask4[3] = 0x40;
  2638  001590  0E40               	movlw	64
  2639  001592                     L2:
  2640  001592  0100               	movlb	0	; () banked
  2641  001594  6F98               	movwf	(Mcp2515_Init@cmdMask4+3)& (0+255),b
  2642                           
  2643                           ; BSR set to: 0
  2644                           ;mcp2515.c: 124: }
  2645                           ;mcp2515.c: 125: Spi_Write(cmdMask4,sizeof(cmdMask4));
  2646                           
  2647                           ; BSR set to: 0
  2648  001596  0E95               	movlw	low Mcp2515_Init@cmdMask4
  2649  001598  0100               	movlb	0	; () banked
  2650  00159A  6F6C               	movwf	Spi_Write@tx& (0+255),b
  2651  00159C  0E00               	movlw	high Mcp2515_Init@cmdMask4
  2652  00159E  0100               	movlb	0	; () banked
  2653  0015A0  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  2654  0015A2  0E04               	movlw	4
  2655  0015A4  0100               	movlb	0	; () banked
  2656  0015A6  6F6E               	movwf	Spi_Write@size& (0+255),b
  2657  0015A8  0E00               	movlw	0
  2658  0015AA  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  2659  0015AC  0E00               	movlw	0
  2660  0015AE  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  2661  0015B0  0E00               	movlw	0
  2662  0015B2  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  2663  0015B4  EC60  F012         	call	_Spi_Write	;wreg free
  2664                           
  2665                           ;mcp2515.c: 129: cmdMask4[0] = 0x05;
  2666  0015B8  0E05               	movlw	5
  2667  0015BA  0100               	movlb	0	; () banked
  2668  0015BC  6F95               	movwf	Mcp2515_Init@cmdMask4& (0+255),b
  2669                           
  2670                           ; BSR set to: 0
  2671                           ;mcp2515.c: 130: cmdMask4[1] = 0x2B;
  2672  0015BE  0E2B               	movlw	43
  2673  0015C0  0100               	movlb	0	; () banked
  2674  0015C2  6F96               	movwf	(Mcp2515_Init@cmdMask4+1)& (0+255),b
  2675                           
  2676                           ; BSR set to: 0
  2677                           ;mcp2515.c: 131: cmdMask4[2] = 0x1F;
  2678  0015C4  0E1F               	movlw	31
  2679  0015C6  0100               	movlb	0	; () banked
  2680  0015C8  6F97               	movwf	(Mcp2515_Init@cmdMask4+2)& (0+255),b
  2681                           
  2682                           ; BSR set to: 0
  2683                           ;mcp2515.c: 132: cmdMask4[3] = 0x1F;
  2684  0015CA  0E1F               	movlw	31
  2685  0015CC  0100               	movlb	0	; () banked
  2686  0015CE  6F98               	movwf	(Mcp2515_Init@cmdMask4+3)& (0+255),b
  2687                           
  2688                           ; BSR set to: 0
  2689                           ;mcp2515.c: 133: Spi_Write(cmdMask4,sizeof(cmdMask4));
  2690  0015D0  0E95               	movlw	low Mcp2515_Init@cmdMask4
  2691  0015D2  0100               	movlb	0	; () banked
  2692  0015D4  6F6C               	movwf	Spi_Write@tx& (0+255),b
  2693  0015D6  0E00               	movlw	high Mcp2515_Init@cmdMask4
  2694  0015D8  0100               	movlb	0	; () banked
  2695  0015DA  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  2696  0015DC  0E04               	movlw	4
  2697  0015DE  0100               	movlb	0	; () banked
  2698  0015E0  6F6E               	movwf	Spi_Write@size& (0+255),b
  2699  0015E2  0E00               	movlw	0
  2700  0015E4  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  2701  0015E6  0E00               	movlw	0
  2702  0015E8  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  2703  0015EA  0E00               	movlw	0
  2704  0015EC  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  2705  0015EE  EC60  F012         	call	_Spi_Write	;wreg free
  2706                           
  2707                           ;mcp2515.c: 137: cmdMask4[0] = 0x05;
  2708  0015F2  0E05               	movlw	5
  2709  0015F4  0100               	movlb	0	; () banked
  2710  0015F6  6F95               	movwf	Mcp2515_Init@cmdMask4& (0+255),b
  2711                           
  2712                           ;mcp2515.c: 138: cmdMask4[1] = 0x0F;
  2713  0015F8  0E0F               	movlw	15
  2714  0015FA  0100               	movlb	0	; () banked
  2715  0015FC  6F96               	movwf	(Mcp2515_Init@cmdMask4+1)& (0+255),b
  2716                           
  2717                           ;mcp2515.c: 139: cmdMask4[2] = 0xE0;
  2718  0015FE  0EE0               	movlw	224
  2719  001600  0100               	movlb	0	; () banked
  2720  001602  6F97               	movwf	(Mcp2515_Init@cmdMask4+2)& (0+255),b
  2721                           
  2722                           ;mcp2515.c: 140: cmdMask4[3] = 0x00;
  2723  001604  0E00               	movlw	0
  2724  001606  0100               	movlb	0	; () banked
  2725  001608  6F98               	movwf	(Mcp2515_Init@cmdMask4+3)& (0+255),b
  2726                           
  2727                           ; BSR set to: 0
  2728                           ;mcp2515.c: 141: Spi_Write(cmdMask4,sizeof(cmdMask4));
  2729  00160A  0E95               	movlw	low Mcp2515_Init@cmdMask4
  2730  00160C  0100               	movlb	0	; () banked
  2731  00160E  6F6C               	movwf	Spi_Write@tx& (0+255),b
  2732  001610  0E00               	movlw	high Mcp2515_Init@cmdMask4
  2733  001612  0100               	movlb	0	; () banked
  2734  001614  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  2735  001616  0E04               	movlw	4
  2736  001618  0100               	movlb	0	; () banked
  2737  00161A  6F6E               	movwf	Spi_Write@size& (0+255),b
  2738  00161C  0E00               	movlw	0
  2739  00161E  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  2740  001620  0E00               	movlw	0
  2741  001622  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  2742  001624  0E00               	movlw	0
  2743  001626  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  2744  001628  EC60  F012         	call	_Spi_Write	;wreg free
  2745  00162C  0012               	return		;funcret
  2746  00162E                     __end_of_Mcp2515_Init:
  2747                           	opt stack 0
  2748                           tblptru	equ	0xFF8
  2749                           tblptrh	equ	0xFF7
  2750                           tblptrl	equ	0xFF6
  2751                           tablat	equ	0xFF5
  2752                           prodh	equ	0xFF4
  2753                           prodl	equ	0xFF3
  2754                           intcon	equ	0xFF2
  2755                           intcon2	equ	0xFF1
  2756                           intcon3	equ	0xFF0
  2757                           postinc0	equ	0xFEE
  2758                           wreg	equ	0xFE8
  2759                           indf1	equ	0xFE7
  2760                           postinc1	equ	0xFE6
  2761                           postdec1	equ	0xFE5
  2762                           fsr1h	equ	0xFE2
  2763                           fsr1l	equ	0xFE1
  2764                           indf2	equ	0xFDF
  2765                           postinc2	equ	0xFDE
  2766                           fsr2h	equ	0xFDA
  2767                           fsr2l	equ	0xFD9
  2768                           status	equ	0xFD8
  2769                           
  2770 ;; *************** function _Mcp2515_Reset *****************
  2771 ;; Defined at:
  2772 ;;		line 21 in file "mcp2515.c"
  2773 ;; Parameters:    Size  Location     Type
  2774 ;;		None
  2775 ;; Auto vars:     Size  Location     Type
  2776 ;;  i               4   19[BANK0 ] unsigned long 
  2777 ;;  cmd             1   18[BANK0 ] unsigned char 
  2778 ;; Return value:  Size  Location     Type
  2779 ;;                  1    wreg      void 
  2780 ;; Registers used:
  2781 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2782 ;; Tracked objects:
  2783 ;;		On entry : 0/0
  2784 ;;		On exit  : 0/0
  2785 ;;		Unchanged: 0/0
  2786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2788 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2790 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2791 ;;Total ram usage:        5 bytes
  2792 ;; Hardware stack levels used:    1
  2793 ;; Hardware stack levels required when called:   10
  2794 ;; This function calls:
  2795 ;;		_Spi_Write
  2796 ;; This function is called by:
  2797 ;;		_Mcp2515_Init
  2798 ;; This function uses a non-reentrant model
  2799 ;;
  2800                           
  2801                           	psect	text7
  2802  00223C                     __ptext7:
  2803                           	opt stack 0
  2804  00223C                     _Mcp2515_Reset:
  2805                           	opt stack 17
  2806                           
  2807                           ;mcp2515.c: 23: uint32_t i;
  2808                           ;mcp2515.c: 24: uint8_t cmd = 0xC0;
  2809                           
  2810                           ;incstack = 0
  2811  00223C  0EC0               	movlw	192
  2812  00223E  0100               	movlb	0	; () banked
  2813  002240  6F72               	movwf	Mcp2515_Reset@cmd& (0+255),b
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;mcp2515.c: 26: Spi_Write(&cmd,sizeof(cmd));
  2817  002242  0E72               	movlw	low Mcp2515_Reset@cmd
  2818  002244  0100               	movlb	0	; () banked
  2819  002246  6F6C               	movwf	Spi_Write@tx& (0+255),b
  2820  002248  0E00               	movlw	high Mcp2515_Reset@cmd
  2821  00224A  0100               	movlb	0	; () banked
  2822  00224C  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  2823  00224E  0E01               	movlw	1
  2824  002250  0100               	movlb	0	; () banked
  2825  002252  6F6E               	movwf	Spi_Write@size& (0+255),b
  2826  002254  0E00               	movlw	0
  2827  002256  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  2828  002258  0E00               	movlw	0
  2829  00225A  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  2830  00225C  0E00               	movlw	0
  2831  00225E  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  2832  002260  EC60  F012         	call	_Spi_Write	;wreg free
  2833                           
  2834                           ;mcp2515.c: 27: for(i=0;i<10000;i++){}
  2835  002264  0E00               	movlw	0
  2836  002266  0100               	movlb	0	; () banked
  2837  002268  6F73               	movwf	Mcp2515_Reset@i& (0+255),b
  2838  00226A  0E00               	movlw	0
  2839  00226C  6F74               	movwf	(Mcp2515_Reset@i+1)& (0+255),b
  2840  00226E  0E00               	movlw	0
  2841  002270  6F75               	movwf	(Mcp2515_Reset@i+2)& (0+255),b
  2842  002272  0E00               	movlw	0
  2843  002274  6F76               	movwf	(Mcp2515_Reset@i+3)& (0+255),b
  2844  002276                     l1771:
  2845                           
  2846                           ; BSR set to: 0
  2847  002276  0100               	movlb	0	; () banked
  2848  002278  5176               	movf	(Mcp2515_Reset@i+3)& (0+255),w,b
  2849  00227A  0100               	movlb	0	; () banked
  2850  00227C  1175               	iorwf	(Mcp2515_Reset@i+2)& (0+255),w,b
  2851  00227E  E110               	bnz	l251
  2852  002280  0E10               	movlw	16
  2853  002282  0100               	movlb	0	; () banked
  2854  002284  5D73               	subwf	Mcp2515_Reset@i& (0+255),w,b
  2855  002286  0E27               	movlw	39
  2856  002288  0100               	movlb	0	; () banked
  2857  00228A  5974               	subwfb	(Mcp2515_Reset@i+1)& (0+255),w,b
  2858  00228C  B0D8               	btfsc	status,0,c
  2859  00228E  0012               	return	
  2860                           
  2861                           ; BSR set to: 0
  2862                           
  2863                           ; BSR set to: 0
  2864                           
  2865                           ; BSR set to: 0
  2866  002290  0E01               	movlw	1
  2867  002292  0100               	movlb	0	; () banked
  2868  002294  2773               	addwf	Mcp2515_Reset@i& (0+255),f,b
  2869  002296  0E00               	movlw	0
  2870  002298  2374               	addwfc	(Mcp2515_Reset@i+1)& (0+255),f,b
  2871  00229A  2375               	addwfc	(Mcp2515_Reset@i+2)& (0+255),f,b
  2872  00229C  2376               	addwfc	(Mcp2515_Reset@i+3)& (0+255),f,b
  2873  00229E  D7EB               	goto	l1771
  2874  0022A0                     l251:
  2875                           
  2876                           ; BSR set to: 0
  2877  0022A0  0012               	return		;funcret
  2878  0022A2                     __end_of_Mcp2515_Reset:
  2879                           	opt stack 0
  2880                           tblptru	equ	0xFF8
  2881                           tblptrh	equ	0xFF7
  2882                           tblptrl	equ	0xFF6
  2883                           tablat	equ	0xFF5
  2884                           prodh	equ	0xFF4
  2885                           prodl	equ	0xFF3
  2886                           intcon	equ	0xFF2
  2887                           intcon2	equ	0xFF1
  2888                           intcon3	equ	0xFF0
  2889                           postinc0	equ	0xFEE
  2890                           wreg	equ	0xFE8
  2891                           indf1	equ	0xFE7
  2892                           postinc1	equ	0xFE6
  2893                           postdec1	equ	0xFE5
  2894                           fsr1h	equ	0xFE2
  2895                           fsr1l	equ	0xFE1
  2896                           indf2	equ	0xFDF
  2897                           postinc2	equ	0xFDE
  2898                           fsr2h	equ	0xFDA
  2899                           fsr2l	equ	0xFD9
  2900                           status	equ	0xFD8
  2901                           
  2902 ;; *************** function _Mcp2515WriteCanId *****************
  2903 ;; Defined at:
  2904 ;;		line 233 in file "mcp2515.c"
  2905 ;; Parameters:    Size  Location     Type
  2906 ;;  mcp_addr        1    wreg     unsigned char 
  2907 ;;  ext             1   18[BANK0 ] unsigned char 
  2908 ;;  can_id          4   19[BANK0 ] unsigned long 
  2909 ;; Auto vars:     Size  Location     Type
  2910 ;;  mcp_addr        1   26[BANK0 ] unsigned char 
  2911 ;;  buf             6   27[BANK0 ] unsigned char [6]
  2912 ;;  canid           2   33[BANK0 ] unsigned int 
  2913 ;; Return value:  Size  Location     Type
  2914 ;;                  1    wreg      void 
  2915 ;; Registers used:
  2916 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2917 ;; Tracked objects:
  2918 ;;		On entry : 0/0
  2919 ;;		On exit  : 0/0
  2920 ;;		Unchanged: 0/0
  2921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2922 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2923 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2924 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2925 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2926 ;;Total ram usage:       17 bytes
  2927 ;; Hardware stack levels used:    1
  2928 ;; Hardware stack levels required when called:   10
  2929 ;; This function calls:
  2930 ;;		_Spi_Write
  2931 ;; This function is called by:
  2932 ;;		_Mcp2515_Init
  2933 ;; This function uses a non-reentrant model
  2934 ;;
  2935                           
  2936                           	psect	text8
  2937  001D30                     __ptext8:
  2938                           	opt stack 0
  2939  001D30                     _Mcp2515WriteCanId:
  2940                           	opt stack 17
  2941                           
  2942                           ; BSR set to: 0
  2943                           ;incstack = 0
  2944                           ;Mcp2515WriteCanId@mcp_addr stored from wreg
  2945  001D30  0100               	movlb	0	; () banked
  2946  001D32  6F7A               	movwf	Mcp2515WriteCanId@mcp_addr& (0+255),b
  2947                           
  2948                           ;mcp2515.c: 235: uint16_t canid;
  2949                           ;mcp2515.c: 236: uint8_t buf[6];
  2950                           ;mcp2515.c: 238: canid = (uint16_t)(can_id & 0x0FFFF);
  2951  001D34  C073  F081         	movff	Mcp2515WriteCanId@can_id,Mcp2515WriteCanId@canid
  2952  001D38  C074  F082         	movff	Mcp2515WriteCanId@can_id+1,Mcp2515WriteCanId@canid+1
  2953                           
  2954                           ;mcp2515.c: 240: buf[0] = 0x02;
  2955  001D3C  0E02               	movlw	2
  2956  001D3E  0100               	movlb	0	; () banked
  2957  001D40  6F7B               	movwf	Mcp2515WriteCanId@buf& (0+255),b
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;mcp2515.c: 241: buf[1] = mcp_addr;
  2961  001D42  C07A  F07C         	movff	Mcp2515WriteCanId@mcp_addr,Mcp2515WriteCanId@buf+1
  2962                           
  2963                           ; BSR set to: 0
  2964                           ;mcp2515.c: 243: if ( ext == 1)
  2965  001D46  0100               	movlb	0	; () banked
  2966  001D48  0572               	decf	Mcp2515WriteCanId@ext& (0+255),w,b
  2967  001D4A  A4D8               	btfss	status,2,c
  2968  001D4C  D034               	goto	l1799
  2969                           
  2970                           ; BSR set to: 0
  2971                           ;mcp2515.c: 244: {
  2972                           ;mcp2515.c: 245: buf[3+2] = (uint8_t) (canid & 0xFF);
  2973  001D4E  C081  F080         	movff	Mcp2515WriteCanId@canid,Mcp2515WriteCanId@buf+5
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;mcp2515.c: 246: buf[2+2] = (uint8_t) (canid >> 8);
  2977  001D52  0100               	movlb	0	; () banked
  2978  001D54  5182               	movf	(Mcp2515WriteCanId@canid+1)& (0+255),w,b
  2979  001D56  0100               	movlb	0	; () banked
  2980  001D58  6F7F               	movwf	(Mcp2515WriteCanId@buf+4)& (0+255),b
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;mcp2515.c: 247: canid = (uint16_t)( can_id / 0x10000L );
  2984  001D5A  C075  F081         	movff	Mcp2515WriteCanId@can_id+2,Mcp2515WriteCanId@canid
  2985  001D5E  C076  F082         	movff	Mcp2515WriteCanId@can_id+3,Mcp2515WriteCanId@canid+1
  2986                           
  2987                           ; BSR set to: 0
  2988                           ;mcp2515.c: 248: buf[1+2] = (uint8_t) (canid & 0x03);
  2989  001D62  0100               	movlb	0	; () banked
  2990  001D64  5181               	movf	Mcp2515WriteCanId@canid& (0+255),w,b
  2991  001D66  0B03               	andlw	3
  2992  001D68  0100               	movlb	0	; () banked
  2993  001D6A  6F7E               	movwf	(Mcp2515WriteCanId@buf+3)& (0+255),b
  2994                           
  2995                           ; BSR set to: 0
  2996                           ;mcp2515.c: 249: buf[1+2] += (uint8_t) ((canid & 0x1C )*8);
  2997  001D6C  C081  F077         	movff	Mcp2515WriteCanId@canid,??_Mcp2515WriteCanId
  2998  001D70  0E1C               	movlw	28
  2999  001D72  0100               	movlb	0	; () banked
  3000  001D74  1777               	andwf	??_Mcp2515WriteCanId& (0+255),f,b
  3001  001D76  0100               	movlb	0	; () banked
  3002  001D78  90D8               	bcf	status,0,c
  3003  001D7A  3777               	rlcf	??_Mcp2515WriteCanId& (0+255),f,b
  3004  001D7C  0100               	movlb	0	; () banked
  3005  001D7E  90D8               	bcf	status,0,c
  3006  001D80  3777               	rlcf	??_Mcp2515WriteCanId& (0+255),f,b
  3007  001D82  0100               	movlb	0	; () banked
  3008  001D84  90D8               	bcf	status,0,c
  3009  001D86  3577               	rlcf	??_Mcp2515WriteCanId& (0+255),w,b
  3010  001D88  0100               	movlb	0	; () banked
  3011  001D8A  277E               	addwf	(Mcp2515WriteCanId@buf+3)& (0+255),f,b
  3012                           
  3013                           ; BSR set to: 0
  3014                           ;mcp2515.c: 250: buf[1+2] |= 0x08;
  3015  001D8C  0100               	movlb	0	; () banked
  3016  001D8E  877E               	bsf	(Mcp2515WriteCanId@buf+3)& (0+255),3,b
  3017                           
  3018                           ; BSR set to: 0
  3019                           ;mcp2515.c: 251: buf[0+2] = (uint8_t) (canid / 32 );
  3020  001D90  C081  F077         	movff	Mcp2515WriteCanId@canid,??_Mcp2515WriteCanId
  3021  001D94  C082  F078         	movff	Mcp2515WriteCanId@canid+1,??_Mcp2515WriteCanId+1
  3022  001D98  0E05               	movlw	5
  3023  001D9A  0100               	movlb	0	; () banked
  3024  001D9C  6F79               	movwf	(??_Mcp2515WriteCanId+2)& (0+255),b
  3025  001D9E                     u825:
  3026  001D9E  0100               	movlb	0	; () banked
  3027  001DA0  90D8               	bcf	status,0,c
  3028  001DA2  3378               	rrcf	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  3029  001DA4  3377               	rrcf	??_Mcp2515WriteCanId& (0+255),f,b
  3030  001DA6  0100               	movlb	0	; () banked
  3031  001DA8  2F79               	decfsz	(??_Mcp2515WriteCanId+2)& (0+255),f,b
  3032  001DAA  D7F9               	goto	u825
  3033  001DAC  0100               	movlb	0	; () banked
  3034  001DAE  5177               	movf	??_Mcp2515WriteCanId& (0+255),w,b
  3035  001DB0  0100               	movlb	0	; () banked
  3036  001DB2  6F7D               	movwf	(Mcp2515WriteCanId@buf+2)& (0+255),b
  3037                           
  3038                           ;mcp2515.c: 252: }
  3039  001DB4  D02C               	goto	l1805
  3040  001DB6                     l1799:
  3041                           
  3042                           ; BSR set to: 0
  3043                           ;mcp2515.c: 254: else
  3044                           ;mcp2515.c: 255: {
  3045                           ;mcp2515.c: 256: buf[0+2] = (uint8_t) (canid >> 3);
  3046  001DB6  C081  F077         	movff	Mcp2515WriteCanId@canid,??_Mcp2515WriteCanId
  3047  001DBA  C082  F078         	movff	Mcp2515WriteCanId@canid+1,??_Mcp2515WriteCanId+1
  3048  001DBE  0100               	movlb	0	; () banked
  3049  001DC0  90D8               	bcf	status,0,c
  3050  001DC2  3378               	rrcf	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  3051  001DC4  3377               	rrcf	??_Mcp2515WriteCanId& (0+255),f,b
  3052  001DC6  0100               	movlb	0	; () banked
  3053  001DC8  90D8               	bcf	status,0,c
  3054  001DCA  3378               	rrcf	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  3055  001DCC  3377               	rrcf	??_Mcp2515WriteCanId& (0+255),f,b
  3056  001DCE  0100               	movlb	0	; () banked
  3057  001DD0  90D8               	bcf	status,0,c
  3058  001DD2  3378               	rrcf	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  3059  001DD4  3377               	rrcf	??_Mcp2515WriteCanId& (0+255),f,b
  3060  001DD6  0100               	movlb	0	; () banked
  3061  001DD8  5177               	movf	??_Mcp2515WriteCanId& (0+255),w,b
  3062  001DDA  0100               	movlb	0	; () banked
  3063  001DDC  6F7D               	movwf	(Mcp2515WriteCanId@buf+2)& (0+255),b
  3064                           
  3065                           ;mcp2515.c: 257: buf[1+2] = (uint8_t) ((canid & 0x07 )*32);
  3066  001DDE  C081  F077         	movff	Mcp2515WriteCanId@canid,??_Mcp2515WriteCanId
  3067  001DE2  0E07               	movlw	7
  3068  001DE4  0100               	movlb	0	; () banked
  3069  001DE6  1777               	andwf	??_Mcp2515WriteCanId& (0+255),f,b
  3070  001DE8  0E05               	movlw	5
  3071  001DEA  0100               	movlb	0	; () banked
  3072  001DEC  6F78               	movwf	(??_Mcp2515WriteCanId+1)& (0+255),b
  3073  001DEE                     u835:
  3074  001DEE  0100               	movlb	0	; () banked
  3075  001DF0  90D8               	bcf	status,0,c
  3076  001DF2  3777               	rlcf	??_Mcp2515WriteCanId& (0+255),f,b
  3077  001DF4  0100               	movlb	0	; () banked
  3078  001DF6  2F78               	decfsz	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  3079  001DF8  D7FA               	goto	u835
  3080  001DFA  0100               	movlb	0	; () banked
  3081  001DFC  5177               	movf	??_Mcp2515WriteCanId& (0+255),w,b
  3082  001DFE  0100               	movlb	0	; () banked
  3083  001E00  6F7E               	movwf	(Mcp2515WriteCanId@buf+3)& (0+255),b
  3084                           
  3085                           ; BSR set to: 0
  3086                           ;mcp2515.c: 258: buf[3+2] = 0;
  3087  001E02  0E00               	movlw	0
  3088  001E04  0100               	movlb	0	; () banked
  3089  001E06  6F80               	movwf	(Mcp2515WriteCanId@buf+5)& (0+255),b
  3090                           
  3091                           ; BSR set to: 0
  3092                           ;mcp2515.c: 259: buf[2+2] = 0;
  3093  001E08  0E00               	movlw	0
  3094  001E0A  0100               	movlb	0	; () banked
  3095  001E0C  6F7F               	movwf	(Mcp2515WriteCanId@buf+4)& (0+255),b
  3096  001E0E                     l1805:
  3097                           
  3098                           ; BSR set to: 0
  3099                           ;mcp2515.c: 260: }
  3100                           ;mcp2515.c: 261: Spi_Write(buf,6);
  3101  001E0E  0E7B               	movlw	low Mcp2515WriteCanId@buf
  3102  001E10  0100               	movlb	0	; () banked
  3103  001E12  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3104  001E14  0E00               	movlw	high Mcp2515WriteCanId@buf
  3105  001E16  0100               	movlb	0	; () banked
  3106  001E18  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3107  001E1A  0E06               	movlw	6
  3108  001E1C  0100               	movlb	0	; () banked
  3109  001E1E  6F6E               	movwf	Spi_Write@size& (0+255),b
  3110  001E20  0E00               	movlw	0
  3111  001E22  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3112  001E24  0E00               	movlw	0
  3113  001E26  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3114  001E28  0E00               	movlw	0
  3115  001E2A  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3116  001E2C  EC60  F012         	call	_Spi_Write	;wreg free
  3117  001E30  0012               	return		;funcret
  3118  001E32                     __end_of_Mcp2515WriteCanId:
  3119                           	opt stack 0
  3120                           tblptru	equ	0xFF8
  3121                           tblptrh	equ	0xFF7
  3122                           tblptrl	equ	0xFF6
  3123                           tablat	equ	0xFF5
  3124                           prodh	equ	0xFF4
  3125                           prodl	equ	0xFF3
  3126                           intcon	equ	0xFF2
  3127                           intcon2	equ	0xFF1
  3128                           intcon3	equ	0xFF0
  3129                           postinc0	equ	0xFEE
  3130                           wreg	equ	0xFE8
  3131                           indf1	equ	0xFE7
  3132                           postinc1	equ	0xFE6
  3133                           postdec1	equ	0xFE5
  3134                           fsr1h	equ	0xFE2
  3135                           fsr1l	equ	0xFE1
  3136                           indf2	equ	0xFDF
  3137                           postinc2	equ	0xFDE
  3138                           fsr2h	equ	0xFDA
  3139                           fsr2l	equ	0xFD9
  3140                           status	equ	0xFD8
  3141                           
  3142 ;; *************** function _Spi_Write *****************
  3143 ;; Defined at:
  3144 ;;		line 327 in file "can.c"
  3145 ;; Parameters:    Size  Location     Type
  3146 ;;  tx              2   12[BANK0 ] PTR unsigned char 
  3147 ;;		 -> Mcp2515WriteCanMsg@buf(10), Mcp2515WriteCanId@buf(6), Mcp2515Sleep@cmdMask4(3), Mcp2515_Init@cmdWrite3(3), 
  3148 ;;		 -> Mcp2515_Init@cmdMask4(4), Mcp2515_Reset@cmd(1), Can_SendMessage@buf(4), Can_ReadMessage@buf(4), 
  3149 ;;  size            4   14[BANK0 ] unsigned long 
  3150 ;; Auto vars:     Size  Location     Type
  3151 ;;		None
  3152 ;; Return value:  Size  Location     Type
  3153 ;;                  1    wreg      void 
  3154 ;; Registers used:
  3155 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3156 ;; Tracked objects:
  3157 ;;		On entry : 0/0
  3158 ;;		On exit  : 0/0
  3159 ;;		Unchanged: 0/0
  3160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3161 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3164 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3165 ;;Total ram usage:        6 bytes
  3166 ;; Hardware stack levels used:    1
  3167 ;; Hardware stack levels required when called:    9
  3168 ;; This function calls:
  3169 ;;		_SPIRW
  3170 ;; This function is called by:
  3171 ;;		_Mcp2515_Reset
  3172 ;;		_Mcp2515_Init
  3173 ;;		_Mcp2515WriteCanId
  3174 ;;		_Mcp2515Sleep
  3175 ;; This function uses a non-reentrant model
  3176 ;;
  3177                           
  3178                           	psect	text9
  3179  0024C0                     __ptext9:
  3180                           	opt stack 0
  3181  0024C0                     _Spi_Write:
  3182                           	opt stack 18
  3183                           
  3184                           ;can.c: 329: SPIRW(tx, 0, size);
  3185                           
  3186                           ;incstack = 0
  3187  0024C0  C06C  F060         	movff	Spi_Write@tx,SPIRW@tx
  3188  0024C4  C06D  F061         	movff	Spi_Write@tx+1,SPIRW@tx+1
  3189  0024C8  0E00               	movlw	0
  3190  0024CA  0100               	movlb	0	; () banked
  3191  0024CC  6F62               	movwf	SPIRW@rx& (0+255),b
  3192  0024CE  0E00               	movlw	0
  3193  0024D0  0100               	movlb	0	; () banked
  3194  0024D2  6F63               	movwf	(SPIRW@rx+1)& (0+255),b
  3195  0024D4  C06E  F064         	movff	Spi_Write@size,SPIRW@size
  3196  0024D8  C06F  F065         	movff	Spi_Write@size+1,SPIRW@size+1
  3197  0024DC  C070  F066         	movff	Spi_Write@size+2,SPIRW@size+2
  3198  0024E0  C071  F067         	movff	Spi_Write@size+3,SPIRW@size+3
  3199  0024E4  ECF5  F00F         	call	_SPIRW	;wreg free
  3200  0024E8  0012               	return		;funcret
  3201  0024EA                     __end_of_Spi_Write:
  3202                           	opt stack 0
  3203                           tblptru	equ	0xFF8
  3204                           tblptrh	equ	0xFF7
  3205                           tblptrl	equ	0xFF6
  3206                           tablat	equ	0xFF5
  3207                           prodh	equ	0xFF4
  3208                           prodl	equ	0xFF3
  3209                           intcon	equ	0xFF2
  3210                           intcon2	equ	0xFF1
  3211                           intcon3	equ	0xFF0
  3212                           postinc0	equ	0xFEE
  3213                           wreg	equ	0xFE8
  3214                           indf1	equ	0xFE7
  3215                           postinc1	equ	0xFE6
  3216                           postdec1	equ	0xFE5
  3217                           fsr1h	equ	0xFE2
  3218                           fsr1l	equ	0xFE1
  3219                           indf2	equ	0xFDF
  3220                           postinc2	equ	0xFDE
  3221                           fsr2h	equ	0xFDA
  3222                           fsr2l	equ	0xFD9
  3223                           status	equ	0xFD8
  3224                           
  3225 ;; *************** function _SPIRW *****************
  3226 ;; Defined at:
  3227 ;;		line 288 in file "can.c"
  3228 ;; Parameters:    Size  Location     Type
  3229 ;;  tx              2    0[BANK0 ] PTR const unsigned char 
  3230 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515WriteCanMsg@buf(10), Mcp2515WriteCanId@buf(6), Mcp2515ReadCanMsg@cmd(10),
      + 
  3231 ;;		 -> Mcp2515ReadCanId@msg(6), Mcp2515Sleep@cmdMask4(3), Mcp2515_Init@cmdWrite3(3), Mcp2515_Init@cmdMask4(4), 
  3232 ;;		 -> Mcp2515_Reset@cmd(1), Can_SendMessage@buf(4), Can_ReadMessage@buf(4), Can_GetStatus@msg4(4), 
  3233 ;;		 -> Can_GetStatus@msg(3), 
  3234 ;;  rx              2    2[BANK0 ] PTR unsigned char 
  3235 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515ReadCanMsg@cmd(10), Mcp2515ReadCanId@msg(6), Can_ReadMessage@buf(4), 
  3236 ;;		 -> Can_GetStatus@msg4(4), Can_GetStatus@msg(3), NULL(0), 
  3237 ;;  size            4    4[BANK0 ] unsigned long 
  3238 ;; Auto vars:     Size  Location     Type
  3239 ;;  i               4    8[BANK0 ] unsigned long 
  3240 ;; Return value:  Size  Location     Type
  3241 ;;                  1    wreg      void 
  3242 ;; Registers used:
  3243 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3244 ;; Tracked objects:
  3245 ;;		On entry : 0/0
  3246 ;;		On exit  : 0/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3249 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3250 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3252 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3253 ;;Total ram usage:       12 bytes
  3254 ;; Hardware stack levels used:    1
  3255 ;; Hardware stack levels required when called:    8
  3256 ;; This function calls:
  3257 ;;		Nothing
  3258 ;; This function is called by:
  3259 ;;		_Spi_Write
  3260 ;; This function uses a non-reentrant model
  3261 ;;
  3262                           
  3263                           	psect	text10
  3264  001FEA                     __ptext10:
  3265                           	opt stack 0
  3266  001FEA                     _SPIRW:
  3267                           	opt stack 18
  3268                           
  3269                           ;can.c: 290: uint32_t i;
  3270                           ;can.c: 292: SSPCON1 = 0b00111010;
  3271                           
  3272                           ;incstack = 0
  3273  001FEA  0E3A               	movlw	58
  3274  001FEC  6EC6               	movwf	4038,c	;volatile
  3275                           
  3276                           ;can.c: 294: LATD1 = 0;
  3277  001FEE  928C               	bcf	3980,1,c	;volatile
  3278                           
  3279                           ;can.c: 295: for(i=0;i<size;i++)
  3280  001FF0  0E00               	movlw	0
  3281  001FF2  0100               	movlb	0	; () banked
  3282  001FF4  6F68               	movwf	SPIRW@i& (0+255),b
  3283  001FF6  0E00               	movlw	0
  3284  001FF8  6F69               	movwf	(SPIRW@i+1)& (0+255),b
  3285  001FFA  0E00               	movlw	0
  3286  001FFC  6F6A               	movwf	(SPIRW@i+2)& (0+255),b
  3287  001FFE  0E00               	movlw	0
  3288  002000  6F6B               	movwf	(SPIRW@i+3)& (0+255),b
  3289  002002  D028               	goto	l1609
  3290  002004                     l1601:
  3291                           
  3292                           ; BSR set to: 0
  3293                           ;can.c: 296: {
  3294                           ;can.c: 297: SSPBUF = tx[i];
  3295  002004  0100               	movlb	0	; () banked
  3296  002006  5168               	movf	SPIRW@i& (0+255),w,b
  3297  002008  0100               	movlb	0	; () banked
  3298  00200A  2560               	addwf	SPIRW@tx& (0+255),w,b
  3299  00200C  6ED9               	movwf	fsr2l,c
  3300  00200E  0100               	movlb	0	; () banked
  3301  002010  5169               	movf	(SPIRW@i+1)& (0+255),w,b
  3302  002012  0100               	movlb	0	; () banked
  3303  002014  2161               	addwfc	(SPIRW@tx+1)& (0+255),w,b
  3304  002016  6EDA               	movwf	fsr2h,c
  3305  002018  50DF               	movf	indf2,w,c
  3306  00201A  6EC9               	movwf	4041,c	;volatile
  3307  00201C                     l192:
  3308  00201C  A69E               	btfss	3998,3,c	;volatile
  3309  00201E  D7FE               	goto	l192
  3310                           
  3311                           ;can.c: 299: SSP1IF = 0;
  3312  002020  969E               	bcf	3998,3,c	;volatile
  3313                           
  3314                           ;can.c: 300: if(rx != 0)
  3315  002022  0100               	movlb	0	; () banked
  3316  002024  5162               	movf	SPIRW@rx& (0+255),w,b
  3317  002026  0100               	movlb	0	; () banked
  3318  002028  1163               	iorwf	(SPIRW@rx+1)& (0+255),w,b
  3319  00202A  B4D8               	btfsc	status,2,c
  3320  00202C  D00C               	goto	l1607
  3321                           
  3322                           ; BSR set to: 0
  3323                           ;can.c: 301: rx[i] = SSPBUF;
  3324  00202E  0100               	movlb	0	; () banked
  3325  002030  5168               	movf	SPIRW@i& (0+255),w,b
  3326  002032  0100               	movlb	0	; () banked
  3327  002034  2562               	addwf	SPIRW@rx& (0+255),w,b
  3328  002036  6ED9               	movwf	fsr2l,c
  3329  002038  0100               	movlb	0	; () banked
  3330  00203A  5169               	movf	(SPIRW@i+1)& (0+255),w,b
  3331  00203C  0100               	movlb	0	; () banked
  3332  00203E  2163               	addwfc	(SPIRW@rx+1)& (0+255),w,b
  3333  002040  6EDA               	movwf	fsr2h,c
  3334  002042  CFC9 FFDF          	movff	4041,indf2	;volatile
  3335  002046                     l1607:
  3336                           
  3337                           ; BSR set to: 0
  3338  002046  0E01               	movlw	1
  3339  002048  0100               	movlb	0	; () banked
  3340  00204A  2768               	addwf	SPIRW@i& (0+255),f,b
  3341  00204C  0E00               	movlw	0
  3342  00204E  2369               	addwfc	(SPIRW@i+1)& (0+255),f,b
  3343  002050  236A               	addwfc	(SPIRW@i+2)& (0+255),f,b
  3344  002052  236B               	addwfc	(SPIRW@i+3)& (0+255),f,b
  3345  002054                     l1609:
  3346                           
  3347                           ; BSR set to: 0
  3348  002054  0100               	movlb	0	; () banked
  3349  002056  5164               	movf	SPIRW@size& (0+255),w,b
  3350  002058  0100               	movlb	0	; () banked
  3351  00205A  5D68               	subwf	SPIRW@i& (0+255),w,b
  3352  00205C  0100               	movlb	0	; () banked
  3353  00205E  5165               	movf	(SPIRW@size+1)& (0+255),w,b
  3354  002060  0100               	movlb	0	; () banked
  3355  002062  5969               	subwfb	(SPIRW@i+1)& (0+255),w,b
  3356  002064  0100               	movlb	0	; () banked
  3357  002066  5166               	movf	(SPIRW@size+2)& (0+255),w,b
  3358  002068  0100               	movlb	0	; () banked
  3359  00206A  596A               	subwfb	(SPIRW@i+2)& (0+255),w,b
  3360  00206C  0100               	movlb	0	; () banked
  3361  00206E  5167               	movf	(SPIRW@size+3)& (0+255),w,b
  3362  002070  0100               	movlb	0	; () banked
  3363  002072  596B               	subwfb	(SPIRW@i+3)& (0+255),w,b
  3364  002074  A0D8               	btfss	status,0,c
  3365  002076  D7C6               	goto	l1601
  3366                           
  3367                           ; BSR set to: 0
  3368                           ;can.c: 302: }
  3369                           ;can.c: 303: LATD1 = 1;
  3370  002078  828C               	bsf	3980,1,c	;volatile
  3371                           
  3372                           ; BSR set to: 0
  3373  00207A  0012               	return		;funcret
  3374  00207C                     __end_of_SPIRW:
  3375                           	opt stack 0
  3376                           tblptru	equ	0xFF8
  3377                           tblptrh	equ	0xFF7
  3378                           tblptrl	equ	0xFF6
  3379                           tablat	equ	0xFF5
  3380                           prodh	equ	0xFF4
  3381                           prodl	equ	0xFF3
  3382                           intcon	equ	0xFF2
  3383                           intcon2	equ	0xFF1
  3384                           intcon3	equ	0xFF0
  3385                           postinc0	equ	0xFEE
  3386                           wreg	equ	0xFE8
  3387                           indf1	equ	0xFE7
  3388                           postinc1	equ	0xFE6
  3389                           postdec1	equ	0xFE5
  3390                           fsr1h	equ	0xFE2
  3391                           fsr1l	equ	0xFE1
  3392                           indf2	equ	0xFDF
  3393                           postinc2	equ	0xFDE
  3394                           fsr2h	equ	0xFDA
  3395                           fsr2l	equ	0xFD9
  3396                           status	equ	0xFD8
  3397                           
  3398 ;; *************** function _high_isr *****************
  3399 ;; Defined at:
  3400 ;;		line 3 in file "interrupt.c"
  3401 ;; Parameters:    Size  Location     Type
  3402 ;;		None
  3403 ;; Auto vars:     Size  Location     Type
  3404 ;;		None
  3405 ;; Return value:  Size  Location     Type
  3406 ;;                  1    wreg      void 
  3407 ;; Registers used:
  3408 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3409 ;; Tracked objects:
  3410 ;;		On entry : 0/0
  3411 ;;		On exit  : 0/0
  3412 ;;		Unchanged: 0/0
  3413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3416 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3417 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3418 ;;Total ram usage:       14 bytes
  3419 ;; Hardware stack levels used:    1
  3420 ;; Hardware stack levels required when called:    7
  3421 ;; This function calls:
  3422 ;;		_Can_Isr
  3423 ;; This function is called by:
  3424 ;;		Interrupt level 2
  3425 ;; This function uses a non-reentrant model
  3426 ;;
  3427                           
  3428                           	psect	intcode
  3429  000008                     __pintcode:
  3430                           	opt stack 0
  3431  000008                     _high_isr:
  3432                           	opt stack 17
  3433                           
  3434                           ; BSR set to: 0
  3435                           ;incstack = 0
  3436  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3437  00000A  CFFA F04A          	movff	pclath,??_high_isr
  3438  00000E  CFFB F04B          	movff	pclatu,??_high_isr+1
  3439  000012  CFE9 F04C          	movff	fsr0l,??_high_isr+2
  3440  000016  CFEA F04D          	movff	fsr0h,??_high_isr+3
  3441  00001A  CFE1 F04E          	movff	fsr1l,??_high_isr+4
  3442  00001E  CFE2 F04F          	movff	fsr1h,??_high_isr+5
  3443  000022  CFD9 F050          	movff	fsr2l,??_high_isr+6
  3444  000026  CFDA F051          	movff	fsr2h,??_high_isr+7
  3445  00002A  CFF3 F052          	movff	prodl,??_high_isr+8
  3446  00002E  CFF4 F053          	movff	prodh,??_high_isr+9
  3447  000032  CFF6 F054          	movff	tblptrl,??_high_isr+10
  3448  000036  CFF7 F055          	movff	tblptrh,??_high_isr+11
  3449  00003A  CFF8 F056          	movff	tblptru,??_high_isr+12
  3450  00003E  CFF5 F057          	movff	tablat,??_high_isr+13
  3451                           
  3452                           ;interrupt.c: 4: if((INT3IF == 1)&&(INT3IE == 1))
  3453  000042  B4F0               	btfsc	intcon3,2,c	;volatile
  3454  000044  AAF0               	btfss	intcon3,5,c	;volatile
  3455  000046  D005               	goto	i2l238
  3456                           
  3457                           ;interrupt.c: 5: {
  3458                           ;interrupt.c: 6: INT3IF = 0;
  3459  000048  94F0               	bcf	intcon3,2,c	;volatile
  3460                           
  3461                           ;interrupt.c: 7: Can_Isr();
  3462  00004A  ECDE  F011         	call	_Can_Isr	;wreg free
  3463                           
  3464                           ;interrupt.c: 8: if(RB3 == 0)
  3465  00004E  A681               	btfss	3969,3,c	;volatile
  3466                           
  3467                           ;interrupt.c: 9: {
  3468                           ;interrupt.c: 10: INT3IF = 1;
  3469  000050  84F0               	bsf	intcon3,2,c	;volatile
  3470  000052                     i2l238:
  3471  000052  C057  FFF5         	movff	??_high_isr+13,tablat
  3472  000056  C056  FFF8         	movff	??_high_isr+12,tblptru
  3473  00005A  C055  FFF7         	movff	??_high_isr+11,tblptrh
  3474  00005E  C054  FFF6         	movff	??_high_isr+10,tblptrl
  3475  000062  C053  FFF4         	movff	??_high_isr+9,prodh
  3476  000066  C052  FFF3         	movff	??_high_isr+8,prodl
  3477  00006A  C051  FFDA         	movff	??_high_isr+7,fsr2h
  3478  00006E  C050  FFD9         	movff	??_high_isr+6,fsr2l
  3479  000072  C04F  FFE2         	movff	??_high_isr+5,fsr1h
  3480  000076  C04E  FFE1         	movff	??_high_isr+4,fsr1l
  3481  00007A  C04D  FFEA         	movff	??_high_isr+3,fsr0h
  3482  00007E  C04C  FFE9         	movff	??_high_isr+2,fsr0l
  3483  000082  C04B  FFFB         	movff	??_high_isr+1,pclatu
  3484  000086  C04A  FFFA         	movff	??_high_isr,pclath
  3485  00008A  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3486  00008C  0011               	retfie		f
  3487  00008E                     __end_of_high_isr:
  3488                           	opt stack 0
  3489                           pclatu	equ	0xFFB
  3490                           pclath	equ	0xFFA
  3491                           tblptru	equ	0xFF8
  3492                           tblptrh	equ	0xFF7
  3493                           tblptrl	equ	0xFF6
  3494                           tablat	equ	0xFF5
  3495                           prodh	equ	0xFF4
  3496                           prodl	equ	0xFF3
  3497                           intcon	equ	0xFF2
  3498                           intcon2	equ	0xFF1
  3499                           intcon3	equ	0xFF0
  3500                           postinc0	equ	0xFEE
  3501                           fsr0h	equ	0xFEA
  3502                           fsr0l	equ	0xFE9
  3503                           wreg	equ	0xFE8
  3504                           indf1	equ	0xFE7
  3505                           postinc1	equ	0xFE6
  3506                           postdec1	equ	0xFE5
  3507                           fsr1h	equ	0xFE2
  3508                           fsr1l	equ	0xFE1
  3509                           indf2	equ	0xFDF
  3510                           postinc2	equ	0xFDE
  3511                           fsr2h	equ	0xFDA
  3512                           fsr2l	equ	0xFD9
  3513                           status	equ	0xFD8
  3514                           
  3515 ;; *************** function _Can_Isr *****************
  3516 ;; Defined at:
  3517 ;;		line 50 in file "can.c"
  3518 ;; Parameters:    Size  Location     Type
  3519 ;;		None
  3520 ;; Auto vars:     Size  Location     Type
  3521 ;;  retCode         1   72[COMRAM] unsigned char 
  3522 ;; Return value:  Size  Location     Type
  3523 ;;                  1    wreg      void 
  3524 ;; Registers used:
  3525 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3526 ;; Tracked objects:
  3527 ;;		On entry : 0/0
  3528 ;;		On exit  : 0/0
  3529 ;;		Unchanged: 0/0
  3530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3532 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3533 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3534 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3535 ;;Total ram usage:        2 bytes
  3536 ;; Hardware stack levels used:    1
  3537 ;; Hardware stack levels required when called:    6
  3538 ;; This function calls:
  3539 ;;		_Can_GetStatus
  3540 ;;		_Can_OutBufferStatus
  3541 ;;		_Can_ReadInBuffer
  3542 ;;		_Can_WriteOutBuffer
  3543 ;; This function is called by:
  3544 ;;		_high_isr
  3545 ;; This function uses a non-reentrant model
  3546 ;;
  3547                           
  3548                           	psect	text12
  3549  0023BC                     __ptext12:
  3550                           	opt stack 0
  3551  0023BC                     _Can_Isr:
  3552                           	opt stack 17
  3553                           
  3554                           ;can.c: 52: static uint8_t nbTxBuf=3;
  3555                           ;can.c: 53: uint8_t retCode;
  3556                           ;can.c: 55: retCode = Can_GetStatus();
  3557                           
  3558                           ;incstack = 0
  3559  0023BC  EC83  F011         	call	_Can_GetStatus	;wreg free
  3560  0023C0  6E49               	movwf	Can_Isr@retCode,c
  3561                           
  3562                           ;can.c: 57: if((retCode & 0x03) != 0)
  3563  0023C2  C049  F048         	movff	Can_Isr@retCode,??_Can_Isr
  3564  0023C6  0E03               	movlw	3
  3565  0023C8  1648               	andwf	??_Can_Isr,f,c
  3566  0023CA  A4D8               	btfss	status,2,c
  3567                           
  3568                           ;can.c: 58: {
  3569                           ;can.c: 59: Can_ReadInBuffer();
  3570  0023CC  EC02  F012         	call	_Can_ReadInBuffer	;wreg free
  3571                           
  3572                           ;can.c: 60: }
  3573                           ;can.c: 62: if((retCode & 0x1C) != 0)
  3574  0023D0  C049  F048         	movff	Can_Isr@retCode,??_Can_Isr
  3575  0023D4  0E1C               	movlw	28
  3576  0023D6  1648               	andwf	??_Can_Isr,f,c
  3577  0023D8  B4D8               	btfsc	status,2,c
  3578  0023DA  D00B               	goto	i2l2143
  3579                           
  3580                           ;can.c: 63: {
  3581                           ;can.c: 64: if((retCode & 0x10) != 0)
  3582  0023DC  B849               	btfsc	Can_Isr@retCode,4,c
  3583                           
  3584                           ;can.c: 65: {
  3585                           ;can.c: 66: nbTxBuf++;
  3586  0023DE  2A5E               	incf	Can_Isr@nbTxBuf,f,c
  3587                           
  3588                           ;can.c: 67: }
  3589                           ;can.c: 68: if((retCode & 0x08) != 0)
  3590  0023E0  B649               	btfsc	Can_Isr@retCode,3,c
  3591                           
  3592                           ;can.c: 69: {
  3593                           ;can.c: 70: nbTxBuf++;
  3594  0023E2  2A5E               	incf	Can_Isr@nbTxBuf,f,c
  3595                           
  3596                           ;can.c: 71: }
  3597                           ;can.c: 72: if((retCode & 0x04) != 0)
  3598  0023E4  A449               	btfss	Can_Isr@retCode,2,c
  3599  0023E6  D005               	goto	i2l2143
  3600                           
  3601                           ;can.c: 73: {
  3602                           ;can.c: 74: nbTxBuf++;
  3603  0023E8  2A5E               	incf	Can_Isr@nbTxBuf,f,c
  3604                           
  3605                           ;can.c: 75: }
  3606                           ;can.c: 76: }
  3607                           ;can.c: 78: while((Can_OutBufferStatus() != 0) && (nbTxBuf != 0))
  3608  0023EA  D003               	goto	i2l2143
  3609  0023EC                     i2l2139:
  3610                           
  3611                           ;can.c: 79: {
  3612                           ;can.c: 80: Can_WriteOutBuffer();
  3613  0023EC  EC9B  F012         	call	_Can_WriteOutBuffer	;wreg free
  3614                           
  3615                           ;can.c: 81: nbTxBuf--;
  3616  0023F0  065E               	decf	Can_Isr@nbTxBuf,f,c
  3617  0023F2                     i2l2143:
  3618  0023F2  ECBB  F012         	call	_Can_OutBufferStatus	;wreg free
  3619  0023F6  0900               	iorlw	0
  3620  0023F8  B4D8               	btfsc	status,2,c
  3621  0023FA  0012               	return	
  3622  0023FC  505E               	movf	Can_Isr@nbTxBuf,w,c
  3623  0023FE  B4D8               	btfsc	status,2,c
  3624  002400  0012               	return	
  3625  002402  D7F4               	goto	i2l2139
  3626  002404                     __end_of_Can_Isr:
  3627                           	opt stack 0
  3628                           pclatu	equ	0xFFB
  3629                           pclath	equ	0xFFA
  3630                           tblptru	equ	0xFF8
  3631                           tblptrh	equ	0xFF7
  3632                           tblptrl	equ	0xFF6
  3633                           tablat	equ	0xFF5
  3634                           prodh	equ	0xFF4
  3635                           prodl	equ	0xFF3
  3636                           intcon	equ	0xFF2
  3637                           intcon2	equ	0xFF1
  3638                           intcon3	equ	0xFF0
  3639                           postinc0	equ	0xFEE
  3640                           fsr0h	equ	0xFEA
  3641                           fsr0l	equ	0xFE9
  3642                           wreg	equ	0xFE8
  3643                           indf1	equ	0xFE7
  3644                           postinc1	equ	0xFE6
  3645                           postdec1	equ	0xFE5
  3646                           fsr1h	equ	0xFE2
  3647                           fsr1l	equ	0xFE1
  3648                           indf2	equ	0xFDF
  3649                           postinc2	equ	0xFDE
  3650                           fsr2h	equ	0xFDA
  3651                           fsr2l	equ	0xFD9
  3652                           status	equ	0xFD8
  3653                           
  3654 ;; *************** function _Can_WriteOutBuffer *****************
  3655 ;; Defined at:
  3656 ;;		line 127 in file "can.c"
  3657 ;; Parameters:    Size  Location     Type
  3658 ;;		None
  3659 ;; Auto vars:     Size  Location     Type
  3660 ;;		None
  3661 ;; Return value:  Size  Location     Type
  3662 ;;                  1    wreg      unsigned char 
  3663 ;; Registers used:
  3664 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3665 ;; Tracked objects:
  3666 ;;		On entry : 0/0
  3667 ;;		On exit  : 0/0
  3668 ;;		Unchanged: 0/0
  3669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3674 ;;Total ram usage:        0 bytes
  3675 ;; Hardware stack levels used:    1
  3676 ;; Hardware stack levels required when called:    5
  3677 ;; This function calls:
  3678 ;;		_Can_SendMessage
  3679 ;; This function is called by:
  3680 ;;		_Can_Isr
  3681 ;; This function uses a non-reentrant model
  3682 ;;
  3683                           
  3684                           	psect	text13
  3685  002536                     __ptext13:
  3686                           	opt stack 0
  3687  002536                     _Can_WriteOutBuffer:
  3688                           	opt stack 17
  3689                           
  3690                           ;can.c: 129: Can_SendMessage(&txBuffer[txBufferPtrOut]);
  3691                           
  3692                           ;incstack = 0
  3693  002536  505B               	movf	_txBufferPtrOut,w,c
  3694  002538  0D11               	mullw	17
  3695  00253A  0E00               	movlw	low _txBuffer
  3696  00253C  24F3               	addwf	prodl,w,c
  3697  00253E  6E36               	movwf	Can_SendMessage@msg,c
  3698  002540  0E01               	movlw	high _txBuffer
  3699  002542  20F4               	addwfc	prodh,w,c
  3700  002544  6E37               	movwf	Can_SendMessage@msg+1,c
  3701  002546  EC51  F011         	call	_Can_SendMessage	;wreg free
  3702                           
  3703                           ;can.c: 130: txBufferPtrOut = (txBufferPtrOut + 1) % 4;
  3704  00254A  285B               	incf	_txBufferPtrOut,w,c
  3705  00254C  0B03               	andlw	3
  3706  00254E  6E5B               	movwf	_txBufferPtrOut,c
  3707                           
  3708                           ;can.c: 131: txBufferCount--;
  3709  002550  0100               	movlb	0	; () banked
  3710  002552  07A8               	decf	_txBufferCount& (0+255),f,b
  3711  002554  0012               	return	
  3712  002556                     __end_of_Can_WriteOutBuffer:
  3713                           	opt stack 0
  3714                           pclatu	equ	0xFFB
  3715                           pclath	equ	0xFFA
  3716                           tblptru	equ	0xFF8
  3717                           tblptrh	equ	0xFF7
  3718                           tblptrl	equ	0xFF6
  3719                           tablat	equ	0xFF5
  3720                           prodh	equ	0xFF4
  3721                           prodl	equ	0xFF3
  3722                           intcon	equ	0xFF2
  3723                           intcon2	equ	0xFF1
  3724                           intcon3	equ	0xFF0
  3725                           postinc0	equ	0xFEE
  3726                           fsr0h	equ	0xFEA
  3727                           fsr0l	equ	0xFE9
  3728                           wreg	equ	0xFE8
  3729                           indf1	equ	0xFE7
  3730                           postinc1	equ	0xFE6
  3731                           postdec1	equ	0xFE5
  3732                           fsr1h	equ	0xFE2
  3733                           fsr1l	equ	0xFE1
  3734                           indf2	equ	0xFDF
  3735                           postinc2	equ	0xFDE
  3736                           fsr2h	equ	0xFDA
  3737                           fsr2l	equ	0xFD9
  3738                           status	equ	0xFD8
  3739                           
  3740 ;; *************** function _Can_SendMessage *****************
  3741 ;; Defined at:
  3742 ;;		line 421 in file "can.c"
  3743 ;; Parameters:    Size  Location     Type
  3744 ;;  msg             2   53[COMRAM] PTR const struct CANMESS
  3745 ;;		 -> txBuffer(68), 
  3746 ;; Auto vars:     Size  Location     Type
  3747 ;;  buf             4   55[COMRAM] unsigned char [4]
  3748 ;;  txbuf_n         1   60[COMRAM] unsigned char 
  3749 ;;  res             1   59[COMRAM] unsigned char 
  3750 ;; Return value:  Size  Location     Type
  3751 ;;                  1    wreg      unsigned char 
  3752 ;; Registers used:
  3753 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3754 ;; Tracked objects:
  3755 ;;		On entry : 0/0
  3756 ;;		On exit  : 0/0
  3757 ;;		Unchanged: 0/0
  3758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3759 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3760 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3762 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3763 ;;Total ram usage:        8 bytes
  3764 ;; Hardware stack levels used:    1
  3765 ;; Hardware stack levels required when called:    4
  3766 ;; This function calls:
  3767 ;;		_Mcp2515GetNextFreeTXBuf
  3768 ;;		_Mcp2515WriteCanMsg
  3769 ;;		i2_Spi_Write
  3770 ;; This function is called by:
  3771 ;;		_Can_WriteOutBuffer
  3772 ;; This function uses a non-reentrant model
  3773 ;;
  3774                           
  3775                           	psect	text14
  3776  0022A2                     __ptext14:
  3777                           	opt stack 0
  3778  0022A2                     _Can_SendMessage:
  3779                           	opt stack 17
  3780  0022A2                     
  3781                           ;can.c: 428: {
  3782                           ;can.c: 429: res = Mcp2515GetNextFreeTXBuf(&txbuf_n);
  3783  0022A2  0E3D               	movlw	low Can_SendMessage@txbuf_n
  3784  0022A4  6E13               	movwf	Mcp2515GetNextFreeTXBuf@txbuf_n,c
  3785  0022A6  0E00               	movlw	high Can_SendMessage@txbuf_n
  3786  0022A8  6E14               	movwf	Mcp2515GetNextFreeTXBuf@txbuf_n+1,c
  3787  0022AA  EC3E  F010         	call	_Mcp2515GetNextFreeTXBuf	;wreg free
  3788  0022AE  6E3C               	movwf	Can_SendMessage@res,c
  3789                           
  3790                           ;can.c: 431: } while (res == (2));
  3791  0022B0  0E02               	movlw	2
  3792  0022B2  183C               	xorwf	Can_SendMessage@res,w,c
  3793  0022B4  B4D8               	btfsc	status,2,c
  3794  0022B6  D7F5               	goto	i2l1919
  3795                           
  3796                           ;can.c: 433: if (res != (2))
  3797  0022B8  0E02               	movlw	2
  3798  0022BA  183C               	xorwf	Can_SendMessage@res,w,c
  3799  0022BC  B4D8               	btfsc	status,2,c
  3800  0022BE  0012               	return	
  3801                           
  3802                           ;can.c: 434: {
  3803                           ;can.c: 435: Mcp2515WriteCanMsg( txbuf_n, msg);
  3804  0022C0  C036  F024         	movff	Can_SendMessage@msg,Mcp2515WriteCanMsg@msg
  3805  0022C4  C037  F025         	movff	Can_SendMessage@msg+1,Mcp2515WriteCanMsg@msg+1
  3806  0022C8  503D               	movf	Can_SendMessage@txbuf_n,w,c
  3807  0022CA  EC7D  F00D         	call	_Mcp2515WriteCanMsg
  3808                           
  3809                           ;can.c: 436: buf[0] = 0x02;
  3810  0022CE  0E02               	movlw	2
  3811  0022D0  6E38               	movwf	Can_SendMessage@buf,c
  3812                           
  3813                           ;can.c: 437: buf[1] = txbuf_n-1;
  3814  0022D2  043D               	decf	Can_SendMessage@txbuf_n,w,c
  3815  0022D4  6E39               	movwf	Can_SendMessage@buf+1,c
  3816                           
  3817                           ;can.c: 438: buf[2] = 0x08 | msg->txPrio;
  3818  0022D6  EE20 F010          	lfsr	2,16
  3819  0022DA  5036               	movf	Can_SendMessage@msg,w,c
  3820  0022DC  26D9               	addwf	fsr2l,f,c
  3821  0022DE  5037               	movf	Can_SendMessage@msg+1,w,c
  3822  0022E0  22DA               	addwfc	fsr2h,f,c
  3823  0022E2  50DF               	movf	indf2,w,c
  3824  0022E4  0908               	iorlw	8
  3825  0022E6  6E3A               	movwf	Can_SendMessage@buf+2,c
  3826                           
  3827                           ;can.c: 439: Spi_Write(buf,3);
  3828  0022E8  0E38               	movlw	low Can_SendMessage@buf
  3829  0022EA  6E0D               	movwf	i2Spi_Write@tx,c
  3830  0022EC  0E00               	movlw	high Can_SendMessage@buf
  3831  0022EE  6E0E               	movwf	i2Spi_Write@tx+1,c
  3832  0022F0  0E03               	movlw	3
  3833  0022F2  6E0F               	movwf	i2Spi_Write@size,c
  3834  0022F4  0E00               	movlw	0
  3835  0022F6  6E10               	movwf	i2Spi_Write@size+1,c
  3836  0022F8  0E00               	movlw	0
  3837  0022FA  6E11               	movwf	i2Spi_Write@size+2,c
  3838  0022FC  0E00               	movlw	0
  3839  0022FE  6E12               	movwf	i2Spi_Write@size+3,c
  3840  002300  EC75  F012         	call	i2_Spi_Write	;wreg free
  3841                           
  3842                           ;can.c: 442: else
  3843                           ;can.c: 443: {
  3844                           ;can.c: 444: return (2);
  3845                           ;	Return value of _Can_SendMessage is never used
  3846                           
  3847                           ;can.c: 441: }
  3848                           
  3849                           ;can.c: 440: return (0);
  3850                           ;	Return value of _Can_SendMessage is never used
  3851  002304  0012               	return	
  3852  002306                     __end_of_Can_SendMessage:
  3853                           	opt stack 0
  3854                           pclatu	equ	0xFFB
  3855                           pclath	equ	0xFFA
  3856                           tblptru	equ	0xFF8
  3857                           tblptrh	equ	0xFF7
  3858                           tblptrl	equ	0xFF6
  3859                           tablat	equ	0xFF5
  3860                           prodh	equ	0xFF4
  3861                           prodl	equ	0xFF3
  3862                           intcon	equ	0xFF2
  3863                           intcon2	equ	0xFF1
  3864                           intcon3	equ	0xFF0
  3865                           postinc0	equ	0xFEE
  3866                           fsr0h	equ	0xFEA
  3867                           fsr0l	equ	0xFE9
  3868                           wreg	equ	0xFE8
  3869                           indf1	equ	0xFE7
  3870                           postinc1	equ	0xFE6
  3871                           postdec1	equ	0xFE5
  3872                           fsr1h	equ	0xFE2
  3873                           fsr1l	equ	0xFE1
  3874                           indf2	equ	0xFDF
  3875                           postinc2	equ	0xFDE
  3876                           fsr2h	equ	0xFDA
  3877                           fsr2l	equ	0xFD9
  3878                           status	equ	0xFD8
  3879                           
  3880 ;; *************** function _Mcp2515WriteCanMsg *****************
  3881 ;; Defined at:
  3882 ;;		line 272 in file "mcp2515.c"
  3883 ;; Parameters:    Size  Location     Type
  3884 ;;  buffer_sidh_    1    wreg     const unsigned char 
  3885 ;;  msg             2   35[COMRAM] PTR const struct CANMESS
  3886 ;;		 -> txBuffer(68), 
  3887 ;; Auto vars:     Size  Location     Type
  3888 ;;  buffer_sidh_    1   49[COMRAM] const unsigned char 
  3889 ;;  buf            10   39[COMRAM] unsigned char [10]
  3890 ;;  i               1   52[COMRAM] unsigned char 
  3891 ;;  mcp_addr        1   51[COMRAM] unsigned char 
  3892 ;;  dlc             1   50[COMRAM] unsigned char 
  3893 ;; Return value:  Size  Location     Type
  3894 ;;                  1    wreg      void 
  3895 ;; Registers used:
  3896 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3897 ;; Tracked objects:
  3898 ;;		On entry : 0/0
  3899 ;;		On exit  : 0/0
  3900 ;;		Unchanged: 0/0
  3901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3902 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3903 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3904 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3905 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3906 ;;Total ram usage:       18 bytes
  3907 ;; Hardware stack levels used:    1
  3908 ;; Hardware stack levels required when called:    3
  3909 ;; This function calls:
  3910 ;;		i2_Mcp2515WriteCanId
  3911 ;;		i2_Spi_Write
  3912 ;; This function is called by:
  3913 ;;		_Can_SendMessage
  3914 ;; This function uses a non-reentrant model
  3915 ;;
  3916                           
  3917                           	psect	text15
  3918  001AFA                     __ptext15:
  3919                           	opt stack 0
  3920  001AFA                     _Mcp2515WriteCanMsg:
  3921                           	opt stack 17
  3922                           
  3923                           ;incstack = 0
  3924                           ;Mcp2515WriteCanMsg@buffer_sidh_addr stored from wreg
  3925  001AFA  6E32               	movwf	Mcp2515WriteCanMsg@buffer_sidh_addr,c
  3926                           
  3927                           ;mcp2515.c: 275: uint8_t mcp_addr, i, dlc;
  3928                           ;mcp2515.c: 276: uint8_t buf[10];
  3929                           ;mcp2515.c: 277: mcp_addr = buffer_sidh_addr;
  3930  001AFC  C032  F034         	movff	Mcp2515WriteCanMsg@buffer_sidh_addr,Mcp2515WriteCanMsg@mcp_addr
  3931                           
  3932                           ;mcp2515.c: 279: buf[0] = 0x02;
  3933  001B00  0E02               	movlw	2
  3934  001B02  6E28               	movwf	Mcp2515WriteCanMsg@buf,c
  3935                           
  3936                           ;mcp2515.c: 280: buf[1] = mcp_addr+5;
  3937  001B04  5034               	movf	Mcp2515WriteCanMsg@mcp_addr,w,c
  3938  001B06  0F05               	addlw	5
  3939  001B08  6E29               	movwf	Mcp2515WriteCanMsg@buf+1,c
  3940                           
  3941                           ;mcp2515.c: 282: for(i=0;i<msg->dlc;i++)
  3942  001B0A  0E00               	movlw	0
  3943  001B0C  6E35               	movwf	Mcp2515WriteCanMsg@i,c
  3944  001B0E  D01C               	goto	i2l1747
  3945  001B10                     i2l1743:
  3946                           
  3947                           ;mcp2515.c: 283: {
  3948                           ;mcp2515.c: 284: buf[i+2] = msg->dta[i];
  3949  001B10  5035               	movf	Mcp2515WriteCanMsg@i,w,c
  3950  001B12  0D01               	mullw	1
  3951  001B14  0E06               	movlw	6
  3952  001B16  26F3               	addwf	prodl,f,c
  3953  001B18  0E00               	movlw	0
  3954  001B1A  22F4               	addwfc	prodh,f,c
  3955  001B1C  50F3               	movf	prodl,w,c
  3956  001B1E  2424               	addwf	Mcp2515WriteCanMsg@msg,w,c
  3957  001B20  6ED9               	movwf	fsr2l,c
  3958  001B22  50F4               	movf	prodh,w,c
  3959  001B24  2025               	addwfc	Mcp2515WriteCanMsg@msg+1,w,c
  3960  001B26  6EDA               	movwf	fsr2h,c
  3961  001B28  5035               	movf	Mcp2515WriteCanMsg@i,w,c
  3962  001B2A  6E26               	movwf	??_Mcp2515WriteCanMsg& (0+255),c
  3963  001B2C  6A27               	clrf	(??_Mcp2515WriteCanMsg+1)& (0+255),c
  3964  001B2E  0E02               	movlw	2
  3965  001B30  2626               	addwf	??_Mcp2515WriteCanMsg,f,c
  3966  001B32  0E00               	movlw	0
  3967  001B34  2227               	addwfc	??_Mcp2515WriteCanMsg+1,f,c
  3968  001B36  0E28               	movlw	low Mcp2515WriteCanMsg@buf
  3969  001B38  2426               	addwf	??_Mcp2515WriteCanMsg,w,c
  3970  001B3A  6EE1               	movwf	fsr1l,c
  3971  001B3C  0E00               	movlw	high Mcp2515WriteCanMsg@buf
  3972  001B3E  2027               	addwfc	??_Mcp2515WriteCanMsg+1,w,c
  3973  001B40  6EE2               	movwf	fsr1h,c
  3974  001B42  CFDF FFE7          	movff	indf2,indf1
  3975  001B46  2A35               	incf	Mcp2515WriteCanMsg@i,f,c
  3976  001B48                     i2l1747:
  3977  001B48  EE20 F005          	lfsr	2,5
  3978  001B4C  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  3979  001B4E  26D9               	addwf	fsr2l,f,c
  3980  001B50  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  3981  001B52  22DA               	addwfc	fsr2h,f,c
  3982  001B54  50DE               	movf	postinc2,w,c
  3983  001B56  5C35               	subwf	Mcp2515WriteCanMsg@i,w,c
  3984  001B58  A0D8               	btfss	status,0,c
  3985  001B5A  D7DA               	goto	i2l1743
  3986                           
  3987                           ;mcp2515.c: 285: }
  3988                           ;mcp2515.c: 286: Spi_Write(buf,msg->dlc + 2);
  3989  001B5C  0E28               	movlw	low Mcp2515WriteCanMsg@buf
  3990  001B5E  6E0D               	movwf	i2Spi_Write@tx,c
  3991  001B60  0E00               	movlw	high Mcp2515WriteCanMsg@buf
  3992  001B62  6E0E               	movwf	i2Spi_Write@tx+1,c
  3993  001B64  EE20 F005          	lfsr	2,5
  3994  001B68  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  3995  001B6A  26D9               	addwf	fsr2l,f,c
  3996  001B6C  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  3997  001B6E  22DA               	addwfc	fsr2h,f,c
  3998  001B70  50DF               	movf	indf2,w,c
  3999  001B72  6E26               	movwf	??_Mcp2515WriteCanMsg& (0+255),c
  4000  001B74  6A27               	clrf	(??_Mcp2515WriteCanMsg+1)& (0+255),c
  4001  001B76  0E02               	movlw	2
  4002  001B78  2626               	addwf	??_Mcp2515WriteCanMsg,f,c
  4003  001B7A  0E00               	movlw	0
  4004  001B7C  2227               	addwfc	??_Mcp2515WriteCanMsg+1,f,c
  4005  001B7E  C026  F00F         	movff	??_Mcp2515WriteCanMsg,i2Spi_Write@size
  4006  001B82  C027  F010         	movff	??_Mcp2515WriteCanMsg+1,i2Spi_Write@size+1
  4007  001B86  0E00               	movlw	0
  4008  001B88  BE10               	btfsc	i2Spi_Write@size+1,7,c
  4009  001B8A  0EFF               	movlw	-1
  4010  001B8C  6E11               	movwf	i2Spi_Write@size+2,c
  4011  001B8E  6E12               	movwf	i2Spi_Write@size+3,c
  4012  001B90  EC75  F012         	call	i2_Spi_Write	;wreg free
  4013                           
  4014                           ;mcp2515.c: 288: Mcp2515WriteCanId( mcp_addr,
  4015                           ;mcp2515.c: 289: msg->extended_identifier,
  4016                           ;mcp2515.c: 290: msg->identifier );
  4017  001B94  C024  FFD9         	movff	Mcp2515WriteCanMsg@msg,fsr2l
  4018  001B98  C025  FFDA         	movff	Mcp2515WriteCanMsg@msg+1,fsr2h
  4019  001B9C  50DF               	movf	indf2,w,c
  4020  001B9E  6E13               	movwf	i2Mcp2515WriteCanId@ext,c
  4021  001BA0  EE20 F001          	lfsr	2,1
  4022  001BA4  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  4023  001BA6  26D9               	addwf	fsr2l,f,c
  4024  001BA8  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  4025  001BAA  22DA               	addwfc	fsr2h,f,c
  4026  001BAC  CFDE F014          	movff	postinc2,i2Mcp2515WriteCanId@can_id
  4027  001BB0  CFDE F015          	movff	postinc2,i2Mcp2515WriteCanId@can_id+1
  4028  001BB4  CFDE F016          	movff	postinc2,i2Mcp2515WriteCanId@can_id+2
  4029  001BB8  CFDE F017          	movff	postinc2,i2Mcp2515WriteCanId@can_id+3
  4030  001BBC  5034               	movf	Mcp2515WriteCanMsg@mcp_addr,w,c
  4031  001BBE  EC96  F00F         	call	i2_Mcp2515WriteCanId
  4032                           
  4033                           ;mcp2515.c: 291: dlc = msg->dlc;
  4034  001BC2  EE20 F005          	lfsr	2,5
  4035  001BC6  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  4036  001BC8  26D9               	addwf	fsr2l,f,c
  4037  001BCA  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  4038  001BCC  22DA               	addwfc	fsr2h,f,c
  4039  001BCE  50DF               	movf	indf2,w,c
  4040  001BD0  6E33               	movwf	Mcp2515WriteCanMsg@dlc,c
  4041                           
  4042                           ;mcp2515.c: 293: if ( msg->rtr == 1)
  4043  001BD2  EE20 F00E          	lfsr	2,14
  4044  001BD6  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  4045  001BD8  26D9               	addwf	fsr2l,f,c
  4046  001BDA  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  4047  001BDC  22DA               	addwfc	fsr2h,f,c
  4048  001BDE  04DE               	decf	postinc2,w,c
  4049  001BE0  A4D8               	btfss	status,2,c
  4050  001BE2  D009               	goto	i2l1757
  4051                           
  4052                           ;mcp2515.c: 294: {
  4053                           ;mcp2515.c: 295: dlc = msg->dlc | 0x40;
  4054  001BE4  EE20 F005          	lfsr	2,5
  4055  001BE8  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  4056  001BEA  26D9               	addwf	fsr2l,f,c
  4057  001BEC  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  4058  001BEE  22DA               	addwfc	fsr2h,f,c
  4059  001BF0  50DF               	movf	indf2,w,c
  4060  001BF2  0940               	iorlw	64
  4061  001BF4  6E33               	movwf	Mcp2515WriteCanMsg@dlc,c
  4062  001BF6                     i2l1757:
  4063                           
  4064                           ;mcp2515.c: 296: }
  4065                           ;mcp2515.c: 297: buf[0] = 0x02;
  4066  001BF6  0E02               	movlw	2
  4067  001BF8  6E28               	movwf	Mcp2515WriteCanMsg@buf,c
  4068                           
  4069                           ;mcp2515.c: 298: buf[1] = mcp_addr+4;
  4070  001BFA  5034               	movf	Mcp2515WriteCanMsg@mcp_addr,w,c
  4071  001BFC  0F04               	addlw	4
  4072  001BFE  6E29               	movwf	Mcp2515WriteCanMsg@buf+1,c
  4073                           
  4074                           ;mcp2515.c: 299: buf[2] = dlc;
  4075  001C00  C033  F02A         	movff	Mcp2515WriteCanMsg@dlc,Mcp2515WriteCanMsg@buf+2
  4076                           
  4077                           ;mcp2515.c: 300: Spi_Write(buf,3);
  4078  001C04  0E28               	movlw	low Mcp2515WriteCanMsg@buf
  4079  001C06  6E0D               	movwf	i2Spi_Write@tx,c
  4080  001C08  0E00               	movlw	high Mcp2515WriteCanMsg@buf
  4081  001C0A  6E0E               	movwf	i2Spi_Write@tx+1,c
  4082  001C0C  0E03               	movlw	3
  4083  001C0E  6E0F               	movwf	i2Spi_Write@size,c
  4084  001C10  0E00               	movlw	0
  4085  001C12  6E10               	movwf	i2Spi_Write@size+1,c
  4086  001C14  0E00               	movlw	0
  4087  001C16  6E11               	movwf	i2Spi_Write@size+2,c
  4088  001C18  0E00               	movlw	0
  4089  001C1A  6E12               	movwf	i2Spi_Write@size+3,c
  4090  001C1C  EC75  F012         	call	i2_Spi_Write	;wreg free
  4091  001C20  0012               	return		;funcret
  4092  001C22                     __end_of_Mcp2515WriteCanMsg:
  4093                           	opt stack 0
  4094                           pclatu	equ	0xFFB
  4095                           pclath	equ	0xFFA
  4096                           tblptru	equ	0xFF8
  4097                           tblptrh	equ	0xFF7
  4098                           tblptrl	equ	0xFF6
  4099                           tablat	equ	0xFF5
  4100                           prodh	equ	0xFF4
  4101                           prodl	equ	0xFF3
  4102                           intcon	equ	0xFF2
  4103                           intcon2	equ	0xFF1
  4104                           intcon3	equ	0xFF0
  4105                           postinc0	equ	0xFEE
  4106                           fsr0h	equ	0xFEA
  4107                           fsr0l	equ	0xFE9
  4108                           wreg	equ	0xFE8
  4109                           indf1	equ	0xFE7
  4110                           postinc1	equ	0xFE6
  4111                           postdec1	equ	0xFE5
  4112                           fsr1h	equ	0xFE2
  4113                           fsr1l	equ	0xFE1
  4114                           indf2	equ	0xFDF
  4115                           postinc2	equ	0xFDE
  4116                           fsr2h	equ	0xFDA
  4117                           fsr2l	equ	0xFD9
  4118                           status	equ	0xFD8
  4119                           
  4120 ;; *************** function i2_Mcp2515WriteCanId *****************
  4121 ;; Defined at:
  4122 ;;		line 233 in file "mcp2515.c"
  4123 ;; Parameters:    Size  Location     Type
  4124 ;;  mcp_addr        1    wreg     unsigned char 
  4125 ;;  ext             1   18[COMRAM] unsigned char 
  4126 ;;  can_id          4   19[COMRAM] unsigned long 
  4127 ;; Auto vars:     Size  Location     Type
  4128 ;;  mcp_addr        1   26[COMRAM] unsigned char 
  4129 ;;  Mcp2515Write    6   27[COMRAM] unsigned char [6]
  4130 ;;  Mcp2515Write    2   33[COMRAM] unsigned int 
  4131 ;; Return value:  Size  Location     Type
  4132 ;;                  1    wreg      void 
  4133 ;; Registers used:
  4134 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4135 ;; Tracked objects:
  4136 ;;		On entry : 0/0
  4137 ;;		On exit  : 0/0
  4138 ;;		Unchanged: 0/0
  4139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4140 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4141 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4142 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4143 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4144 ;;Total ram usage:       17 bytes
  4145 ;; Hardware stack levels used:    1
  4146 ;; Hardware stack levels required when called:    2
  4147 ;; This function calls:
  4148 ;;		i2_Spi_Write
  4149 ;; This function is called by:
  4150 ;;		_Mcp2515WriteCanMsg
  4151 ;; This function uses a non-reentrant model
  4152 ;;
  4153                           
  4154                           	psect	text16
  4155  001F2C                     __ptext16:
  4156                           	opt stack 0
  4157  001F2C                     i2_Mcp2515WriteCanId:
  4158                           	opt stack 17
  4159                           
  4160                           ;incstack = 0
  4161                           ;i2Mcp2515WriteCanId@mcp_addr stored from wreg
  4162  001F2C  6E1B               	movwf	i2Mcp2515WriteCanId@mcp_addr,c
  4163                           
  4164                           ;mcp2515.c: 235: uint16_t canid;
  4165                           ;mcp2515.c: 236: uint8_t buf[6];
  4166                           ;mcp2515.c: 238: canid = (uint16_t)(can_id & 0x0FFFF);
  4167  001F2E  C014  F022         	movff	i2Mcp2515WriteCanId@can_id,i2Mcp2515WriteCanId@canid
  4168  001F32  C015  F023         	movff	i2Mcp2515WriteCanId@can_id+1,i2Mcp2515WriteCanId@canid+1
  4169                           
  4170                           ;mcp2515.c: 240: buf[0] = 0x02;
  4171  001F36  0E02               	movlw	2
  4172  001F38  6E1C               	movwf	i2Mcp2515WriteCanId@buf,c
  4173                           
  4174                           ;mcp2515.c: 241: buf[1] = mcp_addr;
  4175  001F3A  C01B  F01D         	movff	i2Mcp2515WriteCanId@mcp_addr,i2Mcp2515WriteCanId@buf+1
  4176                           
  4177                           ;mcp2515.c: 243: if ( ext == 1)
  4178  001F3E  0413               	decf	i2Mcp2515WriteCanId@ext,w,c
  4179  001F40  A4D8               	btfss	status,2,c
  4180  001F42  D025               	goto	i2l1669
  4181                           
  4182                           ;mcp2515.c: 244: {
  4183                           ;mcp2515.c: 245: buf[3+2] = (uint8_t) (canid & 0xFF);
  4184  001F44  C022  F021         	movff	i2Mcp2515WriteCanId@canid,i2Mcp2515WriteCanId@buf+5
  4185                           
  4186                           ;mcp2515.c: 246: buf[2+2] = (uint8_t) (canid >> 8);
  4187  001F48  5023               	movf	i2Mcp2515WriteCanId@canid+1,w,c
  4188  001F4A  6E20               	movwf	i2Mcp2515WriteCanId@buf+4,c
  4189                           
  4190                           ;mcp2515.c: 247: canid = (uint16_t)( can_id / 0x10000L );
  4191  001F4C  C016  F022         	movff	i2Mcp2515WriteCanId@can_id+2,i2Mcp2515WriteCanId@canid
  4192  001F50  C017  F023         	movff	i2Mcp2515WriteCanId@can_id+3,i2Mcp2515WriteCanId@canid+1
  4193                           
  4194                           ;mcp2515.c: 248: buf[1+2] = (uint8_t) (canid & 0x03);
  4195  001F54  5022               	movf	i2Mcp2515WriteCanId@canid,w,c
  4196  001F56  0B03               	andlw	3
  4197  001F58  6E1F               	movwf	i2Mcp2515WriteCanId@buf+3,c
  4198                           
  4199                           ;mcp2515.c: 249: buf[1+2] += (uint8_t) ((canid & 0x1C )*8);
  4200  001F5A  C022  F018         	movff	i2Mcp2515WriteCanId@canid,??i2_Mcp2515WriteCanId
  4201  001F5E  0E1C               	movlw	28
  4202  001F60  1618               	andwf	??i2_Mcp2515WriteCanId,f,c
  4203  001F62  90D8               	bcf	status,0,c
  4204  001F64  3618               	rlcf	??i2_Mcp2515WriteCanId,f,c
  4205  001F66  90D8               	bcf	status,0,c
  4206  001F68  3618               	rlcf	??i2_Mcp2515WriteCanId,f,c
  4207  001F6A  90D8               	bcf	status,0,c
  4208  001F6C  3418               	rlcf	??i2_Mcp2515WriteCanId,w,c
  4209  001F6E  261F               	addwf	i2Mcp2515WriteCanId@buf+3,f,c
  4210                           
  4211                           ;mcp2515.c: 250: buf[1+2] |= 0x08;
  4212  001F70  861F               	bsf	i2Mcp2515WriteCanId@buf+3,3,c
  4213                           
  4214                           ;mcp2515.c: 251: buf[0+2] = (uint8_t) (canid / 32 );
  4215  001F72  C022  F018         	movff	i2Mcp2515WriteCanId@canid,??i2_Mcp2515WriteCanId
  4216  001F76  C023  F019         	movff	i2Mcp2515WriteCanId@canid+1,??i2_Mcp2515WriteCanId+1
  4217  001F7A  0E05               	movlw	5
  4218  001F7C  6E1A               	movwf	(??i2_Mcp2515WriteCanId+2)& (0+255),c
  4219  001F7E                     i2u71_45:
  4220  001F7E  90D8               	bcf	status,0,c
  4221  001F80  3219               	rrcf	??i2_Mcp2515WriteCanId+1,f,c
  4222  001F82  3218               	rrcf	??i2_Mcp2515WriteCanId,f,c
  4223  001F84  2E1A               	decfsz	(??i2_Mcp2515WriteCanId+2)& (0+255),f,c
  4224  001F86  D7FB               	goto	i2u71_45
  4225  001F88  5018               	movf	??i2_Mcp2515WriteCanId,w,c
  4226  001F8A  6E1E               	movwf	i2Mcp2515WriteCanId@buf+2,c
  4227                           
  4228                           ;mcp2515.c: 252: }
  4229  001F8C  D01F               	goto	i2l1675
  4230  001F8E                     i2l1669:
  4231                           
  4232                           ;mcp2515.c: 254: else
  4233                           ;mcp2515.c: 255: {
  4234                           ;mcp2515.c: 256: buf[0+2] = (uint8_t) (canid >> 3);
  4235  001F8E  C022  F018         	movff	i2Mcp2515WriteCanId@canid,??i2_Mcp2515WriteCanId
  4236  001F92  C023  F019         	movff	i2Mcp2515WriteCanId@canid+1,??i2_Mcp2515WriteCanId+1
  4237  001F96  90D8               	bcf	status,0,c
  4238  001F98  3219               	rrcf	??i2_Mcp2515WriteCanId+1,f,c
  4239  001F9A  3218               	rrcf	??i2_Mcp2515WriteCanId,f,c
  4240  001F9C  90D8               	bcf	status,0,c
  4241  001F9E  3219               	rrcf	??i2_Mcp2515WriteCanId+1,f,c
  4242  001FA0  3218               	rrcf	??i2_Mcp2515WriteCanId,f,c
  4243  001FA2  90D8               	bcf	status,0,c
  4244  001FA4  3219               	rrcf	??i2_Mcp2515WriteCanId+1,f,c
  4245  001FA6  3218               	rrcf	??i2_Mcp2515WriteCanId,f,c
  4246  001FA8  5018               	movf	??i2_Mcp2515WriteCanId,w,c
  4247  001FAA  6E1E               	movwf	i2Mcp2515WriteCanId@buf+2,c
  4248                           
  4249                           ;mcp2515.c: 257: buf[1+2] = (uint8_t) ((canid & 0x07 )*32);
  4250  001FAC  C022  F018         	movff	i2Mcp2515WriteCanId@canid,??i2_Mcp2515WriteCanId
  4251  001FB0  0E07               	movlw	7
  4252  001FB2  1618               	andwf	??i2_Mcp2515WriteCanId,f,c
  4253  001FB4  0E05               	movlw	5
  4254  001FB6  6E19               	movwf	(??i2_Mcp2515WriteCanId+1)& (0+255),c
  4255  001FB8                     i2u72_45:
  4256  001FB8  90D8               	bcf	status,0,c
  4257  001FBA  3618               	rlcf	??i2_Mcp2515WriteCanId,f,c
  4258  001FBC  2E19               	decfsz	(??i2_Mcp2515WriteCanId+1)& (0+255),f,c
  4259  001FBE  D7FC               	goto	i2u72_45
  4260  001FC0  5018               	movf	??i2_Mcp2515WriteCanId,w,c
  4261  001FC2  6E1F               	movwf	i2Mcp2515WriteCanId@buf+3,c
  4262                           
  4263                           ;mcp2515.c: 258: buf[3+2] = 0;
  4264  001FC4  0E00               	movlw	0
  4265  001FC6  6E21               	movwf	i2Mcp2515WriteCanId@buf+5,c
  4266                           
  4267                           ;mcp2515.c: 259: buf[2+2] = 0;
  4268  001FC8  0E00               	movlw	0
  4269  001FCA  6E20               	movwf	i2Mcp2515WriteCanId@buf+4,c
  4270  001FCC                     i2l1675:
  4271                           
  4272                           ;mcp2515.c: 260: }
  4273                           ;mcp2515.c: 261: Spi_Write(buf,6);
  4274  001FCC  0E1C               	movlw	low i2Mcp2515WriteCanId@buf
  4275  001FCE  6E0D               	movwf	i2Spi_Write@tx,c
  4276  001FD0  0E00               	movlw	high i2Mcp2515WriteCanId@buf
  4277  001FD2  6E0E               	movwf	i2Spi_Write@tx+1,c
  4278  001FD4  0E06               	movlw	6
  4279  001FD6  6E0F               	movwf	i2Spi_Write@size,c
  4280  001FD8  0E00               	movlw	0
  4281  001FDA  6E10               	movwf	i2Spi_Write@size+1,c
  4282  001FDC  0E00               	movlw	0
  4283  001FDE  6E11               	movwf	i2Spi_Write@size+2,c
  4284  001FE0  0E00               	movlw	0
  4285  001FE2  6E12               	movwf	i2Spi_Write@size+3,c
  4286  001FE4  EC75  F012         	call	i2_Spi_Write	;wreg free
  4287  001FE8  0012               	return		;funcret
  4288  001FEA                     __end_ofi2_Mcp2515WriteCanId:
  4289                           	opt stack 0
  4290                           pclatu	equ	0xFFB
  4291                           pclath	equ	0xFFA
  4292                           tblptru	equ	0xFF8
  4293                           tblptrh	equ	0xFF7
  4294                           tblptrl	equ	0xFF6
  4295                           tablat	equ	0xFF5
  4296                           prodh	equ	0xFF4
  4297                           prodl	equ	0xFF3
  4298                           intcon	equ	0xFF2
  4299                           intcon2	equ	0xFF1
  4300                           intcon3	equ	0xFF0
  4301                           postinc0	equ	0xFEE
  4302                           fsr0h	equ	0xFEA
  4303                           fsr0l	equ	0xFE9
  4304                           wreg	equ	0xFE8
  4305                           indf1	equ	0xFE7
  4306                           postinc1	equ	0xFE6
  4307                           postdec1	equ	0xFE5
  4308                           fsr1h	equ	0xFE2
  4309                           fsr1l	equ	0xFE1
  4310                           indf2	equ	0xFDF
  4311                           postinc2	equ	0xFDE
  4312                           fsr2h	equ	0xFDA
  4313                           fsr2l	equ	0xFD9
  4314                           status	equ	0xFD8
  4315                           
  4316 ;; *************** function _Mcp2515GetNextFreeTXBuf *****************
  4317 ;; Defined at:
  4318 ;;		line 311 in file "mcp2515.c"
  4319 ;; Parameters:    Size  Location     Type
  4320 ;;  txbuf_n         2   18[COMRAM] PTR unsigned char 
  4321 ;;		 -> Can_SendMessage@txbuf_n(1), 
  4322 ;; Auto vars:     Size  Location     Type
  4323 ;;  buf             3   24[COMRAM] unsigned char [3]
  4324 ;;  ctrlregs        3   21[COMRAM] unsigned char [3]
  4325 ;;  i               1   27[COMRAM] unsigned char 
  4326 ;; Return value:  Size  Location     Type
  4327 ;;                  1    wreg      unsigned char 
  4328 ;; Registers used:
  4329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4330 ;; Tracked objects:
  4331 ;;		On entry : 0/0
  4332 ;;		On exit  : 0/0
  4333 ;;		Unchanged: 0/0
  4334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4335 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4336 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4337 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4338 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4339 ;;Total ram usage:       10 bytes
  4340 ;; Hardware stack levels used:    1
  4341 ;; Hardware stack levels required when called:    2
  4342 ;; This function calls:
  4343 ;;		_Spi_ReadWrite
  4344 ;; This function is called by:
  4345 ;;		_Can_SendMessage
  4346 ;; This function uses a non-reentrant model
  4347 ;;
  4348                           
  4349                           	psect	text17
  4350  00207C                     __ptext17:
  4351                           	opt stack 0
  4352  00207C                     _Mcp2515GetNextFreeTXBuf:
  4353                           	opt stack 18
  4354                           
  4355                           ;mcp2515.c: 313: uint8_t i;
  4356                           ;mcp2515.c: 314: uint8_t ctrlregs[(3)] = {0x30,0x40,0x50};
  4357                           
  4358                           ;incstack = 0
  4359  00207C  C0EC  F016         	movff	Mcp2515GetNextFreeTXBuf@F8153,Mcp2515GetNextFreeTXBuf@ctrlregs
  4360  002080  C0ED  F017         	movff	Mcp2515GetNextFreeTXBuf@F8153+1,Mcp2515GetNextFreeTXBuf@ctrlregs+1
  4361  002084  C0EE  F018         	movff	Mcp2515GetNextFreeTXBuf@F8153+2,Mcp2515GetNextFreeTXBuf@ctrlregs+2
  4362                           
  4363                           ;mcp2515.c: 315: uint8_t buf[3];
  4364                           ;mcp2515.c: 316: *txbuf_n = 0x00;
  4365  002088  C013  FFD9         	movff	Mcp2515GetNextFreeTXBuf@txbuf_n,fsr2l
  4366  00208C  C014  FFDA         	movff	Mcp2515GetNextFreeTXBuf@txbuf_n+1,fsr2h
  4367  002090  0E00               	movlw	0
  4368  002092  6EDF               	movwf	indf2,c
  4369                           
  4370                           ;mcp2515.c: 319: for (i=0; i<(3); i++)
  4371  002094  0E00               	movlw	0
  4372  002096  6E1C               	movwf	Mcp2515GetNextFreeTXBuf@i,c
  4373  002098                     i2l1709:
  4374  002098  0E02               	movlw	2
  4375  00209A  641C               	cpfsgt	Mcp2515GetNextFreeTXBuf@i,c
  4376  00209C  D001               	goto	i2l1713
  4377  00209E  D030               	goto	i2l1731
  4378  0020A0                     i2l1713:
  4379                           
  4380                           ;mcp2515.c: 320: {
  4381                           ;mcp2515.c: 321: buf[0] = 0x03;
  4382  0020A0  0E03               	movlw	3
  4383  0020A2  6E19               	movwf	Mcp2515GetNextFreeTXBuf@buf,c
  4384                           
  4385                           ;mcp2515.c: 322: buf[1] = ctrlregs[i];
  4386  0020A4  501C               	movf	Mcp2515GetNextFreeTXBuf@i,w,c
  4387  0020A6  0D01               	mullw	1
  4388  0020A8  0E16               	movlw	low Mcp2515GetNextFreeTXBuf@ctrlregs
  4389  0020AA  24F3               	addwf	prodl,w,c
  4390  0020AC  6ED9               	movwf	fsr2l,c
  4391  0020AE  0E00               	movlw	high Mcp2515GetNextFreeTXBuf@ctrlregs
  4392  0020B0  20F4               	addwfc	prodh,w,c
  4393  0020B2  6EDA               	movwf	fsr2h,c
  4394  0020B4  50DF               	movf	indf2,w,c
  4395  0020B6  6E1A               	movwf	Mcp2515GetNextFreeTXBuf@buf+1,c
  4396                           
  4397                           ;mcp2515.c: 323: Spi_ReadWrite(buf,3);
  4398  0020B8  0E19               	movlw	low Mcp2515GetNextFreeTXBuf@buf
  4399  0020BA  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  4400  0020BC  0E00               	movlw	high Mcp2515GetNextFreeTXBuf@buf
  4401  0020BE  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  4402  0020C0  0E03               	movlw	3
  4403  0020C2  6E0F               	movwf	Spi_ReadWrite@size,c
  4404  0020C4  0E00               	movlw	0
  4405  0020C6  6E10               	movwf	Spi_ReadWrite@size+1,c
  4406  0020C8  0E00               	movlw	0
  4407  0020CA  6E11               	movwf	Spi_ReadWrite@size+2,c
  4408  0020CC  0E00               	movlw	0
  4409  0020CE  6E12               	movwf	Spi_ReadWrite@size+3,c
  4410  0020D0  EC88  F012         	call	_Spi_ReadWrite	;wreg free
  4411                           
  4412                           ;mcp2515.c: 325: if ( (buf[2] & 0x08) == 0 )
  4413  0020D4  B61B               	btfsc	Mcp2515GetNextFreeTXBuf@buf+2,3,c
  4414  0020D6  D012               	goto	i2l1727
  4415                           
  4416                           ;mcp2515.c: 326: {
  4417                           ;mcp2515.c: 327: *txbuf_n = ctrlregs[i]+1;
  4418  0020D8  501C               	movf	Mcp2515GetNextFreeTXBuf@i,w,c
  4419  0020DA  0D01               	mullw	1
  4420  0020DC  0E16               	movlw	low Mcp2515GetNextFreeTXBuf@ctrlregs
  4421  0020DE  24F3               	addwf	prodl,w,c
  4422  0020E0  6ED9               	movwf	fsr2l,c
  4423  0020E2  0E00               	movlw	high Mcp2515GetNextFreeTXBuf@ctrlregs
  4424  0020E4  20F4               	addwfc	prodh,w,c
  4425  0020E6  6EDA               	movwf	fsr2h,c
  4426  0020E8  50DF               	movf	indf2,w,c
  4427  0020EA  6E15               	movwf	??_Mcp2515GetNextFreeTXBuf& (0+255),c
  4428  0020EC  2815               	incf	??_Mcp2515GetNextFreeTXBuf,w,c
  4429  0020EE  C013  FFD9         	movff	Mcp2515GetNextFreeTXBuf@txbuf_n,fsr2l
  4430  0020F2  C014  FFDA         	movff	Mcp2515GetNextFreeTXBuf@txbuf_n+1,fsr2h
  4431  0020F6  6EDF               	movwf	indf2,c
  4432                           
  4433                           ;mcp2515.c: 328: return (0);
  4434  0020F8  0E00               	movlw	0
  4435  0020FA  0012               	return	
  4436  0020FC                     i2l1727:
  4437  0020FC  2A1C               	incf	Mcp2515GetNextFreeTXBuf@i,f,c
  4438  0020FE  D7CC               	goto	i2l1709
  4439  002100                     i2l1731:
  4440                           
  4441                           ;mcp2515.c: 329: }
  4442                           ;mcp2515.c: 330: }
  4443                           ;mcp2515.c: 331: return (2);
  4444  002100  0E02               	movlw	2
  4445  002102  0012               	return	
  4446  002104                     __end_of_Mcp2515GetNextFreeTXBuf:
  4447                           	opt stack 0
  4448                           pclatu	equ	0xFFB
  4449                           pclath	equ	0xFFA
  4450                           tblptru	equ	0xFF8
  4451                           tblptrh	equ	0xFF7
  4452                           tblptrl	equ	0xFF6
  4453                           tablat	equ	0xFF5
  4454                           prodh	equ	0xFF4
  4455                           prodl	equ	0xFF3
  4456                           intcon	equ	0xFF2
  4457                           intcon2	equ	0xFF1
  4458                           intcon3	equ	0xFF0
  4459                           postinc0	equ	0xFEE
  4460                           fsr0h	equ	0xFEA
  4461                           fsr0l	equ	0xFE9
  4462                           wreg	equ	0xFE8
  4463                           indf1	equ	0xFE7
  4464                           postinc1	equ	0xFE6
  4465                           postdec1	equ	0xFE5
  4466                           fsr1h	equ	0xFE2
  4467                           fsr1l	equ	0xFE1
  4468                           indf2	equ	0xFDF
  4469                           postinc2	equ	0xFDE
  4470                           fsr2h	equ	0xFDA
  4471                           fsr2l	equ	0xFD9
  4472                           status	equ	0xFD8
  4473                           
  4474 ;; *************** function _Can_ReadInBuffer *****************
  4475 ;; Defined at:
  4476 ;;		line 94 in file "can.c"
  4477 ;; Parameters:    Size  Location     Type
  4478 ;;		None
  4479 ;; Auto vars:     Size  Location     Type
  4480 ;;  i               1   70[COMRAM] unsigned char 
  4481 ;;  rdStatus        1   69[COMRAM] unsigned char 
  4482 ;;  error           1   68[COMRAM] unsigned char 
  4483 ;; Return value:  Size  Location     Type
  4484 ;;                  1    wreg      unsigned char 
  4485 ;; Registers used:
  4486 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4487 ;; Tracked objects:
  4488 ;;		On entry : 0/0
  4489 ;;		On exit  : 0/0
  4490 ;;		Unchanged: 0/0
  4491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4493 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4495 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4496 ;;Total ram usage:        3 bytes
  4497 ;; Hardware stack levels used:    1
  4498 ;; Hardware stack levels required when called:    5
  4499 ;; This function calls:
  4500 ;;		_Can_ReadMessage
  4501 ;; This function is called by:
  4502 ;;		_Can_Isr
  4503 ;; This function uses a non-reentrant model
  4504 ;;
  4505                           
  4506                           	psect	text18
  4507  002404                     __ptext18:
  4508                           	opt stack 0
  4509  002404                     _Can_ReadInBuffer:
  4510                           	opt stack 17
  4511                           
  4512                           ;can.c: 96: uint8_t i;
  4513                           ;can.c: 97: uint8_t error=0;
  4514                           
  4515                           ;incstack = 0
  4516  002404  0E00               	movlw	0
  4517  002406  6E45               	movwf	Can_ReadInBuffer@error,c
  4518                           
  4519                           ;can.c: 98: uint8_t rdStatus;
  4520                           ;can.c: 100: for(i=0;i<2;i++)
  4521  002408  0E00               	movlw	0
  4522  00240A  6E47               	movwf	Can_ReadInBuffer@i,c
  4523  00240C                     i2l2073:
  4524  00240C  0E01               	movlw	1
  4525  00240E  6447               	cpfsgt	Can_ReadInBuffer@i,c
  4526  002410  D001               	goto	i2l2077
  4527  002412  0012               	return	
  4528  002414                     i2l2077:
  4529                           
  4530                           ;can.c: 101: {
  4531                           ;can.c: 102: rdStatus = Can_ReadMessage(&rxBuffer[rxBufferPtrIn]);
  4532  002414  505D               	movf	_rxBufferPtrIn,w,c
  4533  002416  0D11               	mullw	17
  4534  002418  0E44               	movlw	low _rxBuffer
  4535  00241A  24F3               	addwf	prodl,w,c
  4536  00241C  6E3F               	movwf	Can_ReadMessage@msg,c
  4537  00241E  0E01               	movlw	high _rxBuffer
  4538  002420  20F4               	addwfc	prodh,w,c
  4539  002422  6E40               	movwf	Can_ReadMessage@msg+1,c
  4540  002424  EC19  F00F         	call	_Can_ReadMessage	;wreg free
  4541  002428  6E46               	movwf	Can_ReadInBuffer@rdStatus,c
  4542                           
  4543                           ;can.c: 103: if((rxBufferCount) < 4)
  4544  00242A  0E04               	movlw	4
  4545  00242C  605C               	cpfslt	_rxBufferCount,c
  4546  00242E  D008               	goto	i2l2087
  4547                           
  4548                           ;can.c: 104: {
  4549                           ;can.c: 105: if(rdStatus == (0))
  4550  002430  5046               	movf	Can_ReadInBuffer@rdStatus,w,c
  4551  002432  A4D8               	btfss	status,2,c
  4552  002434  D007               	goto	i2l2089
  4553                           
  4554                           ;can.c: 106: {
  4555                           ;can.c: 107: rxBufferCount++;
  4556  002436  2A5C               	incf	_rxBufferCount,f,c
  4557                           
  4558                           ;can.c: 108: rxBufferPtrIn = (rxBufferPtrIn + 1) % 4;
  4559  002438  285D               	incf	_rxBufferPtrIn,w,c
  4560  00243A  0B03               	andlw	3
  4561  00243C  6E5D               	movwf	_rxBufferPtrIn,c
  4562                           
  4563                           ;can.c: 109: }
  4564                           ;can.c: 110: }
  4565  00243E  D002               	goto	i2l2089
  4566  002440                     i2l2087:
  4567                           
  4568                           ;can.c: 111: else
  4569                           ;can.c: 112: {
  4570                           ;can.c: 113: error = 1;
  4571  002440  0E01               	movlw	1
  4572  002442  6E45               	movwf	Can_ReadInBuffer@error,c
  4573  002444                     i2l2089:
  4574  002444  2A47               	incf	Can_ReadInBuffer@i,f,c
  4575  002446  D7E2               	goto	i2l2073
  4576  002448                     __end_of_Can_ReadInBuffer:
  4577                           	opt stack 0
  4578                           pclatu	equ	0xFFB
  4579                           pclath	equ	0xFFA
  4580                           tblptru	equ	0xFF8
  4581                           tblptrh	equ	0xFF7
  4582                           tblptrl	equ	0xFF6
  4583                           tablat	equ	0xFF5
  4584                           prodh	equ	0xFF4
  4585                           prodl	equ	0xFF3
  4586                           intcon	equ	0xFF2
  4587                           intcon2	equ	0xFF1
  4588                           intcon3	equ	0xFF0
  4589                           postinc0	equ	0xFEE
  4590                           fsr0h	equ	0xFEA
  4591                           fsr0l	equ	0xFE9
  4592                           wreg	equ	0xFE8
  4593                           indf1	equ	0xFE7
  4594                           postinc1	equ	0xFE6
  4595                           postdec1	equ	0xFE5
  4596                           fsr1h	equ	0xFE2
  4597                           fsr1l	equ	0xFE1
  4598                           indf2	equ	0xFDF
  4599                           postinc2	equ	0xFDE
  4600                           fsr2h	equ	0xFDA
  4601                           fsr2l	equ	0xFD9
  4602                           status	equ	0xFD8
  4603                           
  4604 ;; *************** function _Can_ReadMessage *****************
  4605 ;; Defined at:
  4606 ;;		line 367 in file "can.c"
  4607 ;; Parameters:    Size  Location     Type
  4608 ;;  msg             2   62[COMRAM] PTR struct CANMESSAGE
  4609 ;;		 -> rxBuffer(68), 
  4610 ;; Auto vars:     Size  Location     Type
  4611 ;;  buf             4   64[COMRAM] unsigned char [4]
  4612 ;; Return value:  Size  Location     Type
  4613 ;;                  1    wreg      unsigned char 
  4614 ;; Registers used:
  4615 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4616 ;; Tracked objects:
  4617 ;;		On entry : 0/0
  4618 ;;		On exit  : 0/0
  4619 ;;		Unchanged: 0/0
  4620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4621 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4622 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4624 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4625 ;;Total ram usage:        6 bytes
  4626 ;; Hardware stack levels used:    1
  4627 ;; Hardware stack levels required when called:    4
  4628 ;; This function calls:
  4629 ;;		_Mcp2515ReadCanMsg
  4630 ;;		_Spi_ReadWrite
  4631 ;;		i2_Spi_Write
  4632 ;; This function is called by:
  4633 ;;		_Can_ReadInBuffer
  4634 ;; This function uses a non-reentrant model
  4635 ;;
  4636                           
  4637                           	psect	text19
  4638  001E32                     __ptext19:
  4639                           	opt stack 0
  4640  001E32                     _Can_ReadMessage:
  4641                           	opt stack 17
  4642                           
  4643                           ;can.c: 369: uint8_t buf[4];
  4644                           ;can.c: 371: buf[0] = 0xA0;
  4645                           
  4646                           ;incstack = 0
  4647  001E32  0EA0               	movlw	160
  4648  001E34  6E41               	movwf	Can_ReadMessage@buf,c
  4649                           
  4650                           ;can.c: 372: Spi_ReadWrite(buf,2);
  4651  001E36  0E41               	movlw	low Can_ReadMessage@buf
  4652  001E38  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  4653  001E3A  0E00               	movlw	high Can_ReadMessage@buf
  4654  001E3C  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  4655  001E3E  0E02               	movlw	2
  4656  001E40  6E0F               	movwf	Spi_ReadWrite@size,c
  4657  001E42  0E00               	movlw	0
  4658  001E44  6E10               	movwf	Spi_ReadWrite@size+1,c
  4659  001E46  0E00               	movlw	0
  4660  001E48  6E11               	movwf	Spi_ReadWrite@size+2,c
  4661  001E4A  0E00               	movlw	0
  4662  001E4C  6E12               	movwf	Spi_ReadWrite@size+3,c
  4663  001E4E  EC88  F012         	call	_Spi_ReadWrite	;wreg free
  4664                           
  4665                           ;can.c: 374: if ( buf[1] & (1<<0) )
  4666  001E52  A042               	btfss	Can_ReadMessage@buf+1,0,c
  4667  001E54  D034               	goto	i2l213
  4668                           
  4669                           ;can.c: 375: {
  4670                           ;can.c: 376: Mcp2515ReadCanMsg( (0x61), msg);
  4671  001E56  C03F  F030         	movff	Can_ReadMessage@msg,Mcp2515ReadCanMsg@msg
  4672  001E5A  C040  F031         	movff	Can_ReadMessage@msg+1,Mcp2515ReadCanMsg@msg+1
  4673  001E5E  0E61               	movlw	97
  4674  001E60  EC11  F00E         	call	_Mcp2515ReadCanMsg
  4675                           
  4676                           ;can.c: 377: buf[0] = 0x05;
  4677  001E64  0E05               	movlw	5
  4678  001E66  6E41               	movwf	Can_ReadMessage@buf,c
  4679                           
  4680                           ;can.c: 378: buf[1] = 0x2C;
  4681  001E68  0E2C               	movlw	44
  4682  001E6A  6E42               	movwf	Can_ReadMessage@buf+1,c
  4683                           
  4684                           ;can.c: 379: buf[2] = 0x01;
  4685  001E6C  0E01               	movlw	1
  4686  001E6E  6E43               	movwf	Can_ReadMessage@buf+2,c
  4687                           
  4688                           ;can.c: 380: buf[3] = 0;
  4689  001E70  0E00               	movlw	0
  4690  001E72  6E44               	movwf	Can_ReadMessage@buf+3,c
  4691                           
  4692                           ;can.c: 381: Spi_Write(buf,4);
  4693  001E74  0E41               	movlw	low Can_ReadMessage@buf
  4694  001E76  6E0D               	movwf	i2Spi_Write@tx,c
  4695  001E78  0E00               	movlw	high Can_ReadMessage@buf
  4696  001E7A  6E0E               	movwf	i2Spi_Write@tx+1,c
  4697  001E7C  0E04               	movlw	4
  4698  001E7E  6E0F               	movwf	i2Spi_Write@size,c
  4699  001E80  0E00               	movlw	0
  4700  001E82  6E10               	movwf	i2Spi_Write@size+1,c
  4701  001E84  0E00               	movlw	0
  4702  001E86  6E11               	movwf	i2Spi_Write@size+2,c
  4703  001E88  0E00               	movlw	0
  4704  001E8A  6E12               	movwf	i2Spi_Write@size+3,c
  4705  001E8C  EC75  F012         	call	i2_Spi_Write	;wreg free
  4706                           
  4707                           ;can.c: 382: buf[0] = 0x05;
  4708  001E90  0E05               	movlw	5
  4709  001E92  6E41               	movwf	Can_ReadMessage@buf,c
  4710                           
  4711                           ;can.c: 383: buf[1] = 0x2B;
  4712  001E94  0E2B               	movlw	43
  4713  001E96  6E42               	movwf	Can_ReadMessage@buf+1,c
  4714                           
  4715                           ;can.c: 384: buf[2] = 0x01;
  4716  001E98  0E01               	movlw	1
  4717  001E9A  6E43               	movwf	Can_ReadMessage@buf+2,c
  4718                           
  4719                           ;can.c: 385: buf[3] = 0xFF;
  4720  001E9C  6844               	setf	Can_ReadMessage@buf+3,c
  4721                           
  4722                           ;can.c: 386: Spi_Write(buf,4);
  4723  001E9E  0E41               	movlw	low Can_ReadMessage@buf
  4724  001EA0  6E0D               	movwf	i2Spi_Write@tx,c
  4725  001EA2  0E00               	movlw	high Can_ReadMessage@buf
  4726  001EA4  6E0E               	movwf	i2Spi_Write@tx+1,c
  4727  001EA6  0E04               	movlw	4
  4728  001EA8  6E0F               	movwf	i2Spi_Write@size,c
  4729  001EAA  0E00               	movlw	0
  4730  001EAC  6E10               	movwf	i2Spi_Write@size+1,c
  4731  001EAE  0E00               	movlw	0
  4732  001EB0  6E11               	movwf	i2Spi_Write@size+2,c
  4733  001EB2  0E00               	movlw	0
  4734  001EB4  6E12               	movwf	i2Spi_Write@size+3,c
  4735  001EB6  EC75  F012         	call	i2_Spi_Write	;wreg free
  4736  001EBA                     i2l1883:
  4737                           
  4738                           ;can.c: 387: return (0);
  4739  001EBA  0E00               	movlw	0
  4740  001EBC  0012               	return	
  4741  001EBE                     i2l213:
  4742                           
  4743                           ;can.c: 390: else if ( buf[1] & (1<<1) )
  4744  001EBE  A242               	btfss	Can_ReadMessage@buf+1,1,c
  4745  001EC0  D033               	goto	i2l1915
  4746                           
  4747                           ;can.c: 391: {
  4748                           ;can.c: 393: Mcp2515ReadCanMsg( (0x71), msg);
  4749  001EC2  C03F  F030         	movff	Can_ReadMessage@msg,Mcp2515ReadCanMsg@msg
  4750  001EC6  C040  F031         	movff	Can_ReadMessage@msg+1,Mcp2515ReadCanMsg@msg+1
  4751  001ECA  0E71               	movlw	113
  4752  001ECC  EC11  F00E         	call	_Mcp2515ReadCanMsg
  4753                           
  4754                           ;can.c: 394: buf[0] = 0x05;
  4755  001ED0  0E05               	movlw	5
  4756  001ED2  6E41               	movwf	Can_ReadMessage@buf,c
  4757                           
  4758                           ;can.c: 395: buf[1] = 0x2C;
  4759  001ED4  0E2C               	movlw	44
  4760  001ED6  6E42               	movwf	Can_ReadMessage@buf+1,c
  4761                           
  4762                           ;can.c: 396: buf[2] = 0x02;
  4763  001ED8  0E02               	movlw	2
  4764  001EDA  6E43               	movwf	Can_ReadMessage@buf+2,c
  4765                           
  4766                           ;can.c: 397: buf[3] = 0;
  4767  001EDC  0E00               	movlw	0
  4768  001EDE  6E44               	movwf	Can_ReadMessage@buf+3,c
  4769                           
  4770                           ;can.c: 398: Spi_Write(buf,4);
  4771  001EE0  0E41               	movlw	low Can_ReadMessage@buf
  4772  001EE2  6E0D               	movwf	i2Spi_Write@tx,c
  4773  001EE4  0E00               	movlw	high Can_ReadMessage@buf
  4774  001EE6  6E0E               	movwf	i2Spi_Write@tx+1,c
  4775  001EE8  0E04               	movlw	4
  4776  001EEA  6E0F               	movwf	i2Spi_Write@size,c
  4777  001EEC  0E00               	movlw	0
  4778  001EEE  6E10               	movwf	i2Spi_Write@size+1,c
  4779  001EF0  0E00               	movlw	0
  4780  001EF2  6E11               	movwf	i2Spi_Write@size+2,c
  4781  001EF4  0E00               	movlw	0
  4782  001EF6  6E12               	movwf	i2Spi_Write@size+3,c
  4783  001EF8  EC75  F012         	call	i2_Spi_Write	;wreg free
  4784                           
  4785                           ;can.c: 399: buf[0] = 0x05;
  4786  001EFC  0E05               	movlw	5
  4787  001EFE  6E41               	movwf	Can_ReadMessage@buf,c
  4788                           
  4789                           ;can.c: 400: buf[1] = 0x2B;
  4790  001F00  0E2B               	movlw	43
  4791  001F02  6E42               	movwf	Can_ReadMessage@buf+1,c
  4792                           
  4793                           ;can.c: 401: buf[2] = 0x02;
  4794  001F04  0E02               	movlw	2
  4795  001F06  6E43               	movwf	Can_ReadMessage@buf+2,c
  4796                           
  4797                           ;can.c: 402: buf[3] = 0xFF;
  4798  001F08  6844               	setf	Can_ReadMessage@buf+3,c
  4799                           
  4800                           ;can.c: 403: Spi_Write(buf,4);
  4801  001F0A  0E41               	movlw	low Can_ReadMessage@buf
  4802  001F0C  6E0D               	movwf	i2Spi_Write@tx,c
  4803  001F0E  0E00               	movlw	high Can_ReadMessage@buf
  4804  001F10  6E0E               	movwf	i2Spi_Write@tx+1,c
  4805  001F12  0E04               	movlw	4
  4806  001F14  6E0F               	movwf	i2Spi_Write@size,c
  4807  001F16  0E00               	movlw	0
  4808  001F18  6E10               	movwf	i2Spi_Write@size+1,c
  4809  001F1A  0E00               	movlw	0
  4810  001F1C  6E11               	movwf	i2Spi_Write@size+2,c
  4811  001F1E  0E00               	movlw	0
  4812  001F20  6E12               	movwf	i2Spi_Write@size+3,c
  4813  001F22  EC75  F012         	call	i2_Spi_Write	;wreg free
  4814  001F26  D7C9               	goto	i2l1883
  4815  001F28                     i2l1915:
  4816                           
  4817                           ;can.c: 405: }
  4818                           ;can.c: 407: return (4);
  4819  001F28  0E04               	movlw	4
  4820  001F2A  0012               	return	
  4821  001F2C                     __end_of_Can_ReadMessage:
  4822                           	opt stack 0
  4823                           pclatu	equ	0xFFB
  4824                           pclath	equ	0xFFA
  4825                           tblptru	equ	0xFF8
  4826                           tblptrh	equ	0xFF7
  4827                           tblptrl	equ	0xFF6
  4828                           tablat	equ	0xFF5
  4829                           prodh	equ	0xFF4
  4830                           prodl	equ	0xFF3
  4831                           intcon	equ	0xFF2
  4832                           intcon2	equ	0xFF1
  4833                           intcon3	equ	0xFF0
  4834                           postinc0	equ	0xFEE
  4835                           fsr0h	equ	0xFEA
  4836                           fsr0l	equ	0xFE9
  4837                           wreg	equ	0xFE8
  4838                           indf1	equ	0xFE7
  4839                           postinc1	equ	0xFE6
  4840                           postdec1	equ	0xFE5
  4841                           fsr1h	equ	0xFE2
  4842                           fsr1l	equ	0xFE1
  4843                           indf2	equ	0xFDF
  4844                           postinc2	equ	0xFDE
  4845                           fsr2h	equ	0xFDA
  4846                           fsr2l	equ	0xFD9
  4847                           status	equ	0xFD8
  4848                           
  4849 ;; *************** function i2_Spi_Write *****************
  4850 ;; Defined at:
  4851 ;;		line 327 in file "can.c"
  4852 ;; Parameters:    Size  Location     Type
  4853 ;;  tx              2   12[COMRAM] PTR unsigned char 
  4854 ;;		 -> Mcp2515WriteCanMsg@buf(10), Mcp2515WriteCanId@buf(6), Mcp2515Sleep@cmdMask4(3), Mcp2515_Init@cmdWrite3(3), 
  4855 ;;		 -> Mcp2515_Init@cmdMask4(4), Mcp2515_Reset@cmd(1), Can_SendMessage@buf(4), Can_ReadMessage@buf(4), 
  4856 ;;  size            4   14[COMRAM] unsigned long 
  4857 ;; Auto vars:     Size  Location     Type
  4858 ;;		None
  4859 ;; Return value:  Size  Location     Type
  4860 ;;                  1    wreg      void 
  4861 ;; Registers used:
  4862 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4863 ;; Tracked objects:
  4864 ;;		On entry : 0/0
  4865 ;;		On exit  : 0/0
  4866 ;;		Unchanged: 0/0
  4867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4868 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4871 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4872 ;;Total ram usage:        6 bytes
  4873 ;; Hardware stack levels used:    1
  4874 ;; Hardware stack levels required when called:    1
  4875 ;; This function calls:
  4876 ;;		i2_SPIRW
  4877 ;; This function is called by:
  4878 ;;		_Can_ReadMessage
  4879 ;;		_Can_SendMessage
  4880 ;;		_Mcp2515WriteCanMsg
  4881 ;;		i2_Mcp2515WriteCanId
  4882 ;; This function uses a non-reentrant model
  4883 ;;
  4884                           
  4885                           	psect	text20
  4886  0024EA                     __ptext20:
  4887                           	opt stack 0
  4888  0024EA                     i2_Spi_Write:
  4889                           	opt stack 19
  4890                           
  4891                           ;can.c: 329: SPIRW(tx, 0, size);
  4892                           
  4893                           ;incstack = 0
  4894  0024EA  C00D  F001         	movff	i2Spi_Write@tx,i2SPIRW@tx
  4895  0024EE  C00E  F002         	movff	i2Spi_Write@tx+1,i2SPIRW@tx+1
  4896  0024F2  0E00               	movlw	0
  4897  0024F4  6E03               	movwf	i2SPIRW@rx,c
  4898  0024F6  0E00               	movlw	0
  4899  0024F8  6E04               	movwf	i2SPIRW@rx+1,c
  4900  0024FA  C00F  F005         	movff	i2Spi_Write@size,i2SPIRW@size
  4901  0024FE  C010  F006         	movff	i2Spi_Write@size+1,i2SPIRW@size+1
  4902  002502  C011  F007         	movff	i2Spi_Write@size+2,i2SPIRW@size+2
  4903  002506  C012  F008         	movff	i2Spi_Write@size+3,i2SPIRW@size+3
  4904  00250A  EC82  F010         	call	i2_SPIRW	;wreg free
  4905  00250E  0012               	return		;funcret
  4906  002510                     __end_ofi2_Spi_Write:
  4907                           	opt stack 0
  4908                           pclatu	equ	0xFFB
  4909                           pclath	equ	0xFFA
  4910                           tblptru	equ	0xFF8
  4911                           tblptrh	equ	0xFF7
  4912                           tblptrl	equ	0xFF6
  4913                           tablat	equ	0xFF5
  4914                           prodh	equ	0xFF4
  4915                           prodl	equ	0xFF3
  4916                           intcon	equ	0xFF2
  4917                           intcon2	equ	0xFF1
  4918                           intcon3	equ	0xFF0
  4919                           postinc0	equ	0xFEE
  4920                           fsr0h	equ	0xFEA
  4921                           fsr0l	equ	0xFE9
  4922                           wreg	equ	0xFE8
  4923                           indf1	equ	0xFE7
  4924                           postinc1	equ	0xFE6
  4925                           postdec1	equ	0xFE5
  4926                           fsr1h	equ	0xFE2
  4927                           fsr1l	equ	0xFE1
  4928                           indf2	equ	0xFDF
  4929                           postinc2	equ	0xFDE
  4930                           fsr2h	equ	0xFDA
  4931                           fsr2l	equ	0xFD9
  4932                           status	equ	0xFD8
  4933                           
  4934 ;; *************** function _Mcp2515ReadCanMsg *****************
  4935 ;; Defined at:
  4936 ;;		line 194 in file "mcp2515.c"
  4937 ;; Parameters:    Size  Location     Type
  4938 ;;  mcp_addr        1    wreg     const unsigned char 
  4939 ;;  msg             2   47[COMRAM] PTR struct CANMESSAGE
  4940 ;;		 -> rxBuffer(68), 
  4941 ;; Auto vars:     Size  Location     Type
  4942 ;;  mcp_addr        1   61[COMRAM] const unsigned char 
  4943 ;;  cmd            10   51[COMRAM] unsigned char [10]
  4944 ;; Return value:  Size  Location     Type
  4945 ;;                  1    wreg      void 
  4946 ;; Registers used:
  4947 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4948 ;; Tracked objects:
  4949 ;;		On entry : 0/0
  4950 ;;		On exit  : 0/0
  4951 ;;		Unchanged: 0/0
  4952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4953 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4954 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4955 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4956 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4957 ;;Total ram usage:       15 bytes
  4958 ;; Hardware stack levels used:    1
  4959 ;; Hardware stack levels required when called:    3
  4960 ;; This function calls:
  4961 ;;		_Mcp2515ReadCanId
  4962 ;;		_Spi_ReadWrite
  4963 ;;		_memcpy
  4964 ;; This function is called by:
  4965 ;;		_Can_ReadMessage
  4966 ;; This function uses a non-reentrant model
  4967 ;;
  4968                           
  4969                           	psect	text21
  4970  001C22                     __ptext21:
  4971                           	opt stack 0
  4972  001C22                     _Mcp2515ReadCanMsg:
  4973                           	opt stack 17
  4974                           
  4975                           ;incstack = 0
  4976                           ;Mcp2515ReadCanMsg@mcp_addr stored from wreg
  4977  001C22  6E3E               	movwf	Mcp2515ReadCanMsg@mcp_addr,c
  4978                           
  4979                           ;mcp2515.c: 197: uint8_t cmd[10];
  4980                           ;mcp2515.c: 202: Mcp2515ReadCanId( mcp_addr, &(msg->extended_identifier),
  4981                           ;mcp2515.c: 203: &(msg->identifier) );
  4982  001C24  C030  F013         	movff	Mcp2515ReadCanMsg@msg,Mcp2515ReadCanId@ext
  4983  001C28  C031  F014         	movff	Mcp2515ReadCanMsg@msg+1,Mcp2515ReadCanId@ext+1
  4984  001C2C  0E01               	movlw	1
  4985  001C2E  2430               	addwf	Mcp2515ReadCanMsg@msg,w,c
  4986  001C30  6E15               	movwf	Mcp2515ReadCanId@can_id,c
  4987  001C32  0E00               	movlw	0
  4988  001C34  2031               	addwfc	Mcp2515ReadCanMsg@msg+1,w,c
  4989  001C36  6E16               	movwf	Mcp2515ReadCanId@can_id+1,c
  4990  001C38  503E               	movf	Mcp2515ReadCanMsg@mcp_addr,w,c
  4991  001C3A  EC17  F00B         	call	_Mcp2515ReadCanId
  4992                           
  4993                           ;mcp2515.c: 205: cmd[0] = 0x03;
  4994  001C3E  0E03               	movlw	3
  4995  001C40  6E34               	movwf	Mcp2515ReadCanMsg@cmd,c
  4996                           
  4997                           ;mcp2515.c: 206: cmd[1] = mcp_addr-1;
  4998  001C42  043E               	decf	Mcp2515ReadCanMsg@mcp_addr,w,c
  4999  001C44  6E35               	movwf	Mcp2515ReadCanMsg@cmd+1,c
  5000                           
  5001                           ;mcp2515.c: 207: Spi_ReadWrite(cmd,3);
  5002  001C46  0E34               	movlw	low Mcp2515ReadCanMsg@cmd
  5003  001C48  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  5004  001C4A  0E00               	movlw	high Mcp2515ReadCanMsg@cmd
  5005  001C4C  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  5006  001C4E  0E03               	movlw	3
  5007  001C50  6E0F               	movwf	Spi_ReadWrite@size,c
  5008  001C52  0E00               	movlw	0
  5009  001C54  6E10               	movwf	Spi_ReadWrite@size+1,c
  5010  001C56  0E00               	movlw	0
  5011  001C58  6E11               	movwf	Spi_ReadWrite@size+2,c
  5012  001C5A  0E00               	movlw	0
  5013  001C5C  6E12               	movwf	Spi_ReadWrite@size+3,c
  5014  001C5E  EC88  F012         	call	_Spi_ReadWrite	;wreg free
  5015                           
  5016                           ;mcp2515.c: 208: msg->rtr = 0;
  5017  001C62  EE20 F00E          	lfsr	2,14
  5018  001C66  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  5019  001C68  26D9               	addwf	fsr2l,f,c
  5020  001C6A  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  5021  001C6C  22DA               	addwfc	fsr2h,f,c
  5022  001C6E  0E00               	movlw	0
  5023  001C70  6EDF               	movwf	indf2,c
  5024                           
  5025                           ;mcp2515.c: 209: if (cmd[2] & 0x08)
  5026  001C72  A636               	btfss	Mcp2515ReadCanMsg@cmd+2,3,c
  5027  001C74  D008               	goto	i2l1691
  5028                           
  5029                           ;mcp2515.c: 210: {
  5030                           ;mcp2515.c: 211: msg->rtr = 1;
  5031  001C76  EE20 F00E          	lfsr	2,14
  5032  001C7A  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  5033  001C7C  26D9               	addwf	fsr2l,f,c
  5034  001C7E  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  5035  001C80  22DA               	addwfc	fsr2h,f,c
  5036  001C82  0E01               	movlw	1
  5037  001C84  6EDF               	movwf	indf2,c
  5038  001C86                     i2l1691:
  5039                           
  5040                           ;mcp2515.c: 212: }
  5041                           ;mcp2515.c: 214: cmd[0] = 0x03;
  5042  001C86  0E03               	movlw	3
  5043  001C88  6E34               	movwf	Mcp2515ReadCanMsg@cmd,c
  5044                           
  5045                           ;mcp2515.c: 215: cmd[1] = mcp_addr+4;
  5046  001C8A  503E               	movf	Mcp2515ReadCanMsg@mcp_addr,w,c
  5047  001C8C  0F04               	addlw	4
  5048  001C8E  6E35               	movwf	Mcp2515ReadCanMsg@cmd+1,c
  5049                           
  5050                           ;mcp2515.c: 216: Spi_ReadWrite(cmd,3);
  5051  001C90  0E34               	movlw	low Mcp2515ReadCanMsg@cmd
  5052  001C92  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  5053  001C94  0E00               	movlw	high Mcp2515ReadCanMsg@cmd
  5054  001C96  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  5055  001C98  0E03               	movlw	3
  5056  001C9A  6E0F               	movwf	Spi_ReadWrite@size,c
  5057  001C9C  0E00               	movlw	0
  5058  001C9E  6E10               	movwf	Spi_ReadWrite@size+1,c
  5059  001CA0  0E00               	movlw	0
  5060  001CA2  6E11               	movwf	Spi_ReadWrite@size+2,c
  5061  001CA4  0E00               	movlw	0
  5062  001CA6  6E12               	movwf	Spi_ReadWrite@size+3,c
  5063  001CA8  EC88  F012         	call	_Spi_ReadWrite	;wreg free
  5064                           
  5065                           ;mcp2515.c: 217: msg->dlc = cmd[2] & 0x0F;
  5066  001CAC  EE20 F005          	lfsr	2,5
  5067  001CB0  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  5068  001CB2  26D9               	addwf	fsr2l,f,c
  5069  001CB4  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  5070  001CB6  22DA               	addwfc	fsr2h,f,c
  5071  001CB8  5036               	movf	Mcp2515ReadCanMsg@cmd+2,w,c
  5072  001CBA  0B0F               	andlw	15
  5073  001CBC  6EDF               	movwf	indf2,c
  5074                           
  5075                           ;mcp2515.c: 219: cmd[0] = 0x03;
  5076  001CBE  0E03               	movlw	3
  5077  001CC0  6E34               	movwf	Mcp2515ReadCanMsg@cmd,c
  5078                           
  5079                           ;mcp2515.c: 220: cmd[1] = mcp_addr+5;
  5080  001CC2  503E               	movf	Mcp2515ReadCanMsg@mcp_addr,w,c
  5081  001CC4  0F05               	addlw	5
  5082  001CC6  6E35               	movwf	Mcp2515ReadCanMsg@cmd+1,c
  5083                           
  5084                           ;mcp2515.c: 221: Spi_ReadWrite(cmd,msg->dlc + 2);
  5085  001CC8  0E34               	movlw	low Mcp2515ReadCanMsg@cmd
  5086  001CCA  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  5087  001CCC  0E00               	movlw	high Mcp2515ReadCanMsg@cmd
  5088  001CCE  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  5089  001CD0  EE20 F005          	lfsr	2,5
  5090  001CD4  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  5091  001CD6  26D9               	addwf	fsr2l,f,c
  5092  001CD8  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  5093  001CDA  22DA               	addwfc	fsr2h,f,c
  5094  001CDC  50DF               	movf	indf2,w,c
  5095  001CDE  6E32               	movwf	??_Mcp2515ReadCanMsg& (0+255),c
  5096  001CE0  6A33               	clrf	(??_Mcp2515ReadCanMsg+1)& (0+255),c
  5097  001CE2  0E02               	movlw	2
  5098  001CE4  2632               	addwf	??_Mcp2515ReadCanMsg,f,c
  5099  001CE6  0E00               	movlw	0
  5100  001CE8  2233               	addwfc	??_Mcp2515ReadCanMsg+1,f,c
  5101  001CEA  C032  F00F         	movff	??_Mcp2515ReadCanMsg,Spi_ReadWrite@size
  5102  001CEE  C033  F010         	movff	??_Mcp2515ReadCanMsg+1,Spi_ReadWrite@size+1
  5103  001CF2  0E00               	movlw	0
  5104  001CF4  BE10               	btfsc	Spi_ReadWrite@size+1,7,c
  5105  001CF6  0EFF               	movlw	-1
  5106  001CF8  6E11               	movwf	Spi_ReadWrite@size+2,c
  5107  001CFA  6E12               	movwf	Spi_ReadWrite@size+3,c
  5108  001CFC  EC88  F012         	call	_Spi_ReadWrite	;wreg free
  5109                           
  5110                           ;mcp2515.c: 222: memcpy((void *)msg->dta,(const void *)&cmd[2],msg->dlc);
  5111  001D00  0E06               	movlw	6
  5112  001D02  2430               	addwf	Mcp2515ReadCanMsg@msg,w,c
  5113  001D04  6E01               	movwf	memcpy@d1,c
  5114  001D06  0E00               	movlw	0
  5115  001D08  2031               	addwfc	Mcp2515ReadCanMsg@msg+1,w,c
  5116  001D0A  6E02               	movwf	memcpy@d1+1,c
  5117  001D0C  0E36               	movlw	low (Mcp2515ReadCanMsg@cmd+2)
  5118  001D0E  6E03               	movwf	memcpy@s1,c
  5119  001D10  0E00               	movlw	high (Mcp2515ReadCanMsg@cmd+2)
  5120  001D12  6E04               	movwf	memcpy@s1+1,c
  5121  001D14  EE20 F005          	lfsr	2,5
  5122  001D18  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  5123  001D1A  26D9               	addwf	fsr2l,f,c
  5124  001D1C  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  5125  001D1E  22DA               	addwfc	fsr2h,f,c
  5126  001D20  50DF               	movf	indf2,w,c
  5127  001D22  6E32               	movwf	??_Mcp2515ReadCanMsg& (0+255),c
  5128  001D24  5032               	movf	??_Mcp2515ReadCanMsg,w,c
  5129  001D26  6E05               	movwf	memcpy@n,c
  5130  001D28  6A06               	clrf	memcpy@n+1,c
  5131  001D2A  EC24  F012         	call	_memcpy	;wreg free
  5132  001D2E  0012               	return		;funcret
  5133  001D30                     __end_of_Mcp2515ReadCanMsg:
  5134                           	opt stack 0
  5135                           pclatu	equ	0xFFB
  5136                           pclath	equ	0xFFA
  5137                           tblptru	equ	0xFF8
  5138                           tblptrh	equ	0xFF7
  5139                           tblptrl	equ	0xFF6
  5140                           tablat	equ	0xFF5
  5141                           prodh	equ	0xFF4
  5142                           prodl	equ	0xFF3
  5143                           intcon	equ	0xFF2
  5144                           intcon2	equ	0xFF1
  5145                           intcon3	equ	0xFF0
  5146                           postinc0	equ	0xFEE
  5147                           fsr0h	equ	0xFEA
  5148                           fsr0l	equ	0xFE9
  5149                           wreg	equ	0xFE8
  5150                           indf1	equ	0xFE7
  5151                           postinc1	equ	0xFE6
  5152                           postdec1	equ	0xFE5
  5153                           fsr1h	equ	0xFE2
  5154                           fsr1l	equ	0xFE1
  5155                           indf2	equ	0xFDF
  5156                           postinc2	equ	0xFDE
  5157                           fsr2h	equ	0xFDA
  5158                           fsr2l	equ	0xFD9
  5159                           status	equ	0xFD8
  5160                           
  5161 ;; *************** function _memcpy *****************
  5162 ;; Defined at:
  5163 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\memcpy.c"
  5164 ;; Parameters:    Size  Location     Type
  5165 ;;  d1              2    0[COMRAM] PTR void 
  5166 ;;		 -> rxBuffer(68), 
  5167 ;;  s1              2    2[COMRAM] PTR const void 
  5168 ;;		 -> Mcp2515ReadCanMsg@cmd(10), 
  5169 ;;  n               2    4[COMRAM] unsigned int 
  5170 ;; Auto vars:     Size  Location     Type
  5171 ;;  s               2    8[COMRAM] PTR const unsigned char 
  5172 ;;		 -> Mcp2515ReadCanMsg@cmd(10), 
  5173 ;;  d               2    6[COMRAM] PTR unsigned char 
  5174 ;;		 -> rxBuffer(68), 
  5175 ;;  tmp             1   10[COMRAM] unsigned char 
  5176 ;; Return value:  Size  Location     Type
  5177 ;;                  2    0[COMRAM] PTR void 
  5178 ;; Registers used:
  5179 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5180 ;; Tracked objects:
  5181 ;;		On entry : 0/0
  5182 ;;		On exit  : 0/0
  5183 ;;		Unchanged: 0/0
  5184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5185 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5186 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5188 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5189 ;;Total ram usage:       11 bytes
  5190 ;; Hardware stack levels used:    1
  5191 ;; This function calls:
  5192 ;;		Nothing
  5193 ;; This function is called by:
  5194 ;;		_Mcp2515ReadCanMsg
  5195 ;; This function uses a non-reentrant model
  5196 ;;
  5197                           
  5198                           	psect	text22
  5199  002448                     __ptext22:
  5200                           	opt stack 0
  5201  002448                     _memcpy:
  5202                           	opt stack 19
  5203                           
  5204                           ;incstack = 0
  5205  002448  C003  F009         	movff	memcpy@s1,memcpy@s
  5206  00244C  C004  F00A         	movff	memcpy@s1+1,memcpy@s+1
  5207  002450  C001  F007         	movff	memcpy@d1,memcpy@d
  5208  002454  C002  F008         	movff	memcpy@d1+1,memcpy@d+1
  5209  002458  D010               	goto	i2l1645
  5210  00245A                     i2l1637:
  5211  00245A  C009  FFD9         	movff	memcpy@s,fsr2l
  5212  00245E  C00A  FFDA         	movff	memcpy@s+1,fsr2h
  5213  002462  50DF               	movf	indf2,w,c
  5214  002464  6E0B               	movwf	memcpy@tmp,c
  5215  002466  4A09               	infsnz	memcpy@s,f,c
  5216  002468  2A0A               	incf	memcpy@s+1,f,c
  5217  00246A  C007  FFD9         	movff	memcpy@d,fsr2l
  5218  00246E  C008  FFDA         	movff	memcpy@d+1,fsr2h
  5219  002472  C00B  FFDF         	movff	memcpy@tmp,indf2
  5220  002476  4A07               	infsnz	memcpy@d,f,c
  5221  002478  2A08               	incf	memcpy@d+1,f,c
  5222  00247A                     i2l1645:
  5223  00247A  0605               	decf	memcpy@n,f,c
  5224  00247C  A0D8               	btfss	status,0,c
  5225  00247E  0606               	decf	memcpy@n+1,f,c
  5226  002480  2805               	incf	memcpy@n,w,c
  5227  002482  E1EB               	bnz	i2l1637
  5228  002484  2806               	incf	memcpy@n+1,w,c
  5229  002486  B4D8               	btfsc	status,2,c
  5230  002488  0012               	return	
  5231  00248A  D7E7               	goto	i2l1637
  5232  00248C                     __end_of_memcpy:
  5233                           	opt stack 0
  5234                           pclatu	equ	0xFFB
  5235                           pclath	equ	0xFFA
  5236                           tblptru	equ	0xFF8
  5237                           tblptrh	equ	0xFF7
  5238                           tblptrl	equ	0xFF6
  5239                           tablat	equ	0xFF5
  5240                           prodh	equ	0xFF4
  5241                           prodl	equ	0xFF3
  5242                           intcon	equ	0xFF2
  5243                           intcon2	equ	0xFF1
  5244                           intcon3	equ	0xFF0
  5245                           postinc0	equ	0xFEE
  5246                           fsr0h	equ	0xFEA
  5247                           fsr0l	equ	0xFE9
  5248                           wreg	equ	0xFE8
  5249                           indf1	equ	0xFE7
  5250                           postinc1	equ	0xFE6
  5251                           postdec1	equ	0xFE5
  5252                           fsr1h	equ	0xFE2
  5253                           fsr1l	equ	0xFE1
  5254                           indf2	equ	0xFDF
  5255                           postinc2	equ	0xFDE
  5256                           fsr2h	equ	0xFDA
  5257                           fsr2l	equ	0xFD9
  5258                           status	equ	0xFD8
  5259                           
  5260 ;; *************** function _Mcp2515ReadCanId *****************
  5261 ;; Defined at:
  5262 ;;		line 164 in file "mcp2515.c"
  5263 ;; Parameters:    Size  Location     Type
  5264 ;;  mcp_addr        1    wreg     const unsigned char 
  5265 ;;  ext             2   18[COMRAM] PTR unsigned char 
  5266 ;;		 -> rxBuffer(68), 
  5267 ;;  can_id          2   20[COMRAM] PTR unsigned long 
  5268 ;;		 -> rxBuffer(68), 
  5269 ;; Auto vars:     Size  Location     Type
  5270 ;;  mcp_addr        1   40[COMRAM] const unsigned char 
  5271 ;;  msg             6   41[COMRAM] unsigned char [6]
  5272 ;; Return value:  Size  Location     Type
  5273 ;;                  1    wreg      void 
  5274 ;; Registers used:
  5275 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5276 ;; Tracked objects:
  5277 ;;		On entry : 0/0
  5278 ;;		On exit  : 0/0
  5279 ;;		Unchanged: 0/0
  5280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5281 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5282 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5283 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5284 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5285 ;;Total ram usage:       29 bytes
  5286 ;; Hardware stack levels used:    1
  5287 ;; Hardware stack levels required when called:    2
  5288 ;; This function calls:
  5289 ;;		_Spi_ReadWrite
  5290 ;; This function is called by:
  5291 ;;		_Mcp2515ReadCanMsg
  5292 ;; This function uses a non-reentrant model
  5293 ;;
  5294                           
  5295                           	psect	text23
  5296  00162E                     __ptext23:
  5297                           	opt stack 0
  5298  00162E                     _Mcp2515ReadCanId:
  5299                           	opt stack 17
  5300                           
  5301                           ;incstack = 0
  5302                           ;Mcp2515ReadCanId@mcp_addr stored from wreg
  5303  00162E  6E29               	movwf	Mcp2515ReadCanId@mcp_addr,c
  5304                           
  5305                           ;mcp2515.c: 167: uint8_t msg[]={0x03,0,0,0,0,0};
  5306  001630  EE20  F0DE         	lfsr	2,Mcp2515ReadCanId@F8123
  5307  001634  EE10  F02A         	lfsr	1,Mcp2515ReadCanId@msg
  5308  001638  0E05               	movlw	5
  5309  00163A                     i2u64_41:
  5310  00163A  CFDB FFE3          	movff	plusw2,plusw1
  5311  00163E  06E8               	decf	wreg,f,c
  5312  001640  E2FC               	bc	i2u64_41
  5313                           
  5314                           ;mcp2515.c: 169: msg[1] = mcp_addr;
  5315  001642  C029  F02B         	movff	Mcp2515ReadCanId@mcp_addr,Mcp2515ReadCanId@msg+1
  5316                           
  5317                           ;mcp2515.c: 170: *ext = 0;
  5318  001646  C013  FFD9         	movff	Mcp2515ReadCanId@ext,fsr2l
  5319  00164A  C014  FFDA         	movff	Mcp2515ReadCanId@ext+1,fsr2h
  5320  00164E  0E00               	movlw	0
  5321  001650  6EDF               	movwf	indf2,c
  5322                           
  5323                           ;mcp2515.c: 171: *can_id = 0;
  5324  001652  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  5325  001656  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  5326  00165A  6ADE               	clrf	postinc2,c
  5327  00165C  6ADE               	clrf	postinc2,c
  5328  00165E  6ADE               	clrf	postinc2,c
  5329  001660  6ADD               	clrf	postdec2,c
  5330                           
  5331                           ;mcp2515.c: 172: Spi_ReadWrite(msg,sizeof(msg));
  5332  001662  0E2A               	movlw	low Mcp2515ReadCanId@msg
  5333  001664  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  5334  001666  0E00               	movlw	high Mcp2515ReadCanId@msg
  5335  001668  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  5336  00166A  0E06               	movlw	6
  5337  00166C  6E0F               	movwf	Spi_ReadWrite@size,c
  5338  00166E  0E00               	movlw	0
  5339  001670  6E10               	movwf	Spi_ReadWrite@size+1,c
  5340  001672  0E00               	movlw	0
  5341  001674  6E11               	movwf	Spi_ReadWrite@size+2,c
  5342  001676  0E00               	movlw	0
  5343  001678  6E12               	movwf	Spi_ReadWrite@size+3,c
  5344  00167A  EC88  F012         	call	_Spi_ReadWrite	;wreg free
  5345                           
  5346                           ;mcp2515.c: 174: *can_id = (msg[0+2]<<3) + (msg[1+2]>>5);
  5347  00167E  C02D  F017         	movff	Mcp2515ReadCanId@msg+3,??_Mcp2515ReadCanId
  5348  001682  0E05               	movlw	5
  5349  001684  6E18               	movwf	(??_Mcp2515ReadCanId+1)& (0+255),c
  5350  001686                     i2u65_45:
  5351  001686  90D8               	bcf	status,0,c
  5352  001688  3217               	rrcf	??_Mcp2515ReadCanId,f,c
  5353  00168A  2E18               	decfsz	(??_Mcp2515ReadCanId+1)& (0+255),f,c
  5354  00168C  D7FC               	goto	i2u65_45
  5355  00168E  502C               	movf	Mcp2515ReadCanId@msg+2,w,c
  5356  001690  6E19               	movwf	(??_Mcp2515ReadCanId+2)& (0+255),c
  5357  001692  6A1A               	clrf	(??_Mcp2515ReadCanId+3)& (0+255),c
  5358  001694  90D8               	bcf	status,0,c
  5359  001696  3619               	rlcf	??_Mcp2515ReadCanId+2,f,c
  5360  001698  361A               	rlcf	??_Mcp2515ReadCanId+3,f,c
  5361  00169A  90D8               	bcf	status,0,c
  5362  00169C  3619               	rlcf	??_Mcp2515ReadCanId+2,f,c
  5363  00169E  361A               	rlcf	??_Mcp2515ReadCanId+3,f,c
  5364  0016A0  90D8               	bcf	status,0,c
  5365  0016A2  3619               	rlcf	??_Mcp2515ReadCanId+2,f,c
  5366  0016A4  361A               	rlcf	??_Mcp2515ReadCanId+3,f,c
  5367  0016A6  5017               	movf	??_Mcp2515ReadCanId,w,c
  5368  0016A8  2419               	addwf	??_Mcp2515ReadCanId+2,w,c
  5369  0016AA  6E1B               	movwf	(??_Mcp2515ReadCanId+4)& (0+255),c
  5370  0016AC  0E00               	movlw	0
  5371  0016AE  201A               	addwfc	??_Mcp2515ReadCanId+3,w,c
  5372  0016B0  6E1C               	movwf	(??_Mcp2515ReadCanId+5)& (0+255),c
  5373  0016B2  6A1D               	clrf	(??_Mcp2515ReadCanId+6)& (0+255),c
  5374  0016B4  BE1C               	btfsc	(??_Mcp2515ReadCanId+5)& (0+255),7,c
  5375  0016B6  061D               	decf	(??_Mcp2515ReadCanId+6)& (0+255),f,c
  5376  0016B8  501D               	movf	(??_Mcp2515ReadCanId+6)& (0+255),w,c
  5377  0016BA  6E1E               	movwf	(??_Mcp2515ReadCanId+7)& (0+255),c
  5378  0016BC  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  5379  0016C0  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  5380  0016C4  C01B  FFDE         	movff	??_Mcp2515ReadCanId+4,postinc2
  5381  0016C8  C01C  FFDE         	movff	??_Mcp2515ReadCanId+5,postinc2
  5382  0016CC  C01D  FFDE         	movff	??_Mcp2515ReadCanId+6,postinc2
  5383  0016D0  C01E  FFDE         	movff	??_Mcp2515ReadCanId+7,postinc2
  5384                           
  5385                           ;mcp2515.c: 176: if ( (msg[1+2] & 0x08) == 0x08 )
  5386  0016D4  A62D               	btfss	Mcp2515ReadCanId@msg+3,3,c
  5387  0016D6  0012               	return	
  5388                           
  5389                           ;mcp2515.c: 177: {
  5390                           ;mcp2515.c: 179: *can_id = (*can_id<<2) + (msg[1+2] & 0x03);
  5391  0016D8  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  5392  0016DC  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  5393  0016E0  CFDE F017          	movff	postinc2,??_Mcp2515ReadCanId
  5394  0016E4  CFDE F018          	movff	postinc2,??_Mcp2515ReadCanId+1
  5395  0016E8  CFDE F019          	movff	postinc2,??_Mcp2515ReadCanId+2
  5396  0016EC  CFDE F01A          	movff	postinc2,??_Mcp2515ReadCanId+3
  5397  0016F0  0E02               	movlw	2
  5398  0016F2                     i2u67_45:
  5399  0016F2  90D8               	bcf	status,0,c
  5400  0016F4  3617               	rlcf	??_Mcp2515ReadCanId,f,c
  5401  0016F6  3618               	rlcf	??_Mcp2515ReadCanId+1,f,c
  5402  0016F8  3619               	rlcf	??_Mcp2515ReadCanId+2,f,c
  5403  0016FA  361A               	rlcf	??_Mcp2515ReadCanId+3,f,c
  5404  0016FC  2EE8               	decfsz	wreg,f,c
  5405  0016FE  D7F9               	goto	i2u67_45
  5406  001700  C02D  F01B         	movff	Mcp2515ReadCanId@msg+3,??_Mcp2515ReadCanId+4
  5407  001704  0E03               	movlw	3
  5408  001706  161B               	andwf	??_Mcp2515ReadCanId+4,f,c
  5409  001708  501B               	movf	??_Mcp2515ReadCanId+4,w,c
  5410  00170A  2417               	addwf	??_Mcp2515ReadCanId,w,c
  5411  00170C  6E1C               	movwf	(??_Mcp2515ReadCanId+5)& (0+255),c
  5412  00170E  0E00               	movlw	0
  5413  001710  2018               	addwfc	??_Mcp2515ReadCanId+1,w,c
  5414  001712  6E1D               	movwf	(??_Mcp2515ReadCanId+6)& (0+255),c
  5415  001714  0E00               	movlw	0
  5416  001716  2019               	addwfc	??_Mcp2515ReadCanId+2,w,c
  5417  001718  6E1E               	movwf	(??_Mcp2515ReadCanId+7)& (0+255),c
  5418  00171A  0E00               	movlw	0
  5419  00171C  201A               	addwfc	??_Mcp2515ReadCanId+3,w,c
  5420  00171E  6E1F               	movwf	(??_Mcp2515ReadCanId+8)& (0+255),c
  5421  001720  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  5422  001724  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  5423  001728  C01C  FFDE         	movff	??_Mcp2515ReadCanId+5,postinc2
  5424  00172C  C01D  FFDE         	movff	??_Mcp2515ReadCanId+6,postinc2
  5425  001730  C01E  FFDE         	movff	??_Mcp2515ReadCanId+7,postinc2
  5426  001734  C01F  FFDE         	movff	??_Mcp2515ReadCanId+8,postinc2
  5427                           
  5428                           ;mcp2515.c: 180: *can_id <<= 16;
  5429  001738  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  5430  00173C  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  5431  001740  0E10               	movlw	16
  5432  001742                     i2u68_45:
  5433  001742  90D8               	bcf	status,0,c
  5434  001744  36DE               	rlcf	postinc2,f,c
  5435  001746  36DE               	rlcf	postinc2,f,c
  5436  001748  36DE               	rlcf	postinc2,f,c
  5437  00174A  36DD               	rlcf	postdec2,f,c
  5438  00174C  06D9               	decf	fsr2l,f,c
  5439  00174E  06D9               	decf	fsr2l,f,c
  5440  001750  2EE8               	decfsz	wreg,f,c
  5441  001752  D7F7               	goto	i2u68_45
  5442                           
  5443                           ;mcp2515.c: 181: *can_id = *can_id +(msg[2+2]<<8) + msg[3+2];
  5444  001754  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  5445  001758  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  5446  00175C  CFDE F017          	movff	postinc2,??_Mcp2515ReadCanId
  5447  001760  CFDE F018          	movff	postinc2,??_Mcp2515ReadCanId+1
  5448  001764  CFDE F019          	movff	postinc2,??_Mcp2515ReadCanId+2
  5449  001768  CFDE F01A          	movff	postinc2,??_Mcp2515ReadCanId+3
  5450  00176C  502E               	movf	Mcp2515ReadCanId@msg+4,w,c
  5451  00176E  6E1C               	movwf	(??_Mcp2515ReadCanId+5)& (0+255),c
  5452  001770  6A1B               	clrf	(??_Mcp2515ReadCanId+4)& (0+255),c
  5453  001772  C01B  F01D         	movff	??_Mcp2515ReadCanId+4,??_Mcp2515ReadCanId+6
  5454  001776  C01C  F01E         	movff	??_Mcp2515ReadCanId+5,??_Mcp2515ReadCanId+7
  5455  00177A  0E00               	movlw	0
  5456  00177C  BE1E               	btfsc	(??_Mcp2515ReadCanId+7)& (0+255),7,c
  5457  00177E  0EFF               	movlw	255
  5458  001780  6E1F               	movwf	(??_Mcp2515ReadCanId+8)& (0+255),c
  5459  001782  6E20               	movwf	(??_Mcp2515ReadCanId+9)& (0+255),c
  5460  001784  502F               	movf	Mcp2515ReadCanId@msg+5,w,c
  5461  001786  241D               	addwf	??_Mcp2515ReadCanId+6,w,c
  5462  001788  6E21               	movwf	(??_Mcp2515ReadCanId+10)& (0+255),c
  5463  00178A  0E00               	movlw	0
  5464  00178C  201E               	addwfc	??_Mcp2515ReadCanId+7,w,c
  5465  00178E  6E22               	movwf	(??_Mcp2515ReadCanId+11)& (0+255),c
  5466  001790  0E00               	movlw	0
  5467  001792  201F               	addwfc	??_Mcp2515ReadCanId+8,w,c
  5468  001794  6E23               	movwf	(??_Mcp2515ReadCanId+12)& (0+255),c
  5469  001796  0E00               	movlw	0
  5470  001798  2020               	addwfc	??_Mcp2515ReadCanId+9,w,c
  5471  00179A  6E24               	movwf	(??_Mcp2515ReadCanId+13)& (0+255),c
  5472  00179C  5017               	movf	??_Mcp2515ReadCanId,w,c
  5473  00179E  2421               	addwf	??_Mcp2515ReadCanId+10,w,c
  5474  0017A0  6E25               	movwf	(??_Mcp2515ReadCanId+14)& (0+255),c
  5475  0017A2  5018               	movf	??_Mcp2515ReadCanId+1,w,c
  5476  0017A4  2022               	addwfc	??_Mcp2515ReadCanId+11,w,c
  5477  0017A6  6E26               	movwf	(??_Mcp2515ReadCanId+15)& (0+255),c
  5478  0017A8  5019               	movf	??_Mcp2515ReadCanId+2,w,c
  5479  0017AA  2023               	addwfc	??_Mcp2515ReadCanId+12,w,c
  5480  0017AC  6E27               	movwf	(??_Mcp2515ReadCanId+16)& (0+255),c
  5481  0017AE  501A               	movf	??_Mcp2515ReadCanId+3,w,c
  5482  0017B0  2024               	addwfc	??_Mcp2515ReadCanId+13,w,c
  5483  0017B2  6E28               	movwf	(??_Mcp2515ReadCanId+17)& (0+255),c
  5484  0017B4  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  5485  0017B8  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  5486  0017BC  C025  FFDE         	movff	??_Mcp2515ReadCanId+14,postinc2
  5487  0017C0  C026  FFDE         	movff	??_Mcp2515ReadCanId+15,postinc2
  5488  0017C4  C027  FFDE         	movff	??_Mcp2515ReadCanId+16,postinc2
  5489  0017C8  C028  FFDE         	movff	??_Mcp2515ReadCanId+17,postinc2
  5490                           
  5491                           ;mcp2515.c: 182: *ext = 1;
  5492  0017CC  C013  FFD9         	movff	Mcp2515ReadCanId@ext,fsr2l
  5493  0017D0  C014  FFDA         	movff	Mcp2515ReadCanId@ext+1,fsr2h
  5494  0017D4  0E01               	movlw	1
  5495  0017D6  6EDF               	movwf	indf2,c
  5496  0017D8  0012               	return	
  5497  0017DA                     __end_of_Mcp2515ReadCanId:
  5498                           	opt stack 0
  5499                           pclatu	equ	0xFFB
  5500                           pclath	equ	0xFFA
  5501                           tblptru	equ	0xFF8
  5502                           tblptrh	equ	0xFF7
  5503                           tblptrl	equ	0xFF6
  5504                           tablat	equ	0xFF5
  5505                           prodh	equ	0xFF4
  5506                           prodl	equ	0xFF3
  5507                           intcon	equ	0xFF2
  5508                           intcon2	equ	0xFF1
  5509                           intcon3	equ	0xFF0
  5510                           postinc0	equ	0xFEE
  5511                           fsr0h	equ	0xFEA
  5512                           fsr0l	equ	0xFE9
  5513                           wreg	equ	0xFE8
  5514                           indf1	equ	0xFE7
  5515                           postinc1	equ	0xFE6
  5516                           postdec1	equ	0xFE5
  5517                           plusw1	equ	0xFE3
  5518                           fsr1h	equ	0xFE2
  5519                           fsr1l	equ	0xFE1
  5520                           indf2	equ	0xFDF
  5521                           postinc2	equ	0xFDE
  5522                           postdec2	equ	0xFDD
  5523                           plusw2	equ	0xFDB
  5524                           fsr2h	equ	0xFDA
  5525                           fsr2l	equ	0xFD9
  5526                           status	equ	0xFD8
  5527                           
  5528 ;; *************** function _Can_OutBufferStatus *****************
  5529 ;; Defined at:
  5530 ;;		line 156 in file "can.c"
  5531 ;; Parameters:    Size  Location     Type
  5532 ;;		None
  5533 ;; Auto vars:     Size  Location     Type
  5534 ;;		None
  5535 ;; Return value:  Size  Location     Type
  5536 ;;                  1    wreg      unsigned char 
  5537 ;; Registers used:
  5538 ;;		wreg, status,2
  5539 ;; Tracked objects:
  5540 ;;		On entry : 0/0
  5541 ;;		On exit  : 0/0
  5542 ;;		Unchanged: 0/0
  5543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5548 ;;Total ram usage:        0 bytes
  5549 ;; Hardware stack levels used:    1
  5550 ;; This function calls:
  5551 ;;		Nothing
  5552 ;; This function is called by:
  5553 ;;		_Can_Isr
  5554 ;; This function uses a non-reentrant model
  5555 ;;
  5556                           
  5557                           	psect	text24
  5558  002576                     __ptext24:
  5559                           	opt stack 0
  5560  002576                     _Can_OutBufferStatus:
  5561                           	opt stack 22
  5562                           
  5563                           ;can.c: 158: return txBufferCount;
  5564                           
  5565                           ;incstack = 0
  5566  002576  0100               	movlb	0	; () banked
  5567  002578  51A8               	movf	_txBufferCount& (0+255),w,b
  5568  00257A  0012               	return	
  5569  00257C                     __end_of_Can_OutBufferStatus:
  5570                           	opt stack 0
  5571                           pclatu	equ	0xFFB
  5572                           pclath	equ	0xFFA
  5573                           tblptru	equ	0xFF8
  5574                           tblptrh	equ	0xFF7
  5575                           tblptrl	equ	0xFF6
  5576                           tablat	equ	0xFF5
  5577                           prodh	equ	0xFF4
  5578                           prodl	equ	0xFF3
  5579                           intcon	equ	0xFF2
  5580                           intcon2	equ	0xFF1
  5581                           intcon3	equ	0xFF0
  5582                           postinc0	equ	0xFEE
  5583                           fsr0h	equ	0xFEA
  5584                           fsr0l	equ	0xFE9
  5585                           wreg	equ	0xFE8
  5586                           indf1	equ	0xFE7
  5587                           postinc1	equ	0xFE6
  5588                           postdec1	equ	0xFE5
  5589                           plusw1	equ	0xFE3
  5590                           fsr1h	equ	0xFE2
  5591                           fsr1l	equ	0xFE1
  5592                           indf2	equ	0xFDF
  5593                           postinc2	equ	0xFDE
  5594                           postdec2	equ	0xFDD
  5595                           plusw2	equ	0xFDB
  5596                           fsr2h	equ	0xFDA
  5597                           fsr2l	equ	0xFD9
  5598                           status	equ	0xFD8
  5599                           
  5600 ;; *************** function _Can_GetStatus *****************
  5601 ;; Defined at:
  5602 ;;		line 344 in file "can.c"
  5603 ;; Parameters:    Size  Location     Type
  5604 ;;		None
  5605 ;; Auto vars:     Size  Location     Type
  5606 ;;  msg4            4   18[COMRAM] unsigned char [4]
  5607 ;;  msg             3   22[COMRAM] unsigned char [3]
  5608 ;;  status          1   25[COMRAM] unsigned char 
  5609 ;; Return value:  Size  Location     Type
  5610 ;;                  1    wreg      unsigned char 
  5611 ;; Registers used:
  5612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5613 ;; Tracked objects:
  5614 ;;		On entry : 0/0
  5615 ;;		On exit  : 0/0
  5616 ;;		Unchanged: 0/0
  5617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5619 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5621 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5622 ;;Total ram usage:        8 bytes
  5623 ;; Hardware stack levels used:    1
  5624 ;; Hardware stack levels required when called:    2
  5625 ;; This function calls:
  5626 ;;		_Spi_ReadWrite
  5627 ;; This function is called by:
  5628 ;;		_Can_Isr
  5629 ;; This function uses a non-reentrant model
  5630 ;;
  5631                           
  5632                           	psect	text25
  5633  002306                     __ptext25:
  5634                           	opt stack 0
  5635  002306                     _Can_GetStatus:
  5636                           	opt stack 20
  5637                           
  5638                           ;can.c: 346: uint8_t status;
  5639                           ;can.c: 347: uint8_t msg[]={0x03,0x2C,0};
  5640                           
  5641                           ; BSR set to: 0
  5642                           ;incstack = 0
  5643  002306  C0F2  F017         	movff	Can_GetStatus@F8262,Can_GetStatus@msg
  5644  00230A  C0F3  F018         	movff	Can_GetStatus@F8262+1,Can_GetStatus@msg+1
  5645  00230E  C0F4  F019         	movff	Can_GetStatus@F8262+2,Can_GetStatus@msg+2
  5646                           
  5647                           ;can.c: 348: uint8_t msg4[]={0x05,0x2C,0x1C,0};
  5648  002312  C0E8  F013         	movff	Can_GetStatus@F8264,Can_GetStatus@msg4
  5649  002316  C0E9  F014         	movff	Can_GetStatus@F8264+1,Can_GetStatus@msg4+1
  5650  00231A  C0EA  F015         	movff	Can_GetStatus@F8264+2,Can_GetStatus@msg4+2
  5651  00231E  C0EB  F016         	movff	Can_GetStatus@F8264+3,Can_GetStatus@msg4+3
  5652                           
  5653                           ;can.c: 350: Spi_ReadWrite(msg,sizeof(msg));
  5654  002322  0E17               	movlw	low Can_GetStatus@msg
  5655  002324  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  5656  002326  0E00               	movlw	high Can_GetStatus@msg
  5657  002328  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  5658  00232A  0E03               	movlw	3
  5659  00232C  6E0F               	movwf	Spi_ReadWrite@size,c
  5660  00232E  0E00               	movlw	0
  5661  002330  6E10               	movwf	Spi_ReadWrite@size+1,c
  5662  002332  0E00               	movlw	0
  5663  002334  6E11               	movwf	Spi_ReadWrite@size+2,c
  5664  002336  0E00               	movlw	0
  5665  002338  6E12               	movwf	Spi_ReadWrite@size+3,c
  5666  00233A  EC88  F012         	call	_Spi_ReadWrite	;wreg free
  5667                           
  5668                           ;can.c: 351: status = msg[2];
  5669  00233E  C019  F01A         	movff	Can_GetStatus@msg+2,Can_GetStatus@status
  5670                           
  5671                           ;can.c: 352: msg4[2] = status & 0x1C;
  5672  002342  501A               	movf	Can_GetStatus@status,w,c
  5673  002344  0B1C               	andlw	28
  5674  002346  6E15               	movwf	Can_GetStatus@msg4+2,c
  5675                           
  5676                           ;can.c: 353: Spi_ReadWrite(msg4,sizeof(msg4));
  5677  002348  0E13               	movlw	low Can_GetStatus@msg4
  5678  00234A  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  5679  00234C  0E00               	movlw	high Can_GetStatus@msg4
  5680  00234E  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  5681  002350  0E04               	movlw	4
  5682  002352  6E0F               	movwf	Spi_ReadWrite@size,c
  5683  002354  0E00               	movlw	0
  5684  002356  6E10               	movwf	Spi_ReadWrite@size+1,c
  5685  002358  0E00               	movlw	0
  5686  00235A  6E11               	movwf	Spi_ReadWrite@size+2,c
  5687  00235C  0E00               	movlw	0
  5688  00235E  6E12               	movwf	Spi_ReadWrite@size+3,c
  5689  002360  EC88  F012         	call	_Spi_ReadWrite	;wreg free
  5690                           
  5691                           ;can.c: 354: return status;
  5692  002364  501A               	movf	Can_GetStatus@status,w,c
  5693  002366  0012               	return	
  5694  002368                     __end_of_Can_GetStatus:
  5695                           	opt stack 0
  5696                           pclatu	equ	0xFFB
  5697                           pclath	equ	0xFFA
  5698                           tblptru	equ	0xFF8
  5699                           tblptrh	equ	0xFF7
  5700                           tblptrl	equ	0xFF6
  5701                           tablat	equ	0xFF5
  5702                           prodh	equ	0xFF4
  5703                           prodl	equ	0xFF3
  5704                           intcon	equ	0xFF2
  5705                           intcon2	equ	0xFF1
  5706                           intcon3	equ	0xFF0
  5707                           postinc0	equ	0xFEE
  5708                           fsr0h	equ	0xFEA
  5709                           fsr0l	equ	0xFE9
  5710                           wreg	equ	0xFE8
  5711                           indf1	equ	0xFE7
  5712                           postinc1	equ	0xFE6
  5713                           postdec1	equ	0xFE5
  5714                           plusw1	equ	0xFE3
  5715                           fsr1h	equ	0xFE2
  5716                           fsr1l	equ	0xFE1
  5717                           indf2	equ	0xFDF
  5718                           postinc2	equ	0xFDE
  5719                           postdec2	equ	0xFDD
  5720                           plusw2	equ	0xFDB
  5721                           fsr2h	equ	0xFDA
  5722                           fsr2l	equ	0xFD9
  5723                           status	equ	0xFD8
  5724                           
  5725 ;; *************** function _Spi_ReadWrite *****************
  5726 ;; Defined at:
  5727 ;;		line 314 in file "can.c"
  5728 ;; Parameters:    Size  Location     Type
  5729 ;;  rx_tx           2   12[COMRAM] PTR unsigned char 
  5730 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515ReadCanMsg@cmd(10), Mcp2515ReadCanId@msg(6), Can_ReadMessage@buf(4), 
  5731 ;;		 -> Can_GetStatus@msg4(4), Can_GetStatus@msg(3), 
  5732 ;;  size            4   14[COMRAM] unsigned long 
  5733 ;; Auto vars:     Size  Location     Type
  5734 ;;		None
  5735 ;; Return value:  Size  Location     Type
  5736 ;;                  1    wreg      void 
  5737 ;; Registers used:
  5738 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5739 ;; Tracked objects:
  5740 ;;		On entry : 0/0
  5741 ;;		On exit  : 0/0
  5742 ;;		Unchanged: 0/0
  5743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5744 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5747 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5748 ;;Total ram usage:        6 bytes
  5749 ;; Hardware stack levels used:    1
  5750 ;; Hardware stack levels required when called:    1
  5751 ;; This function calls:
  5752 ;;		i2_SPIRW
  5753 ;; This function is called by:
  5754 ;;		_Can_GetStatus
  5755 ;;		_Can_ReadMessage
  5756 ;;		_Mcp2515ReadCanId
  5757 ;;		_Mcp2515ReadCanMsg
  5758 ;;		_Mcp2515GetNextFreeTXBuf
  5759 ;; This function uses a non-reentrant model
  5760 ;;
  5761                           
  5762                           	psect	text26
  5763  002510                     __ptext26:
  5764                           	opt stack 0
  5765  002510                     _Spi_ReadWrite:
  5766                           	opt stack 18
  5767                           
  5768                           ;can.c: 316: SPIRW(rx_tx, rx_tx, size);
  5769                           
  5770                           ;incstack = 0
  5771  002510  C00D  F001         	movff	Spi_ReadWrite@rx_tx,i2SPIRW@tx
  5772  002514  C00E  F002         	movff	Spi_ReadWrite@rx_tx+1,i2SPIRW@tx+1
  5773  002518  C00D  F003         	movff	Spi_ReadWrite@rx_tx,i2SPIRW@rx
  5774  00251C  C00E  F004         	movff	Spi_ReadWrite@rx_tx+1,i2SPIRW@rx+1
  5775  002520  C00F  F005         	movff	Spi_ReadWrite@size,i2SPIRW@size
  5776  002524  C010  F006         	movff	Spi_ReadWrite@size+1,i2SPIRW@size+1
  5777  002528  C011  F007         	movff	Spi_ReadWrite@size+2,i2SPIRW@size+2
  5778  00252C  C012  F008         	movff	Spi_ReadWrite@size+3,i2SPIRW@size+3
  5779  002530  EC82  F010         	call	i2_SPIRW	;wreg free
  5780  002534  0012               	return		;funcret
  5781  002536                     __end_of_Spi_ReadWrite:
  5782                           	opt stack 0
  5783                           pclatu	equ	0xFFB
  5784                           pclath	equ	0xFFA
  5785                           tblptru	equ	0xFF8
  5786                           tblptrh	equ	0xFF7
  5787                           tblptrl	equ	0xFF6
  5788                           tablat	equ	0xFF5
  5789                           prodh	equ	0xFF4
  5790                           prodl	equ	0xFF3
  5791                           intcon	equ	0xFF2
  5792                           intcon2	equ	0xFF1
  5793                           intcon3	equ	0xFF0
  5794                           postinc0	equ	0xFEE
  5795                           fsr0h	equ	0xFEA
  5796                           fsr0l	equ	0xFE9
  5797                           wreg	equ	0xFE8
  5798                           indf1	equ	0xFE7
  5799                           postinc1	equ	0xFE6
  5800                           postdec1	equ	0xFE5
  5801                           plusw1	equ	0xFE3
  5802                           fsr1h	equ	0xFE2
  5803                           fsr1l	equ	0xFE1
  5804                           indf2	equ	0xFDF
  5805                           postinc2	equ	0xFDE
  5806                           postdec2	equ	0xFDD
  5807                           plusw2	equ	0xFDB
  5808                           fsr2h	equ	0xFDA
  5809                           fsr2l	equ	0xFD9
  5810                           status	equ	0xFD8
  5811                           
  5812 ;; *************** function i2_SPIRW *****************
  5813 ;; Defined at:
  5814 ;;		line 288 in file "can.c"
  5815 ;; Parameters:    Size  Location     Type
  5816 ;;  tx              2    0[COMRAM] PTR const unsigned char 
  5817 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515WriteCanMsg@buf(10), Mcp2515WriteCanId@buf(6), Mcp2515ReadCanMsg@cmd(10),
      + 
  5818 ;;		 -> Mcp2515ReadCanId@msg(6), Mcp2515Sleep@cmdMask4(3), Mcp2515_Init@cmdWrite3(3), Mcp2515_Init@cmdMask4(4), 
  5819 ;;		 -> Mcp2515_Reset@cmd(1), Can_SendMessage@buf(4), Can_ReadMessage@buf(4), Can_GetStatus@msg4(4), 
  5820 ;;		 -> Can_GetStatus@msg(3), 
  5821 ;;  rx              2    2[COMRAM] PTR unsigned char 
  5822 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515ReadCanMsg@cmd(10), Mcp2515ReadCanId@msg(6), Can_ReadMessage@buf(4), 
  5823 ;;		 -> Can_GetStatus@msg4(4), Can_GetStatus@msg(3), NULL(0), 
  5824 ;;  size            4    4[COMRAM] unsigned long 
  5825 ;; Auto vars:     Size  Location     Type
  5826 ;;  SPIRW           4    8[COMRAM] unsigned long 
  5827 ;; Return value:  Size  Location     Type
  5828 ;;                  1    wreg      void 
  5829 ;; Registers used:
  5830 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5831 ;; Tracked objects:
  5832 ;;		On entry : 0/0
  5833 ;;		On exit  : 0/0
  5834 ;;		Unchanged: 0/0
  5835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5836 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5837 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5839 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5840 ;;Total ram usage:       12 bytes
  5841 ;; Hardware stack levels used:    1
  5842 ;; This function calls:
  5843 ;;		Nothing
  5844 ;; This function is called by:
  5845 ;;		_Spi_ReadWrite
  5846 ;;		i2_Spi_Write
  5847 ;; This function uses a non-reentrant model
  5848 ;;
  5849                           
  5850                           	psect	text27
  5851  002104                     __ptext27:
  5852                           	opt stack 0
  5853  002104                     i2_SPIRW:
  5854                           	opt stack 19
  5855                           
  5856                           ;can.c: 290: uint32_t i;
  5857                           ;can.c: 292: SSPCON1 = 0b00111010;
  5858                           
  5859                           ;incstack = 0
  5860  002104  0E3A               	movlw	58
  5861  002106  6EC6               	movwf	4038,c	;volatile
  5862                           
  5863                           ;can.c: 294: LATD1 = 0;
  5864  002108  928C               	bcf	3980,1,c	;volatile
  5865                           
  5866                           ;can.c: 295: for(i=0;i<size;i++)
  5867  00210A  0E00               	movlw	0
  5868  00210C  6E09               	movwf	i2SPIRW@i,c
  5869  00210E  0E00               	movlw	0
  5870  002110  6E0A               	movwf	i2SPIRW@i+1,c
  5871  002112  0E00               	movlw	0
  5872  002114  6E0B               	movwf	i2SPIRW@i+2,c
  5873  002116  0E00               	movlw	0
  5874  002118  6E0C               	movwf	i2SPIRW@i+3,c
  5875  00211A  D01D               	goto	i2l1595
  5876  00211C                     i2l1587:
  5877                           
  5878                           ;can.c: 296: {
  5879                           ;can.c: 297: SSPBUF = tx[i];
  5880  00211C  5009               	movf	i2SPIRW@i,w,c
  5881  00211E  2401               	addwf	i2SPIRW@tx,w,c
  5882  002120  6ED9               	movwf	fsr2l,c
  5883  002122  500A               	movf	i2SPIRW@i+1,w,c
  5884  002124  2002               	addwfc	i2SPIRW@tx+1,w,c
  5885  002126  6EDA               	movwf	fsr2h,c
  5886  002128  50DF               	movf	indf2,w,c
  5887  00212A  6EC9               	movwf	4041,c	;volatile
  5888  00212C                     i2l192:
  5889  00212C  A69E               	btfss	3998,3,c	;volatile
  5890  00212E  D7FE               	goto	i2l192
  5891                           
  5892                           ;can.c: 299: SSP1IF = 0;
  5893  002130  969E               	bcf	3998,3,c	;volatile
  5894                           
  5895                           ;can.c: 300: if(rx != 0)
  5896  002132  5003               	movf	i2SPIRW@rx,w,c
  5897  002134  1004               	iorwf	i2SPIRW@rx+1,w,c
  5898  002136  B4D8               	btfsc	status,2,c
  5899  002138  D008               	goto	i2l1593
  5900                           
  5901                           ;can.c: 301: rx[i] = SSPBUF;
  5902  00213A  5009               	movf	i2SPIRW@i,w,c
  5903  00213C  2403               	addwf	i2SPIRW@rx,w,c
  5904  00213E  6ED9               	movwf	fsr2l,c
  5905  002140  500A               	movf	i2SPIRW@i+1,w,c
  5906  002142  2004               	addwfc	i2SPIRW@rx+1,w,c
  5907  002144  6EDA               	movwf	fsr2h,c
  5908  002146  CFC9 FFDF          	movff	4041,indf2	;volatile
  5909  00214A                     i2l1593:
  5910  00214A  0E01               	movlw	1
  5911  00214C  2609               	addwf	i2SPIRW@i,f,c
  5912  00214E  0E00               	movlw	0
  5913  002150  220A               	addwfc	i2SPIRW@i+1,f,c
  5914  002152  220B               	addwfc	i2SPIRW@i+2,f,c
  5915  002154  220C               	addwfc	i2SPIRW@i+3,f,c
  5916  002156                     i2l1595:
  5917  002156  5005               	movf	i2SPIRW@size,w,c
  5918  002158  5C09               	subwf	i2SPIRW@i,w,c
  5919  00215A  5006               	movf	i2SPIRW@size+1,w,c
  5920  00215C  580A               	subwfb	i2SPIRW@i+1,w,c
  5921  00215E  5007               	movf	i2SPIRW@size+2,w,c
  5922  002160  580B               	subwfb	i2SPIRW@i+2,w,c
  5923  002162  5008               	movf	i2SPIRW@size+3,w,c
  5924  002164  580C               	subwfb	i2SPIRW@i+3,w,c
  5925  002166  A0D8               	btfss	status,0,c
  5926  002168  D7D9               	goto	i2l1587
  5927                           
  5928                           ;can.c: 302: }
  5929                           ;can.c: 303: LATD1 = 1;
  5930  00216A  828C               	bsf	3980,1,c	;volatile
  5931  00216C  0012               	return		;funcret
  5932  00216E                     __end_ofi2_SPIRW:
  5933                           	opt stack 0
  5934                           pclatu	equ	0xFFB
  5935                           pclath	equ	0xFFA
  5936                           tblptru	equ	0xFF8
  5937                           tblptrh	equ	0xFF7
  5938                           tblptrl	equ	0xFF6
  5939                           tablat	equ	0xFF5
  5940                           prodh	equ	0xFF4
  5941                           prodl	equ	0xFF3
  5942                           intcon	equ	0xFF2
  5943                           intcon2	equ	0xFF1
  5944                           intcon3	equ	0xFF0
  5945                           postinc0	equ	0xFEE
  5946                           fsr0h	equ	0xFEA
  5947                           fsr0l	equ	0xFE9
  5948                           wreg	equ	0xFE8
  5949                           indf1	equ	0xFE7
  5950                           postinc1	equ	0xFE6
  5951                           postdec1	equ	0xFE5
  5952                           plusw1	equ	0xFE3
  5953                           fsr1h	equ	0xFE2
  5954                           fsr1l	equ	0xFE1
  5955                           indf2	equ	0xFDF
  5956                           postinc2	equ	0xFDE
  5957                           postdec2	equ	0xFDD
  5958                           plusw2	equ	0xFDB
  5959                           fsr2h	equ	0xFDA
  5960                           fsr2l	equ	0xFD9
  5961                           status	equ	0xFD8
  5962                           pclatu	equ	0xFFB
  5963                           pclath	equ	0xFFA
  5964                           tblptru	equ	0xFF8
  5965                           tblptrh	equ	0xFF7
  5966                           tblptrl	equ	0xFF6
  5967                           tablat	equ	0xFF5
  5968                           prodh	equ	0xFF4
  5969                           prodl	equ	0xFF3
  5970                           intcon	equ	0xFF2
  5971                           intcon2	equ	0xFF1
  5972                           intcon3	equ	0xFF0
  5973                           postinc0	equ	0xFEE
  5974                           fsr0h	equ	0xFEA
  5975                           fsr0l	equ	0xFE9
  5976                           wreg	equ	0xFE8
  5977                           indf1	equ	0xFE7
  5978                           postinc1	equ	0xFE6
  5979                           postdec1	equ	0xFE5
  5980                           plusw1	equ	0xFE3
  5981                           fsr1h	equ	0xFE2
  5982                           fsr1l	equ	0xFE1
  5983                           indf2	equ	0xFDF
  5984                           postinc2	equ	0xFDE
  5985                           postdec2	equ	0xFDD
  5986                           plusw2	equ	0xFDB
  5987                           fsr2h	equ	0xFDA
  5988                           fsr2l	equ	0xFD9
  5989                           status	equ	0xFD8
  5990                           
  5991                           	psect	rparam
  5992  0000                     pclatu	equ	0xFFB
  5993                           pclath	equ	0xFFA
  5994                           tblptru	equ	0xFF8
  5995                           tblptrh	equ	0xFF7
  5996                           tblptrl	equ	0xFF6
  5997                           tablat	equ	0xFF5
  5998                           prodh	equ	0xFF4
  5999                           prodl	equ	0xFF3
  6000                           intcon	equ	0xFF2
  6001                           intcon2	equ	0xFF1
  6002                           intcon3	equ	0xFF0
  6003                           postinc0	equ	0xFEE
  6004                           fsr0h	equ	0xFEA
  6005                           fsr0l	equ	0xFE9
  6006                           wreg	equ	0xFE8
  6007                           indf1	equ	0xFE7
  6008                           postinc1	equ	0xFE6
  6009                           postdec1	equ	0xFE5
  6010                           plusw1	equ	0xFE3
  6011                           fsr1h	equ	0xFE2
  6012                           fsr1l	equ	0xFE1
  6013                           indf2	equ	0xFDF
  6014                           postinc2	equ	0xFDE
  6015                           postdec2	equ	0xFDD
  6016                           plusw2	equ	0xFDB
  6017                           fsr2h	equ	0xFDA
  6018                           fsr2l	equ	0xFD9
  6019                           status	equ	0xFD8
  6020                           
  6021                           	psect	temp
  6022  00005F                     btemp:
  6023                           	opt stack 0
  6024  00005F                     	ds	1
  6025  0000                     int$flags	set	btemp
  6026                           pclatu	equ	0xFFB
  6027                           pclath	equ	0xFFA
  6028                           tblptru	equ	0xFF8
  6029                           tblptrh	equ	0xFF7
  6030                           tblptrl	equ	0xFF6
  6031                           tablat	equ	0xFF5
  6032                           prodh	equ	0xFF4
  6033                           prodl	equ	0xFF3
  6034                           intcon	equ	0xFF2
  6035                           intcon2	equ	0xFF1
  6036                           intcon3	equ	0xFF0
  6037                           postinc0	equ	0xFEE
  6038                           fsr0h	equ	0xFEA
  6039                           fsr0l	equ	0xFE9
  6040                           wreg	equ	0xFE8
  6041                           indf1	equ	0xFE7
  6042                           postinc1	equ	0xFE6
  6043                           postdec1	equ	0xFE5
  6044                           plusw1	equ	0xFE3
  6045                           fsr1h	equ	0xFE2
  6046                           fsr1l	equ	0xFE1
  6047                           indf2	equ	0xFDF
  6048                           postinc2	equ	0xFDE
  6049                           postdec2	equ	0xFDD
  6050                           plusw2	equ	0xFDB
  6051                           fsr2h	equ	0xFDA
  6052                           fsr2l	equ	0xFD9
  6053                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    63
    Data        24
    BSS         199
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     87      94
    BANK0           160     69     149
    BANK1           256      0     136
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           22      0       0

Pointer List with Targets:

    memcpy@d1	PTR void  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    memcpy@s1	PTR const void  size(2) Largest target is 10
		 -> Mcp2515ReadCanMsg@cmd(COMRAM[10]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 10
		 -> Mcp2515ReadCanMsg@cmd(COMRAM[10]), 

    Mcp2515GetNextFreeTXBuf@txbuf_n	PTR unsigned char  size(2) Largest target is 1
		 -> Can_SendMessage@txbuf_n(COMRAM[1]), 

    Mcp2515WriteCanMsg@msg	PTR const struct CANMESSAGE size(2) Largest target is 68
		 -> txBuffer(BANK1[68]), 

    sp__memcpy	PTR void  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Mcp2515ReadCanMsg@msg	PTR struct CANMESSAGE size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Mcp2515ReadCanId@can_id	PTR unsigned long  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Mcp2515ReadCanId@ext	PTR unsigned char  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Mcp2515_Init@filterCfg	PTR struct CANFILTER size(2) Largest target is 33
		 -> filter(BANK0[33]), 

    Mcp2515_Init@speedCfg	PTR const struct CANSPEED size(2) Largest target is 7
		 -> canSpeed125k(CODE[7]), 

    Can_SendMessage@msg	PTR const struct CANMESSAGE size(2) Largest target is 68
		 -> txBuffer(BANK1[68]), 

    Can_ReadMessage@msg	PTR struct CANMESSAGE size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Spi_Write@tx	PTR unsigned char  size(2) Largest target is 10
		 -> Mcp2515WriteCanMsg@buf(COMRAM[10]), Mcp2515WriteCanId@buf(BANK0[6]), Mcp2515Sleep@cmdMask4(COMRAM[3]), Mcp2515_Init@cmdWrite3(BANK0[3]), 
		 -> Mcp2515_Init@cmdMask4(BANK0[4]), Mcp2515_Reset@cmd(BANK0[1]), Can_SendMessage@buf(COMRAM[4]), Can_ReadMessage@buf(COMRAM[4]), 

    Spi_ReadWrite@rx_tx	PTR unsigned char  size(2) Largest target is 10
		 -> Mcp2515GetNextFreeTXBuf@buf(COMRAM[3]), Mcp2515ReadCanMsg@cmd(COMRAM[10]), Mcp2515ReadCanId@msg(COMRAM[6]), Can_ReadMessage@buf(COMRAM[4]), 
		 -> Can_GetStatus@msg4(COMRAM[4]), Can_GetStatus@msg(COMRAM[3]), 

    SPIRW@rx	PTR unsigned char  size(2) Largest target is 10
		 -> Mcp2515GetNextFreeTXBuf@buf(COMRAM[3]), Mcp2515ReadCanMsg@cmd(COMRAM[10]), Mcp2515ReadCanId@msg(COMRAM[6]), Can_ReadMessage@buf(COMRAM[4]), 
		 -> Can_GetStatus@msg4(COMRAM[4]), Can_GetStatus@msg(COMRAM[3]), NULL(NULL[0]), 

    SPIRW@tx	PTR const unsigned char  size(2) Largest target is 10
		 -> Mcp2515GetNextFreeTXBuf@buf(COMRAM[3]), Mcp2515WriteCanMsg@buf(COMRAM[10]), Mcp2515WriteCanId@buf(BANK0[6]), Mcp2515ReadCanMsg@cmd(COMRAM[10]), 
		 -> Mcp2515ReadCanId@msg(COMRAM[6]), Mcp2515Sleep@cmdMask4(COMRAM[3]), Mcp2515_Init@cmdWrite3(BANK0[3]), Mcp2515_Init@cmdMask4(BANK0[4]), 
		 -> Mcp2515_Reset@cmd(BANK0[1]), Can_SendMessage@buf(COMRAM[4]), Can_ReadMessage@buf(COMRAM[4]), Can_GetStatus@msg4(COMRAM[4]), 
		 -> Can_GetStatus@msg(COMRAM[3]), 

    Can_Init@filterCfg	PTR struct CANFILTER size(2) Largest target is 33
		 -> filter(BANK0[33]), 

    Can_Init@speedCfg	PTR const struct CANSPEED size(2) Largest target is 7
		 -> canSpeed125k(CODE[7]), 

    Can_PutMessage@msgPtr	PTR struct CANMESSAGE size(2) Largest target is 17
		 -> message(BANK0[17]), 

    Can_GetMessage@msgPtr	PTR struct CANMESSAGE size(2) Largest target is 17
		 -> message(BANK0[17]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_Can_Isr
    _Can_Isr->_Can_ReadInBuffer
    _Can_WriteOutBuffer->_Can_SendMessage
    _Can_SendMessage->_Mcp2515WriteCanMsg
    _Mcp2515WriteCanMsg->i2_Mcp2515WriteCanId
    i2_Mcp2515WriteCanId->i2_Spi_Write
    _Mcp2515GetNextFreeTXBuf->_Spi_ReadWrite
    _Can_ReadInBuffer->_Can_ReadMessage
    _Can_ReadMessage->_Mcp2515ReadCanMsg
    i2_Spi_Write->i2_SPIRW
    _Mcp2515ReadCanMsg->_Mcp2515ReadCanId
    _Mcp2515ReadCanId->_Spi_ReadWrite
    _Can_GetStatus->_Spi_ReadWrite
    _Spi_ReadWrite->i2_SPIRW

Critical Paths under _main in BANK0

    _init->_Can_Init
    _readID->_Can_GetMessage
    _readID->_Can_PutMessage
    _Can_Init->_Mcp2515_Init
    _Mcp2515_Init->_Mcp2515WriteCanId
    _Mcp2515_Reset->_Spi_Write
    _Mcp2515WriteCanId->_Spi_Write
    _Spi_Write->_SPIRW

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5   15840
                                             64 BANK0      5     0      5
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0   15840
                           _Can_Init
                             _readID
 ---------------------------------------------------------------------------------
 (2) _readID                                               1     1      0     642
                                              5 BANK0      1     1      0
                     _Can_GetMessage
                     _Can_PutMessage
 ---------------------------------------------------------------------------------
 (3) _Can_PutMessage                                       5     3      2     320
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (3) _Can_GetMessage                                       5     3      2     298
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _Can_Init                                             4     0      4   15198
                                             60 BANK0      4     0      4
                       _Mcp2515_Init
 ---------------------------------------------------------------------------------
 (3) _Mcp2515_Init                                        25    21      4   14850
                                             35 BANK0     25    21      4
                  _Mcp2515WriteCanId
                      _Mcp2515_Reset
                          _Spi_Write
 ---------------------------------------------------------------------------------
 (4) _Mcp2515_Reset                                        5     5      0    3781
                                             18 BANK0      5     5      0
                          _Spi_Write
 ---------------------------------------------------------------------------------
 (4) _Mcp2515WriteCanId                                   17    12      5    5581
                                             18 BANK0     17    12      5
                          _Spi_Write
 ---------------------------------------------------------------------------------
 (4) _Spi_Write                                            6     0      6    3710
                                             12 BANK0      6     0      6
                              _SPIRW
 ---------------------------------------------------------------------------------
 (5) _SPIRW                                               12     4      8     534
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _high_isr                                            14    14      0   15316
                                             73 COMRAM    14    14      0
                            _Can_Isr
 ---------------------------------------------------------------------------------
 (8) _Can_Isr                                              2     2      0   15316
                                             71 COMRAM     2     2      0
                      _Can_GetStatus
                _Can_OutBufferStatus
                   _Can_ReadInBuffer
                 _Can_WriteOutBuffer
 ---------------------------------------------------------------------------------
 (9) _Can_WriteOutBuffer                                   0     0      0    5689
                    _Can_SendMessage
 ---------------------------------------------------------------------------------
 (10) _Can_SendMessage                                     8     6      2    5689
                                             53 COMRAM     8     6      2
            _Mcp2515GetNextFreeTXBuf
                 _Mcp2515WriteCanMsg
                        i2_Spi_Write
 ---------------------------------------------------------------------------------
 (11) _Mcp2515WriteCanMsg                                 18    16      2    2682
                                             35 COMRAM    18    16      2
                i2_Mcp2515WriteCanId
                        i2_Spi_Write
 ---------------------------------------------------------------------------------
 (12) i2_Mcp2515WriteCanId                                17    12      5    1333
                                             18 COMRAM    17    12      5
                        i2_Spi_Write
 ---------------------------------------------------------------------------------
 (11) _Mcp2515GetNextFreeTXBuf                            10     8      2    1927
                                             18 COMRAM    10     8      2
                      _Spi_ReadWrite
 ---------------------------------------------------------------------------------
 (9) _Can_ReadInBuffer                                     3     3      0    7772
                                             68 COMRAM     3     3      0
                    _Can_ReadMessage
 ---------------------------------------------------------------------------------
 (10) _Can_ReadMessage                                     6     4      2    7695
                                             62 COMRAM     6     4      2
                  _Mcp2515ReadCanMsg
                      _Spi_ReadWrite
                        i2_Spi_Write
 ---------------------------------------------------------------------------------
 (11) i2_Spi_Write                                         6     0      6     772
                                             12 COMRAM     6     0      6
                            i2_SPIRW
 ---------------------------------------------------------------------------------
 (11) _Mcp2515ReadCanMsg                                  15    13      2    4754
                                             47 COMRAM    15    13      2
                   _Mcp2515ReadCanId
                      _Spi_ReadWrite
                             _memcpy
 ---------------------------------------------------------------------------------
 (12) _memcpy                                             11     5      6     371
                                              0 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (12) _Mcp2515ReadCanId                                   29    25      4    2157
                                             18 COMRAM    29    25      4
                      _Spi_ReadWrite
 ---------------------------------------------------------------------------------
 (9) _Can_OutBufferStatus                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _Can_GetStatus                                        8     8      0    1744
                                             18 COMRAM     8     8      0
                      _Spi_ReadWrite
 ---------------------------------------------------------------------------------
 (12) _Spi_ReadWrite                                       6     0      6    1594
                                             12 COMRAM     6     0      6
                            i2_SPIRW
 ---------------------------------------------------------------------------------
 (12) i2_SPIRW                                            12     4      8     312
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _Can_Init
       _Mcp2515_Init
         _Mcp2515WriteCanId
           _Spi_Write
             _SPIRW
         _Mcp2515_Reset
           _Spi_Write
             _SPIRW
         _Spi_Write
           _SPIRW
     _readID
       _Can_GetMessage
       _Can_PutMessage

 _high_isr (ROOT)
   _Can_Isr
     _Can_GetStatus
       _Spi_ReadWrite
         i2_SPIRW
     _Can_OutBufferStatus
     _Can_ReadInBuffer
       _Can_ReadMessage
         _Mcp2515ReadCanMsg
           _Mcp2515ReadCanId
             _Spi_ReadWrite
               i2_SPIRW
           _Spi_ReadWrite
             i2_SPIRW
           _memcpy
         _Spi_ReadWrite
           i2_SPIRW
         i2_Spi_Write
           i2_SPIRW
     _Can_WriteOutBuffer
       _Can_SendMessage
         _Mcp2515GetNextFreeTXBuf
           _Spi_ReadWrite
             i2_SPIRW
         _Mcp2515WriteCanMsg
           i2_Mcp2515WriteCanId
             i2_Spi_Write
               i2_SPIRW
           i2_Spi_Write
             i2_SPIRW
         i2_Spi_Write
           i2_SPIRW

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F15      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      88       7       53.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     45      95       5       93.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     57      5E       1      100.0%
BITBANK15           16      0       0      35        0.0%
BANK15              16      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     17B      12        0.0%
DATA                 0      0     17B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Thu May 17 16:16:54 2018

                       i2_Spi_Write 24EA                                  _id 00AB  
                       __CFG_BORV$2 000000                       i2Spi_Write@tx 000D  
                      __CFG_CP0$OFF 000000                        __CFG_CP1$OFF 000000  
                      __CFG_CP2$OFF 000000                        __CFG_CP3$OFF 000000  
                      __CFG_CP4$OFF 000000                        __CFG_CP5$OFF 000000  
                      __CFG_CP6$OFF 000000                        __CFG_CP7$OFF 000000  
                               l251 22A0                                 l192 201C  
                               _GIE 007F97                        __CFG_CPB$OFF 000000  
                               _RB3 007C0B                        __CFG_CPD$OFF 000000  
                               u825 1D9E                                 u835 1DEE  
                               u925 10C0                                 u935 1174  
                               u945 1236                                 fsr2 000FD9  
                               prod 000FF3                                 wreg 000FE8  
                              l2007 1544                                l2019 1590  
                              l2051 239C                                l1601 2004  
                              l1607 2046                                l1609 2054  
                              l1805 1E0E                                l1813 18F0  
                              l1841 1ACA                                l1817 1952  
                              l1771 2276                                l1851 1AF6  
                              l1837 1A68                                l1799 1DB6  
                              l1975 1436                                l1993 14CA  
                              l1979 1440                                _CKE1 007E3E  
                              _CKP1 007E34                       __CFG_DEBUG$ON 000000  
                              _PEIE 007F96                        __CFG_WDTPS$1 000000  
                              _TXIF 007CF4               Mcp2515ReadCanId@F8123 00DE  
                   __end_ofi2_SPIRW 216E                Mcp2515ReadCanMsg@cmd 0034  
              Mcp2515ReadCanMsg@msg 0030                                _main 256E  
                              _init 21D6                                fsr0h 000FEA  
                              fsr1h 000FE2                                fsr2h 000FDA  
                              fsr0l 000FE9                                indf1 000FE7  
                              indf2 000FDF                                fsr1l 000FE1  
                              fsr2l 000FD9                                btemp 005F  
                   __end_of_Can_Isr 2404                                prodh 000FF4  
                              prodl 000FF3                                start 008E  
                     __CFG_IESO$OFF 000000            __end_of_Mcp2515ReadCanId 17DA  
                     __CFG_MCLRE$ON 000000               __size_of_Mcp2515_Init 05EC  
                      ___param_bank 000000                     i2Spi_Write@size 000F  
          __size_of_Can_ReadMessage 00FA                  Can_ReadMessage@buf 0041  
                Can_ReadMessage@msg 003F           Mcp2515WriteCanId@mcp_addr 007A  
                             ?_main 00A0                               ?_init 0001  
                             _BRGH1 007D62                               _CREN1 007D5C  
                             _LATD1 007C61                               _LATG0 007C78  
                             _LATF6 007C76                               _LATF7 007C77  
                             i2l213 1EBE                               i2l238 0052  
                             i2l192 212C                       _Can_GetStatus 2306  
                             _PLLEN 007CDE                               _SPEN1 007D5F  
                             _SPIRW 1FEA                               _SSPIF 007CF3  
                             _TXEN1 007D65                               _SYNC1 007D64  
                             _TXREG 000FAD                       __CFG_WRT0$OFF 000000  
                     __CFG_WRT1$OFF 000000                       __CFG_WRT2$OFF 000000  
                     __CFG_WRT3$OFF 000000                       __CFG_WRT4$OFF 000000  
                    __CFG_EBRT0$OFF 000000                       __CFG_WRT5$OFF 000000  
                    __CFG_EBRT1$OFF 000000                       __CFG_WRT6$OFF 000000  
                    __CFG_EBRT2$OFF 000000                       __CFG_WRT7$OFF 000000  
                    __CFG_EBRT3$OFF 000000                      __CFG_EBRT4$OFF 000000  
                    __CFG_FCMEN$OFF 000000                      __CFG_EBRT5$OFF 000000  
                    __CFG_EBRT6$OFF 000000                      __CFG_EBRT7$OFF 000000  
                     __CFG_WRTB$OFF 000000                       __CFG_WRTC$OFF 000000  
                     __CFG_WRTD$OFF 000000                      __CFG_EBRTB$OFF 000000  
                             _nbTx0 005A                               _nbTx1 0059  
                             _nbTx2 0058                      __CFG_BOREN$OFF 000000  
                             pclath 000FFA                               tablat 000FF5  
                  __end_of_Can_Init 24C0                        _Mcp2515_Init 1042  
           __size_of_Can_PutMessage 01A6                               plusw1 000FE3  
                             plusw2 000FDB                               status 000FD8  
          ?_Mcp2515GetNextFreeTXBuf 0013                     __initialization 216E  
            __size_of_Mcp2515_Reset 0066              Mcp2515ReadCanId@can_id 0015  
                      __end_of_main 2576                        __end_of_init 223C  
          __end_of_Can_ReadInBuffer 2448            __size_of_Can_SendMessage 0064  
             Can_ReadInBuffer@error 0045                        _canSpeed100k 101D  
                      _canSpeed125k 1039                        _canSpeed250k 1016  
                      _canSpeed500k 100F                        _canSpeed800k 1008  
                            ??_main 00A5                              ??_init 00A0  
          Can_ReadInBuffer@rdStatus 0046                      ?_Can_GetStatus 0001  
             __end_of_Spi_ReadWrite 2536                       __activetblptr 000001  
                    __CFG_PLLCFG$ON 000000                              ?_SPIRW 0060  
                    __CFG_RETEN$OFF 000000                           ??i2_SPIRW 0009  
                    _Can_GetMessage 1980                              SPIRW@i 0068  
                            _BRG161 007B2B                           ??_Can_Isr 0048  
                            _INT3IE 007F85                              _INT3IF 007F82  
                   __CFG_BBSIZ$BB1K 000000                              i2l2143 23F2  
                            i2l2073 240C                              i2l2139 23EC  
                            i2l2077 2414                              i2l2087 2440  
                            i2l2089 2444                              i2l1713 20A0  
                            i2l1731 2100                              i2l1637 245A  
                            i2l1645 247A                              i2l1709 2098  
                    __CFG_WDTEN$OFF 000000                              i2l1727 20FC  
                            i2l1743 1B10                              i2l1593 214A  
                            i2l1587 211C                              i2l1595 2156  
                            i2l1691 1C86                              i2l1915 1F28  
                            i2l1675 1FCC                              i2l1747 1B48  
                            i2l1669 1F8E                              i2l1757 1BF6  
                            i2l1919 22A2                              i2l1883 1EBA  
                            _OSCCON 000FD3              Mcp2515WriteCanId@canid 0081  
                            _SPBRG1 000FAF                              _SSP1IF 007CF3  
                            _TRISC3 007CA3                              _TRISD1 007CA9  
                            _TRISC4 007CA4                              _TRISC5 007CA5  
                            _SSPEN1 007E35                              _TRISG0 007CC0  
                            _TRISF6 007CBE                              _TRISF7 007CBF  
                            _SSPBUF 000FC9                      __CFG_PWRTEN$ON 000000  
                    __CFG_XINST$OFF 000000                    __end_of_high_isr 008E  
   Mcp2515GetNextFreeTXBuf@ctrlregs 0016                      __CFG_STVREN$ON 000000  
                            _filter 00AC                              _readID 2368  
                            _memcpy 2448                              clear_0 21A6  
                            clear_1 21B2                   ??_Can_ReadMessage 0041  
                __size_of_Spi_Write 002A                   Can_GetStatus@msg4 0013  
                      __pdataCOMRAM 005E              __end_of_Can_GetMessage 1AFA  
                Can_SendMessage@buf 0038                  Can_SendMessage@msg 0036  
                Can_SendMessage@res 003C                        __mediumconst 0000  
                            tblptrh 000FF7                              tblptrl 000FF6  
                            tblptru 000FF8                       _Mcp2515_Reset 223C  
                    _rxBufferPtrOut 00AA                     __CFG_BORPWR$LOW 000000  
   __end_of_Mcp2515GetNextFreeTXBuf 2104                          __accesstop 0060  
           __end_of__initialization 21C4                       ___rparam_used 000001  
      __size_ofi2_Mcp2515WriteCanId 00BE                        readID@retVal 0065  
                     __end_of_SPIRW 207C           Mcp2515ReadCanMsg@mcp_addr 003E  
                    __pcstackCOMRAM 0001                        __pidataBANK0 2556  
                      ?i2_Spi_Write 000D                     ??_Can_GetStatus 0013  
                         ?_Can_Init 009C                       _canSpeed1000k 1001  
                 ??_Can_SendMessage 0038                             ??_SPIRW 0068  
                    ?_Mcp2515_Reset 0001                Mcp2515WriteCanId@buf 007B  
                   ?_Can_GetMessage 0060                Mcp2515WriteCanId@ext 0072  
        __end_of_Mcp2515WriteCanMsg 1C22         __size_of_Can_WriteOutBuffer 0020  
      __size_of_Can_OutBufferStatus 0006                          __pbssBANK0 00A5  
                        __pbssBANK1 0100                      _Can_PutMessage 17DA  
                 __end_of_Spi_Write 24EA                   ?_Mcp2515ReadCanId 0013  
                __CFG_CCP2MX$PORTBE 000000                     Can_PutMessage@i 0064  
                ??_Mcp2515ReadCanId 0017                             SPIRW@rx 0062  
                           SPIRW@tx 0060                             ?_readID 0001  
                           ?_memcpy 0001                          ??_Can_Init 00A0  
                           _INTEDG3 007F8B                   Spi_ReadWrite@size 000F  
           Mcp2515WriteCanId@can_id 0073                             i2_SPIRW 2104  
                           i2u71_45 1F7E                             i2u64_41 163A  
                           i2u72_45 1FB8                             i2u65_45 1686  
                           _SPBRGH1 000FD4                             i2u67_45 16F2  
                           i2u68_45 1742                             _SSPCON1 000FC6  
            __end_of_Can_PutMessage 1980                           SPIRW@size 0064  
                         ?_high_isr 0001                             _Can_Isr 23BC  
              Can_GetMessage@msgPtr 0060                             __Hparam 0000  
                           __Lparam 0000                   ?_Can_ReadInBuffer 0001  
                      __psmallconst 1000                         Spi_Write@tx 006C  
                   __size_of_readID 0054                             __pcinit 216E  
                   __size_of_memcpy 0044                             __ramtop 1000  
                ??_Can_ReadInBuffer 0045                             __ptext0 256E  
                           __ptext1 21D6                             __ptext2 2368  
                           __ptext3 17DA                             __ptext4 1980  
                           __ptext5 248C                             __ptext6 1042  
                           __ptext7 223C                             __ptext8 1D30  
                           __ptext9 24C0                     ??_Mcp2515_Reset 0072  
  __size_of_Mcp2515GetNextFreeTXBuf 0088                  Can_GetStatus@F8262 00F2  
                Can_GetStatus@F8264 00E8                             _message 00CD  
                 __CFG_MSSPMSK$MSK7 000000                     ?_Can_PutMessage 0060  
                        ??_high_isr 004A                  __CFG_INTOSCSEL$LOW 000000  
             Mcp2515_Init@cmdWrite3 0099                end_of_initialization 21C4  
                         i2SPIRW@rx 0003                           i2SPIRW@tx 0001  
                           memcpy@d 0007                             memcpy@n 0005  
                           memcpy@s 0009                 __end_of_canSpeed10k 1039  
               __end_of_canSpeed20k 1032                 __end_of_canSpeed50k 102B  
                   _Can_ReadMessage 1E32               Mcp2515_Init@filterCfg 0085  
                           postdec1 000FE5                             postdec2 000FDD  
                    Mcp2515_Reset@i 0073                             postinc0 000FEE  
                           postinc1 000FE6                             postinc2 000FDE  
              __size_ofi2_Spi_Write 0026                    __CFG_FOSC$INTIO2 000000  
               i2_Mcp2515WriteCanId 1F2C                      _txBufferPtrOut 005B  
               Mcp2515ReadCanId@ext 0013                 Mcp2515ReadCanId@msg 002A  
              ?i2_Mcp2515WriteCanId 0013              __size_of_Spi_ReadWrite 0026  
      Mcp2515GetNextFreeTXBuf@F8153 00EC                     _Can_SendMessage 22A2  
               _Can_OutBufferStatus 2576         i2Mcp2515WriteCanId@mcp_addr 001B  
                     __pidataCOMRAM 257C                    ??_Can_GetMessage 0062  
                    __end_of_readID 23BC                      __end_of_memcpy 248C  
               start_initialization 216E                   __size_of_Can_Init 0034  
          Mcp2515ReadCanId@mcp_addr 0029            i2Mcp2515WriteCanId@canid 0022  
                       _canSpeed10k 1032                         _canSpeed20k 102B  
                       _canSpeed50k 1024                ?_Can_OutBufferStatus 0001  
           __end_of_Can_ReadMessage 1F2C               ??i2_Mcp2515WriteCanId 0018  
                _Mcp2515WriteCanMsg 1AFA          Mcp2515GetNextFreeTXBuf@buf 0019  
          Mcp2515GetNextFreeTXBuf@i 001C                           _Spi_Write 24C0  
               ?_Mcp2515WriteCanMsg 0024               Mcp2515WriteCanMsg@dlc 0033  
             Mcp2515WriteCanMsg@buf 0028               Mcp2515WriteCanMsg@msg 0024  
                       __pdataBANK0 00DE                            ??_readID 0065  
                  Can_GetStatus@msg 0017                            ??_memcpy 0007  
                     _rxBufferCount 005C                       _rxBufferPtrIn 005D  
           _Mcp2515GetNextFreeTXBuf 207C               __end_of_Can_GetStatus 2368  
                     _Spi_ReadWrite 2510           __size_of_Mcp2515ReadCanId 01AC  
                       __pbssCOMRAM 0058          __end_of_Can_WriteOutBuffer 2556  
                     __pcstackBANK0 0060                            ?i2_SPIRW 0001  
             ??_Can_OutBufferStatus 0001                ??_Mcp2515WriteCanMsg 0026  
                          ?_Can_Isr 0001                       ?_Mcp2515_Init 0083  
                     Spi_Write@size 006E                   __size_of_high_isr 0086  
               Mcp2515WriteCanMsg@i 0035             __end_of_Can_SendMessage 2306  
                 _Mcp2515ReadCanMsg 1C22                  ?_Mcp2515ReadCanMsg 0030  
                         __pintcode 0008                          ?_Spi_Write 006C  
               ??_Mcp2515ReadCanMsg 0032                      ?_Spi_ReadWrite 000D  
                       __smallconst 1000                    ??_Can_PutMessage 0062  
                    __size_of_SPIRW 0092                   Mcp2515_Init@F8112 00E4  
                 Mcp2515_Init@F8114 00EF              Can_SendMessage@txbuf_n 003D  
         __size_of_Can_ReadInBuffer 0044          Mcp2515WriteCanMsg@mcp_addr 0034  
                    ??_Mcp2515_Init 0087           __end_of_Mcp2515ReadCanMsg 1D30  
              Mcp2515_Init@cmdMask4 0095                    ?_Can_ReadMessage 003F  
                          i2SPIRW@i 0009                  Spi_ReadWrite@rx_tx 000D  
                     Mcp2515_Init@i 0094           i2Mcp2515WriteCanId@can_id 0014  
                 Mcp2515Sleep@F8117 00A5           ??_Mcp2515GetNextFreeTXBuf 0015  
                     _txBufferCount 00A8                            _Can_Init 248C  
                     _txBufferPtrIn 00A9                    __CFG_SOSCSEL$LOW 000000  
              Mcp2515_Init@speedCfg 0083                     Can_GetMessage@i 0064  
             __end_of_Mcp2515_Reset 22A2  Mcp2515WriteCanMsg@buffer_sidh_addr 0032  
                  __size_ofi2_SPIRW 006A                           copy_data0 2182  
                       i2SPIRW@size 0005                    __size_of_Can_Isr 0048  
                  ?_Can_SendMessage 0036                   _Mcp2515WriteCanId 1D30  
                          __Hrparam 0000                           memcpy@tmp 000B  
                          __Lrparam 0000                Can_PutMessage@msgPtr 0060  
                      __Lsmallconst 1000                  ?_Mcp2515WriteCanId 0072  
                     ??i2_Spi_Write 0013                         ??_Spi_Write 0072  
                   ??_Spi_ReadWrite 0013                 ??_Mcp2515WriteCanId 0077  
             __end_of_canSpeed1000k 1008      Mcp2515GetNextFreeTXBuf@txbuf_n 0013  
                  _Mcp2515ReadCanId 162E                            __ptext10 1FEA  
                          __ptext20 24EA                            __ptext12 23BC  
                          __ptext21 1C22                            __ptext13 2536  
                          __ptext22 2448                            __ptext14 22A2  
                          __ptext23 162E                            __ptext15 1AFA  
                          __ptext24 2576                            __ptext16 1F2C  
                          __ptext25 2306                            __ptext17 207C  
                          __ptext26 2510                            __ptext18 2404  
                          __ptext27 2104                            __ptext19 1E32  
                          _high_isr 0008          __size_of_Mcp2515ReadCanMsg 010E  
                 Can_Init@filterCfg 009E                       __size_of_main 0008  
                     __size_of_init 0066           __end_of_Mcp2515WriteCanId 1E32  
               __CFG_RTCOSC$SOSCREF 000000                            _rxBuffer 0144  
                          _txBuffer 0100                            int$flags 005F  
                          main@argc 00A0                            main@argv 00A2  
              __end_of_Mcp2515_Init 162E                    Mcp2515_Reset@cmd 0072  
               __end_ofi2_Spi_Write 2510              i2Mcp2515WriteCanId@buf 001C  
            i2Mcp2515WriteCanId@ext 0013                            memcpy@d1 0001  
                          memcpy@s1 0003                    _Can_ReadInBuffer 2404  
               Can_GetStatus@status 001A         __end_ofi2_Mcp2515WriteCanId 1FEA  
              __end_of_canSpeed100k 1024                __end_of_canSpeed125k 1040  
              __end_of_canSpeed250k 101D                __end_of_canSpeed500k 1016  
                          intlevel2 0000                __end_of_canSpeed800k 100F  
                _Can_WriteOutBuffer 2536                 ?_Can_WriteOutBuffer 0001  
                 Can_ReadInBuffer@i 0047                    Can_Init@speedCfg 009C  
       __end_of_Can_OutBufferStatus 257C                ??_Can_WriteOutBuffer 003E  
           __size_of_Can_GetMessage 017A         __size_of_Mcp2515WriteCanMsg 0128  
        __size_of_Mcp2515WriteCanId 0102                      Can_Isr@nbTxBuf 005E  
            __size_of_Can_GetStatus 0062                      Can_Isr@retCode 0049  
