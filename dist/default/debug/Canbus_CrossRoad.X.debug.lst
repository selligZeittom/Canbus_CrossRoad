

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Thu May 24 15:51:50 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F87K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    66                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    67                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    68  0000                     
    69                           ; Version 1.42
    70                           ; Generated 13/04/2017 GMT
    71                           ; 
    72                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    73                           ; All rights reserved.
    74                           ; 
    75                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    76                           ; 
    77                           ; Redistribution and use in source and binary forms, with or without modification, are
    78                           ; permitted provided that the following conditions are met:
    79                           ; 
    80                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    81                           ;        conditions and the following disclaimer.
    82                           ; 
    83                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    84                           ;        of conditions and the following disclaimer in the documentation and/or other
    85                           ;        materials provided with the distribution.
    86                           ; 
    87                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    88                           ;        software without specific prior written permission.
    89                           ; 
    90                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    91                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    92                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    93                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    94                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    95                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    96                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    97                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    98                           ; 
    99                           ; 
   100                           ; Code-generator required, PIC18F87K22 Definitions
   101                           ; 
   102                           ; SFR Addresses
   103  0000                     
   104                           	psect	idataCOMRAM
   105  00348E                     __pidataCOMRAM:
   106                           	opt stack 0
   107                           
   108                           ;initializer for Can_Isr@nbTxBuf
   109  00348E  03                 	db	3
   110                           
   111                           	psect	idataBANK0
   112  00345E                     __pidataBANK0:
   113                           	opt stack 0
   114                           
   115                           ;initializer for Mcp2515ReadCanId@F8123
   116  00345E  03                 	db	3
   117  00345F  00                 	db	0
   118  003460  00                 	db	0
   119  003461  00                 	db	0
   120  003462  00                 	db	0
   121  003463  00                 	db	0
   122                           
   123                           ;initializer for Mcp2515_Init@F8112
   124  003464  05                 	db	5
   125  003465  0F                 	db	15
   126  003466  E0                 	db	224
   127  003467  80                 	db	128
   128                           
   129                           ;initializer for Can_GetStatus@F8264
   130  003468  05                 	db	5
   131  003469  2C                 	db	44
   132  00346A  1C                 	db	28
   133  00346B  00                 	db	0
   134                           
   135                           ;initializer for Mcp2515GetNextFreeTXBuf@F8153
   136  00346C  30                 	db	48
   137  00346D  40                 	db	64
   138  00346E  50                 	db	80
   139                           
   140                           ;initializer for Mcp2515_Init@F8114
   141  00346F  02                 	db	2
   142  003470  00                 	db	0
   143  003471  00                 	db	0
   144                           
   145                           ;initializer for Can_GetStatus@F8262
   146  003472  03                 	db	3
   147  003473  2C                 	db	44
   148  003474  00                 	db	0
   149                           
   150                           	psect	smallconst
   151  001000                     __psmallconst:
   152                           	opt stack 0
   153  001000  00                 	db	0
   154  001001                     _canSpeed1000k:
   155                           	opt stack 0
   156  001001  00                 	db	0
   157  001002  01                 	db	1
   158  001003  00                 	db	0
   159  001004  03                 	db	3
   160  001005  01                 	db	1
   161  001006  01                 	db	1
   162  001007  01                 	db	1
   163  001008                     __end_of_canSpeed1000k:
   164                           	opt stack 0
   165  001008                     _canSpeed800k:
   166                           	opt stack 0
   167  001008  00                 	db	0
   168  001009  01                 	db	1
   169  00100A  02                 	db	2
   170  00100B  03                 	db	3
   171  00100C  01                 	db	1
   172  00100D  01                 	db	1
   173  00100E  01                 	db	1
   174  00100F                     __end_of_canSpeed800k:
   175                           	opt stack 0
   176  00100F                     _canSpeed500k:
   177                           	opt stack 0
   178  00100F  01                 	db	1
   179  001010  01                 	db	1
   180  001011  00                 	db	0
   181  001012  03                 	db	3
   182  001013  01                 	db	1
   183  001014  01                 	db	1
   184  001015  01                 	db	1
   185  001016                     __end_of_canSpeed500k:
   186                           	opt stack 0
   187  001016                     _canSpeed250k:
   188                           	opt stack 0
   189  001016  03                 	db	3
   190  001017  01                 	db	1
   191  001018  00                 	db	0
   192  001019  03                 	db	3
   193  00101A  01                 	db	1
   194  00101B  01                 	db	1
   195  00101C  01                 	db	1
   196  00101D                     __end_of_canSpeed250k:
   197                           	opt stack 0
   198  00101D                     _canSpeed100k:
   199                           	opt stack 0
   200  00101D  07                 	db	7
   201  00101E  01                 	db	1
   202  00101F  02                 	db	2
   203  001020  03                 	db	3
   204  001021  01                 	db	1
   205  001022  01                 	db	1
   206  001023  01                 	db	1
   207  001024                     __end_of_canSpeed100k:
   208                           	opt stack 0
   209  001024                     _canSpeed50k:
   210                           	opt stack 0
   211  001024  0F                 	db	15
   212  001025  01                 	db	1
   213  001026  02                 	db	2
   214  001027  03                 	db	3
   215  001028  01                 	db	1
   216  001029  01                 	db	1
   217  00102A  01                 	db	1
   218  00102B                     __end_of_canSpeed50k:
   219                           	opt stack 0
   220  00102B                     _canSpeed20k:
   221                           	opt stack 0
   222  00102B  13                 	db	19
   223  00102C  01                 	db	1
   224  00102D  06                 	db	6
   225  00102E  06                 	db	6
   226  00102F  04                 	db	4
   227  001030  01                 	db	1
   228  001031  01                 	db	1
   229  001032                     __end_of_canSpeed20k:
   230                           	opt stack 0
   231  001032                     _canSpeed10k:
   232                           	opt stack 0
   233  001032  1F                 	db	31
   234  001033  01                 	db	1
   235  001034  07                 	db	7
   236  001035  07                 	db	7
   237  001036  07                 	db	7
   238  001037  01                 	db	1
   239  001038  01                 	db	1
   240  001039                     __end_of_canSpeed10k:
   241                           	opt stack 0
   242  001039                     _canSpeed125k:
   243                           	opt stack 0
   244  001039  07                 	db	7
   245  00103A  01                 	db	1
   246  00103B  00                 	db	0
   247  00103C  03                 	db	3
   248  00103D  01                 	db	1
   249  00103E  01                 	db	1
   250  00103F  01                 	db	1
   251  001040                     __end_of_canSpeed125k:
   252                           	opt stack 0
   253  0000                     _TMR0	set	4054
   254  0000                     _SPBRG1	set	4015
   255  0000                     _SPBRGH1	set	4052
   256  0000                     _OSCCON	set	4051
   257  0000                     _TXREG	set	4013
   258  0000                     _T0CONbits	set	4053
   259  0000                     _SSPBUF	set	4041
   260  0000                     _SSPCON1	set	4038
   261  0000                     _TMR0IE	set	32661
   262  0000                     _TXEN1	set	32101
   263  0000                     _CREN1	set	32092
   264  0000                     _SPEN1	set	32095
   265  0000                     _SYNC1	set	32100
   266  0000                     _BRG161	set	31531
   267  0000                     _BRGH1	set	32098
   268  0000                     _LATG0	set	31864
   269  0000                     _TRISG0	set	31936
   270  0000                     _PLLEN	set	31966
   271  0000                     _TXIF	set	31988
   272  0000                     _TMR0IF	set	32658
   273  0000                     _RB3	set	31755
   274  0000                     _SSP1IF	set	31987
   275  0000                     _SSPIF	set	31987
   276  0000                     _LATD1	set	31841
   277  0000                     _GIE	set	32663
   278  0000                     _PEIE	set	32662
   279  0000                     _INTEDG3	set	32651
   280  0000                     _SSPEN1	set	32309
   281  0000                     _CKP1	set	32308
   282  0000                     _CKE1	set	32318
   283  0000                     _TRISD1	set	31913
   284  0000                     _TRISC3	set	31907
   285  0000                     _TRISC5	set	31909
   286  0000                     _TRISC4	set	31908
   287  0000                     _LATF7	set	31863
   288  0000                     _LATF6	set	31862
   289  0000                     _TRISF7	set	31935
   290  0000                     _TRISF6	set	31934
   291  0000                     _INT3IF	set	32642
   292  0000                     _INT3IE	set	32645
   293                           
   294                           ; #config settings
   295  001040  00                 	db	0	; dummy byte at the end
   296  0000                     
   297                           	psect	cinit
   298  002E12                     __pcinit:
   299                           	opt stack 0
   300  002E12                     start_initialization:
   301                           	opt stack 0
   302  002E12                     __initialization:
   303                           	opt stack 0
   304                           
   305                           ; Initialize objects allocated to BANK0 (23 bytes)
   306                           ; load TBLPTR registers with __pidataBANK0
   307  002E12  0E5E               	movlw	low __pidataBANK0
   308  002E14  6EF6               	movwf	tblptrl,c
   309  002E16  0E34               	movlw	high __pidataBANK0
   310  002E18  6EF7               	movwf	tblptrh,c
   311  002E1A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   312  002E1C  6EF8               	movwf	tblptru,c
   313  002E1E  EE00  F0E9         	lfsr	0,__pdataBANK0
   314  002E22  EE10 F017          	lfsr	1,23
   315  002E26                     copy_data0:
   316  002E26  0009               	tblrd		*+
   317  002E28  CFF5 FFEE          	movff	tablat,postinc0
   318  002E2C  50E5               	movf	postdec1,w,c
   319  002E2E  50E1               	movf	fsr1l,w,c
   320  002E30  E1FA               	bnz	copy_data0
   321                           
   322                           ; Initialize objects allocated to COMRAM (1 bytes)
   323                           ; load TBLPTR registers with __pidataCOMRAM
   324  002E32  0E8E               	movlw	low __pidataCOMRAM
   325  002E34  6EF6               	movwf	tblptrl,c
   326  002E36  0E34               	movlw	high __pidataCOMRAM
   327  002E38  6EF7               	movwf	tblptrh,c
   328  002E3A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   329  002E3C  6EF8               	movwf	tblptru,c
   330  002E3E  0009               	tblrd		*+	;fetch initializer
   331  002E40  CFF5 F05E          	movff	tablat,__pdataCOMRAM
   332                           
   333                           ; Clear objects allocated to BANK2 (144 bytes)
   334  002E44  EE02  F000         	lfsr	0,__pbssBANK2
   335  002E48  0E90               	movlw	144
   336  002E4A                     clear_0:
   337  002E4A  6AEE               	clrf	postinc0,c
   338  002E4C  06E8               	decf	wreg,f,c
   339  002E4E  E1FD               	bnz	clear_0
   340                           
   341                           ; Clear objects allocated to BANK1 (205 bytes)
   342  002E50  EE01  F000         	lfsr	0,__pbssBANK1
   343  002E54  0ECD               	movlw	205
   344  002E56                     clear_1:
   345  002E56  6AEE               	clrf	postinc0,c
   346  002E58  06E8               	decf	wreg,f,c
   347  002E5A  E1FD               	bnz	clear_1
   348                           
   349                           ; Clear objects allocated to BANK0 (58 bytes)
   350  002E5C  EE00  F0AF         	lfsr	0,__pbssBANK0
   351  002E60  0E3A               	movlw	58
   352  002E62                     clear_2:
   353  002E62  6AEE               	clrf	postinc0,c
   354  002E64  06E8               	decf	wreg,f,c
   355  002E66  E1FD               	bnz	clear_2
   356                           
   357                           ; Clear objects allocated to COMRAM (6 bytes)
   358  002E68  6A5D               	clrf	(__pbssCOMRAM+5)& (0+255),c
   359  002E6A  6A5C               	clrf	(__pbssCOMRAM+4)& (0+255),c
   360  002E6C  6A5B               	clrf	(__pbssCOMRAM+3)& (0+255),c
   361  002E6E  6A5A               	clrf	(__pbssCOMRAM+2)& (0+255),c
   362  002E70  6A59               	clrf	(__pbssCOMRAM+1)& (0+255),c
   363  002E72  6A58               	clrf	__pbssCOMRAM& (0+255),c
   364  002E74                     end_of_initialization:
   365                           	opt stack 0
   366  002E74                     __end_of__initialization:
   367                           	opt stack 0
   368  002E74  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   369  002E76  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   370  002E78  0100               	movlb	0
   371  002E7A  EFB1  F00C         	goto	_main	;jump to C main() function
   372                           tblptru	equ	0xFF8
   373                           tblptrh	equ	0xFF7
   374                           tblptrl	equ	0xFF6
   375                           tablat	equ	0xFF5
   376                           postinc0	equ	0xFEE
   377                           wreg	equ	0xFE8
   378                           postdec1	equ	0xFE5
   379                           fsr1l	equ	0xFE1
   380                           
   381                           	psect	bssCOMRAM
   382  000058                     __pbssCOMRAM:
   383                           	opt stack 0
   384  000058                     _txBufferPtrOut:
   385                           	opt stack 0
   386  000058                     	ds	1
   387  000059                     _rxBufferCount:
   388                           	opt stack 0
   389  000059                     	ds	1
   390  00005A                     _rxBufferPtrIn:
   391                           	opt stack 0
   392  00005A                     	ds	1
   393  00005B                     _topRight:
   394                           	opt stack 0
   395  00005B                     	ds	1
   396  00005C                     _bottomRight:
   397                           	opt stack 0
   398  00005C                     	ds	1
   399  00005D                     _numberWaitingUsers:
   400                           	opt stack 0
   401  00005D                     	ds	1
   402                           tblptru	equ	0xFF8
   403                           tblptrh	equ	0xFF7
   404                           tblptrl	equ	0xFF6
   405                           tablat	equ	0xFF5
   406                           postinc0	equ	0xFEE
   407                           wreg	equ	0xFE8
   408                           postdec1	equ	0xFE5
   409                           fsr1l	equ	0xFE1
   410                           
   411                           	psect	dataCOMRAM
   412  00005E                     __pdataCOMRAM:
   413                           	opt stack 0
   414  00005E                     Can_Isr@nbTxBuf:
   415                           	opt stack 0
   416  00005E                     	ds	1
   417                           tblptru	equ	0xFF8
   418                           tblptrh	equ	0xFF7
   419                           tblptrl	equ	0xFF6
   420                           tablat	equ	0xFF5
   421                           postinc0	equ	0xFEE
   422                           wreg	equ	0xFE8
   423                           postdec1	equ	0xFE5
   424                           fsr1l	equ	0xFE1
   425                           
   426                           	psect	bssBANK0
   427  0000AF                     __pbssBANK0:
   428                           	opt stack 0
   429  0000AF                     _priorityUser:
   430                           	opt stack 0
   431  0000AF                     	ds	12
   432  0000BB                     Mcp2515Sleep@F8117:
   433                           	opt stack 0
   434  0000BB                     	ds	3
   435  0000BE                     _nbTx2:
   436                           	opt stack 0
   437  0000BE                     	ds	1
   438  0000BF                     _nbTx1:
   439                           	opt stack 0
   440  0000BF                     	ds	1
   441  0000C0                     _nbTx0:
   442                           	opt stack 0
   443  0000C0                     	ds	1
   444  0000C1                     _txBufferCount:
   445                           	opt stack 0
   446  0000C1                     	ds	1
   447  0000C2                     _txBufferPtrIn:
   448                           	opt stack 0
   449  0000C2                     	ds	1
   450  0000C3                     _rxBufferPtrOut:
   451                           	opt stack 0
   452  0000C3                     	ds	1
   453  0000C4                     _bottomLeft:
   454                           	opt stack 0
   455  0000C4                     	ds	1
   456  0000C5                     _topLeft:
   457                           	opt stack 0
   458  0000C5                     	ds	1
   459  0000C6                     _id:
   460                           	opt stack 0
   461  0000C6                     	ds	1
   462  0000C7                     _messageTx:
   463                           	opt stack 0
   464  0000C7                     	ds	17
   465  0000D8                     _message:
   466                           	opt stack 0
   467  0000D8                     	ds	17
   468                           tblptru	equ	0xFF8
   469                           tblptrh	equ	0xFF7
   470                           tblptrl	equ	0xFF6
   471                           tablat	equ	0xFF5
   472                           postinc0	equ	0xFEE
   473                           wreg	equ	0xFE8
   474                           postdec1	equ	0xFE5
   475                           fsr1l	equ	0xFE1
   476                           
   477                           	psect	dataBANK0
   478  0000E9                     __pdataBANK0:
   479                           	opt stack 0
   480  0000E9                     Mcp2515ReadCanId@F8123:
   481                           	opt stack 0
   482  0000E9                     	ds	6
   483  0000EF                     Mcp2515_Init@F8112:
   484                           	opt stack 0
   485  0000EF                     	ds	4
   486  0000F3                     Can_GetStatus@F8264:
   487                           	opt stack 0
   488  0000F3                     	ds	4
   489  0000F7                     Mcp2515GetNextFreeTXBuf@F8153:
   490                           	opt stack 0
   491  0000F7                     	ds	3
   492  0000FA                     Mcp2515_Init@F8114:
   493                           	opt stack 0
   494  0000FA                     	ds	3
   495  0000FD                     Can_GetStatus@F8262:
   496                           	opt stack 0
   497  0000FD                     	ds	3
   498                           tblptru	equ	0xFF8
   499                           tblptrh	equ	0xFF7
   500                           tblptrl	equ	0xFF6
   501                           tablat	equ	0xFF5
   502                           postinc0	equ	0xFEE
   503                           wreg	equ	0xFE8
   504                           postdec1	equ	0xFE5
   505                           fsr1l	equ	0xFE1
   506                           
   507                           	psect	bssBANK1
   508  000100                     __pbssBANK1:
   509                           	opt stack 0
   510  000100                     _occupancyPaths:
   511                           	opt stack 0
   512  000100                     	ds	12
   513  00010C                     _colorLights:
   514                           	opt stack 0
   515  00010C                     	ds	12
   516  000118                     _durationLights:
   517                           	opt stack 0
   518  000118                     	ds	12
   519  000124                     _txBuffer:
   520                           	opt stack 0
   521  000124                     	ds	68
   522  000168                     _rxBuffer:
   523                           	opt stack 0
   524  000168                     	ds	68
   525  0001AC                     _filter:
   526                           	opt stack 0
   527  0001AC                     	ds	33
   528                           tblptru	equ	0xFF8
   529                           tblptrh	equ	0xFF7
   530                           tblptrl	equ	0xFF6
   531                           tablat	equ	0xFF5
   532                           postinc0	equ	0xFEE
   533                           wreg	equ	0xFE8
   534                           postdec1	equ	0xFE5
   535                           fsr1l	equ	0xFE1
   536                           
   537                           	psect	bssBANK2
   538  000200                     __pbssBANK2:
   539                           	opt stack 0
   540  000200                     _conflicts:
   541                           	opt stack 0
   542  000200                     	ds	144
   543                           tblptru	equ	0xFF8
   544                           tblptrh	equ	0xFF7
   545                           tblptrl	equ	0xFF6
   546                           tablat	equ	0xFF5
   547                           postinc0	equ	0xFEE
   548                           wreg	equ	0xFE8
   549                           postdec1	equ	0xFE5
   550                           fsr1l	equ	0xFE1
   551                           
   552                           	psect	cstackBANK0
   553  000060                     __pcstackBANK0:
   554                           	opt stack 0
   555  000060                     ??_decrPriority:
   556  000060                     ?___wmul:
   557                           	opt stack 0
   558  000060                     initLogic@i:
   559                           	opt stack 0
   560  000060                     setPriority@carPerson:
   561                           	opt stack 0
   562  000060                     Can_GetMessage@msgPtr:
   563                           	opt stack 0
   564  000060                     Can_PutMessage@msgPtr:
   565                           	opt stack 0
   566  000060                     SPIRW@tx:
   567                           	opt stack 0
   568  000060                     resetData@i:
   569                           	opt stack 0
   570  000060                     ___wmul@multiplier:
   571                           	opt stack 0
   572                           
   573                           ; 2 bytes @ 0x0
   574  000060                     	ds	2
   575  000062                     ??_Can_GetMessage:
   576  000062                     ??_Can_PutMessage:
   577  000062                     decrPriority@user:
   578                           	opt stack 0
   579  000062                     SPIRW@rx:
   580                           	opt stack 0
   581  000062                     ___wmul@multiplicand:
   582                           	opt stack 0
   583                           
   584                           ; 2 bytes @ 0x2
   585  000062                     	ds	1
   586  000063                     decrPriority@modified:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0x3
   590  000063                     	ds	1
   591  000064                     Can_GetMessage@i:
   592                           	opt stack 0
   593  000064                     Can_PutMessage@i:
   594                           	opt stack 0
   595  000064                     decrPriority@i:
   596                           	opt stack 0
   597  000064                     ___wmul@product:
   598                           	opt stack 0
   599  000064                     SPIRW@size:
   600                           	opt stack 0
   601                           
   602                           ; 4 bytes @ 0x4
   603  000064                     	ds	1
   604  000065                     readID@retVal:
   605                           	opt stack 0
   606                           
   607                           ; 1 bytes @ 0x5
   608  000065                     	ds	1
   609  000066                     ??_readConflictInfo:
   610                           
   611                           ; 1 bytes @ 0x6
   612  000066                     	ds	2
   613  000068                     SPIRW@i:
   614                           	opt stack 0
   615                           
   616                           ; 4 bytes @ 0x8
   617  000068                     	ds	4
   618  00006C                     Spi_Write@tx:
   619                           	opt stack 0
   620  00006C                     readConflictInfo@i:
   621                           	opt stack 0
   622                           
   623                           ; 2 bytes @ 0xC
   624  00006C                     	ds	2
   625  00006E                     readConflictInfo@j:
   626                           	opt stack 0
   627  00006E                     Spi_Write@size:
   628                           	opt stack 0
   629                           
   630                           ; 4 bytes @ 0xE
   631  00006E                     	ds	4
   632  000072                     Mcp2515_Reset@cmd:
   633                           	opt stack 0
   634  000072                     Mcp2515WriteCanId@ext:
   635                           	opt stack 0
   636                           
   637                           ; 1 bytes @ 0x12
   638  000072                     	ds	1
   639  000073                     Mcp2515_Reset@i:
   640                           	opt stack 0
   641  000073                     Mcp2515WriteCanId@can_id:
   642                           	opt stack 0
   643                           
   644                           ; 4 bytes @ 0x13
   645  000073                     	ds	4
   646  000077                     ??_Mcp2515WriteCanId:
   647                           
   648                           ; 1 bytes @ 0x17
   649  000077                     	ds	3
   650  00007A                     Mcp2515WriteCanId@mcp_addr:
   651                           	opt stack 0
   652                           
   653                           ; 1 bytes @ 0x1A
   654  00007A                     	ds	1
   655  00007B                     Mcp2515WriteCanId@buf:
   656                           	opt stack 0
   657                           
   658                           ; 6 bytes @ 0x1B
   659  00007B                     	ds	6
   660  000081                     Mcp2515WriteCanId@canid:
   661                           	opt stack 0
   662                           
   663                           ; 2 bytes @ 0x21
   664  000081                     	ds	2
   665  000083                     Mcp2515_Init@speedCfg:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0x23
   669  000083                     	ds	2
   670  000085                     Mcp2515_Init@filterCfg:
   671                           	opt stack 0
   672                           
   673                           ; 2 bytes @ 0x25
   674  000085                     	ds	2
   675  000087                     ??_Mcp2515_Init:
   676                           
   677                           ; 1 bytes @ 0x27
   678  000087                     	ds	13
   679  000094                     Mcp2515_Init@i:
   680                           	opt stack 0
   681                           
   682                           ; 1 bytes @ 0x34
   683  000094                     	ds	1
   684  000095                     Mcp2515_Init@cmdMask4:
   685                           	opt stack 0
   686                           
   687                           ; 4 bytes @ 0x35
   688  000095                     	ds	4
   689  000099                     Mcp2515_Init@cmdWrite3:
   690                           	opt stack 0
   691                           
   692                           ; 3 bytes @ 0x39
   693  000099                     	ds	3
   694  00009C                     Can_Init@speedCfg:
   695                           	opt stack 0
   696                           
   697                           ; 2 bytes @ 0x3C
   698  00009C                     	ds	2
   699  00009E                     Can_Init@filterCfg:
   700                           	opt stack 0
   701                           
   702                           ; 2 bytes @ 0x3E
   703  00009E                     	ds	2
   704  0000A0                     
   705                           ; 2 bytes @ 0x40
   706  0000A0                     	ds	2
   707  0000A2                     
   708                           ; 3 bytes @ 0x42
   709  0000A2                     	ds	3
   710  0000A5                     ??_main:
   711                           
   712                           ; 1 bytes @ 0x45
   713  0000A5                     	ds	4
   714  0000A9                     main@cmd:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x49
   718  0000A9                     	ds	2
   719  0000AB                     main@isAlreadyWaiting:
   720                           	opt stack 0
   721                           
   722                           ; 1 bytes @ 0x4B
   723  0000AB                     	ds	1
   724  0000AC                     main@i:
   725                           	opt stack 0
   726                           
   727                           ; 1 bytes @ 0x4C
   728  0000AC                     	ds	1
   729  0000AD                     main@i_115:
   730                           	opt stack 0
   731                           
   732                           ; 1 bytes @ 0x4D
   733  0000AD                     	ds	1
   734  0000AE                     main@user:
   735                           	opt stack 0
   736                           
   737                           ; 1 bytes @ 0x4E
   738  0000AE                     	ds	1
   739                           tblptru	equ	0xFF8
   740                           tblptrh	equ	0xFF7
   741                           tblptrl	equ	0xFF6
   742                           tablat	equ	0xFF5
   743                           postinc0	equ	0xFEE
   744                           wreg	equ	0xFE8
   745                           postdec1	equ	0xFE5
   746                           fsr1l	equ	0xFE1
   747                           
   748                           	psect	cstackCOMRAM
   749  000001                     __pcstackCOMRAM:
   750                           	opt stack 0
   751  000001                     ??_shiftPriority:
   752  000001                     getConflict@carPersonToLookAt:
   753                           	opt stack 0
   754  000001                     memcpy@d1:
   755                           	opt stack 0
   756  000001                     i2Can_GetMessage@msgPtr:
   757                           	opt stack 0
   758  000001                     i2Can_PutMessage@msgPtr:
   759                           	opt stack 0
   760  000001                     i2SPIRW@tx:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0x0
   764  000001                     	ds	1
   765  000002                     ??_getConflict:
   766                           
   767                           ; 1 bytes @ 0x1
   768  000002                     	ds	1
   769  000003                     ??i2_Can_GetMessage:
   770  000003                     ??i2_Can_PutMessage:
   771  000003                     memcpy@s1:
   772                           	opt stack 0
   773  000003                     i2SPIRW@rx:
   774                           	opt stack 0
   775                           
   776                           ; 2 bytes @ 0x2
   777  000003                     	ds	1
   778  000004                     getConflict@carPersonConcerned:
   779                           	opt stack 0
   780                           
   781                           ; 1 bytes @ 0x3
   782  000004                     	ds	1
   783  000005                     i2Can_GetMessage@i:
   784                           	opt stack 0
   785  000005                     i2Can_PutMessage@i:
   786                           	opt stack 0
   787  000005                     memcpy@n:
   788                           	opt stack 0
   789  000005                     i2SPIRW@size:
   790                           	opt stack 0
   791                           
   792                           ; 4 bytes @ 0x4
   793  000005                     	ds	1
   794  000006                     ??_requestPed:
   795  000006                     sendTrafficLight@color:
   796                           	opt stack 0
   797  000006                     sendPedestrianLight@color:
   798                           	opt stack 0
   799  000006                     sendWarningLight@state:
   800                           	opt stack 0
   801                           
   802                           ; 1 bytes @ 0x5
   803  000006                     	ds	1
   804  000007                     ??_sendTrafficLight:
   805  000007                     ??_sendPedestrianLight:
   806  000007                     ??_sendWarningLight:
   807  000007                     memcpy@d:
   808                           	opt stack 0
   809                           
   810                           ; 2 bytes @ 0x6
   811  000007                     	ds	1
   812  000008                     shiftPriority@temp:
   813                           	opt stack 0
   814                           
   815                           ; 1 bytes @ 0x7
   816  000008                     	ds	1
   817  000009                     shiftPriority@i:
   818                           	opt stack 0
   819  000009                     sendTrafficLight@trafficLight:
   820                           	opt stack 0
   821  000009                     sendPedestrianLight@trafficLight:
   822                           	opt stack 0
   823  000009                     memcpy@s:
   824                           	opt stack 0
   825  000009                     i2SPIRW@i:
   826                           	opt stack 0
   827                           
   828                           ; 4 bytes @ 0x8
   829  000009                     	ds	1
   830  00000A                     setLight@color:
   831                           	opt stack 0
   832                           
   833                           ; 1 bytes @ 0x9
   834  00000A                     	ds	1
   835  00000B                     setLight@light:
   836                           	opt stack 0
   837  00000B                     sendWarningLight@trafficLight:
   838                           	opt stack 0
   839  00000B                     memcpy@tmp:
   840                           	opt stack 0
   841                           
   842                           ; 1 bytes @ 0xA
   843  00000B                     	ds	1
   844  00000C                     setWarningLight@state:
   845                           	opt stack 0
   846  00000C                     requestPed@ped:
   847                           	opt stack 0
   848                           
   849                           ; 1 bytes @ 0xB
   850  00000C                     	ds	1
   851  00000D                     ??_firstRound:
   852  00000D                     setWarningLight@light:
   853                           	opt stack 0
   854  00000D                     Spi_ReadWrite@rx_tx:
   855                           	opt stack 0
   856  00000D                     i2Spi_Write@tx:
   857                           	opt stack 0
   858                           
   859                           ; 2 bytes @ 0xC
   860  00000D                     	ds	1
   861  00000E                     firstRound@color:
   862                           	opt stack 0
   863                           
   864                           ; 1 bytes @ 0xD
   865  00000E                     	ds	1
   866  00000F                     firstRound@occupancy:
   867                           	opt stack 0
   868  00000F                     secondRound@i:
   869                           	opt stack 0
   870  00000F                     Spi_ReadWrite@size:
   871                           	opt stack 0
   872  00000F                     i2Spi_Write@size:
   873                           	opt stack 0
   874                           
   875                           ; 4 bytes @ 0xE
   876  00000F                     	ds	1
   877  000010                     firstRound@duration:
   878                           	opt stack 0
   879  000010                     secondRound@conflict:
   880                           	opt stack 0
   881                           
   882                           ; 1 bytes @ 0xF
   883  000010                     	ds	1
   884  000011                     firstRound@i:
   885                           	opt stack 0
   886  000011                     secondRound@j:
   887                           	opt stack 0
   888                           
   889                           ; 1 bytes @ 0x10
   890  000011                     	ds	1
   891  000012                     secondRound@waitingUser:
   892                           	opt stack 0
   893                           
   894                           ; 1 bytes @ 0x11
   895  000012                     	ds	1
   896  000013                     onTimeout@i:
   897                           	opt stack 0
   898  000013                     i2Mcp2515WriteCanId@ext:
   899                           	opt stack 0
   900  000013                     Mcp2515ReadCanId@ext:
   901                           	opt stack 0
   902  000013                     Mcp2515GetNextFreeTXBuf@txbuf_n:
   903                           	opt stack 0
   904  000013                     Can_GetStatus@msg4:
   905                           	opt stack 0
   906                           
   907                           ; 4 bytes @ 0x12
   908  000013                     	ds	1
   909  000014                     i2Mcp2515WriteCanId@can_id:
   910                           	opt stack 0
   911                           
   912                           ; 4 bytes @ 0x13
   913  000014                     	ds	1
   914  000015                     ??_Mcp2515GetNextFreeTXBuf:
   915  000015                     Mcp2515ReadCanId@can_id:
   916                           	opt stack 0
   917                           
   918                           ; 2 bytes @ 0x14
   919  000015                     	ds	1
   920  000016                     Mcp2515GetNextFreeTXBuf@ctrlregs:
   921                           	opt stack 0
   922                           
   923                           ; 3 bytes @ 0x15
   924  000016                     	ds	1
   925  000017                     ??_Mcp2515ReadCanId:
   926  000017                     Can_GetStatus@msg:
   927                           	opt stack 0
   928                           
   929                           ; 3 bytes @ 0x16
   930  000017                     	ds	1
   931  000018                     ??i2_Mcp2515WriteCanId:
   932                           
   933                           ; 1 bytes @ 0x17
   934  000018                     	ds	1
   935  000019                     Mcp2515GetNextFreeTXBuf@buf:
   936                           	opt stack 0
   937                           
   938                           ; 3 bytes @ 0x18
   939  000019                     	ds	1
   940  00001A                     Can_GetStatus@status:
   941                           	opt stack 0
   942                           
   943                           ; 1 bytes @ 0x19
   944  00001A                     	ds	1
   945  00001B                     i2Mcp2515WriteCanId@mcp_addr:
   946                           	opt stack 0
   947                           
   948                           ; 1 bytes @ 0x1A
   949  00001B                     	ds	1
   950  00001C                     Mcp2515GetNextFreeTXBuf@i:
   951                           	opt stack 0
   952  00001C                     i2Mcp2515WriteCanId@buf:
   953                           	opt stack 0
   954                           
   955                           ; 6 bytes @ 0x1B
   956  00001C                     	ds	6
   957  000022                     i2Mcp2515WriteCanId@canid:
   958                           	opt stack 0
   959                           
   960                           ; 2 bytes @ 0x21
   961  000022                     	ds	2
   962  000024                     Mcp2515WriteCanMsg@msg:
   963                           	opt stack 0
   964                           
   965                           ; 2 bytes @ 0x23
   966  000024                     	ds	2
   967  000026                     ??_Mcp2515WriteCanMsg:
   968                           
   969                           ; 1 bytes @ 0x25
   970  000026                     	ds	2
   971  000028                     Mcp2515WriteCanMsg@buf:
   972                           	opt stack 0
   973                           
   974                           ; 10 bytes @ 0x27
   975  000028                     	ds	1
   976  000029                     Mcp2515ReadCanId@mcp_addr:
   977                           	opt stack 0
   978                           
   979                           ; 1 bytes @ 0x28
   980  000029                     	ds	1
   981  00002A                     Mcp2515ReadCanId@msg:
   982                           	opt stack 0
   983                           
   984                           ; 6 bytes @ 0x29
   985  00002A                     	ds	6
   986  000030                     Mcp2515ReadCanMsg@msg:
   987                           	opt stack 0
   988                           
   989                           ; 2 bytes @ 0x2F
   990  000030                     	ds	2
   991  000032                     ??_Mcp2515ReadCanMsg:
   992  000032                     Mcp2515WriteCanMsg@buffer_sidh_addr:
   993                           	opt stack 0
   994                           
   995                           ; 1 bytes @ 0x31
   996  000032                     	ds	1
   997  000033                     Mcp2515WriteCanMsg@dlc:
   998                           	opt stack 0
   999                           
  1000                           ; 1 bytes @ 0x32
  1001  000033                     	ds	1
  1002  000034                     Mcp2515WriteCanMsg@mcp_addr:
  1003                           	opt stack 0
  1004  000034                     Mcp2515ReadCanMsg@cmd:
  1005                           	opt stack 0
  1006                           
  1007                           ; 10 bytes @ 0x33
  1008  000034                     	ds	1
  1009  000035                     Mcp2515WriteCanMsg@i:
  1010                           	opt stack 0
  1011                           
  1012                           ; 1 bytes @ 0x34
  1013  000035                     	ds	1
  1014  000036                     Can_SendMessage@msg:
  1015                           	opt stack 0
  1016                           
  1017                           ; 2 bytes @ 0x35
  1018  000036                     	ds	2
  1019  000038                     Can_SendMessage@buf:
  1020                           	opt stack 0
  1021                           
  1022                           ; 4 bytes @ 0x37
  1023  000038                     	ds	4
  1024  00003C                     Can_SendMessage@res:
  1025                           	opt stack 0
  1026                           
  1027                           ; 1 bytes @ 0x3B
  1028  00003C                     	ds	1
  1029  00003D                     Can_SendMessage@txbuf_n:
  1030                           	opt stack 0
  1031                           
  1032                           ; 1 bytes @ 0x3C
  1033  00003D                     	ds	1
  1034  00003E                     Mcp2515ReadCanMsg@mcp_addr:
  1035                           	opt stack 0
  1036                           
  1037                           ; 1 bytes @ 0x3D
  1038  00003E                     	ds	1
  1039  00003F                     Can_ReadMessage@msg:
  1040                           	opt stack 0
  1041                           
  1042                           ; 2 bytes @ 0x3E
  1043  00003F                     	ds	2
  1044  000041                     Can_ReadMessage@buf:
  1045                           	opt stack 0
  1046                           
  1047                           ; 4 bytes @ 0x40
  1048  000041                     	ds	4
  1049  000045                     Can_ReadInBuffer@error:
  1050                           	opt stack 0
  1051                           
  1052                           ; 1 bytes @ 0x44
  1053  000045                     	ds	1
  1054  000046                     Can_ReadInBuffer@rdStatus:
  1055                           	opt stack 0
  1056                           
  1057                           ; 1 bytes @ 0x45
  1058  000046                     	ds	1
  1059  000047                     Can_ReadInBuffer@i:
  1060                           	opt stack 0
  1061                           
  1062                           ; 1 bytes @ 0x46
  1063  000047                     	ds	1
  1064  000048                     ??_Can_Isr:
  1065                           
  1066                           ; 1 bytes @ 0x47
  1067  000048                     	ds	1
  1068  000049                     Can_Isr@retCode:
  1069                           	opt stack 0
  1070                           
  1071                           ; 1 bytes @ 0x48
  1072  000049                     	ds	1
  1073  00004A                     ??_high_isr:
  1074                           
  1075                           ; 1 bytes @ 0x49
  1076  00004A                     	ds	14
  1077                           tblptru	equ	0xFF8
  1078                           tblptrh	equ	0xFF7
  1079                           tblptrl	equ	0xFF6
  1080                           tablat	equ	0xFF5
  1081                           postinc0	equ	0xFEE
  1082                           wreg	equ	0xFE8
  1083                           postdec1	equ	0xFE5
  1084                           fsr1l	equ	0xFE1
  1085                           
  1086 ;;
  1087 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1088 ;;
  1089 ;; *************** function _main *****************
  1090 ;; Defined at:
  1091 ;;		line 14 in file "main.c"
  1092 ;; Parameters:    Size  Location     Type
  1093 ;;  argc            2   64[BANK0 ] int 
  1094 ;;  argv            3   66[BANK0 ] PTR PTR unsigned char 
  1095 ;; Auto vars:     Size  Location     Type
  1096 ;;  i               1   77[BANK0 ] unsigned char 
  1097 ;;  i               1   76[BANK0 ] unsigned char 
  1098 ;;  isAlreadyWai    1   75[BANK0 ] unsigned char 
  1099 ;;  cmd             2   73[BANK0 ] unsigned int 
  1100 ;;  user            1   78[BANK0 ] unsigned char 
  1101 ;; Return value:  Size  Location     Type
  1102 ;;                  2   64[BANK0 ] int 
  1103 ;; Registers used:
  1104 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1105 ;; Tracked objects:
  1106 ;;		On entry : 0/0
  1107 ;;		On exit  : 0/0
  1108 ;;		Unchanged: 0/0
  1109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1110 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1111 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1112 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1113 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1114 ;;Total ram usage:       15 bytes
  1115 ;; Hardware stack levels required when called:   14
  1116 ;; This function calls:
  1117 ;;		_Can_GetMessage
  1118 ;;		_Can_InBufferStatus
  1119 ;;		_decrPriority
  1120 ;;		_init
  1121 ;;		_initLogic
  1122 ;;		_setPriority
  1123 ;; This function is called by:
  1124 ;;		Startup code after reset
  1125 ;; This function uses a non-reentrant model
  1126 ;;
  1127                           
  1128                           	psect	text0
  1129  001962                     __ptext0:
  1130                           	opt stack 0
  1131  001962                     _main:
  1132                           	opt stack 17
  1133                           
  1134                           ;main.c: 15: init();
  1135                           
  1136                           ;incstack = 0
  1137  001962  EC4F  F016         	call	_init	;wreg free
  1138                           
  1139                           ;main.c: 16: initLogic();
  1140  001966  ECD2  F016         	call	_initLogic	;wreg free
  1141  00196A                     l3260:
  1142                           
  1143                           ;main.c: 25: if(Can_InBufferStatus() != 0){
  1144  00196A  EC45  F01A         	call	_Can_InBufferStatus	;wreg free
  1145  00196E  0900               	iorlw	0
  1146  001970  B4D8               	btfsc	status,2,c
  1147  001972  D7FB               	goto	l3260
  1148                           
  1149                           ;main.c: 27: Can_GetMessage(&message);
  1150  001974  0ED8               	movlw	low _message
  1151  001976  0100               	movlb	0	; () banked
  1152  001978  6F60               	movwf	Can_GetMessage@msgPtr& (0+255),b
  1153  00197A  0E00               	movlw	high _message
  1154  00197C  0100               	movlb	0	; () banked
  1155  00197E  6F61               	movwf	(Can_GetMessage@msgPtr+1)& (0+255),b
  1156  001980  ECB7  F010         	call	_Can_GetMessage	;wreg free
  1157                           
  1158                           ;main.c: 30: uint16_t cmd = (message.identifier & 0b11110000000);
  1159  001984  0E80               	movlw	128
  1160  001986  0100               	movlb	0	; () banked
  1161  001988  15D9               	andwf	(_message+1)& (0+255),w,b
  1162  00198A  0100               	movlb	0	; () banked
  1163  00198C  6FA9               	movwf	main@cmd& (0+255),b
  1164  00198E  0E07               	movlw	7
  1165  001990  0100               	movlb	0	; () banked
  1166  001992  15DA               	andwf	(_message+2)& (0+255),w,b
  1167  001994  0100               	movlb	0	; () banked
  1168  001996  6FAA               	movwf	(main@cmd+1)& (0+255),b
  1169                           
  1170                           ; BSR set to: 0
  1171                           ;main.c: 31: uint8_t user = (message.identifier & 0b00001110000) >> 4;
  1172  001998  C0D9  F0A5         	movff	_message+1,??_main
  1173  00199C  C0DA  F0A6         	movff	_message+2,??_main+1
  1174  0019A0  C0DB  F0A7         	movff	_message+3,??_main+2
  1175  0019A4  C0DC  F0A8         	movff	_message+4,??_main+3
  1176  0019A8  0E05               	movlw	5
  1177  0019AA  D006               	goto	u2390
  1178  0019AC                     u2395:
  1179  0019AC  0100               	movlb	0	; () banked
  1180  0019AE  90D8               	bcf	status,0,c
  1181  0019B0  33A8               	rrcf	(??_main+3)& (0+255),f,b
  1182  0019B2  33A7               	rrcf	(??_main+2)& (0+255),f,b
  1183  0019B4  33A6               	rrcf	(??_main+1)& (0+255),f,b
  1184  0019B6  33A5               	rrcf	??_main& (0+255),f,b
  1185  0019B8                     u2390:
  1186  0019B8  2EE8               	decfsz	wreg,f,c
  1187  0019BA  D7F8               	goto	u2395
  1188  0019BC  0100               	movlb	0	; () banked
  1189  0019BE  51A5               	movf	??_main& (0+255),w,b
  1190  0019C0  0B07               	andlw	7
  1191  0019C2  0100               	movlb	0	; () banked
  1192  0019C4  6FAE               	movwf	main@user& (0+255),b
  1193                           
  1194                           ;main.c: 33: switch(cmd)
  1195  0019C6  D093               	goto	l3328
  1196  0019C8                     l3268:
  1197                           
  1198                           ; BSR set to: 0
  1199                           ;main.c: 37: if(occupancyPaths[user] == 1 && message.dta[0] == 0)
  1200  0019C8  0100               	movlb	0	; () banked
  1201  0019CA  51AE               	movf	main@user& (0+255),w,b
  1202  0019CC  0D01               	mullw	1
  1203  0019CE  0E00               	movlw	low _occupancyPaths
  1204  0019D0  24F3               	addwf	prodl,w,c
  1205  0019D2  6ED9               	movwf	fsr2l,c
  1206  0019D4  0E01               	movlw	high _occupancyPaths
  1207  0019D6  20F4               	addwfc	prodh,w,c
  1208  0019D8  6EDA               	movwf	fsr2h,c
  1209  0019DA  04DE               	decf	postinc2,w,c
  1210  0019DC  A4D8               	btfss	status,2,c
  1211  0019DE  D008               	goto	l3274
  1212                           
  1213                           ; BSR set to: 0
  1214  0019E0  0100               	movlb	0	; () banked
  1215  0019E2  51DE               	movf	(_message+6)& (0+255),w,b
  1216  0019E4  A4D8               	btfss	status,2,c
  1217  0019E6  D004               	goto	l3274
  1218                           
  1219                           ; BSR set to: 0
  1220                           ;main.c: 38: {
  1221                           ;main.c: 39: decrPriority(user);
  1222  0019E8  0100               	movlb	0	; () banked
  1223  0019EA  51AE               	movf	main@user& (0+255),w,b
  1224  0019EC  ECB9  F014         	call	_decrPriority
  1225  0019F0                     l3274:
  1226                           
  1227                           ;main.c: 40: }
  1228                           ;main.c: 41: occupancyPaths[user] = message.dta[0];
  1229  0019F0  0100               	movlb	0	; () banked
  1230  0019F2  51AE               	movf	main@user& (0+255),w,b
  1231  0019F4  0D01               	mullw	1
  1232  0019F6  0E00               	movlw	low _occupancyPaths
  1233  0019F8  24F3               	addwf	prodl,w,c
  1234  0019FA  6ED9               	movwf	fsr2l,c
  1235  0019FC  0E01               	movlw	high _occupancyPaths
  1236  0019FE  20F4               	addwfc	prodh,w,c
  1237  001A00  6EDA               	movwf	fsr2h,c
  1238  001A02  C0DE  FFDF         	movff	_message+6,indf2
  1239                           
  1240                           ; BSR set to: 0
  1241                           ;main.c: 43: uint8_t isAlreadyWaiting = 0;
  1242  001A06  0E00               	movlw	0
  1243  001A08  0100               	movlb	0	; () banked
  1244  001A0A  6FAB               	movwf	main@isAlreadyWaiting& (0+255),b
  1245                           
  1246                           ; BSR set to: 0
  1247                           ;main.c: 44: for(uint8_t i = 0; i < 12;i++)
  1248  001A0C  0E00               	movlw	0
  1249  001A0E  0100               	movlb	0	; () banked
  1250  001A10  6FAC               	movwf	main@i& (0+255),b
  1251  001A12                     l3280:
  1252                           
  1253                           ; BSR set to: 0
  1254  001A12  0E0B               	movlw	11
  1255  001A14  0100               	movlb	0	; () banked
  1256  001A16  65AC               	cpfsgt	main@i& (0+255),b
  1257  001A18  D001               	goto	l3284
  1258  001A1A  D014               	goto	l3292
  1259  001A1C                     l3284:
  1260                           
  1261                           ; BSR set to: 0
  1262                           ;main.c: 45: {
  1263                           ;main.c: 46: if(priorityUser[i] == user)
  1264  001A1C  0100               	movlb	0	; () banked
  1265  001A1E  51AC               	movf	main@i& (0+255),w,b
  1266  001A20  0D01               	mullw	1
  1267  001A22  0EAF               	movlw	low _priorityUser
  1268  001A24  24F3               	addwf	prodl,w,c
  1269  001A26  6ED9               	movwf	fsr2l,c
  1270  001A28  0E00               	movlw	high _priorityUser
  1271  001A2A  20F4               	addwfc	prodh,w,c
  1272  001A2C  6EDA               	movwf	fsr2h,c
  1273  001A2E  0100               	movlb	0	; () banked
  1274  001A30  51AE               	movf	main@user& (0+255),w,b
  1275  001A32  18DE               	xorwf	postinc2,w,c
  1276  001A34  A4D8               	btfss	status,2,c
  1277  001A36  D003               	goto	l3288
  1278                           
  1279                           ; BSR set to: 0
  1280                           ;main.c: 47: {
  1281                           ;main.c: 48: isAlreadyWaiting = 1;
  1282  001A38  0E01               	movlw	1
  1283  001A3A  0100               	movlb	0	; () banked
  1284  001A3C  6FAB               	movwf	main@isAlreadyWaiting& (0+255),b
  1285  001A3E                     l3288:
  1286                           
  1287                           ; BSR set to: 0
  1288  001A3E  0100               	movlb	0	; () banked
  1289  001A40  2BAC               	incf	main@i& (0+255),f,b
  1290  001A42  D7E7               	goto	l3280
  1291  001A44                     l3292:
  1292                           
  1293                           ; BSR set to: 0
  1294                           ;main.c: 49: }
  1295                           ;main.c: 50: }
  1296                           ;main.c: 52: if(isAlreadyWaiting == 0)
  1297  001A44  0100               	movlb	0	; () banked
  1298  001A46  51AB               	movf	main@isAlreadyWaiting& (0+255),w,b
  1299  001A48  0100               	movlb	0	; () banked
  1300  001A4A  A4D8               	btfss	status,2,c
  1301  001A4C  D78E               	goto	l3260
  1302                           
  1303                           ; BSR set to: 0
  1304                           ;main.c: 53: {
  1305                           ;main.c: 54: setPriority(user);
  1306  001A4E  0100               	movlb	0	; () banked
  1307  001A50  51AE               	movf	main@user& (0+255),w,b
  1308  001A52  EC0E  F01A         	call	_setPriority
  1309                           
  1310                           ;main.c: 55: }
  1311                           ;main.c: 57: break;
  1312  001A56  D789               	goto	l3260
  1313  001A58                     l3296:
  1314                           
  1315                           ;main.c: 59: user+=8;
  1316  001A58  0E08               	movlw	8
  1317  001A5A  0100               	movlb	0	; () banked
  1318  001A5C  27AE               	addwf	main@user& (0+255),f,b
  1319                           
  1320                           ; BSR set to: 0
  1321                           ;main.c: 60: if(occupancyPaths[user] == 1 && message.dta[0] == 0)
  1322  001A5E  0100               	movlb	0	; () banked
  1323  001A60  51AE               	movf	main@user& (0+255),w,b
  1324  001A62  0D01               	mullw	1
  1325  001A64  0E00               	movlw	low _occupancyPaths
  1326  001A66  24F3               	addwf	prodl,w,c
  1327  001A68  6ED9               	movwf	fsr2l,c
  1328  001A6A  0E01               	movlw	high _occupancyPaths
  1329  001A6C  20F4               	addwfc	prodh,w,c
  1330  001A6E  6EDA               	movwf	fsr2h,c
  1331  001A70  04DE               	decf	postinc2,w,c
  1332  001A72  A4D8               	btfss	status,2,c
  1333  001A74  D008               	goto	l3304
  1334                           
  1335                           ; BSR set to: 0
  1336  001A76  0100               	movlb	0	; () banked
  1337  001A78  51DE               	movf	(_message+6)& (0+255),w,b
  1338  001A7A  A4D8               	btfss	status,2,c
  1339  001A7C  D004               	goto	l3304
  1340                           
  1341                           ; BSR set to: 0
  1342                           ;main.c: 61: {
  1343                           ;main.c: 62: decrPriority(user);
  1344  001A7E  0100               	movlb	0	; () banked
  1345  001A80  51AE               	movf	main@user& (0+255),w,b
  1346  001A82  ECB9  F014         	call	_decrPriority
  1347  001A86                     l3304:
  1348                           
  1349                           ;main.c: 63: }
  1350                           ;main.c: 64: occupancyPaths[user] = message.dta[0];
  1351  001A86  0100               	movlb	0	; () banked
  1352  001A88  51AE               	movf	main@user& (0+255),w,b
  1353  001A8A  0D01               	mullw	1
  1354  001A8C  0E00               	movlw	low _occupancyPaths
  1355  001A8E  24F3               	addwf	prodl,w,c
  1356  001A90  6ED9               	movwf	fsr2l,c
  1357  001A92  0E01               	movlw	high _occupancyPaths
  1358  001A94  20F4               	addwfc	prodh,w,c
  1359  001A96  6EDA               	movwf	fsr2h,c
  1360  001A98  C0DE  FFDF         	movff	_message+6,indf2
  1361                           
  1362                           ; BSR set to: 0
  1363                           ;main.c: 66: uint8_t isAlreadyWaiting = 0;
  1364  001A9C  0E00               	movlw	0
  1365  001A9E  0100               	movlb	0	; () banked
  1366  001AA0  6FAB               	movwf	main@isAlreadyWaiting& (0+255),b
  1367                           
  1368                           ; BSR set to: 0
  1369                           ;main.c: 67: for(uint8_t i = 0; i < 12;i++)
  1370  001AA2  0E00               	movlw	0
  1371  001AA4  0100               	movlb	0	; () banked
  1372  001AA6  6FAD               	movwf	main@i_115& (0+255),b
  1373  001AA8                     l3310:
  1374                           
  1375                           ; BSR set to: 0
  1376  001AA8  0E0B               	movlw	11
  1377  001AAA  0100               	movlb	0	; () banked
  1378  001AAC  65AD               	cpfsgt	main@i_115& (0+255),b
  1379  001AAE  D001               	goto	l3314
  1380  001AB0  D014               	goto	l3322
  1381  001AB2                     l3314:
  1382                           
  1383                           ; BSR set to: 0
  1384                           ;main.c: 68: {
  1385                           ;main.c: 69: if(priorityUser[i] == user)
  1386  001AB2  0100               	movlb	0	; () banked
  1387  001AB4  51AD               	movf	main@i_115& (0+255),w,b
  1388  001AB6  0D01               	mullw	1
  1389  001AB8  0EAF               	movlw	low _priorityUser
  1390  001ABA  24F3               	addwf	prodl,w,c
  1391  001ABC  6ED9               	movwf	fsr2l,c
  1392  001ABE  0E00               	movlw	high _priorityUser
  1393  001AC0  20F4               	addwfc	prodh,w,c
  1394  001AC2  6EDA               	movwf	fsr2h,c
  1395  001AC4  0100               	movlb	0	; () banked
  1396  001AC6  51AE               	movf	main@user& (0+255),w,b
  1397  001AC8  18DE               	xorwf	postinc2,w,c
  1398  001ACA  A4D8               	btfss	status,2,c
  1399  001ACC  D003               	goto	l3318
  1400                           
  1401                           ; BSR set to: 0
  1402                           ;main.c: 70: {
  1403                           ;main.c: 71: isAlreadyWaiting = 1;
  1404  001ACE  0E01               	movlw	1
  1405  001AD0  0100               	movlb	0	; () banked
  1406  001AD2  6FAB               	movwf	main@isAlreadyWaiting& (0+255),b
  1407  001AD4                     l3318:
  1408                           
  1409                           ; BSR set to: 0
  1410  001AD4  0100               	movlb	0	; () banked
  1411  001AD6  2BAD               	incf	main@i_115& (0+255),f,b
  1412  001AD8  D7E7               	goto	l3310
  1413  001ADA                     l3322:
  1414                           
  1415                           ; BSR set to: 0
  1416                           ;main.c: 72: }
  1417                           ;main.c: 73: }
  1418                           ;main.c: 75: if(isAlreadyWaiting == 0)
  1419  001ADA  0100               	movlb	0	; () banked
  1420  001ADC  51AB               	movf	main@isAlreadyWaiting& (0+255),w,b
  1421  001ADE  0100               	movlb	0	; () banked
  1422  001AE0  A4D8               	btfss	status,2,c
  1423  001AE2  D743               	goto	l3260
  1424                           
  1425                           ; BSR set to: 0
  1426                           ;main.c: 76: {
  1427                           ;main.c: 77: setPriority(user);
  1428  001AE4  0100               	movlb	0	; () banked
  1429  001AE6  51AE               	movf	main@user& (0+255),w,b
  1430  001AE8  EC0E  F01A         	call	_setPriority
  1431                           
  1432                           ;main.c: 83: }
  1433                           
  1434                           ;main.c: 81: break;
  1435                           
  1436                           ;main.c: 80: default:
  1437                           
  1438                           ;main.c: 78: }
  1439                           ;main.c: 79: break;
  1440  001AEC  D73E               	goto	l3260
  1441  001AEE                     l3328:
  1442  001AEE  C0A9  F0A5         	movff	main@cmd,??_main
  1443  001AF2  C0AA  F0A6         	movff	main@cmd+1,??_main+1
  1444                           
  1445                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  1446                           ; Switch size 1, requested type "space"
  1447                           ; Number of cases is 2, Range of values is 1 to 2
  1448                           ; switch strategies available:
  1449                           ; Name         Instructions Cycles
  1450                           ; simple_byte            7     4 (average)
  1451                           ;	Chosen strategy is simple_byte
  1452  001AF6  0100               	movlb	0	; () banked
  1453  001AF8  51A6               	movf	(??_main+1)& (0+255),w,b
  1454  001AFA  0A01               	xorlw	1	; case 1
  1455  001AFC  B4D8               	btfsc	status,2,c
  1456  001AFE  D004               	goto	l3410
  1457  001B00  0A03               	xorlw	3	; case 2
  1458  001B02  B4D8               	btfsc	status,2,c
  1459  001B04  D007               	goto	l3412
  1460  001B06  D731               	goto	l3260
  1461  001B08                     l3410:
  1462                           
  1463                           ; BSR set to: 0
  1464                           ; Switch size 1, requested type "space"
  1465                           ; Number of cases is 1, Range of values is 128 to 128
  1466                           ; switch strategies available:
  1467                           ; Name         Instructions Cycles
  1468                           ; simple_byte            4     3 (average)
  1469                           ;	Chosen strategy is simple_byte
  1470  001B08  0100               	movlb	0	; () banked
  1471  001B0A  51A5               	movf	??_main& (0+255),w,b
  1472  001B0C  0A80               	xorlw	128	; case 128
  1473  001B0E  B4D8               	btfsc	status,2,c
  1474  001B10  D75B               	goto	l3268
  1475  001B12  D72B               	goto	l3260
  1476  001B14                     l3412:
  1477                           
  1478                           ; BSR set to: 0
  1479                           ; Switch size 1, requested type "space"
  1480                           ; Number of cases is 1, Range of values is 0 to 0
  1481                           ; switch strategies available:
  1482                           ; Name         Instructions Cycles
  1483                           ; simple_byte            4     3 (average)
  1484                           ;	Chosen strategy is simple_byte
  1485  001B14  0100               	movlb	0	; () banked
  1486  001B16  51A5               	movf	??_main& (0+255),w,b
  1487  001B18  0A00               	xorlw	0	; case 0
  1488  001B1A  B4D8               	btfsc	status,2,c
  1489  001B1C  D79D               	goto	l3296
  1490                           
  1491                           ; BSR set to: 0
  1492                           
  1493                           ; BSR set to: 0
  1494                           
  1495                           ; BSR set to: 0
  1496  001B1E  D725               	goto	l3260
  1497  001B20                     __end_of_main:
  1498                           	opt stack 0
  1499                           tblptru	equ	0xFF8
  1500                           tblptrh	equ	0xFF7
  1501                           tblptrl	equ	0xFF6
  1502                           tablat	equ	0xFF5
  1503                           prodh	equ	0xFF4
  1504                           prodl	equ	0xFF3
  1505                           postinc0	equ	0xFEE
  1506                           wreg	equ	0xFE8
  1507                           postdec1	equ	0xFE5
  1508                           fsr1l	equ	0xFE1
  1509                           indf2	equ	0xFDF
  1510                           postinc2	equ	0xFDE
  1511                           fsr2h	equ	0xFDA
  1512                           fsr2l	equ	0xFD9
  1513                           status	equ	0xFD8
  1514                           
  1515 ;; *************** function _setPriority *****************
  1516 ;; Defined at:
  1517 ;;		line 172 in file "logic.c"
  1518 ;; Parameters:    Size  Location     Type
  1519 ;;  carPerson       1    wreg     unsigned char 
  1520 ;; Auto vars:     Size  Location     Type
  1521 ;;  carPerson       1    0[BANK0 ] unsigned char 
  1522 ;; Return value:  Size  Location     Type
  1523 ;;                  1    wreg      void 
  1524 ;; Registers used:
  1525 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1526 ;; Tracked objects:
  1527 ;;		On entry : 0/0
  1528 ;;		On exit  : 0/0
  1529 ;;		Unchanged: 0/0
  1530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1532 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1534 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1535 ;;Total ram usage:        1 bytes
  1536 ;; Hardware stack levels used:    1
  1537 ;; Hardware stack levels required when called:    8
  1538 ;; This function calls:
  1539 ;;		Nothing
  1540 ;; This function is called by:
  1541 ;;		_main
  1542 ;; This function uses a non-reentrant model
  1543 ;;
  1544                           
  1545                           	psect	text1
  1546  00341C                     __ptext1:
  1547                           	opt stack 0
  1548  00341C                     _setPriority:
  1549                           	opt stack 22
  1550                           
  1551                           ; BSR set to: 0
  1552                           ;incstack = 0
  1553                           ;setPriority@carPerson stored from wreg
  1554  00341C  0100               	movlb	0	; () banked
  1555  00341E  6F60               	movwf	setPriority@carPerson& (0+255),b
  1556                           
  1557                           ;logic.c: 174: if(numberWaitingUsers < 12)
  1558  003420  0E0C               	movlw	12
  1559  003422  605D               	cpfslt	_numberWaitingUsers,c
  1560  003424  0012               	return	
  1561                           
  1562                           ;logic.c: 175: {
  1563                           ;logic.c: 176: priorityUser[numberWaitingUsers] = carPerson;
  1564  003426  505D               	movf	_numberWaitingUsers,w,c
  1565  003428  0D01               	mullw	1
  1566  00342A  0EAF               	movlw	low _priorityUser
  1567  00342C  24F3               	addwf	prodl,w,c
  1568  00342E  6ED9               	movwf	fsr2l,c
  1569  003430  0E00               	movlw	high _priorityUser
  1570  003432  20F4               	addwfc	prodh,w,c
  1571  003434  6EDA               	movwf	fsr2h,c
  1572  003436  C060  FFDF         	movff	setPriority@carPerson,indf2
  1573                           
  1574                           ;logic.c: 177: numberWaitingUsers++;
  1575  00343A  2A5D               	incf	_numberWaitingUsers,f,c
  1576  00343C  0012               	return	
  1577  00343E                     __end_of_setPriority:
  1578                           	opt stack 0
  1579                           tblptru	equ	0xFF8
  1580                           tblptrh	equ	0xFF7
  1581                           tblptrl	equ	0xFF6
  1582                           tablat	equ	0xFF5
  1583                           prodh	equ	0xFF4
  1584                           prodl	equ	0xFF3
  1585                           postinc0	equ	0xFEE
  1586                           wreg	equ	0xFE8
  1587                           postdec1	equ	0xFE5
  1588                           fsr1l	equ	0xFE1
  1589                           indf2	equ	0xFDF
  1590                           postinc2	equ	0xFDE
  1591                           fsr2h	equ	0xFDA
  1592                           fsr2l	equ	0xFD9
  1593                           status	equ	0xFD8
  1594                           
  1595 ;; *************** function _initLogic *****************
  1596 ;; Defined at:
  1597 ;;		line 5 in file "logic.c"
  1598 ;; Parameters:    Size  Location     Type
  1599 ;;		None
  1600 ;; Auto vars:     Size  Location     Type
  1601 ;;  i               1    0[BANK0 ] unsigned char 
  1602 ;; Return value:  Size  Location     Type
  1603 ;;                  1    wreg      void 
  1604 ;; Registers used:
  1605 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1606 ;; Tracked objects:
  1607 ;;		On entry : 0/0
  1608 ;;		On exit  : 0/0
  1609 ;;		Unchanged: 0/0
  1610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1612 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1614 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1615 ;;Total ram usage:        1 bytes
  1616 ;; Hardware stack levels used:    1
  1617 ;; Hardware stack levels required when called:    8
  1618 ;; This function calls:
  1619 ;;		Nothing
  1620 ;; This function is called by:
  1621 ;;		_main
  1622 ;; This function uses a non-reentrant model
  1623 ;;
  1624                           
  1625                           	psect	text2
  1626  002DA4                     __ptext2:
  1627                           	opt stack 0
  1628  002DA4                     _initLogic:
  1629                           	opt stack 22
  1630                           
  1631                           ;logic.c: 7: for(uint8_t i = 0; i < 12; i++)
  1632                           
  1633                           ;incstack = 0
  1634  002DA4  0E00               	movlw	0
  1635  002DA6  0100               	movlb	0	; () banked
  1636  002DA8  6F60               	movwf	initLogic@i& (0+255),b
  1637  002DAA                     l3164:
  1638                           
  1639                           ; BSR set to: 0
  1640  002DAA  0E0B               	movlw	11
  1641  002DAC  0100               	movlb	0	; () banked
  1642  002DAE  6560               	cpfsgt	initLogic@i& (0+255),b
  1643  002DB0  D001               	goto	l3168
  1644  002DB2  0012               	return	
  1645  002DB4                     l3168:
  1646                           
  1647                           ; BSR set to: 0
  1648                           ;logic.c: 8: {
  1649                           ;logic.c: 9: durationLights[i] = 0;
  1650  002DB4  0100               	movlb	0	; () banked
  1651  002DB6  5160               	movf	initLogic@i& (0+255),w,b
  1652  002DB8  0D01               	mullw	1
  1653  002DBA  0E18               	movlw	low _durationLights
  1654  002DBC  24F3               	addwf	prodl,w,c
  1655  002DBE  6ED9               	movwf	fsr2l,c
  1656  002DC0  0E01               	movlw	high _durationLights
  1657  002DC2  20F4               	addwfc	prodh,w,c
  1658  002DC4  6EDA               	movwf	fsr2h,c
  1659  002DC6  0E00               	movlw	0
  1660  002DC8  6EDF               	movwf	indf2,c
  1661                           
  1662                           ;logic.c: 10: colorLights[i] = 0;
  1663  002DCA  0100               	movlb	0	; () banked
  1664  002DCC  5160               	movf	initLogic@i& (0+255),w,b
  1665  002DCE  0D01               	mullw	1
  1666  002DD0  0E0C               	movlw	low _colorLights
  1667  002DD2  24F3               	addwf	prodl,w,c
  1668  002DD4  6ED9               	movwf	fsr2l,c
  1669  002DD6  0E01               	movlw	high _colorLights
  1670  002DD8  20F4               	addwfc	prodh,w,c
  1671  002DDA  6EDA               	movwf	fsr2h,c
  1672  002DDC  0E00               	movlw	0
  1673  002DDE  6EDF               	movwf	indf2,c
  1674                           
  1675                           ;logic.c: 11: occupancyPaths[i] = 0;
  1676  002DE0  0100               	movlb	0	; () banked
  1677  002DE2  5160               	movf	initLogic@i& (0+255),w,b
  1678  002DE4  0D01               	mullw	1
  1679  002DE6  0E00               	movlw	low _occupancyPaths
  1680  002DE8  24F3               	addwf	prodl,w,c
  1681  002DEA  6ED9               	movwf	fsr2l,c
  1682  002DEC  0E01               	movlw	high _occupancyPaths
  1683  002DEE  20F4               	addwfc	prodh,w,c
  1684  002DF0  6EDA               	movwf	fsr2h,c
  1685  002DF2  0E00               	movlw	0
  1686  002DF4  6EDF               	movwf	indf2,c
  1687                           
  1688                           ;logic.c: 12: priorityUser[i] = 255;
  1689  002DF6  0100               	movlb	0	; () banked
  1690  002DF8  5160               	movf	initLogic@i& (0+255),w,b
  1691  002DFA  0D01               	mullw	1
  1692  002DFC  0EAF               	movlw	low _priorityUser
  1693  002DFE  24F3               	addwf	prodl,w,c
  1694  002E00  6ED9               	movwf	fsr2l,c
  1695  002E02  0E00               	movlw	high _priorityUser
  1696  002E04  20F4               	addwfc	prodh,w,c
  1697  002E06  6EDA               	movwf	fsr2h,c
  1698  002E08  0EFF               	movlw	255
  1699  002E0A  6EDF               	movwf	indf2,c
  1700                           
  1701                           ; BSR set to: 0
  1702  002E0C  0100               	movlb	0	; () banked
  1703  002E0E  2B60               	incf	initLogic@i& (0+255),f,b
  1704  002E10  D7CC               	goto	l3164
  1705  002E12                     __end_of_initLogic:
  1706                           	opt stack 0
  1707                           tblptru	equ	0xFF8
  1708                           tblptrh	equ	0xFF7
  1709                           tblptrl	equ	0xFF6
  1710                           tablat	equ	0xFF5
  1711                           prodh	equ	0xFF4
  1712                           prodl	equ	0xFF3
  1713                           postinc0	equ	0xFEE
  1714                           wreg	equ	0xFE8
  1715                           postdec1	equ	0xFE5
  1716                           fsr1l	equ	0xFE1
  1717                           indf2	equ	0xFDF
  1718                           postinc2	equ	0xFDE
  1719                           fsr2h	equ	0xFDA
  1720                           fsr2l	equ	0xFD9
  1721                           status	equ	0xFD8
  1722                           
  1723 ;; *************** function _init *****************
  1724 ;; Defined at:
  1725 ;;		line 3 in file "function.c"
  1726 ;; Parameters:    Size  Location     Type
  1727 ;;		None
  1728 ;; Auto vars:     Size  Location     Type
  1729 ;;		None
  1730 ;; Return value:  Size  Location     Type
  1731 ;;                  1    wreg      void 
  1732 ;; Registers used:
  1733 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1734 ;; Tracked objects:
  1735 ;;		On entry : 0/0
  1736 ;;		On exit  : 0/0
  1737 ;;		Unchanged: 0/0
  1738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1743 ;;Total ram usage:        0 bytes
  1744 ;; Hardware stack levels used:    1
  1745 ;; Hardware stack levels required when called:   13
  1746 ;; This function calls:
  1747 ;;		_Can_Init
  1748 ;;		_readConflictInfo
  1749 ;;		_readID
  1750 ;; This function is called by:
  1751 ;;		_main
  1752 ;; This function uses a non-reentrant model
  1753 ;;
  1754                           
  1755                           	psect	text3
  1756  002C9E                     __ptext3:
  1757                           	opt stack 0
  1758  002C9E                     _init:
  1759                           	opt stack 17
  1760                           
  1761                           ;function.c: 4: Can_Init( &canSpeed125k , &filter);
  1762                           
  1763                           ; BSR set to: 0
  1764                           ;incstack = 0
  1765  002C9E  0E39               	movlw	low _canSpeed125k
  1766  002CA0  0100               	movlb	0	; () banked
  1767  002CA2  6F9C               	movwf	Can_Init@speedCfg& (0+255),b
  1768  002CA4  0E10               	movlw	high _canSpeed125k
  1769  002CA6  0100               	movlb	0	; () banked
  1770  002CA8  6F9D               	movwf	(Can_Init@speedCfg+1)& (0+255),b
  1771  002CAA  0EAC               	movlw	low _filter
  1772  002CAC  0100               	movlb	0	; () banked
  1773  002CAE  6F9E               	movwf	Can_Init@filterCfg& (0+255),b
  1774  002CB0  0E01               	movlw	high _filter
  1775  002CB2  0100               	movlb	0	; () banked
  1776  002CB4  6F9F               	movwf	(Can_Init@filterCfg+1)& (0+255),b
  1777  002CB6  EC71  F019         	call	_Can_Init	;wreg free
  1778                           
  1779                           ;function.c: 5: PEIE = 1;
  1780  002CBA  8CF2               	bsf	intcon,6,c	;volatile
  1781                           
  1782                           ;function.c: 6: GIE = 1;
  1783  002CBC  8EF2               	bsf	intcon,7,c	;volatile
  1784                           
  1785                           ;function.c: 7: id = readID();
  1786  002CBE  EC69  F018         	call	_readID	;wreg free
  1787  002CC2  0100               	movlb	0	; () banked
  1788  002CC4  6FC6               	movwf	_id& (0+255),b
  1789                           
  1790                           ; BSR set to: 0
  1791                           ;function.c: 8: filter.mask0 = 0X00F;
  1792  002CC6  0E0F               	movlw	15
  1793  002CC8  0101               	movlb	1	; () banked
  1794  002CCA  6FAC               	movwf	_filter& (0+255),b
  1795  002CCC  0E00               	movlw	0
  1796  002CCE  6FAD               	movwf	(_filter+1)& (0+255),b
  1797  002CD0  0E00               	movlw	0
  1798  002CD2  6FAE               	movwf	(_filter+2)& (0+255),b
  1799  002CD4  0E00               	movlw	0
  1800  002CD6  6FAF               	movwf	(_filter+3)& (0+255),b
  1801                           
  1802                           ; BSR set to: 1
  1803                           ;function.c: 9: filter.filter0 = id;
  1804  002CD8  0100               	movlb	0	; () banked
  1805  002CDA  51C6               	movf	_id& (0+255),w,b
  1806  002CDC  0101               	movlb	1	; () banked
  1807  002CDE  6FB4               	movwf	(_filter+8)& (0+255),b
  1808  002CE0  6BB5               	clrf	(_filter+9)& (0+255),b
  1809  002CE2  6BB6               	clrf	(_filter+10)& (0+255),b
  1810  002CE4  6BB7               	clrf	(_filter+11)& (0+255),b
  1811                           
  1812                           ; BSR set to: 1
  1813                           ;function.c: 10: Can_Init( &canSpeed125k , &filter);
  1814  002CE6  0E39               	movlw	low _canSpeed125k
  1815  002CE8  0100               	movlb	0	; () banked
  1816  002CEA  6F9C               	movwf	Can_Init@speedCfg& (0+255),b
  1817  002CEC  0E10               	movlw	high _canSpeed125k
  1818  002CEE  0100               	movlb	0	; () banked
  1819  002CF0  6F9D               	movwf	(Can_Init@speedCfg+1)& (0+255),b
  1820  002CF2  0EAC               	movlw	low _filter
  1821  002CF4  0100               	movlb	0	; () banked
  1822  002CF6  6F9E               	movwf	Can_Init@filterCfg& (0+255),b
  1823  002CF8  0E01               	movlw	high _filter
  1824  002CFA  0100               	movlb	0	; () banked
  1825  002CFC  6F9F               	movwf	(Can_Init@filterCfg+1)& (0+255),b
  1826  002CFE  EC71  F019         	call	_Can_Init	;wreg free
  1827                           
  1828                           ;function.c: 11: readConflictInfo();
  1829  002D02  EC27  F00B         	call	_readConflictInfo	;wreg free
  1830                           
  1831                           ;function.c: 15: T0CONbits.T08BIT = 0;
  1832  002D06  9CD5               	bcf	4053,6,c	;volatile
  1833                           
  1834                           ;function.c: 16: T0CONbits.T0CS = 0;
  1835  002D08  9AD5               	bcf	4053,5,c	;volatile
  1836                           
  1837                           ;function.c: 17: T0CONbits.PSA = 0;
  1838  002D0A  96D5               	bcf	4053,3,c	;volatile
  1839                           
  1840                           ;function.c: 18: T0CONbits.T0PS = 0x7;
  1841  002D0C  80D5               	bsf	4053,0,c	;volatile
  1842  002D0E  82D5               	bsf	4053,1,c	;volatile
  1843  002D10  84D5               	bsf	4053,2,c	;volatile
  1844                           
  1845                           ;function.c: 19: TMR0IF = 0;
  1846  002D12  94F2               	bcf	intcon,2,c	;volatile
  1847                           
  1848                           ;function.c: 20: TMR0IE = 1;
  1849  002D14  8AF2               	bsf	intcon,5,c	;volatile
  1850                           
  1851                           ;function.c: 21: TMR0 = 0xe17b;
  1852  002D16  0EE1               	movlw	225
  1853  002D18  6ED7               	movwf	4055,c	;volatile
  1854  002D1A  0E7B               	movlw	123
  1855  002D1C  6ED6               	movwf	4054,c	;volatile
  1856                           
  1857                           ;function.c: 22: T0CONbits.TMR0ON = 1;
  1858  002D1E  8ED5               	bsf	4053,7,c	;volatile
  1859  002D20  0012               	return		;funcret
  1860  002D22                     __end_of_init:
  1861                           	opt stack 0
  1862                           tblptru	equ	0xFF8
  1863                           tblptrh	equ	0xFF7
  1864                           tblptrl	equ	0xFF6
  1865                           tablat	equ	0xFF5
  1866                           prodh	equ	0xFF4
  1867                           prodl	equ	0xFF3
  1868                           intcon	equ	0xFF2
  1869                           postinc0	equ	0xFEE
  1870                           wreg	equ	0xFE8
  1871                           postdec1	equ	0xFE5
  1872                           fsr1l	equ	0xFE1
  1873                           indf2	equ	0xFDF
  1874                           postinc2	equ	0xFDE
  1875                           fsr2h	equ	0xFDA
  1876                           fsr2l	equ	0xFD9
  1877                           status	equ	0xFD8
  1878                           
  1879 ;; *************** function _readID *****************
  1880 ;; Defined at:
  1881 ;;		line 25 in file "function.c"
  1882 ;; Parameters:    Size  Location     Type
  1883 ;;		None
  1884 ;; Auto vars:     Size  Location     Type
  1885 ;;  retVal          1    5[BANK0 ] unsigned char 
  1886 ;; Return value:  Size  Location     Type
  1887 ;;                  1    wreg      unsigned char 
  1888 ;; Registers used:
  1889 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1890 ;; Tracked objects:
  1891 ;;		On entry : 0/0
  1892 ;;		On exit  : 0/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1896 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1898 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1899 ;;Total ram usage:        1 bytes
  1900 ;; Hardware stack levels used:    1
  1901 ;; Hardware stack levels required when called:    9
  1902 ;; This function calls:
  1903 ;;		_Can_GetMessage
  1904 ;;		_Can_PutMessage
  1905 ;;		_resetData
  1906 ;; This function is called by:
  1907 ;;		_init
  1908 ;; This function uses a non-reentrant model
  1909 ;;
  1910                           
  1911                           	psect	text4
  1912  0030D2                     __ptext4:
  1913                           	opt stack 0
  1914  0030D2                     _readID:
  1915                           	opt stack 20
  1916                           
  1917                           ;function.c: 26: uint8_t retVal = 0;
  1918                           
  1919                           ;incstack = 0
  1920  0030D2  0E00               	movlw	0
  1921  0030D4  0100               	movlb	0	; () banked
  1922  0030D6  6F65               	movwf	readID@retVal& (0+255),b
  1923                           
  1924                           ;function.c: 29: messageTx.identifier = ((10<<7) | 0xF) ;
  1925  0030D8  0E0F               	movlw	15
  1926  0030DA  0100               	movlb	0	; () banked
  1927  0030DC  6FC8               	movwf	(_messageTx+1)& (0+255),b
  1928  0030DE  0E05               	movlw	5
  1929  0030E0  6FC9               	movwf	(_messageTx+2)& (0+255),b
  1930  0030E2  0E00               	movlw	0
  1931  0030E4  6FCA               	movwf	(_messageTx+3)& (0+255),b
  1932  0030E6  0E00               	movlw	0
  1933  0030E8  6FCB               	movwf	(_messageTx+4)& (0+255),b
  1934                           
  1935                           ; BSR set to: 0
  1936                           ;function.c: 30: resetData();
  1937  0030EA  EC52  F019         	call	_resetData	;wreg free
  1938                           
  1939                           ;function.c: 31: messageTx.rtr = 1;
  1940  0030EE  0E01               	movlw	1
  1941  0030F0  0100               	movlb	0	; () banked
  1942  0030F2  6FD5               	movwf	(_messageTx+14)& (0+255),b
  1943                           
  1944                           ; BSR set to: 0
  1945                           ;function.c: 34: Can_PutMessage(&messageTx);
  1946  0030F4  0EC7               	movlw	low _messageTx
  1947  0030F6  0100               	movlb	0	; () banked
  1948  0030F8  6F60               	movwf	Can_PutMessage@msgPtr& (0+255),b
  1949  0030FA  0E00               	movlw	high _messageTx
  1950  0030FC  0100               	movlb	0	; () banked
  1951  0030FE  6F61               	movwf	(Can_PutMessage@msgPtr+1)& (0+255),b
  1952  003100  EC66  F00E         	call	_Can_PutMessage	;wreg free
  1953  003104                     l3090:
  1954  003104  0ED8               	movlw	low _message
  1955  003106  0100               	movlb	0	; () banked
  1956  003108  6F60               	movwf	Can_GetMessage@msgPtr& (0+255),b
  1957  00310A  0E00               	movlw	high _message
  1958  00310C  0100               	movlb	0	; () banked
  1959  00310E  6F61               	movwf	(Can_GetMessage@msgPtr+1)& (0+255),b
  1960  003110  ECB7  F010         	call	_Can_GetMessage	;wreg free
  1961  003114  0900               	iorlw	0
  1962  003116  A4D8               	btfss	status,2,c
  1963  003118  D7F5               	goto	l3090
  1964                           
  1965                           ;function.c: 39: retVal = message.dta[0];
  1966  00311A  C0DE  F065         	movff	_message+6,readID@retVal
  1967                           
  1968                           ;function.c: 41: resetData();
  1969  00311E  EC52  F019         	call	_resetData	;wreg free
  1970                           
  1971                           ;function.c: 43: return retVal;
  1972  003122  0100               	movlb	0	; () banked
  1973  003124  5165               	movf	readID@retVal& (0+255),w,b
  1974  003126  0012               	return	
  1975  003128                     __end_of_readID:
  1976                           	opt stack 0
  1977                           tblptru	equ	0xFF8
  1978                           tblptrh	equ	0xFF7
  1979                           tblptrl	equ	0xFF6
  1980                           tablat	equ	0xFF5
  1981                           prodh	equ	0xFF4
  1982                           prodl	equ	0xFF3
  1983                           intcon	equ	0xFF2
  1984                           postinc0	equ	0xFEE
  1985                           wreg	equ	0xFE8
  1986                           postdec1	equ	0xFE5
  1987                           fsr1l	equ	0xFE1
  1988                           indf2	equ	0xFDF
  1989                           postinc2	equ	0xFDE
  1990                           fsr2h	equ	0xFDA
  1991                           fsr2l	equ	0xFD9
  1992                           status	equ	0xFD8
  1993                           
  1994 ;; *************** function _readConflictInfo *****************
  1995 ;; Defined at:
  1996 ;;		line 46 in file "function.c"
  1997 ;; Parameters:    Size  Location     Type
  1998 ;;		None
  1999 ;; Auto vars:     Size  Location     Type
  2000 ;;  j               2   14[BANK0 ] int 
  2001 ;;  i               2   12[BANK0 ] int 
  2002 ;; Return value:  Size  Location     Type
  2003 ;;                  1    wreg      void 
  2004 ;; Registers used:
  2005 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2006 ;; Tracked objects:
  2007 ;;		On entry : 0/0
  2008 ;;		On exit  : 0/0
  2009 ;;		Unchanged: 0/0
  2010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2012 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2013 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2014 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2015 ;;Total ram usage:       10 bytes
  2016 ;; Hardware stack levels used:    1
  2017 ;; Hardware stack levels required when called:    9
  2018 ;; This function calls:
  2019 ;;		_Can_GetMessage
  2020 ;;		_Can_PutMessage
  2021 ;;		___wmul
  2022 ;;		_resetData
  2023 ;; This function is called by:
  2024 ;;		_init
  2025 ;; This function uses a non-reentrant model
  2026 ;;
  2027                           
  2028                           	psect	text5
  2029  00164E                     __ptext5:
  2030                           	opt stack 0
  2031  00164E                     _readConflictInfo:
  2032                           	opt stack 20
  2033                           
  2034                           ;function.c: 49: resetData();
  2035                           
  2036                           ; BSR set to: 0
  2037                           ;incstack = 0
  2038  00164E  EC52  F019         	call	_resetData	;wreg free
  2039                           
  2040                           ;function.c: 50: messageTx.rtr = 1;
  2041  001652  0E01               	movlw	1
  2042  001654  0100               	movlb	0	; () banked
  2043  001656  6FD5               	movwf	(_messageTx+14)& (0+255),b
  2044                           
  2045                           ; BSR set to: 0
  2046                           ;function.c: 53: int i;
  2047                           ;function.c: 54: int j;
  2048                           ;function.c: 55: for (i = 0 ; i < 12 ; i++){
  2049  001658  0E00               	movlw	0
  2050  00165A  0100               	movlb	0	; () banked
  2051  00165C  6F6D               	movwf	(readConflictInfo@i+1)& (0+255),b
  2052  00165E  0E00               	movlw	0
  2053  001660  6F6C               	movwf	readConflictInfo@i& (0+255),b
  2054                           
  2055                           ; BSR set to: 0
  2056  001662  0100               	movlb	0	; () banked
  2057  001664  BF6D               	btfsc	(readConflictInfo@i+1)& (0+255),7,b
  2058  001666  D00A               	goto	l3108
  2059  001668  0100               	movlb	0	; () banked
  2060  00166A  516D               	movf	(readConflictInfo@i+1)& (0+255),w,b
  2061  00166C  E106               	bnz	u2120
  2062  00166E  0E0C               	movlw	12
  2063  001670  0100               	movlb	0	; () banked
  2064  001672  5D6C               	subwf	readConflictInfo@i& (0+255),w,b
  2065  001674  B0D8               	btfsc	status,0,c
  2066  001676  0012               	return	
  2067  001678  D001               	goto	l3108
  2068  00167A                     u2120:
  2069                           
  2070                           ; BSR set to: 0
  2071  00167A  0012               	return	
  2072  00167C                     l3108:
  2073                           
  2074                           ; BSR set to: 0
  2075                           ;function.c: 57: messageTx.identifier = ((8<<7) | (i << 4) | id);
  2076  00167C  0E00               	movlw	0
  2077  00167E  0100               	movlb	0	; () banked
  2078  001680  6F66               	movwf	??_readConflictInfo& (0+255),b
  2079  001682  0E04               	movlw	4
  2080  001684  0100               	movlb	0	; () banked
  2081  001686  6F67               	movwf	(??_readConflictInfo+1)& (0+255),b
  2082  001688  C06C  F068         	movff	readConflictInfo@i,??_readConflictInfo+2
  2083  00168C  C06D  F069         	movff	readConflictInfo@i+1,??_readConflictInfo+3
  2084  001690  0100               	movlb	0	; () banked
  2085  001692  3B68               	swapf	(??_readConflictInfo+2)& (0+255),f,b
  2086  001694  3B69               	swapf	(??_readConflictInfo+3)& (0+255),f,b
  2087  001696  0EF0               	movlw	240
  2088  001698  1769               	andwf	(??_readConflictInfo+3)& (0+255),f,b
  2089  00169A  5168               	movf	(??_readConflictInfo+2)& (0+255),w,b
  2090  00169C  0B0F               	andlw	15
  2091  00169E  1369               	iorwf	(??_readConflictInfo+3)& (0+255),f,b
  2092  0016A0  0EF0               	movlw	240
  2093  0016A2  1768               	andwf	(??_readConflictInfo+2)& (0+255),f,b
  2094  0016A4  0100               	movlb	0	; () banked
  2095  0016A6  51C6               	movf	_id& (0+255),w,b
  2096  0016A8  0100               	movlb	0	; () banked
  2097  0016AA  1368               	iorwf	(??_readConflictInfo+2)& (0+255),f,b
  2098  0016AC  0E00               	movlw	0
  2099  0016AE  1369               	iorwf	(??_readConflictInfo+3)& (0+255),f,b
  2100  0016B0  0100               	movlb	0	; () banked
  2101  0016B2  5166               	movf	??_readConflictInfo& (0+255),w,b
  2102  0016B4  0100               	movlb	0	; () banked
  2103  0016B6  1368               	iorwf	(??_readConflictInfo+2)& (0+255),f,b
  2104  0016B8  0100               	movlb	0	; () banked
  2105  0016BA  5167               	movf	(??_readConflictInfo+1)& (0+255),w,b
  2106  0016BC  0100               	movlb	0	; () banked
  2107  0016BE  1369               	iorwf	(??_readConflictInfo+3)& (0+255),f,b
  2108  0016C0  C068  F0C8         	movff	??_readConflictInfo+2,_messageTx+1
  2109  0016C4  C069  F0C9         	movff	??_readConflictInfo+3,_messageTx+2
  2110  0016C8  0100               	movlb	0	; () banked
  2111  0016CA  0E00               	movlw	0
  2112  0016CC  BFC9               	btfsc	(_messageTx+2)& (0+255),7,b
  2113  0016CE  0EFF               	movlw	-1
  2114  0016D0  6FCA               	movwf	(_messageTx+3)& (0+255),b
  2115  0016D2  6FCB               	movwf	(_messageTx+4)& (0+255),b
  2116                           
  2117                           ; BSR set to: 0
  2118                           ;function.c: 60: Can_PutMessage(&messageTx);
  2119  0016D4  0EC7               	movlw	low _messageTx
  2120  0016D6  0100               	movlb	0	; () banked
  2121  0016D8  6F60               	movwf	Can_PutMessage@msgPtr& (0+255),b
  2122  0016DA  0E00               	movlw	high _messageTx
  2123  0016DC  0100               	movlb	0	; () banked
  2124  0016DE  6F61               	movwf	(Can_PutMessage@msgPtr+1)& (0+255),b
  2125  0016E0  EC66  F00E         	call	_Can_PutMessage	;wreg free
  2126  0016E4                     l3112:
  2127  0016E4  0ED8               	movlw	low _message
  2128  0016E6  0100               	movlb	0	; () banked
  2129  0016E8  6F60               	movwf	Can_GetMessage@msgPtr& (0+255),b
  2130  0016EA  0E00               	movlw	high _message
  2131  0016EC  0100               	movlb	0	; () banked
  2132  0016EE  6F61               	movwf	(Can_GetMessage@msgPtr+1)& (0+255),b
  2133  0016F0  ECB7  F010         	call	_Can_GetMessage	;wreg free
  2134  0016F4  0900               	iorlw	0
  2135  0016F6  A4D8               	btfss	status,2,c
  2136  0016F8  D7F5               	goto	l3112
  2137                           
  2138                           ;function.c: 65: for ( j = 0 ; j < 3 ; j ++){
  2139  0016FA  0E00               	movlw	0
  2140  0016FC  0100               	movlb	0	; () banked
  2141  0016FE  6F6F               	movwf	(readConflictInfo@j+1)& (0+255),b
  2142  001700  0E00               	movlw	0
  2143  001702  6F6E               	movwf	readConflictInfo@j& (0+255),b
  2144                           
  2145                           ; BSR set to: 0
  2146  001704  0100               	movlb	0	; () banked
  2147  001706  BF6F               	btfsc	(readConflictInfo@j+1)& (0+255),7,b
  2148  001708  D00A               	goto	l3120
  2149  00170A  0100               	movlb	0	; () banked
  2150  00170C  516F               	movf	(readConflictInfo@j+1)& (0+255),w,b
  2151  00170E  E106               	bnz	u2140
  2152  001710  0E03               	movlw	3
  2153  001712  0100               	movlb	0	; () banked
  2154  001714  5D6E               	subwf	readConflictInfo@j& (0+255),w,b
  2155  001716  B0D8               	btfsc	status,0,c
  2156  001718  D117               	goto	l3126
  2157  00171A  D001               	goto	l3120
  2158  00171C                     u2140:
  2159                           
  2160                           ; BSR set to: 0
  2161  00171C  D115               	goto	l3126
  2162  00171E                     l3120:
  2163                           
  2164                           ; BSR set to: 0
  2165                           ;function.c: 66: conflicts[i][(4*j) + 0] = (message.dta[j] & 0x03);
  2166  00171E  C06C  F060         	movff	readConflictInfo@i,___wmul@multiplier
  2167  001722  C06D  F061         	movff	readConflictInfo@i+1,___wmul@multiplier+1
  2168  001726  0E00               	movlw	0
  2169  001728  0100               	movlb	0	; () banked
  2170  00172A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2171  00172C  0E0C               	movlw	12
  2172  00172E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2173  001730  EC8D  F019         	call	___wmul	;wreg free
  2174  001734  0E00               	movlw	low _conflicts
  2175  001736  0100               	movlb	0	; () banked
  2176  001738  6F66               	movwf	??_readConflictInfo& (0+255),b
  2177  00173A  0E02               	movlw	high _conflicts
  2178  00173C  0100               	movlb	0	; () banked
  2179  00173E  6F67               	movwf	(??_readConflictInfo+1)& (0+255),b
  2180  001740  0100               	movlb	0	; () banked
  2181  001742  5160               	movf	?___wmul& (0+255),w,b
  2182  001744  0100               	movlb	0	; () banked
  2183  001746  2766               	addwf	??_readConflictInfo& (0+255),f,b
  2184  001748  0100               	movlb	0	; () banked
  2185  00174A  5161               	movf	(?___wmul+1)& (0+255),w,b
  2186  00174C  0100               	movlb	0	; () banked
  2187  00174E  2367               	addwfc	(??_readConflictInfo+1)& (0+255),f,b
  2188  001750  90D8               	bcf	status,0,c
  2189  001752  0100               	movlb	0	; () banked
  2190  001754  356E               	rlcf	readConflictInfo@j& (0+255),w,b
  2191  001756  6ED9               	movwf	fsr2l,c
  2192  001758  0100               	movlb	0	; () banked
  2193  00175A  356F               	rlcf	(readConflictInfo@j+1)& (0+255),w,b
  2194  00175C  6EDA               	movwf	fsr2h,c
  2195  00175E  90D8               	bcf	status,0,c
  2196  001760  36D9               	rlcf	fsr2l,f,c
  2197  001762  36DA               	rlcf	fsr2h,f,c
  2198  001764  0100               	movlb	0	; () banked
  2199  001766  5166               	movf	??_readConflictInfo& (0+255),w,b
  2200  001768  26D9               	addwf	fsr2l,f,c
  2201  00176A  0100               	movlb	0	; () banked
  2202  00176C  5167               	movf	(??_readConflictInfo+1)& (0+255),w,b
  2203  00176E  22DA               	addwfc	fsr2h,f,c
  2204  001770  0EDE               	movlw	low (_message+6)
  2205  001772  0100               	movlb	0	; () banked
  2206  001774  256E               	addwf	readConflictInfo@j& (0+255),w,b
  2207  001776  6EE1               	movwf	fsr1l,c
  2208  001778  0E00               	movlw	high (_message+6)
  2209  00177A  0100               	movlb	0	; () banked
  2210  00177C  216F               	addwfc	(readConflictInfo@j+1)& (0+255),w,b
  2211  00177E  6EE2               	movwf	fsr1h,c
  2212  001780  50E7               	movf	indf1,w,c
  2213  001782  0B03               	andlw	3
  2214  001784  6EDF               	movwf	indf2,c
  2215                           
  2216                           ;function.c: 67: conflicts[i][(4*j) + 1] = (message.dta[j] & 0x0c) >> 2;
  2217  001786  C06C  F060         	movff	readConflictInfo@i,___wmul@multiplier
  2218  00178A  C06D  F061         	movff	readConflictInfo@i+1,___wmul@multiplier+1
  2219  00178E  0E00               	movlw	0
  2220  001790  0100               	movlb	0	; () banked
  2221  001792  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2222  001794  0E0C               	movlw	12
  2223  001796  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2224  001798  EC8D  F019         	call	___wmul	;wreg free
  2225  00179C  C06E  F066         	movff	readConflictInfo@j,??_readConflictInfo
  2226  0017A0  C06F  F067         	movff	readConflictInfo@j+1,??_readConflictInfo+1
  2227  0017A4  0100               	movlb	0	; () banked
  2228  0017A6  90D8               	bcf	status,0,c
  2229  0017A8  3766               	rlcf	??_readConflictInfo& (0+255),f,b
  2230  0017AA  3767               	rlcf	(??_readConflictInfo+1)& (0+255),f,b
  2231  0017AC  0100               	movlb	0	; () banked
  2232  0017AE  90D8               	bcf	status,0,c
  2233  0017B0  3766               	rlcf	??_readConflictInfo& (0+255),f,b
  2234  0017B2  3767               	rlcf	(??_readConflictInfo+1)& (0+255),f,b
  2235  0017B4  0E01               	movlw	1
  2236  0017B6  0100               	movlb	0	; () banked
  2237  0017B8  2766               	addwf	??_readConflictInfo& (0+255),f,b
  2238  0017BA  0E00               	movlw	0
  2239  0017BC  2367               	addwfc	(??_readConflictInfo+1)& (0+255),f,b
  2240  0017BE  0E00               	movlw	low _conflicts
  2241  0017C0  0100               	movlb	0	; () banked
  2242  0017C2  6F68               	movwf	(??_readConflictInfo+2)& (0+255),b
  2243  0017C4  0E02               	movlw	high _conflicts
  2244  0017C6  0100               	movlb	0	; () banked
  2245  0017C8  6F69               	movwf	(??_readConflictInfo+3)& (0+255),b
  2246  0017CA  0100               	movlb	0	; () banked
  2247  0017CC  5166               	movf	??_readConflictInfo& (0+255),w,b
  2248  0017CE  0100               	movlb	0	; () banked
  2249  0017D0  2768               	addwf	(??_readConflictInfo+2)& (0+255),f,b
  2250  0017D2  0100               	movlb	0	; () banked
  2251  0017D4  5167               	movf	(??_readConflictInfo+1)& (0+255),w,b
  2252  0017D6  0100               	movlb	0	; () banked
  2253  0017D8  2369               	addwfc	(??_readConflictInfo+3)& (0+255),f,b
  2254  0017DA  0100               	movlb	0	; () banked
  2255  0017DC  5160               	movf	?___wmul& (0+255),w,b
  2256  0017DE  0100               	movlb	0	; () banked
  2257  0017E0  2568               	addwf	(??_readConflictInfo+2)& (0+255),w,b
  2258  0017E2  6ED9               	movwf	fsr2l,c
  2259  0017E4  0100               	movlb	0	; () banked
  2260  0017E6  5161               	movf	(?___wmul+1)& (0+255),w,b
  2261  0017E8  0100               	movlb	0	; () banked
  2262  0017EA  2169               	addwfc	(??_readConflictInfo+3)& (0+255),w,b
  2263  0017EC  6EDA               	movwf	fsr2h,c
  2264  0017EE  0EDE               	movlw	low (_message+6)
  2265  0017F0  0100               	movlb	0	; () banked
  2266  0017F2  256E               	addwf	readConflictInfo@j& (0+255),w,b
  2267  0017F4  6EE1               	movwf	fsr1l,c
  2268  0017F6  0E00               	movlw	high (_message+6)
  2269  0017F8  0100               	movlb	0	; () banked
  2270  0017FA  216F               	addwfc	(readConflictInfo@j+1)& (0+255),w,b
  2271  0017FC  6EE2               	movwf	fsr1h,c
  2272  0017FE  50E7               	movf	indf1,w,c
  2273  001800  0100               	movlb	0	; () banked
  2274  001802  6F6A               	movwf	(??_readConflictInfo+4)& (0+255),b
  2275  001804  0100               	movlb	0	; () banked
  2276  001806  90D8               	bcf	status,0,c
  2277  001808  336A               	rrcf	(??_readConflictInfo+4)& (0+255),f,b
  2278  00180A  0100               	movlb	0	; () banked
  2279  00180C  90D8               	bcf	status,0,c
  2280  00180E  316A               	rrcf	(??_readConflictInfo+4)& (0+255),w,b
  2281  001810  0B03               	andlw	3
  2282  001812  6EDF               	movwf	indf2,c
  2283                           
  2284                           ;function.c: 68: conflicts[i][(4*j) + 2] = (message.dta[j] & 0x30) >> 4;
  2285  001814  C06C  F060         	movff	readConflictInfo@i,___wmul@multiplier
  2286  001818  C06D  F061         	movff	readConflictInfo@i+1,___wmul@multiplier+1
  2287  00181C  0E00               	movlw	0
  2288  00181E  0100               	movlb	0	; () banked
  2289  001820  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2290  001822  0E0C               	movlw	12
  2291  001824  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2292  001826  EC8D  F019         	call	___wmul	;wreg free
  2293  00182A  C06E  F066         	movff	readConflictInfo@j,??_readConflictInfo
  2294  00182E  C06F  F067         	movff	readConflictInfo@j+1,??_readConflictInfo+1
  2295  001832  0100               	movlb	0	; () banked
  2296  001834  90D8               	bcf	status,0,c
  2297  001836  3766               	rlcf	??_readConflictInfo& (0+255),f,b
  2298  001838  3767               	rlcf	(??_readConflictInfo+1)& (0+255),f,b
  2299  00183A  0100               	movlb	0	; () banked
  2300  00183C  90D8               	bcf	status,0,c
  2301  00183E  3766               	rlcf	??_readConflictInfo& (0+255),f,b
  2302  001840  3767               	rlcf	(??_readConflictInfo+1)& (0+255),f,b
  2303  001842  0E02               	movlw	2
  2304  001844  0100               	movlb	0	; () banked
  2305  001846  2766               	addwf	??_readConflictInfo& (0+255),f,b
  2306  001848  0E00               	movlw	0
  2307  00184A  2367               	addwfc	(??_readConflictInfo+1)& (0+255),f,b
  2308  00184C  0E00               	movlw	low _conflicts
  2309  00184E  0100               	movlb	0	; () banked
  2310  001850  6F68               	movwf	(??_readConflictInfo+2)& (0+255),b
  2311  001852  0E02               	movlw	high _conflicts
  2312  001854  0100               	movlb	0	; () banked
  2313  001856  6F69               	movwf	(??_readConflictInfo+3)& (0+255),b
  2314  001858  0100               	movlb	0	; () banked
  2315  00185A  5166               	movf	??_readConflictInfo& (0+255),w,b
  2316  00185C  0100               	movlb	0	; () banked
  2317  00185E  2768               	addwf	(??_readConflictInfo+2)& (0+255),f,b
  2318  001860  0100               	movlb	0	; () banked
  2319  001862  5167               	movf	(??_readConflictInfo+1)& (0+255),w,b
  2320  001864  0100               	movlb	0	; () banked
  2321  001866  2369               	addwfc	(??_readConflictInfo+3)& (0+255),f,b
  2322  001868  0100               	movlb	0	; () banked
  2323  00186A  5160               	movf	?___wmul& (0+255),w,b
  2324  00186C  0100               	movlb	0	; () banked
  2325  00186E  2568               	addwf	(??_readConflictInfo+2)& (0+255),w,b
  2326  001870  6ED9               	movwf	fsr2l,c
  2327  001872  0100               	movlb	0	; () banked
  2328  001874  5161               	movf	(?___wmul+1)& (0+255),w,b
  2329  001876  0100               	movlb	0	; () banked
  2330  001878  2169               	addwfc	(??_readConflictInfo+3)& (0+255),w,b
  2331  00187A  6EDA               	movwf	fsr2h,c
  2332  00187C  0EDE               	movlw	low (_message+6)
  2333  00187E  0100               	movlb	0	; () banked
  2334  001880  256E               	addwf	readConflictInfo@j& (0+255),w,b
  2335  001882  6EE1               	movwf	fsr1l,c
  2336  001884  0E00               	movlw	high (_message+6)
  2337  001886  0100               	movlb	0	; () banked
  2338  001888  216F               	addwfc	(readConflictInfo@j+1)& (0+255),w,b
  2339  00188A  6EE2               	movwf	fsr1h,c
  2340  00188C  50E7               	movf	indf1,w,c
  2341  00188E  0100               	movlb	0	; () banked
  2342  001890  6F6A               	movwf	(??_readConflictInfo+4)& (0+255),b
  2343  001892  0100               	movlb	0	; () banked
  2344  001894  396A               	swapf	(??_readConflictInfo+4)& (0+255),w,b
  2345  001896  0B0F               	andlw	15
  2346  001898  0B03               	andlw	3
  2347  00189A  6EDF               	movwf	indf2,c
  2348                           
  2349                           ;function.c: 69: conflicts[i][(4*j) + 3] = (message.dta[j] & 0xc0) >> 6;
  2350  00189C  C06C  F060         	movff	readConflictInfo@i,___wmul@multiplier
  2351  0018A0  C06D  F061         	movff	readConflictInfo@i+1,___wmul@multiplier+1
  2352  0018A4  0E00               	movlw	0
  2353  0018A6  0100               	movlb	0	; () banked
  2354  0018A8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2355  0018AA  0E0C               	movlw	12
  2356  0018AC  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2357  0018AE  EC8D  F019         	call	___wmul	;wreg free
  2358  0018B2  C06E  F066         	movff	readConflictInfo@j,??_readConflictInfo
  2359  0018B6  C06F  F067         	movff	readConflictInfo@j+1,??_readConflictInfo+1
  2360  0018BA  0100               	movlb	0	; () banked
  2361  0018BC  90D8               	bcf	status,0,c
  2362  0018BE  3766               	rlcf	??_readConflictInfo& (0+255),f,b
  2363  0018C0  3767               	rlcf	(??_readConflictInfo+1)& (0+255),f,b
  2364  0018C2  0100               	movlb	0	; () banked
  2365  0018C4  90D8               	bcf	status,0,c
  2366  0018C6  3766               	rlcf	??_readConflictInfo& (0+255),f,b
  2367  0018C8  3767               	rlcf	(??_readConflictInfo+1)& (0+255),f,b
  2368  0018CA  0E03               	movlw	3
  2369  0018CC  0100               	movlb	0	; () banked
  2370  0018CE  2766               	addwf	??_readConflictInfo& (0+255),f,b
  2371  0018D0  0E00               	movlw	0
  2372  0018D2  2367               	addwfc	(??_readConflictInfo+1)& (0+255),f,b
  2373  0018D4  0E00               	movlw	low _conflicts
  2374  0018D6  0100               	movlb	0	; () banked
  2375  0018D8  6F68               	movwf	(??_readConflictInfo+2)& (0+255),b
  2376  0018DA  0E02               	movlw	high _conflicts
  2377  0018DC  0100               	movlb	0	; () banked
  2378  0018DE  6F69               	movwf	(??_readConflictInfo+3)& (0+255),b
  2379  0018E0  0100               	movlb	0	; () banked
  2380  0018E2  5166               	movf	??_readConflictInfo& (0+255),w,b
  2381  0018E4  0100               	movlb	0	; () banked
  2382  0018E6  2768               	addwf	(??_readConflictInfo+2)& (0+255),f,b
  2383  0018E8  0100               	movlb	0	; () banked
  2384  0018EA  5167               	movf	(??_readConflictInfo+1)& (0+255),w,b
  2385  0018EC  0100               	movlb	0	; () banked
  2386  0018EE  2369               	addwfc	(??_readConflictInfo+3)& (0+255),f,b
  2387  0018F0  0100               	movlb	0	; () banked
  2388  0018F2  5160               	movf	?___wmul& (0+255),w,b
  2389  0018F4  0100               	movlb	0	; () banked
  2390  0018F6  2568               	addwf	(??_readConflictInfo+2)& (0+255),w,b
  2391  0018F8  6ED9               	movwf	fsr2l,c
  2392  0018FA  0100               	movlb	0	; () banked
  2393  0018FC  5161               	movf	(?___wmul+1)& (0+255),w,b
  2394  0018FE  0100               	movlb	0	; () banked
  2395  001900  2169               	addwfc	(??_readConflictInfo+3)& (0+255),w,b
  2396  001902  6EDA               	movwf	fsr2h,c
  2397  001904  0EDE               	movlw	low (_message+6)
  2398  001906  0100               	movlb	0	; () banked
  2399  001908  256E               	addwf	readConflictInfo@j& (0+255),w,b
  2400  00190A  6EE1               	movwf	fsr1l,c
  2401  00190C  0E00               	movlw	high (_message+6)
  2402  00190E  0100               	movlb	0	; () banked
  2403  001910  216F               	addwfc	(readConflictInfo@j+1)& (0+255),w,b
  2404  001912  6EE2               	movwf	fsr1h,c
  2405  001914  50E7               	movf	indf1,w,c
  2406  001916  0100               	movlb	0	; () banked
  2407  001918  6F6A               	movwf	(??_readConflictInfo+4)& (0+255),b
  2408  00191A  0E06               	movlw	6
  2409  00191C  0100               	movlb	0	; () banked
  2410  00191E  6F6B               	movwf	(??_readConflictInfo+5)& (0+255),b
  2411  001920                     u2155:
  2412  001920  0100               	movlb	0	; () banked
  2413  001922  90D8               	bcf	status,0,c
  2414  001924  336A               	rrcf	(??_readConflictInfo+4)& (0+255),f,b
  2415  001926  0100               	movlb	0	; () banked
  2416  001928  2F6B               	decfsz	(??_readConflictInfo+5)& (0+255),f,b
  2417  00192A  D7FA               	goto	u2155
  2418  00192C  0100               	movlb	0	; () banked
  2419  00192E  516A               	movf	(??_readConflictInfo+4)& (0+255),w,b
  2420  001930  0B03               	andlw	3
  2421  001932  6EDF               	movwf	indf2,c
  2422                           
  2423                           ; BSR set to: 0
  2424  001934  0100               	movlb	0	; () banked
  2425  001936  4B6E               	infsnz	readConflictInfo@j& (0+255),f,b
  2426  001938  2B6F               	incf	(readConflictInfo@j+1)& (0+255),f,b
  2427                           
  2428                           ; BSR set to: 0
  2429  00193A  0100               	movlb	0	; () banked
  2430  00193C  BF6F               	btfsc	(readConflictInfo@j+1)& (0+255),7,b
  2431  00193E  D6EF               	goto	l3120
  2432  001940  0100               	movlb	0	; () banked
  2433  001942  516F               	movf	(readConflictInfo@j+1)& (0+255),w,b
  2434  001944  E101               	bnz	l3126
  2435  001946  D6E4               	goto	L1
  2436  001948                     l3126:
  2437                           
  2438                           ; BSR set to: 0
  2439                           ;function.c: 70: }
  2440                           ;function.c: 72: resetData();
  2441  001948  EC52  F019         	call	_resetData	;wreg free
  2442  00194C  0100               	movlb	0	; () banked
  2443  00194E  4B6C               	infsnz	readConflictInfo@i& (0+255),f,b
  2444  001950  2B6D               	incf	(readConflictInfo@i+1)& (0+255),f,b
  2445                           
  2446                           ; BSR set to: 0
  2447  001952  0100               	movlb	0	; () banked
  2448  001954  BF6D               	btfsc	(readConflictInfo@i+1)& (0+255),7,b
  2449  001956  D692               	goto	l3108
  2450  001958  0100               	movlb	0	; () banked
  2451  00195A  516D               	movf	(readConflictInfo@i+1)& (0+255),w,b
  2452  00195C  E101               	bnz	l578
  2453  00195E  D687               	goto	L2
  2454  001960                     l578:
  2455                           
  2456                           ; BSR set to: 0
  2457  001960  0012               	return		;funcret
  2458  001962                     __end_of_readConflictInfo:
  2459                           	opt stack 0
  2460                           tblptru	equ	0xFF8
  2461                           tblptrh	equ	0xFF7
  2462                           tblptrl	equ	0xFF6
  2463                           tablat	equ	0xFF5
  2464                           prodh	equ	0xFF4
  2465                           prodl	equ	0xFF3
  2466                           intcon	equ	0xFF2
  2467                           postinc0	equ	0xFEE
  2468                           wreg	equ	0xFE8
  2469                           indf1	equ	0xFE7
  2470                           postdec1	equ	0xFE5
  2471                           fsr1h	equ	0xFE2
  2472                           fsr1l	equ	0xFE1
  2473                           indf2	equ	0xFDF
  2474                           postinc2	equ	0xFDE
  2475                           fsr2h	equ	0xFDA
  2476                           fsr2l	equ	0xFD9
  2477                           status	equ	0xFD8
  2478                           
  2479 ;; *************** function _resetData *****************
  2480 ;; Defined at:
  2481 ;;		line 139 in file "function.c"
  2482 ;; Parameters:    Size  Location     Type
  2483 ;;		None
  2484 ;; Auto vars:     Size  Location     Type
  2485 ;;  i               2    0[BANK0 ] int 
  2486 ;; Return value:  Size  Location     Type
  2487 ;;                  1    wreg      void 
  2488 ;; Registers used:
  2489 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2490 ;; Tracked objects:
  2491 ;;		On entry : 0/0
  2492 ;;		On exit  : 0/0
  2493 ;;		Unchanged: 0/0
  2494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2496 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2498 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2499 ;;Total ram usage:        2 bytes
  2500 ;; Hardware stack levels used:    1
  2501 ;; Hardware stack levels required when called:    8
  2502 ;; This function calls:
  2503 ;;		Nothing
  2504 ;; This function is called by:
  2505 ;;		_readID
  2506 ;;		_readConflictInfo
  2507 ;; This function uses a non-reentrant model
  2508 ;;
  2509                           
  2510                           	psect	text6
  2511  0032A4                     __ptext6:
  2512                           	opt stack 0
  2513  0032A4                     _resetData:
  2514                           	opt stack 20
  2515                           
  2516                           ;function.c: 140: int i;
  2517                           ;function.c: 141: for (i = 0 ; i < 4 ; i++){
  2518                           
  2519                           ; BSR set to: 0
  2520                           ;incstack = 0
  2521  0032A4  0E00               	movlw	0
  2522  0032A6  0100               	movlb	0	; () banked
  2523  0032A8  6F61               	movwf	(resetData@i+1)& (0+255),b
  2524  0032AA  0E00               	movlw	0
  2525  0032AC  6F60               	movwf	resetData@i& (0+255),b
  2526  0032AE                     l2904:
  2527                           
  2528                           ; BSR set to: 0
  2529  0032AE  0100               	movlb	0	; () banked
  2530  0032B0  BF61               	btfsc	(resetData@i+1)& (0+255),7,b
  2531  0032B2  D008               	goto	l2908
  2532  0032B4  0100               	movlb	0	; () banked
  2533  0032B6  5161               	movf	(resetData@i+1)& (0+255),w,b
  2534  0032B8  E113               	bnz	l598
  2535  0032BA  0E04               	movlw	4
  2536  0032BC  0100               	movlb	0	; () banked
  2537  0032BE  5D60               	subwf	resetData@i& (0+255),w,b
  2538  0032C0  B0D8               	btfsc	status,0,c
  2539  0032C2  0012               	return	
  2540  0032C4                     l2908:
  2541                           
  2542                           ; BSR set to: 0
  2543                           ;function.c: 142: message.dta[i] = 0;
  2544  0032C4  0EDE               	movlw	low (_message+6)
  2545  0032C6  0100               	movlb	0	; () banked
  2546  0032C8  2560               	addwf	resetData@i& (0+255),w,b
  2547  0032CA  6ED9               	movwf	fsr2l,c
  2548  0032CC  0E00               	movlw	high (_message+6)
  2549  0032CE  0100               	movlb	0	; () banked
  2550  0032D0  2161               	addwfc	(resetData@i+1)& (0+255),w,b
  2551  0032D2  6EDA               	movwf	fsr2h,c
  2552  0032D4  0E00               	movlw	0
  2553  0032D6  6EDF               	movwf	indf2,c
  2554                           
  2555                           ; BSR set to: 0
  2556  0032D8  0100               	movlb	0	; () banked
  2557  0032DA  4B60               	infsnz	resetData@i& (0+255),f,b
  2558  0032DC  2B61               	incf	(resetData@i+1)& (0+255),f,b
  2559  0032DE  D7E7               	goto	l2904
  2560  0032E0                     l598:
  2561                           
  2562                           ; BSR set to: 0
  2563  0032E0  0012               	return		;funcret
  2564  0032E2                     __end_of_resetData:
  2565                           	opt stack 0
  2566                           tblptru	equ	0xFF8
  2567                           tblptrh	equ	0xFF7
  2568                           tblptrl	equ	0xFF6
  2569                           tablat	equ	0xFF5
  2570                           prodh	equ	0xFF4
  2571                           prodl	equ	0xFF3
  2572                           intcon	equ	0xFF2
  2573                           postinc0	equ	0xFEE
  2574                           wreg	equ	0xFE8
  2575                           indf1	equ	0xFE7
  2576                           postdec1	equ	0xFE5
  2577                           fsr1h	equ	0xFE2
  2578                           fsr1l	equ	0xFE1
  2579                           indf2	equ	0xFDF
  2580                           postinc2	equ	0xFDE
  2581                           fsr2h	equ	0xFDA
  2582                           fsr2l	equ	0xFD9
  2583                           status	equ	0xFD8
  2584                           
  2585 ;; *************** function ___wmul *****************
  2586 ;; Defined at:
  2587 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  2588 ;; Parameters:    Size  Location     Type
  2589 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2590 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2591 ;; Auto vars:     Size  Location     Type
  2592 ;;  product         2    4[BANK0 ] unsigned int 
  2593 ;; Return value:  Size  Location     Type
  2594 ;;                  2    0[BANK0 ] unsigned int 
  2595 ;; Registers used:
  2596 ;;		wreg, status,2, status,0, prodl, prodh
  2597 ;; Tracked objects:
  2598 ;;		On entry : 0/0
  2599 ;;		On exit  : 0/0
  2600 ;;		Unchanged: 0/0
  2601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2602 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2603 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2605 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2606 ;;Total ram usage:        6 bytes
  2607 ;; Hardware stack levels used:    1
  2608 ;; Hardware stack levels required when called:    8
  2609 ;; This function calls:
  2610 ;;		Nothing
  2611 ;; This function is called by:
  2612 ;;		_readConflictInfo
  2613 ;; This function uses a non-reentrant model
  2614 ;;
  2615                           
  2616                           	psect	text7
  2617  00331A                     __ptext7:
  2618                           	opt stack 0
  2619  00331A                     ___wmul:
  2620                           	opt stack 20
  2621                           
  2622                           ; BSR set to: 0
  2623                           ;incstack = 0
  2624  00331A  0100               	movlb	0	; () banked
  2625  00331C  5160               	movf	___wmul@multiplier& (0+255),w,b
  2626  00331E  0100               	movlb	0	; () banked
  2627  003320  0362               	mulwf	___wmul@multiplicand& (0+255),b
  2628  003322  CFF3 F064          	movff	prodl,___wmul@product
  2629  003326  CFF4 F065          	movff	prodh,___wmul@product+1
  2630  00332A  0100               	movlb	0	; () banked
  2631  00332C  5160               	movf	___wmul@multiplier& (0+255),w,b
  2632  00332E  0100               	movlb	0	; () banked
  2633  003330  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  2634  003332  50F3               	movf	prodl,w,c
  2635  003334  0100               	movlb	0	; () banked
  2636  003336  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  2637  003338  0100               	movlb	0	; () banked
  2638  00333A  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  2639  00333C  0100               	movlb	0	; () banked
  2640  00333E  0362               	mulwf	___wmul@multiplicand& (0+255),b
  2641  003340  50F3               	movf	prodl,w,c
  2642  003342  0100               	movlb	0	; () banked
  2643  003344  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  2644                           
  2645                           ; BSR set to: 0
  2646  003346  C064  F060         	movff	___wmul@product,?___wmul
  2647  00334A  C065  F061         	movff	___wmul@product+1,?___wmul+1
  2648  00334E  0012               	return	
  2649  003350                     __end_of___wmul:
  2650                           	opt stack 0
  2651                           tblptru	equ	0xFF8
  2652                           tblptrh	equ	0xFF7
  2653                           tblptrl	equ	0xFF6
  2654                           tablat	equ	0xFF5
  2655                           prodh	equ	0xFF4
  2656                           prodl	equ	0xFF3
  2657                           intcon	equ	0xFF2
  2658                           postinc0	equ	0xFEE
  2659                           wreg	equ	0xFE8
  2660                           indf1	equ	0xFE7
  2661                           postdec1	equ	0xFE5
  2662                           fsr1h	equ	0xFE2
  2663                           fsr1l	equ	0xFE1
  2664                           indf2	equ	0xFDF
  2665                           postinc2	equ	0xFDE
  2666                           fsr2h	equ	0xFDA
  2667                           fsr2l	equ	0xFD9
  2668                           status	equ	0xFD8
  2669                           
  2670 ;; *************** function _Can_PutMessage *****************
  2671 ;; Defined at:
  2672 ;;		line 200 in file "can.c"
  2673 ;; Parameters:    Size  Location     Type
  2674 ;;  msgPtr          2    0[BANK0 ] PTR struct CANMESSAGE
  2675 ;;		 -> messageTx(17), 
  2676 ;; Auto vars:     Size  Location     Type
  2677 ;;  i               1    4[BANK0 ] unsigned char 
  2678 ;; Return value:  Size  Location     Type
  2679 ;;                  1    wreg      unsigned char 
  2680 ;; Registers used:
  2681 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2682 ;; Tracked objects:
  2683 ;;		On entry : 0/0
  2684 ;;		On exit  : 0/0
  2685 ;;		Unchanged: 0/0
  2686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2687 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2688 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2689 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2690 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2691 ;;Total ram usage:        5 bytes
  2692 ;; Hardware stack levels used:    1
  2693 ;; Hardware stack levels required when called:    8
  2694 ;; This function calls:
  2695 ;;		Nothing
  2696 ;; This function is called by:
  2697 ;;		_readID
  2698 ;;		_readConflictInfo
  2699 ;; This function uses a non-reentrant model
  2700 ;;
  2701                           
  2702                           	psect	text8
  2703  001CCC                     __ptext8:
  2704                           	opt stack 0
  2705  001CCC                     _Can_PutMessage:
  2706                           	opt stack 20
  2707                           
  2708                           ;can.c: 202: uint8_t i;
  2709                           ;can.c: 204: if((txBufferCount) < 4)
  2710                           
  2711                           ; BSR set to: 0
  2712                           ;incstack = 0
  2713  001CCC  0E04               	movlw	4
  2714  001CCE  0100               	movlb	0	; () banked
  2715  001CD0  61C1               	cpfslt	_txBufferCount& (0+255),b
  2716  001CD2  0012               	return	
  2717                           
  2718                           ; BSR set to: 0
  2719                           ;can.c: 205: {
  2720                           ;can.c: 206: txBuffer[txBufferPtrIn].dlc = msgPtr->dlc;
  2721  001CD4  0100               	movlb	0	; () banked
  2722  001CD6  EE20 F005          	lfsr	2,5
  2723  001CDA  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  2724  001CDC  26D9               	addwf	fsr2l,f,c
  2725  001CDE  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  2726  001CE0  22DA               	addwfc	fsr2h,f,c
  2727  001CE2  0100               	movlb	0	; () banked
  2728  001CE4  51C2               	movf	_txBufferPtrIn& (0+255),w,b
  2729  001CE6  0D11               	mullw	17
  2730  001CE8  0E05               	movlw	5
  2731  001CEA  26F3               	addwf	prodl,f,c
  2732  001CEC  0E00               	movlw	0
  2733  001CEE  22F4               	addwfc	prodh,f,c
  2734  001CF0  0E24               	movlw	low _txBuffer
  2735  001CF2  24F3               	addwf	prodl,w,c
  2736  001CF4  6EE1               	movwf	fsr1l,c
  2737  001CF6  0E01               	movlw	high _txBuffer
  2738  001CF8  20F4               	addwfc	prodh,w,c
  2739  001CFA  6EE2               	movwf	fsr1h,c
  2740  001CFC  CFDF FFE7          	movff	indf2,indf1
  2741                           
  2742                           ;can.c: 207: txBuffer[txBufferPtrIn].extended_identifier = msgPtr->extended_identifier;
  2743  001D00  C060  FFD9         	movff	Can_PutMessage@msgPtr,fsr2l
  2744  001D04  C061  FFDA         	movff	Can_PutMessage@msgPtr+1,fsr2h
  2745  001D08  0100               	movlb	0	; () banked
  2746  001D0A  51C2               	movf	_txBufferPtrIn& (0+255),w,b
  2747  001D0C  0D11               	mullw	17
  2748  001D0E  0E24               	movlw	low _txBuffer
  2749  001D10  24F3               	addwf	prodl,w,c
  2750  001D12  6EE1               	movwf	fsr1l,c
  2751  001D14  0E01               	movlw	high _txBuffer
  2752  001D16  20F4               	addwfc	prodh,w,c
  2753  001D18  6EE2               	movwf	fsr1h,c
  2754  001D1A  CFDF FFE7          	movff	indf2,indf1
  2755                           
  2756                           ;can.c: 208: txBuffer[txBufferPtrIn].filhit = msgPtr->filhit;
  2757  001D1E  0100               	movlb	0	; () banked
  2758  001D20  EE20 F00F          	lfsr	2,15
  2759  001D24  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  2760  001D26  26D9               	addwf	fsr2l,f,c
  2761  001D28  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  2762  001D2A  22DA               	addwfc	fsr2h,f,c
  2763  001D2C  0100               	movlb	0	; () banked
  2764  001D2E  51C2               	movf	_txBufferPtrIn& (0+255),w,b
  2765  001D30  0D11               	mullw	17
  2766  001D32  0E0F               	movlw	15
  2767  001D34  26F3               	addwf	prodl,f,c
  2768  001D36  0E00               	movlw	0
  2769  001D38  22F4               	addwfc	prodh,f,c
  2770  001D3A  0E24               	movlw	low _txBuffer
  2771  001D3C  24F3               	addwf	prodl,w,c
  2772  001D3E  6EE1               	movwf	fsr1l,c
  2773  001D40  0E01               	movlw	high _txBuffer
  2774  001D42  20F4               	addwfc	prodh,w,c
  2775  001D44  6EE2               	movwf	fsr1h,c
  2776  001D46  CFDF FFE7          	movff	indf2,indf1
  2777                           
  2778                           ;can.c: 209: txBuffer[txBufferPtrIn].identifier = msgPtr->identifier;
  2779  001D4A  0100               	movlb	0	; () banked
  2780  001D4C  EE20 F001          	lfsr	2,1
  2781  001D50  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  2782  001D52  26D9               	addwf	fsr2l,f,c
  2783  001D54  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  2784  001D56  22DA               	addwfc	fsr2h,f,c
  2785  001D58  0100               	movlb	0	; () banked
  2786  001D5A  51C2               	movf	_txBufferPtrIn& (0+255),w,b
  2787  001D5C  0D11               	mullw	17
  2788  001D5E  0E01               	movlw	1
  2789  001D60  26F3               	addwf	prodl,f,c
  2790  001D62  0E00               	movlw	0
  2791  001D64  22F4               	addwfc	prodh,f,c
  2792  001D66  0E24               	movlw	low _txBuffer
  2793  001D68  24F3               	addwf	prodl,w,c
  2794  001D6A  6EE1               	movwf	fsr1l,c
  2795  001D6C  0E01               	movlw	high _txBuffer
  2796  001D6E  20F4               	addwfc	prodh,w,c
  2797  001D70  6EE2               	movwf	fsr1h,c
  2798  001D72  CFDE FFE6          	movff	postinc2,postinc1
  2799  001D76  CFDE FFE6          	movff	postinc2,postinc1
  2800  001D7A  CFDE FFE6          	movff	postinc2,postinc1
  2801  001D7E  CFDE FFE6          	movff	postinc2,postinc1
  2802                           
  2803                           ;can.c: 210: txBuffer[txBufferPtrIn].rtr = msgPtr->rtr;
  2804  001D82  0100               	movlb	0	; () banked
  2805  001D84  EE20 F00E          	lfsr	2,14
  2806  001D88  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  2807  001D8A  26D9               	addwf	fsr2l,f,c
  2808  001D8C  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  2809  001D8E  22DA               	addwfc	fsr2h,f,c
  2810  001D90  0100               	movlb	0	; () banked
  2811  001D92  51C2               	movf	_txBufferPtrIn& (0+255),w,b
  2812  001D94  0D11               	mullw	17
  2813  001D96  0E0E               	movlw	14
  2814  001D98  26F3               	addwf	prodl,f,c
  2815  001D9A  0E00               	movlw	0
  2816  001D9C  22F4               	addwfc	prodh,f,c
  2817  001D9E  0E24               	movlw	low _txBuffer
  2818  001DA0  24F3               	addwf	prodl,w,c
  2819  001DA2  6EE1               	movwf	fsr1l,c
  2820  001DA4  0E01               	movlw	high _txBuffer
  2821  001DA6  20F4               	addwfc	prodh,w,c
  2822  001DA8  6EE2               	movwf	fsr1h,c
  2823  001DAA  CFDF FFE7          	movff	indf2,indf1
  2824                           
  2825                           ;can.c: 211: txBuffer[txBufferPtrIn].txPrio = msgPtr->txPrio;
  2826  001DAE  0100               	movlb	0	; () banked
  2827  001DB0  EE20 F010          	lfsr	2,16
  2828  001DB4  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  2829  001DB6  26D9               	addwf	fsr2l,f,c
  2830  001DB8  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  2831  001DBA  22DA               	addwfc	fsr2h,f,c
  2832  001DBC  0100               	movlb	0	; () banked
  2833  001DBE  51C2               	movf	_txBufferPtrIn& (0+255),w,b
  2834  001DC0  0D11               	mullw	17
  2835  001DC2  0E10               	movlw	16
  2836  001DC4  26F3               	addwf	prodl,f,c
  2837  001DC6  0E00               	movlw	0
  2838  001DC8  22F4               	addwfc	prodh,f,c
  2839  001DCA  0E24               	movlw	low _txBuffer
  2840  001DCC  24F3               	addwf	prodl,w,c
  2841  001DCE  6EE1               	movwf	fsr1l,c
  2842  001DD0  0E01               	movlw	high _txBuffer
  2843  001DD2  20F4               	addwfc	prodh,w,c
  2844  001DD4  6EE2               	movwf	fsr1h,c
  2845  001DD6  CFDF FFE7          	movff	indf2,indf1
  2846                           
  2847                           ; BSR set to: 0
  2848                           ;can.c: 212: for(i=0;i< msgPtr->dlc;i++)
  2849  001DDA  0E00               	movlw	0
  2850  001DDC  0100               	movlb	0	; () banked
  2851  001DDE  6F64               	movwf	Can_PutMessage@i& (0+255),b
  2852  001DE0  D031               	goto	l2750
  2853  001DE2                     l2746:
  2854                           
  2855                           ; BSR set to: 0
  2856                           ;can.c: 213: {
  2857                           ;can.c: 214: txBuffer[txBufferPtrIn].dta[i] = msgPtr->dta[i];
  2858  001DE2  0100               	movlb	0	; () banked
  2859  001DE4  5164               	movf	Can_PutMessage@i& (0+255),w,b
  2860  001DE6  0D01               	mullw	1
  2861  001DE8  0E06               	movlw	6
  2862  001DEA  26F3               	addwf	prodl,f,c
  2863  001DEC  0E00               	movlw	0
  2864  001DEE  22F4               	addwfc	prodh,f,c
  2865  001DF0  50F3               	movf	prodl,w,c
  2866  001DF2  0100               	movlb	0	; () banked
  2867  001DF4  2560               	addwf	Can_PutMessage@msgPtr& (0+255),w,b
  2868  001DF6  6ED9               	movwf	fsr2l,c
  2869  001DF8  50F4               	movf	prodh,w,c
  2870  001DFA  0100               	movlb	0	; () banked
  2871  001DFC  2161               	addwfc	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  2872  001DFE  6EDA               	movwf	fsr2h,c
  2873  001E00  0100               	movlb	0	; () banked
  2874  001E02  5164               	movf	Can_PutMessage@i& (0+255),w,b
  2875  001E04  0D01               	mullw	1
  2876  001E06  0E06               	movlw	6
  2877  001E08  26F3               	addwf	prodl,f,c
  2878  001E0A  0E00               	movlw	0
  2879  001E0C  22F4               	addwfc	prodh,f,c
  2880  001E0E  0E24               	movlw	low _txBuffer
  2881  001E10  0100               	movlb	0	; () banked
  2882  001E12  6F62               	movwf	??_Can_PutMessage& (0+255),b
  2883  001E14  0E01               	movlw	high _txBuffer
  2884  001E16  0100               	movlb	0	; () banked
  2885  001E18  6F63               	movwf	(??_Can_PutMessage+1)& (0+255),b
  2886  001E1A  50F3               	movf	prodl,w,c
  2887  001E1C  0100               	movlb	0	; () banked
  2888  001E1E  2762               	addwf	??_Can_PutMessage& (0+255),f,b
  2889  001E20  50F4               	movf	prodh,w,c
  2890  001E22  0100               	movlb	0	; () banked
  2891  001E24  2363               	addwfc	(??_Can_PutMessage+1)& (0+255),f,b
  2892  001E26  0100               	movlb	0	; () banked
  2893  001E28  51C2               	movf	_txBufferPtrIn& (0+255),w,b
  2894  001E2A  0D11               	mullw	17
  2895  001E2C  50F3               	movf	prodl,w,c
  2896  001E2E  0100               	movlb	0	; () banked
  2897  001E30  2562               	addwf	??_Can_PutMessage& (0+255),w,b
  2898  001E32  6EE1               	movwf	fsr1l,c
  2899  001E34  50F4               	movf	prodh,w,c
  2900  001E36  0100               	movlb	0	; () banked
  2901  001E38  2163               	addwfc	(??_Can_PutMessage+1)& (0+255),w,b
  2902  001E3A  6EE2               	movwf	fsr1h,c
  2903  001E3C  CFDF FFE7          	movff	indf2,indf1
  2904                           
  2905                           ; BSR set to: 0
  2906  001E40  0100               	movlb	0	; () banked
  2907  001E42  2B64               	incf	Can_PutMessage@i& (0+255),f,b
  2908  001E44                     l2750:
  2909                           
  2910                           ; BSR set to: 0
  2911  001E44  0100               	movlb	0	; () banked
  2912  001E46  EE20 F005          	lfsr	2,5
  2913  001E4A  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  2914  001E4C  26D9               	addwf	fsr2l,f,c
  2915  001E4E  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  2916  001E50  22DA               	addwfc	fsr2h,f,c
  2917  001E52  50DE               	movf	postinc2,w,c
  2918  001E54  0100               	movlb	0	; () banked
  2919  001E56  5D64               	subwf	Can_PutMessage@i& (0+255),w,b
  2920  001E58  A0D8               	btfss	status,0,c
  2921  001E5A  D7C3               	goto	l2746
  2922                           
  2923                           ; BSR set to: 0
  2924                           ;can.c: 215: }
  2925                           ;can.c: 216: INT3IE = 0;
  2926  001E5C  9AF0               	bcf	intcon3,5,c	;volatile
  2927                           
  2928                           ; BSR set to: 0
  2929                           ;can.c: 217: txBufferCount++;
  2930  001E5E  0100               	movlb	0	; () banked
  2931  001E60  2BC1               	incf	_txBufferCount& (0+255),f,b
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;can.c: 218: txBufferPtrIn = (txBufferPtrIn + 1) % 4;
  2935  001E62  0100               	movlb	0	; () banked
  2936  001E64  29C2               	incf	_txBufferPtrIn& (0+255),w,b
  2937  001E66  0B03               	andlw	3
  2938  001E68  0100               	movlb	0	; () banked
  2939  001E6A  6FC2               	movwf	_txBufferPtrIn& (0+255),b
  2940                           
  2941                           ; BSR set to: 0
  2942                           ;can.c: 219: INT3IE = 1;
  2943  001E6C  8AF0               	bsf	intcon3,5,c	;volatile
  2944                           
  2945                           ; BSR set to: 0
  2946                           ;can.c: 220: INT3IF = 1;
  2947  001E6E  84F0               	bsf	intcon3,2,c	;volatile
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;can.c: 223: else
  2951                           ;can.c: 224: {
  2952                           ;can.c: 225: return 1;
  2953                           ;	Return value of _Can_PutMessage is never used
  2954                           
  2955                           ; BSR set to: 0
  2956                           ;can.c: 222: }
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;can.c: 221: return 0;
  2960                           ;	Return value of _Can_PutMessage is never used
  2961  001E70  0012               	return	
  2962  001E72                     __end_of_Can_PutMessage:
  2963                           	opt stack 0
  2964                           tblptru	equ	0xFF8
  2965                           tblptrh	equ	0xFF7
  2966                           tblptrl	equ	0xFF6
  2967                           tablat	equ	0xFF5
  2968                           prodh	equ	0xFF4
  2969                           prodl	equ	0xFF3
  2970                           intcon	equ	0xFF2
  2971                           intcon3	equ	0xFF0
  2972                           postinc0	equ	0xFEE
  2973                           wreg	equ	0xFE8
  2974                           indf1	equ	0xFE7
  2975                           postinc1	equ	0xFE6
  2976                           postdec1	equ	0xFE5
  2977                           fsr1h	equ	0xFE2
  2978                           fsr1l	equ	0xFE1
  2979                           indf2	equ	0xFDF
  2980                           postinc2	equ	0xFDE
  2981                           fsr2h	equ	0xFDA
  2982                           fsr2l	equ	0xFD9
  2983                           status	equ	0xFD8
  2984                           
  2985 ;; *************** function _Can_GetMessage *****************
  2986 ;; Defined at:
  2987 ;;		line 169 in file "can.c"
  2988 ;; Parameters:    Size  Location     Type
  2989 ;;  msgPtr          2    0[BANK0 ] PTR struct CANMESSAGE
  2990 ;;		 -> message(17), 
  2991 ;; Auto vars:     Size  Location     Type
  2992 ;;  i               1    4[BANK0 ] unsigned char 
  2993 ;; Return value:  Size  Location     Type
  2994 ;;                  1    wreg      unsigned char 
  2995 ;; Registers used:
  2996 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2997 ;; Tracked objects:
  2998 ;;		On entry : 0/0
  2999 ;;		On exit  : 0/0
  3000 ;;		Unchanged: 0/0
  3001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3002 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3003 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3004 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3005 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3006 ;;Total ram usage:        5 bytes
  3007 ;; Hardware stack levels used:    1
  3008 ;; Hardware stack levels required when called:    8
  3009 ;; This function calls:
  3010 ;;		Nothing
  3011 ;; This function is called by:
  3012 ;;		_main
  3013 ;;		_readID
  3014 ;;		_readConflictInfo
  3015 ;; This function uses a non-reentrant model
  3016 ;;
  3017                           
  3018                           	psect	text9
  3019  00216E                     __ptext9:
  3020                           	opt stack 0
  3021  00216E                     _Can_GetMessage:
  3022                           	opt stack 20
  3023                           
  3024                           ;can.c: 171: uint8_t i;
  3025                           ;can.c: 172: if(rxBufferCount > 0)
  3026                           
  3027                           ; BSR set to: 0
  3028                           ;incstack = 0
  3029  00216E  5059               	movf	_rxBufferCount,w,c
  3030  002170  B4D8               	btfsc	status,2,c
  3031  002172  D0B8               	goto	l2652
  3032                           
  3033                           ;can.c: 173: {
  3034                           ;can.c: 174: msgPtr->dlc = rxBuffer[rxBufferPtrOut].dlc;
  3035  002174  0100               	movlb	0	; () banked
  3036  002176  51C3               	movf	_rxBufferPtrOut& (0+255),w,b
  3037  002178  0D11               	mullw	17
  3038  00217A  0E05               	movlw	5
  3039  00217C  26F3               	addwf	prodl,f,c
  3040  00217E  0E00               	movlw	0
  3041  002180  22F4               	addwfc	prodh,f,c
  3042  002182  0E68               	movlw	low _rxBuffer
  3043  002184  24F3               	addwf	prodl,w,c
  3044  002186  6ED9               	movwf	fsr2l,c
  3045  002188  0E01               	movlw	high _rxBuffer
  3046  00218A  20F4               	addwfc	prodh,w,c
  3047  00218C  6EDA               	movwf	fsr2h,c
  3048  00218E  0100               	movlb	0	; () banked
  3049  002190  EE10 F005          	lfsr	1,5
  3050  002194  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  3051  002196  26E1               	addwf	fsr1l,f,c
  3052  002198  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  3053  00219A  22E2               	addwfc	fsr1h,f,c
  3054  00219C  CFDF FFE7          	movff	indf2,indf1
  3055                           
  3056                           ;can.c: 175: msgPtr->extended_identifier = rxBuffer[rxBufferPtrOut].extended_identifier;
  3057  0021A0  0100               	movlb	0	; () banked
  3058  0021A2  51C3               	movf	_rxBufferPtrOut& (0+255),w,b
  3059  0021A4  0D11               	mullw	17
  3060  0021A6  0E68               	movlw	low _rxBuffer
  3061  0021A8  24F3               	addwf	prodl,w,c
  3062  0021AA  6ED9               	movwf	fsr2l,c
  3063  0021AC  0E01               	movlw	high _rxBuffer
  3064  0021AE  20F4               	addwfc	prodh,w,c
  3065  0021B0  6EDA               	movwf	fsr2h,c
  3066  0021B2  C060  FFE1         	movff	Can_GetMessage@msgPtr,fsr1l
  3067  0021B6  C061  FFE2         	movff	Can_GetMessage@msgPtr+1,fsr1h
  3068  0021BA  CFDF FFE7          	movff	indf2,indf1
  3069                           
  3070                           ;can.c: 176: msgPtr->filhit = rxBuffer[rxBufferPtrOut].filhit;
  3071  0021BE  0100               	movlb	0	; () banked
  3072  0021C0  51C3               	movf	_rxBufferPtrOut& (0+255),w,b
  3073  0021C2  0D11               	mullw	17
  3074  0021C4  0E0F               	movlw	15
  3075  0021C6  26F3               	addwf	prodl,f,c
  3076  0021C8  0E00               	movlw	0
  3077  0021CA  22F4               	addwfc	prodh,f,c
  3078  0021CC  0E68               	movlw	low _rxBuffer
  3079  0021CE  24F3               	addwf	prodl,w,c
  3080  0021D0  6ED9               	movwf	fsr2l,c
  3081  0021D2  0E01               	movlw	high _rxBuffer
  3082  0021D4  20F4               	addwfc	prodh,w,c
  3083  0021D6  6EDA               	movwf	fsr2h,c
  3084  0021D8  0100               	movlb	0	; () banked
  3085  0021DA  EE10 F00F          	lfsr	1,15
  3086  0021DE  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  3087  0021E0  26E1               	addwf	fsr1l,f,c
  3088  0021E2  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  3089  0021E4  22E2               	addwfc	fsr1h,f,c
  3090  0021E6  CFDF FFE7          	movff	indf2,indf1
  3091                           
  3092                           ;can.c: 177: msgPtr->identifier = rxBuffer[rxBufferPtrOut].identifier;
  3093  0021EA  0100               	movlb	0	; () banked
  3094  0021EC  51C3               	movf	_rxBufferPtrOut& (0+255),w,b
  3095  0021EE  0D11               	mullw	17
  3096  0021F0  0E01               	movlw	1
  3097  0021F2  26F3               	addwf	prodl,f,c
  3098  0021F4  0E00               	movlw	0
  3099  0021F6  22F4               	addwfc	prodh,f,c
  3100  0021F8  0E68               	movlw	low _rxBuffer
  3101  0021FA  24F3               	addwf	prodl,w,c
  3102  0021FC  6ED9               	movwf	fsr2l,c
  3103  0021FE  0E01               	movlw	high _rxBuffer
  3104  002200  20F4               	addwfc	prodh,w,c
  3105  002202  6EDA               	movwf	fsr2h,c
  3106  002204  0100               	movlb	0	; () banked
  3107  002206  EE10 F001          	lfsr	1,1
  3108  00220A  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  3109  00220C  26E1               	addwf	fsr1l,f,c
  3110  00220E  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  3111  002210  22E2               	addwfc	fsr1h,f,c
  3112  002212  CFDE FFE6          	movff	postinc2,postinc1
  3113  002216  CFDE FFE6          	movff	postinc2,postinc1
  3114  00221A  CFDE FFE6          	movff	postinc2,postinc1
  3115  00221E  CFDE FFE6          	movff	postinc2,postinc1
  3116                           
  3117                           ;can.c: 178: msgPtr->rtr = rxBuffer[rxBufferPtrOut].rtr;
  3118  002222  0100               	movlb	0	; () banked
  3119  002224  51C3               	movf	_rxBufferPtrOut& (0+255),w,b
  3120  002226  0D11               	mullw	17
  3121  002228  0E0E               	movlw	14
  3122  00222A  26F3               	addwf	prodl,f,c
  3123  00222C  0E00               	movlw	0
  3124  00222E  22F4               	addwfc	prodh,f,c
  3125  002230  0E68               	movlw	low _rxBuffer
  3126  002232  24F3               	addwf	prodl,w,c
  3127  002234  6ED9               	movwf	fsr2l,c
  3128  002236  0E01               	movlw	high _rxBuffer
  3129  002238  20F4               	addwfc	prodh,w,c
  3130  00223A  6EDA               	movwf	fsr2h,c
  3131  00223C  0100               	movlb	0	; () banked
  3132  00223E  EE10 F00E          	lfsr	1,14
  3133  002242  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  3134  002244  26E1               	addwf	fsr1l,f,c
  3135  002246  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  3136  002248  22E2               	addwfc	fsr1h,f,c
  3137  00224A  CFDF FFE7          	movff	indf2,indf1
  3138                           
  3139                           ; BSR set to: 0
  3140                           ;can.c: 179: for(i=0;i< msgPtr->dlc;i++)
  3141  00224E  0E00               	movlw	0
  3142  002250  0100               	movlb	0	; () banked
  3143  002252  6F64               	movwf	Can_GetMessage@i& (0+255),b
  3144  002254  D031               	goto	l2642
  3145  002256                     l2638:
  3146                           
  3147                           ; BSR set to: 0
  3148                           ;can.c: 180: {
  3149                           ;can.c: 181: msgPtr->dta[i] = rxBuffer[rxBufferPtrOut].dta[i];
  3150  002256  0100               	movlb	0	; () banked
  3151  002258  5164               	movf	Can_GetMessage@i& (0+255),w,b
  3152  00225A  0D01               	mullw	1
  3153  00225C  0E06               	movlw	6
  3154  00225E  26F3               	addwf	prodl,f,c
  3155  002260  0E00               	movlw	0
  3156  002262  22F4               	addwfc	prodh,f,c
  3157  002264  0E68               	movlw	low _rxBuffer
  3158  002266  0100               	movlb	0	; () banked
  3159  002268  6F62               	movwf	??_Can_GetMessage& (0+255),b
  3160  00226A  0E01               	movlw	high _rxBuffer
  3161  00226C  0100               	movlb	0	; () banked
  3162  00226E  6F63               	movwf	(??_Can_GetMessage+1)& (0+255),b
  3163  002270  50F3               	movf	prodl,w,c
  3164  002272  0100               	movlb	0	; () banked
  3165  002274  2762               	addwf	??_Can_GetMessage& (0+255),f,b
  3166  002276  50F4               	movf	prodh,w,c
  3167  002278  0100               	movlb	0	; () banked
  3168  00227A  2363               	addwfc	(??_Can_GetMessage+1)& (0+255),f,b
  3169  00227C  0100               	movlb	0	; () banked
  3170  00227E  51C3               	movf	_rxBufferPtrOut& (0+255),w,b
  3171  002280  0D11               	mullw	17
  3172  002282  50F3               	movf	prodl,w,c
  3173  002284  0100               	movlb	0	; () banked
  3174  002286  2562               	addwf	??_Can_GetMessage& (0+255),w,b
  3175  002288  6ED9               	movwf	fsr2l,c
  3176  00228A  50F4               	movf	prodh,w,c
  3177  00228C  0100               	movlb	0	; () banked
  3178  00228E  2163               	addwfc	(??_Can_GetMessage+1)& (0+255),w,b
  3179  002290  6EDA               	movwf	fsr2h,c
  3180  002292  0100               	movlb	0	; () banked
  3181  002294  5164               	movf	Can_GetMessage@i& (0+255),w,b
  3182  002296  0D01               	mullw	1
  3183  002298  0E06               	movlw	6
  3184  00229A  26F3               	addwf	prodl,f,c
  3185  00229C  0E00               	movlw	0
  3186  00229E  22F4               	addwfc	prodh,f,c
  3187  0022A0  50F3               	movf	prodl,w,c
  3188  0022A2  0100               	movlb	0	; () banked
  3189  0022A4  2560               	addwf	Can_GetMessage@msgPtr& (0+255),w,b
  3190  0022A6  6EE1               	movwf	fsr1l,c
  3191  0022A8  50F4               	movf	prodh,w,c
  3192  0022AA  0100               	movlb	0	; () banked
  3193  0022AC  2161               	addwfc	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  3194  0022AE  6EE2               	movwf	fsr1h,c
  3195  0022B0  CFDF FFE7          	movff	indf2,indf1
  3196                           
  3197                           ; BSR set to: 0
  3198  0022B4  0100               	movlb	0	; () banked
  3199  0022B6  2B64               	incf	Can_GetMessage@i& (0+255),f,b
  3200  0022B8                     l2642:
  3201                           
  3202                           ; BSR set to: 0
  3203  0022B8  0100               	movlb	0	; () banked
  3204  0022BA  EE20 F005          	lfsr	2,5
  3205  0022BE  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  3206  0022C0  26D9               	addwf	fsr2l,f,c
  3207  0022C2  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  3208  0022C4  22DA               	addwfc	fsr2h,f,c
  3209  0022C6  50DE               	movf	postinc2,w,c
  3210  0022C8  0100               	movlb	0	; () banked
  3211  0022CA  5D64               	subwf	Can_GetMessage@i& (0+255),w,b
  3212  0022CC  A0D8               	btfss	status,0,c
  3213  0022CE  D7C3               	goto	l2638
  3214                           
  3215                           ; BSR set to: 0
  3216                           ;can.c: 182: }
  3217                           ;can.c: 183: INT3IE = 0;
  3218  0022D0  9AF0               	bcf	intcon3,5,c	;volatile
  3219                           
  3220                           ; BSR set to: 0
  3221                           ;can.c: 184: rxBufferPtrOut = (rxBufferPtrOut + 1) % 4;
  3222  0022D2  0100               	movlb	0	; () banked
  3223  0022D4  29C3               	incf	_rxBufferPtrOut& (0+255),w,b
  3224  0022D6  0B03               	andlw	3
  3225  0022D8  0100               	movlb	0	; () banked
  3226  0022DA  6FC3               	movwf	_rxBufferPtrOut& (0+255),b
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;can.c: 185: rxBufferCount--;
  3230  0022DC  0659               	decf	_rxBufferCount,f,c
  3231                           
  3232                           ; BSR set to: 0
  3233                           ;can.c: 186: INT3IE = 1;
  3234  0022DE  8AF0               	bsf	intcon3,5,c	;volatile
  3235                           
  3236                           ;can.c: 187: return 0;
  3237  0022E0  0E00               	movlw	0
  3238                           
  3239                           ; BSR set to: 0
  3240  0022E2  0012               	return	
  3241  0022E4                     l2652:
  3242                           
  3243                           ;can.c: 188: }
  3244                           ;can.c: 189: return 1;
  3245  0022E4  0E01               	movlw	1
  3246  0022E6  0012               	return	
  3247  0022E8                     __end_of_Can_GetMessage:
  3248                           	opt stack 0
  3249                           tblptru	equ	0xFF8
  3250                           tblptrh	equ	0xFF7
  3251                           tblptrl	equ	0xFF6
  3252                           tablat	equ	0xFF5
  3253                           prodh	equ	0xFF4
  3254                           prodl	equ	0xFF3
  3255                           intcon	equ	0xFF2
  3256                           intcon3	equ	0xFF0
  3257                           postinc0	equ	0xFEE
  3258                           wreg	equ	0xFE8
  3259                           indf1	equ	0xFE7
  3260                           postinc1	equ	0xFE6
  3261                           postdec1	equ	0xFE5
  3262                           fsr1h	equ	0xFE2
  3263                           fsr1l	equ	0xFE1
  3264                           indf2	equ	0xFDF
  3265                           postinc2	equ	0xFDE
  3266                           fsr2h	equ	0xFDA
  3267                           fsr2l	equ	0xFD9
  3268                           status	equ	0xFD8
  3269                           
  3270 ;; *************** function _Can_Init *****************
  3271 ;; Defined at:
  3272 ;;		line 237 in file "can.c"
  3273 ;; Parameters:    Size  Location     Type
  3274 ;;  speedCfg        2   60[BANK0 ] PTR const struct CANSPEE
  3275 ;;		 -> canSpeed125k(7), 
  3276 ;;  filterCfg       2   62[BANK0 ] PTR struct CANFILTER
  3277 ;;		 -> filter(33), 
  3278 ;; Auto vars:     Size  Location     Type
  3279 ;;		None
  3280 ;; Return value:  Size  Location     Type
  3281 ;;                  1    wreg      void 
  3282 ;; Registers used:
  3283 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3284 ;; Tracked objects:
  3285 ;;		On entry : 0/0
  3286 ;;		On exit  : 0/0
  3287 ;;		Unchanged: 0/0
  3288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3289 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3292 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3293 ;;Total ram usage:        4 bytes
  3294 ;; Hardware stack levels used:    1
  3295 ;; Hardware stack levels required when called:   12
  3296 ;; This function calls:
  3297 ;;		_Mcp2515_Init
  3298 ;; This function is called by:
  3299 ;;		_init
  3300 ;; This function uses a non-reentrant model
  3301 ;;
  3302                           
  3303                           	psect	text10
  3304  0032E2                     __ptext10:
  3305                           	opt stack 0
  3306  0032E2                     _Can_Init:
  3307                           	opt stack 17
  3308                           
  3309                           ;can.c: 240: TRISF6 = 0;
  3310                           
  3311                           ;incstack = 0
  3312  0032E2  9C97               	bcf	3991,6,c	;volatile
  3313                           
  3314                           ;can.c: 241: TRISF7 = 0;
  3315  0032E4  9E97               	bcf	3991,7,c	;volatile
  3316                           
  3317                           ;can.c: 242: LATF6 = 1;
  3318  0032E6  8C8E               	bsf	3982,6,c	;volatile
  3319                           
  3320                           ;can.c: 243: LATF7 = 0;
  3321  0032E8  9E8E               	bcf	3982,7,c	;volatile
  3322                           
  3323                           ;can.c: 244: TRISC4 = 1;
  3324  0032EA  8894               	bsf	3988,4,c	;volatile
  3325                           
  3326                           ;can.c: 245: TRISC5 = 0;
  3327  0032EC  9A94               	bcf	3988,5,c	;volatile
  3328                           
  3329                           ;can.c: 246: TRISC3 = 0;
  3330  0032EE  9694               	bcf	3988,3,c	;volatile
  3331                           
  3332                           ;can.c: 247: TRISD1 = 0;
  3333  0032F0  9295               	bcf	3989,1,c	;volatile
  3334                           
  3335                           ;can.c: 251: CKE1 = 0;
  3336  0032F2  9CC7               	bcf	4039,6,c	;volatile
  3337                           
  3338                           ;can.c: 252: CKP1 = 1;
  3339  0032F4  88C6               	bsf	4038,4,c	;volatile
  3340                           
  3341                           ;can.c: 253: SSPCON1 = 0b00111010;
  3342  0032F6  0E3A               	movlw	58
  3343  0032F8  6EC6               	movwf	4038,c	;volatile
  3344                           
  3345                           ;can.c: 254: SSPEN1 = 1;
  3346  0032FA  8AC6               	bsf	4038,5,c	;volatile
  3347                           
  3348                           ;can.c: 258: Mcp2515_Init(speedCfg,filterCfg);
  3349  0032FC  C09C  F083         	movff	Can_Init@speedCfg,Mcp2515_Init@speedCfg
  3350  003300  C09D  F084         	movff	Can_Init@speedCfg+1,Mcp2515_Init@speedCfg+1
  3351  003304  C09E  F085         	movff	Can_Init@filterCfg,Mcp2515_Init@filterCfg
  3352  003308  C09F  F086         	movff	Can_Init@filterCfg+1,Mcp2515_Init@filterCfg+1
  3353  00330C  EC21  F008         	call	_Mcp2515_Init	;wreg free
  3354                           
  3355                           ;can.c: 259: INT3IE = 1;
  3356  003310  8AF0               	bsf	intcon3,5,c	;volatile
  3357                           
  3358                           ;can.c: 260: INTEDG3 = 0;
  3359  003312  96F1               	bcf	intcon2,3,c	;volatile
  3360                           
  3361                           ;can.c: 264: PEIE = 1;
  3362  003314  8CF2               	bsf	intcon,6,c	;volatile
  3363                           
  3364                           ;can.c: 265: GIE = 1;
  3365  003316  8EF2               	bsf	intcon,7,c	;volatile
  3366  003318  0012               	return		;funcret
  3367  00331A                     __end_of_Can_Init:
  3368                           	opt stack 0
  3369                           tblptru	equ	0xFF8
  3370                           tblptrh	equ	0xFF7
  3371                           tblptrl	equ	0xFF6
  3372                           tablat	equ	0xFF5
  3373                           prodh	equ	0xFF4
  3374                           prodl	equ	0xFF3
  3375                           intcon	equ	0xFF2
  3376                           intcon2	equ	0xFF1
  3377                           intcon3	equ	0xFF0
  3378                           postinc0	equ	0xFEE
  3379                           wreg	equ	0xFE8
  3380                           indf1	equ	0xFE7
  3381                           postinc1	equ	0xFE6
  3382                           postdec1	equ	0xFE5
  3383                           fsr1h	equ	0xFE2
  3384                           fsr1l	equ	0xFE1
  3385                           indf2	equ	0xFDF
  3386                           postinc2	equ	0xFDE
  3387                           fsr2h	equ	0xFDA
  3388                           fsr2l	equ	0xFD9
  3389                           status	equ	0xFD8
  3390                           
  3391 ;; *************** function _Mcp2515_Init *****************
  3392 ;; Defined at:
  3393 ;;		line 38 in file "mcp2515.c"
  3394 ;; Parameters:    Size  Location     Type
  3395 ;;  speedCfg        2   35[BANK0 ] PTR const struct CANSPEE
  3396 ;;		 -> canSpeed125k(7), 
  3397 ;;  filterCfg       2   37[BANK0 ] PTR struct CANFILTER
  3398 ;;		 -> filter(33), 
  3399 ;; Auto vars:     Size  Location     Type
  3400 ;;  cmdMask4        4   53[BANK0 ] unsigned char [4]
  3401 ;;  cmdWrite3       3   57[BANK0 ] unsigned char [3]
  3402 ;;  i               1   52[BANK0 ] unsigned char 
  3403 ;; Return value:  Size  Location     Type
  3404 ;;                  1    wreg      void 
  3405 ;; Registers used:
  3406 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3407 ;; Tracked objects:
  3408 ;;		On entry : 0/0
  3409 ;;		On exit  : 0/0
  3410 ;;		Unchanged: 0/0
  3411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3412 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3413 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3414 ;;      Temps:          0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3415 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3416 ;;Total ram usage:       25 bytes
  3417 ;; Hardware stack levels used:    1
  3418 ;; Hardware stack levels required when called:   11
  3419 ;; This function calls:
  3420 ;;		_Mcp2515WriteCanId
  3421 ;;		_Mcp2515_Reset
  3422 ;;		_Spi_Write
  3423 ;; This function is called by:
  3424 ;;		_Can_Init
  3425 ;; This function uses a non-reentrant model
  3426 ;;
  3427                           
  3428                           	psect	text11
  3429  001042                     __ptext11:
  3430                           	opt stack 0
  3431  001042                     _Mcp2515_Init:
  3432                           	opt stack 17
  3433                           
  3434                           ;mcp2515.c: 40: uint8_t i;
  3435                           ;mcp2515.c: 41: uint8_t cmdMask4[]={0x05,0x0F,0xE0,0x80};
  3436                           
  3437                           ;incstack = 0
  3438  001042  C0EF  F095         	movff	Mcp2515_Init@F8112,Mcp2515_Init@cmdMask4
  3439  001046  C0F0  F096         	movff	Mcp2515_Init@F8112+1,Mcp2515_Init@cmdMask4+1
  3440  00104A  C0F1  F097         	movff	Mcp2515_Init@F8112+2,Mcp2515_Init@cmdMask4+2
  3441  00104E  C0F2  F098         	movff	Mcp2515_Init@F8112+3,Mcp2515_Init@cmdMask4+3
  3442                           
  3443                           ;mcp2515.c: 42: uint8_t cmdWrite3[]={0x02,0,0};
  3444  001052  C0FA  F099         	movff	Mcp2515_Init@F8114,Mcp2515_Init@cmdWrite3
  3445  001056  C0FB  F09A         	movff	Mcp2515_Init@F8114+1,Mcp2515_Init@cmdWrite3+1
  3446  00105A  C0FC  F09B         	movff	Mcp2515_Init@F8114+2,Mcp2515_Init@cmdWrite3+2
  3447                           
  3448                           ;mcp2515.c: 44: Mcp2515_Reset();
  3449  00105E  EC74  F017         	call	_Mcp2515_Reset	;wreg free
  3450                           
  3451                           ;mcp2515.c: 48: Spi_Write(cmdMask4,sizeof(cmdMask4));
  3452  001062  0E95               	movlw	low Mcp2515_Init@cmdMask4
  3453  001064  0100               	movlb	0	; () banked
  3454  001066  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3455  001068  0E00               	movlw	high Mcp2515_Init@cmdMask4
  3456  00106A  0100               	movlb	0	; () banked
  3457  00106C  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3458  00106E  0E04               	movlw	4
  3459  001070  0100               	movlb	0	; () banked
  3460  001072  6F6E               	movwf	Spi_Write@size& (0+255),b
  3461  001074  0E00               	movlw	0
  3462  001076  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3463  001078  0E00               	movlw	0
  3464  00107A  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3465  00107C  0E00               	movlw	0
  3466  00107E  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3467  001080  ECBE  F019         	call	_Spi_Write	;wreg free
  3468                           
  3469                           ;mcp2515.c: 52: cmdWrite3[1] = 0x2A;
  3470  001084  0E2A               	movlw	42
  3471  001086  0100               	movlb	0	; () banked
  3472  001088  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  3473                           
  3474                           ; BSR set to: 0
  3475                           ;mcp2515.c: 53: cmdWrite3[2] = speedCfg->brp | speedCfg->sjw << 6;
  3476  00108A  C083  FFF6         	movff	Mcp2515_Init@speedCfg,tblptrl
  3477  00108E  C084  FFF7         	movff	Mcp2515_Init@speedCfg+1,tblptrh
  3478  001092                     	if	0	;tblptru may be non-zero
  3479  001092                     	endif
  3480  001092                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3481  001092  0E00               	movlw	low (__mediumconst shr (0+16))
  3482  001094  6EF8               	movwf	tblptru,c
  3483  001096                     	endif
  3484  001096  0008               	tblrd		*
  3485  001098  CFF5 F087          	movff	tablat,??_Mcp2515_Init
  3486  00109C  0E01               	movlw	1
  3487  00109E  0100               	movlb	0	; () banked
  3488  0010A0  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  3489  0010A2  0100               	movlb	0	; () banked
  3490  0010A4  6F88               	movwf	(??_Mcp2515_Init+1)& (0+255),b
  3491  0010A6  0E00               	movlw	0
  3492  0010A8  0100               	movlb	0	; () banked
  3493  0010AA  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  3494  0010AC  0100               	movlb	0	; () banked
  3495  0010AE  6F89               	movwf	(??_Mcp2515_Init+2)& (0+255),b
  3496  0010B0  C088  FFF6         	movff	??_Mcp2515_Init+1,tblptrl
  3497  0010B4  C089  FFF7         	movff	??_Mcp2515_Init+2,tblptrh
  3498  0010B8                     	if	0	;tblptru may be non-zero
  3499  0010B8                     	endif
  3500  0010B8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3501  0010B8  0E00               	movlw	low (__mediumconst shr (0+16))
  3502  0010BA  6EF8               	movwf	tblptru,c
  3503  0010BC                     	endif
  3504  0010BC  0008               	tblrd		*
  3505  0010BE  CFF5 F08A          	movff	tablat,??_Mcp2515_Init+3
  3506  0010C2  0E06               	movlw	6
  3507  0010C4  0100               	movlb	0	; () banked
  3508  0010C6  6F8B               	movwf	(??_Mcp2515_Init+4)& (0+255),b
  3509  0010C8                     u1675:
  3510  0010C8  0100               	movlb	0	; () banked
  3511  0010CA  90D8               	bcf	status,0,c
  3512  0010CC  378A               	rlcf	(??_Mcp2515_Init+3)& (0+255),f,b
  3513  0010CE  0100               	movlb	0	; () banked
  3514  0010D0  2F8B               	decfsz	(??_Mcp2515_Init+4)& (0+255),f,b
  3515  0010D2  D7FA               	goto	u1675
  3516  0010D4  0100               	movlb	0	; () banked
  3517  0010D6  518A               	movf	(??_Mcp2515_Init+3)& (0+255),w,b
  3518  0010D8  0100               	movlb	0	; () banked
  3519  0010DA  1187               	iorwf	??_Mcp2515_Init& (0+255),w,b
  3520  0010DC  0100               	movlb	0	; () banked
  3521  0010DE  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  3522                           
  3523                           ; BSR set to: 0
  3524                           ;mcp2515.c: 54: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  3525  0010E0  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  3526  0010E2  0100               	movlb	0	; () banked
  3527  0010E4  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3528  0010E6  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  3529  0010E8  0100               	movlb	0	; () banked
  3530  0010EA  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3531  0010EC  0E03               	movlw	3
  3532  0010EE  0100               	movlb	0	; () banked
  3533  0010F0  6F6E               	movwf	Spi_Write@size& (0+255),b
  3534  0010F2  0E00               	movlw	0
  3535  0010F4  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3536  0010F6  0E00               	movlw	0
  3537  0010F8  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3538  0010FA  0E00               	movlw	0
  3539  0010FC  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3540  0010FE  ECBE  F019         	call	_Spi_Write	;wreg free
  3541                           
  3542                           ;mcp2515.c: 56: cmdWrite3[1] = 0x29;
  3543  001102  0E29               	movlw	41
  3544  001104  0100               	movlb	0	; () banked
  3545  001106  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  3546                           
  3547                           ;mcp2515.c: 57: cmdWrite3[2] = speedCfg->prseg
  3548                           ;mcp2515.c: 58: | speedCfg->phseg1 << 3
  3549                           ;mcp2515.c: 59: | speedCfg->sam << 6
  3550                           ;mcp2515.c: 60: | speedCfg->btlmode << 7;
  3551  001108  0E02               	movlw	2
  3552  00110A  0100               	movlb	0	; () banked
  3553  00110C  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  3554  00110E  0100               	movlb	0	; () banked
  3555  001110  6F87               	movwf	??_Mcp2515_Init& (0+255),b
  3556  001112  0E00               	movlw	0
  3557  001114  0100               	movlb	0	; () banked
  3558  001116  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  3559  001118  0100               	movlb	0	; () banked
  3560  00111A  6F88               	movwf	(??_Mcp2515_Init+1)& (0+255),b
  3561  00111C  C087  FFF6         	movff	??_Mcp2515_Init,tblptrl
  3562  001120  C088  FFF7         	movff	??_Mcp2515_Init+1,tblptrh
  3563  001124                     	if	0	;tblptru may be non-zero
  3564  001124                     	endif
  3565  001124                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3566  001124  0E00               	movlw	low (__mediumconst shr (0+16))
  3567  001126  6EF8               	movwf	tblptru,c
  3568  001128                     	endif
  3569  001128  0008               	tblrd		*
  3570  00112A  CFF5 F089          	movff	tablat,??_Mcp2515_Init+2
  3571  00112E  0E06               	movlw	6
  3572  001130  0100               	movlb	0	; () banked
  3573  001132  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  3574  001134  0100               	movlb	0	; () banked
  3575  001136  6F8A               	movwf	(??_Mcp2515_Init+3)& (0+255),b
  3576  001138  0E00               	movlw	0
  3577  00113A  0100               	movlb	0	; () banked
  3578  00113C  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  3579  00113E  0100               	movlb	0	; () banked
  3580  001140  6F8B               	movwf	(??_Mcp2515_Init+4)& (0+255),b
  3581  001142  C08A  FFF6         	movff	??_Mcp2515_Init+3,tblptrl
  3582  001146  C08B  FFF7         	movff	??_Mcp2515_Init+4,tblptrh
  3583  00114A                     	if	0	;tblptru may be non-zero
  3584  00114A                     	endif
  3585  00114A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3586  00114A  0E00               	movlw	low (__mediumconst shr (0+16))
  3587  00114C  6EF8               	movwf	tblptru,c
  3588  00114E                     	endif
  3589  00114E  0008               	tblrd		*
  3590  001150  CFF5 F08C          	movff	tablat,??_Mcp2515_Init+5
  3591  001154  0E00               	movlw	0
  3592  001156  B18C               	btfsc	(??_Mcp2515_Init+5)& (0+255),0,b
  3593  001158  0E80               	movlw	128
  3594  00115A  6F8C               	movwf	(??_Mcp2515_Init+5)& (0+255),b
  3595  00115C  0E05               	movlw	5
  3596  00115E  0100               	movlb	0	; () banked
  3597  001160  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  3598  001162  0100               	movlb	0	; () banked
  3599  001164  6F8D               	movwf	(??_Mcp2515_Init+6)& (0+255),b
  3600  001166  0E00               	movlw	0
  3601  001168  0100               	movlb	0	; () banked
  3602  00116A  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  3603  00116C  0100               	movlb	0	; () banked
  3604  00116E  6F8E               	movwf	(??_Mcp2515_Init+7)& (0+255),b
  3605  001170  C08D  FFF6         	movff	??_Mcp2515_Init+6,tblptrl
  3606  001174  C08E  FFF7         	movff	??_Mcp2515_Init+7,tblptrh
  3607  001178                     	if	0	;tblptru may be non-zero
  3608  001178                     	endif
  3609  001178                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3610  001178  0E00               	movlw	low (__mediumconst shr (0+16))
  3611  00117A  6EF8               	movwf	tblptru,c
  3612  00117C                     	endif
  3613  00117C  0008               	tblrd		*
  3614  00117E  CFF5 F08F          	movff	tablat,??_Mcp2515_Init+8
  3615  001182  0E06               	movlw	6
  3616  001184  0100               	movlb	0	; () banked
  3617  001186  6F90               	movwf	(??_Mcp2515_Init+9)& (0+255),b
  3618  001188                     u1685:
  3619  001188  0100               	movlb	0	; () banked
  3620  00118A  90D8               	bcf	status,0,c
  3621  00118C  378F               	rlcf	(??_Mcp2515_Init+8)& (0+255),f,b
  3622  00118E  0100               	movlb	0	; () banked
  3623  001190  2F90               	decfsz	(??_Mcp2515_Init+9)& (0+255),f,b
  3624  001192  D7FA               	goto	u1685
  3625  001194  0E03               	movlw	3
  3626  001196  0100               	movlb	0	; () banked
  3627  001198  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  3628  00119A  0100               	movlb	0	; () banked
  3629  00119C  6F91               	movwf	(??_Mcp2515_Init+10)& (0+255),b
  3630  00119E  0E00               	movlw	0
  3631  0011A0  0100               	movlb	0	; () banked
  3632  0011A2  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  3633  0011A4  0100               	movlb	0	; () banked
  3634  0011A6  6F92               	movwf	(??_Mcp2515_Init+11)& (0+255),b
  3635  0011A8  C091  FFF6         	movff	??_Mcp2515_Init+10,tblptrl
  3636  0011AC  C092  FFF7         	movff	??_Mcp2515_Init+11,tblptrh
  3637  0011B0                     	if	0	;tblptru may be non-zero
  3638  0011B0                     	endif
  3639  0011B0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3640  0011B0  0E00               	movlw	low (__mediumconst shr (0+16))
  3641  0011B2  6EF8               	movwf	tblptru,c
  3642  0011B4                     	endif
  3643  0011B4  0008               	tblrd		*
  3644  0011B6  CFF5 F093          	movff	tablat,??_Mcp2515_Init+12
  3645  0011BA  0100               	movlb	0	; () banked
  3646  0011BC  90D8               	bcf	status,0,c
  3647  0011BE  3793               	rlcf	(??_Mcp2515_Init+12)& (0+255),f,b
  3648  0011C0  0100               	movlb	0	; () banked
  3649  0011C2  90D8               	bcf	status,0,c
  3650  0011C4  3793               	rlcf	(??_Mcp2515_Init+12)& (0+255),f,b
  3651  0011C6  0100               	movlb	0	; () banked
  3652  0011C8  90D8               	bcf	status,0,c
  3653  0011CA  3593               	rlcf	(??_Mcp2515_Init+12)& (0+255),w,b
  3654  0011CC  0100               	movlb	0	; () banked
  3655  0011CE  118F               	iorwf	(??_Mcp2515_Init+8)& (0+255),w,b
  3656  0011D0  0100               	movlb	0	; () banked
  3657  0011D2  118C               	iorwf	(??_Mcp2515_Init+5)& (0+255),w,b
  3658  0011D4  0100               	movlb	0	; () banked
  3659  0011D6  1189               	iorwf	(??_Mcp2515_Init+2)& (0+255),w,b
  3660  0011D8  0100               	movlb	0	; () banked
  3661  0011DA  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  3662                           
  3663                           ; BSR set to: 0
  3664                           ;mcp2515.c: 61: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  3665  0011DC  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  3666  0011DE  0100               	movlb	0	; () banked
  3667  0011E0  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3668  0011E2  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  3669  0011E4  0100               	movlb	0	; () banked
  3670  0011E6  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3671  0011E8  0E03               	movlw	3
  3672  0011EA  0100               	movlb	0	; () banked
  3673  0011EC  6F6E               	movwf	Spi_Write@size& (0+255),b
  3674  0011EE  0E00               	movlw	0
  3675  0011F0  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3676  0011F2  0E00               	movlw	0
  3677  0011F4  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3678  0011F6  0E00               	movlw	0
  3679  0011F8  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3680  0011FA  ECBE  F019         	call	_Spi_Write	;wreg free
  3681                           
  3682                           ;mcp2515.c: 63: cmdWrite3[1] = 0x28;
  3683  0011FE  0E28               	movlw	40
  3684  001200  0100               	movlb	0	; () banked
  3685  001202  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  3686                           
  3687                           ; BSR set to: 0
  3688                           ;mcp2515.c: 64: cmdWrite3[2] = speedCfg->phseg2 | speedCfg->sjw << 6;
  3689  001204  0E04               	movlw	4
  3690  001206  0100               	movlb	0	; () banked
  3691  001208  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  3692  00120A  0100               	movlb	0	; () banked
  3693  00120C  6F87               	movwf	??_Mcp2515_Init& (0+255),b
  3694  00120E  0E00               	movlw	0
  3695  001210  0100               	movlb	0	; () banked
  3696  001212  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  3697  001214  0100               	movlb	0	; () banked
  3698  001216  6F88               	movwf	(??_Mcp2515_Init+1)& (0+255),b
  3699  001218  C087  FFF6         	movff	??_Mcp2515_Init,tblptrl
  3700  00121C  C088  FFF7         	movff	??_Mcp2515_Init+1,tblptrh
  3701  001220                     	if	0	;tblptru may be non-zero
  3702  001220                     	endif
  3703  001220                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3704  001220  0E00               	movlw	low (__mediumconst shr (0+16))
  3705  001222  6EF8               	movwf	tblptru,c
  3706  001224                     	endif
  3707  001224  0008               	tblrd		*
  3708  001226  CFF5 F089          	movff	tablat,??_Mcp2515_Init+2
  3709  00122A  0E01               	movlw	1
  3710  00122C  0100               	movlb	0	; () banked
  3711  00122E  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  3712  001230  0100               	movlb	0	; () banked
  3713  001232  6F8A               	movwf	(??_Mcp2515_Init+3)& (0+255),b
  3714  001234  0E00               	movlw	0
  3715  001236  0100               	movlb	0	; () banked
  3716  001238  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  3717  00123A  0100               	movlb	0	; () banked
  3718  00123C  6F8B               	movwf	(??_Mcp2515_Init+4)& (0+255),b
  3719  00123E  C08A  FFF6         	movff	??_Mcp2515_Init+3,tblptrl
  3720  001242  C08B  FFF7         	movff	??_Mcp2515_Init+4,tblptrh
  3721  001246                     	if	0	;tblptru may be non-zero
  3722  001246                     	endif
  3723  001246                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3724  001246  0E00               	movlw	low (__mediumconst shr (0+16))
  3725  001248  6EF8               	movwf	tblptru,c
  3726  00124A                     	endif
  3727  00124A  0008               	tblrd		*
  3728  00124C  CFF5 F08C          	movff	tablat,??_Mcp2515_Init+5
  3729  001250  0E06               	movlw	6
  3730  001252  0100               	movlb	0	; () banked
  3731  001254  6F8D               	movwf	(??_Mcp2515_Init+6)& (0+255),b
  3732  001256                     u1695:
  3733  001256  0100               	movlb	0	; () banked
  3734  001258  90D8               	bcf	status,0,c
  3735  00125A  378C               	rlcf	(??_Mcp2515_Init+5)& (0+255),f,b
  3736  00125C  0100               	movlb	0	; () banked
  3737  00125E  2F8D               	decfsz	(??_Mcp2515_Init+6)& (0+255),f,b
  3738  001260  D7FA               	goto	u1695
  3739  001262  0100               	movlb	0	; () banked
  3740  001264  518C               	movf	(??_Mcp2515_Init+5)& (0+255),w,b
  3741  001266  0100               	movlb	0	; () banked
  3742  001268  1189               	iorwf	(??_Mcp2515_Init+2)& (0+255),w,b
  3743  00126A  0100               	movlb	0	; () banked
  3744  00126C  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  3745                           
  3746                           ; BSR set to: 0
  3747                           ;mcp2515.c: 65: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  3748  00126E  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  3749  001270  0100               	movlb	0	; () banked
  3750  001272  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3751  001274  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  3752  001276  0100               	movlb	0	; () banked
  3753  001278  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3754  00127A  0E03               	movlw	3
  3755  00127C  0100               	movlb	0	; () banked
  3756  00127E  6F6E               	movwf	Spi_Write@size& (0+255),b
  3757  001280  0E00               	movlw	0
  3758  001282  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3759  001284  0E00               	movlw	0
  3760  001286  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3761  001288  0E00               	movlw	0
  3762  00128A  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3763  00128C  ECBE  F019         	call	_Spi_Write	;wreg free
  3764                           
  3765                           ;mcp2515.c: 69: Mcp2515WriteCanId(0x20,filterCfg->ext,filterCfg->mask0);
  3766  001290  0100               	movlb	0	; () banked
  3767  001292  EE20 F020          	lfsr	2,32
  3768  001296  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3769  001298  26D9               	addwf	fsr2l,f,c
  3770  00129A  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3771  00129C  22DA               	addwfc	fsr2h,f,c
  3772  00129E  50DF               	movf	indf2,w,c
  3773  0012A0  0100               	movlb	0	; () banked
  3774  0012A2  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3775  0012A4  C085  FFD9         	movff	Mcp2515_Init@filterCfg,fsr2l
  3776  0012A8  C086  FFDA         	movff	Mcp2515_Init@filterCfg+1,fsr2h
  3777  0012AC  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3778  0012B0  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3779  0012B4  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3780  0012B8  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3781  0012BC  0E20               	movlw	32
  3782  0012BE  EC3A  F013         	call	_Mcp2515WriteCanId
  3783                           
  3784                           ;mcp2515.c: 70: Mcp2515WriteCanId(0x24,filterCfg->ext,filterCfg->mask1);
  3785  0012C2  0100               	movlb	0	; () banked
  3786  0012C4  EE20 F020          	lfsr	2,32
  3787  0012C8  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3788  0012CA  26D9               	addwf	fsr2l,f,c
  3789  0012CC  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3790  0012CE  22DA               	addwfc	fsr2h,f,c
  3791  0012D0  50DF               	movf	indf2,w,c
  3792  0012D2  0100               	movlb	0	; () banked
  3793  0012D4  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3794  0012D6  0100               	movlb	0	; () banked
  3795  0012D8  EE20 F004          	lfsr	2,4
  3796  0012DC  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3797  0012DE  26D9               	addwf	fsr2l,f,c
  3798  0012E0  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3799  0012E2  22DA               	addwfc	fsr2h,f,c
  3800  0012E4  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3801  0012E8  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3802  0012EC  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3803  0012F0  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3804  0012F4  0E24               	movlw	36
  3805  0012F6  EC3A  F013         	call	_Mcp2515WriteCanId
  3806                           
  3807                           ;mcp2515.c: 71: Mcp2515WriteCanId(0x00,filterCfg->ext,filterCfg->filter0);
  3808  0012FA  0100               	movlb	0	; () banked
  3809  0012FC  EE20 F020          	lfsr	2,32
  3810  001300  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3811  001302  26D9               	addwf	fsr2l,f,c
  3812  001304  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3813  001306  22DA               	addwfc	fsr2h,f,c
  3814  001308  50DF               	movf	indf2,w,c
  3815  00130A  0100               	movlb	0	; () banked
  3816  00130C  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3817  00130E  0100               	movlb	0	; () banked
  3818  001310  EE20 F008          	lfsr	2,8
  3819  001314  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3820  001316  26D9               	addwf	fsr2l,f,c
  3821  001318  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3822  00131A  22DA               	addwfc	fsr2h,f,c
  3823  00131C  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3824  001320  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3825  001324  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3826  001328  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3827  00132C  0E00               	movlw	0
  3828  00132E  EC3A  F013         	call	_Mcp2515WriteCanId
  3829                           
  3830                           ;mcp2515.c: 72: Mcp2515WriteCanId(0x04,filterCfg->ext,filterCfg->filter1);
  3831  001332  0100               	movlb	0	; () banked
  3832  001334  EE20 F020          	lfsr	2,32
  3833  001338  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3834  00133A  26D9               	addwf	fsr2l,f,c
  3835  00133C  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3836  00133E  22DA               	addwfc	fsr2h,f,c
  3837  001340  50DF               	movf	indf2,w,c
  3838  001342  0100               	movlb	0	; () banked
  3839  001344  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3840  001346  0100               	movlb	0	; () banked
  3841  001348  EE20 F00C          	lfsr	2,12
  3842  00134C  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3843  00134E  26D9               	addwf	fsr2l,f,c
  3844  001350  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3845  001352  22DA               	addwfc	fsr2h,f,c
  3846  001354  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3847  001358  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3848  00135C  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3849  001360  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3850  001364  0E04               	movlw	4
  3851  001366  EC3A  F013         	call	_Mcp2515WriteCanId
  3852                           
  3853                           ;mcp2515.c: 73: Mcp2515WriteCanId(0x08,filterCfg->ext,filterCfg->filter2);
  3854  00136A  0100               	movlb	0	; () banked
  3855  00136C  EE20 F020          	lfsr	2,32
  3856  001370  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3857  001372  26D9               	addwf	fsr2l,f,c
  3858  001374  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3859  001376  22DA               	addwfc	fsr2h,f,c
  3860  001378  50DF               	movf	indf2,w,c
  3861  00137A  0100               	movlb	0	; () banked
  3862  00137C  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3863  00137E  0100               	movlb	0	; () banked
  3864  001380  EE20 F010          	lfsr	2,16
  3865  001384  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3866  001386  26D9               	addwf	fsr2l,f,c
  3867  001388  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3868  00138A  22DA               	addwfc	fsr2h,f,c
  3869  00138C  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3870  001390  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3871  001394  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3872  001398  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3873  00139C  0E08               	movlw	8
  3874  00139E  EC3A  F013         	call	_Mcp2515WriteCanId
  3875                           
  3876                           ;mcp2515.c: 74: Mcp2515WriteCanId(0x10,filterCfg->ext,filterCfg->filter3);
  3877  0013A2  0100               	movlb	0	; () banked
  3878  0013A4  EE20 F020          	lfsr	2,32
  3879  0013A8  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3880  0013AA  26D9               	addwf	fsr2l,f,c
  3881  0013AC  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3882  0013AE  22DA               	addwfc	fsr2h,f,c
  3883  0013B0  50DF               	movf	indf2,w,c
  3884  0013B2  0100               	movlb	0	; () banked
  3885  0013B4  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3886  0013B6  0100               	movlb	0	; () banked
  3887  0013B8  EE20 F014          	lfsr	2,20
  3888  0013BC  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3889  0013BE  26D9               	addwf	fsr2l,f,c
  3890  0013C0  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3891  0013C2  22DA               	addwfc	fsr2h,f,c
  3892  0013C4  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3893  0013C8  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3894  0013CC  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3895  0013D0  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3896  0013D4  0E10               	movlw	16
  3897  0013D6  EC3A  F013         	call	_Mcp2515WriteCanId
  3898                           
  3899                           ;mcp2515.c: 75: Mcp2515WriteCanId(0x14,filterCfg->ext,filterCfg->filter4);
  3900  0013DA  0100               	movlb	0	; () banked
  3901  0013DC  EE20 F020          	lfsr	2,32
  3902  0013E0  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3903  0013E2  26D9               	addwf	fsr2l,f,c
  3904  0013E4  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3905  0013E6  22DA               	addwfc	fsr2h,f,c
  3906  0013E8  50DF               	movf	indf2,w,c
  3907  0013EA  0100               	movlb	0	; () banked
  3908  0013EC  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3909  0013EE  0100               	movlb	0	; () banked
  3910  0013F0  EE20 F018          	lfsr	2,24
  3911  0013F4  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3912  0013F6  26D9               	addwf	fsr2l,f,c
  3913  0013F8  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3914  0013FA  22DA               	addwfc	fsr2h,f,c
  3915  0013FC  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3916  001400  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3917  001404  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3918  001408  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3919  00140C  0E14               	movlw	20
  3920  00140E  EC3A  F013         	call	_Mcp2515WriteCanId
  3921                           
  3922                           ;mcp2515.c: 76: Mcp2515WriteCanId(0x18,filterCfg->ext,filterCfg->filter5);
  3923  001412  0100               	movlb	0	; () banked
  3924  001414  EE20 F020          	lfsr	2,32
  3925  001418  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3926  00141A  26D9               	addwf	fsr2l,f,c
  3927  00141C  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3928  00141E  22DA               	addwfc	fsr2h,f,c
  3929  001420  50DF               	movf	indf2,w,c
  3930  001422  0100               	movlb	0	; () banked
  3931  001424  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3932  001426  0100               	movlb	0	; () banked
  3933  001428  EE20 F01C          	lfsr	2,28
  3934  00142C  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3935  00142E  26D9               	addwf	fsr2l,f,c
  3936  001430  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3937  001432  22DA               	addwfc	fsr2h,f,c
  3938  001434  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3939  001438  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3940  00143C  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3941  001440  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3942  001444  0E18               	movlw	24
  3943  001446  EC3A  F013         	call	_Mcp2515WriteCanId
  3944                           
  3945                           ;mcp2515.c: 80: cmdWrite3[2] = 0;
  3946  00144A  0E00               	movlw	0
  3947  00144C  0100               	movlb	0	; () banked
  3948  00144E  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  3949                           
  3950                           ;mcp2515.c: 81: for (i = 0; i < 14; i++)
  3951  001450  0E00               	movlw	0
  3952  001452  0100               	movlb	0	; () banked
  3953  001454  6F94               	movwf	Mcp2515_Init@i& (0+255),b
  3954  001456                     l2800:
  3955                           
  3956                           ; BSR set to: 0
  3957  001456  0E0D               	movlw	13
  3958  001458  0100               	movlb	0	; () banked
  3959  00145A  6594               	cpfsgt	Mcp2515_Init@i& (0+255),b
  3960  00145C  D001               	goto	l2804
  3961  00145E  D045               	goto	l2818
  3962  001460                     l2804:
  3963                           
  3964                           ; BSR set to: 0
  3965                           ;mcp2515.c: 82: {
  3966                           ;mcp2515.c: 83: cmdWrite3[1] = 0x30 + i;
  3967  001460  0100               	movlb	0	; () banked
  3968  001462  5194               	movf	Mcp2515_Init@i& (0+255),w,b
  3969  001464  0F30               	addlw	48
  3970  001466  0100               	movlb	0	; () banked
  3971  001468  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  3972                           
  3973                           ; BSR set to: 0
  3974                           ;mcp2515.c: 84: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  3975  00146A  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  3976  00146C  0100               	movlb	0	; () banked
  3977  00146E  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3978  001470  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  3979  001472  0100               	movlb	0	; () banked
  3980  001474  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3981  001476  0E03               	movlw	3
  3982  001478  0100               	movlb	0	; () banked
  3983  00147A  6F6E               	movwf	Spi_Write@size& (0+255),b
  3984  00147C  0E00               	movlw	0
  3985  00147E  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3986  001480  0E00               	movlw	0
  3987  001482  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3988  001484  0E00               	movlw	0
  3989  001486  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3990  001488  ECBE  F019         	call	_Spi_Write	;wreg free
  3991                           
  3992                           ;mcp2515.c: 85: cmdWrite3[1] = 0x40 + i;
  3993  00148C  0100               	movlb	0	; () banked
  3994  00148E  5194               	movf	Mcp2515_Init@i& (0+255),w,b
  3995  001490  0F40               	addlw	64
  3996  001492  0100               	movlb	0	; () banked
  3997  001494  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  3998                           
  3999                           ;mcp2515.c: 86: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  4000  001496  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  4001  001498  0100               	movlb	0	; () banked
  4002  00149A  6F6C               	movwf	Spi_Write@tx& (0+255),b
  4003  00149C  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  4004  00149E  0100               	movlb	0	; () banked
  4005  0014A0  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  4006  0014A2  0E03               	movlw	3
  4007  0014A4  0100               	movlb	0	; () banked
  4008  0014A6  6F6E               	movwf	Spi_Write@size& (0+255),b
  4009  0014A8  0E00               	movlw	0
  4010  0014AA  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  4011  0014AC  0E00               	movlw	0
  4012  0014AE  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  4013  0014B0  0E00               	movlw	0
  4014  0014B2  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  4015  0014B4  ECBE  F019         	call	_Spi_Write	;wreg free
  4016                           
  4017                           ;mcp2515.c: 87: cmdWrite3[1] = 0x50 + i;
  4018  0014B8  0100               	movlb	0	; () banked
  4019  0014BA  5194               	movf	Mcp2515_Init@i& (0+255),w,b
  4020  0014BC  0F50               	addlw	80
  4021  0014BE  0100               	movlb	0	; () banked
  4022  0014C0  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  4023                           
  4024                           ; BSR set to: 0
  4025                           ;mcp2515.c: 88: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  4026  0014C2  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  4027  0014C4  0100               	movlb	0	; () banked
  4028  0014C6  6F6C               	movwf	Spi_Write@tx& (0+255),b
  4029  0014C8  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  4030  0014CA  0100               	movlb	0	; () banked
  4031  0014CC  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  4032  0014CE  0E03               	movlw	3
  4033  0014D0  0100               	movlb	0	; () banked
  4034  0014D2  6F6E               	movwf	Spi_Write@size& (0+255),b
  4035  0014D4  0E00               	movlw	0
  4036  0014D6  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  4037  0014D8  0E00               	movlw	0
  4038  0014DA  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  4039  0014DC  0E00               	movlw	0
  4040  0014DE  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  4041  0014E0  ECBE  F019         	call	_Spi_Write	;wreg free
  4042  0014E4  0100               	movlb	0	; () banked
  4043  0014E6  2B94               	incf	Mcp2515_Init@i& (0+255),f,b
  4044  0014E8  D7B6               	goto	l2800
  4045  0014EA                     l2818:
  4046                           
  4047                           ; BSR set to: 0
  4048                           ;mcp2515.c: 89: }
  4049                           ;mcp2515.c: 93: cmdWrite3[2] = 0;
  4050  0014EA  0E00               	movlw	0
  4051  0014EC  0100               	movlb	0	; () banked
  4052  0014EE  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  4053                           
  4054                           ;mcp2515.c: 94: cmdWrite3[1] = 0x60;
  4055  0014F0  0E60               	movlw	96
  4056  0014F2  0100               	movlb	0	; () banked
  4057  0014F4  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  4058                           
  4059                           ; BSR set to: 0
  4060                           ;mcp2515.c: 95: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  4061  0014F6  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  4062  0014F8  0100               	movlb	0	; () banked
  4063  0014FA  6F6C               	movwf	Spi_Write@tx& (0+255),b
  4064  0014FC  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  4065  0014FE  0100               	movlb	0	; () banked
  4066  001500  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  4067  001502  0E03               	movlw	3
  4068  001504  0100               	movlb	0	; () banked
  4069  001506  6F6E               	movwf	Spi_Write@size& (0+255),b
  4070  001508  0E00               	movlw	0
  4071  00150A  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  4072  00150C  0E00               	movlw	0
  4073  00150E  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  4074  001510  0E00               	movlw	0
  4075  001512  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  4076  001514  ECBE  F019         	call	_Spi_Write	;wreg free
  4077                           
  4078                           ;mcp2515.c: 96: cmdWrite3[1] = 0x70;
  4079  001518  0E70               	movlw	112
  4080  00151A  0100               	movlb	0	; () banked
  4081  00151C  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  4082                           
  4083                           ;mcp2515.c: 97: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  4084  00151E  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  4085  001520  0100               	movlb	0	; () banked
  4086  001522  6F6C               	movwf	Spi_Write@tx& (0+255),b
  4087  001524  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  4088  001526  0100               	movlb	0	; () banked
  4089  001528  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  4090  00152A  0E03               	movlw	3
  4091  00152C  0100               	movlb	0	; () banked
  4092  00152E  6F6E               	movwf	Spi_Write@size& (0+255),b
  4093  001530  0E00               	movlw	0
  4094  001532  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  4095  001534  0E00               	movlw	0
  4096  001536  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  4097  001538  0E00               	movlw	0
  4098  00153A  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  4099  00153C  ECBE  F019         	call	_Spi_Write	;wreg free
  4100                           
  4101                           ;mcp2515.c: 101: cmdMask4[1] = 0x60;
  4102  001540  0E60               	movlw	96
  4103  001542  0100               	movlb	0	; () banked
  4104  001544  6F96               	movwf	(Mcp2515_Init@cmdMask4+1)& (0+255),b
  4105                           
  4106                           ; BSR set to: 0
  4107                           ;mcp2515.c: 102: cmdMask4[2] = 0x60 | (1<<2);
  4108  001546  0E64               	movlw	100
  4109  001548  0100               	movlb	0	; () banked
  4110  00154A  6F97               	movwf	(Mcp2515_Init@cmdMask4+2)& (0+255),b
  4111                           
  4112                           ; BSR set to: 0
  4113                           ;mcp2515.c: 103: if(filterCfg->ext == 0)
  4114  00154C  0100               	movlb	0	; () banked
  4115  00154E  EE20 F020          	lfsr	2,32
  4116  001552  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  4117  001554  26D9               	addwf	fsr2l,f,c
  4118  001556  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  4119  001558  22DA               	addwfc	fsr2h,f,c
  4120  00155A  50DF               	movf	indf2,w,c
  4121  00155C  A4D8               	btfss	status,2,c
  4122  00155E  D002               	goto	l2832
  4123                           
  4124                           ; BSR set to: 0
  4125                           ;mcp2515.c: 104: {
  4126                           ;mcp2515.c: 105: cmdMask4[3] = 0x20 | (1<<2);
  4127  001560  0E24               	movlw	36
  4128  001562  D001               	goto	L3
  4129  001564                     l2832:
  4130                           
  4131                           ; BSR set to: 0
  4132                           ;mcp2515.c: 107: else
  4133                           ;mcp2515.c: 108: {
  4134                           ;mcp2515.c: 109: cmdMask4[3] = 0x40 | (1<<2);
  4135  001564  0E44               	movlw	68
  4136  001566                     L3:
  4137  001566  0100               	movlb	0	; () banked
  4138  001568  6F98               	movwf	(Mcp2515_Init@cmdMask4+3)& (0+255),b
  4139                           
  4140                           ; BSR set to: 0
  4141                           ;mcp2515.c: 110: }
  4142                           ;mcp2515.c: 111: Spi_Write(cmdMask4,sizeof(cmdMask4));
  4143                           
  4144                           ; BSR set to: 0
  4145  00156A  0E95               	movlw	low Mcp2515_Init@cmdMask4
  4146  00156C  0100               	movlb	0	; () banked
  4147  00156E  6F6C               	movwf	Spi_Write@tx& (0+255),b
  4148  001570  0E00               	movlw	high Mcp2515_Init@cmdMask4
  4149  001572  0100               	movlb	0	; () banked
  4150  001574  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  4151  001576  0E04               	movlw	4
  4152  001578  0100               	movlb	0	; () banked
  4153  00157A  6F6E               	movwf	Spi_Write@size& (0+255),b
  4154  00157C  0E00               	movlw	0
  4155  00157E  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  4156  001580  0E00               	movlw	0
  4157  001582  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  4158  001584  0E00               	movlw	0
  4159  001586  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  4160  001588  ECBE  F019         	call	_Spi_Write	;wreg free
  4161                           
  4162                           ;mcp2515.c: 115: cmdMask4[1] = 0x70;
  4163  00158C  0E70               	movlw	112
  4164  00158E  0100               	movlb	0	; () banked
  4165  001590  6F96               	movwf	(Mcp2515_Init@cmdMask4+1)& (0+255),b
  4166                           
  4167                           ; BSR set to: 0
  4168                           ;mcp2515.c: 116: cmdMask4[2] = 0x60;
  4169  001592  0E60               	movlw	96
  4170  001594  0100               	movlb	0	; () banked
  4171  001596  6F97               	movwf	(Mcp2515_Init@cmdMask4+2)& (0+255),b
  4172                           
  4173                           ; BSR set to: 0
  4174                           ;mcp2515.c: 117: if(filterCfg->ext == 0)
  4175  001598  0100               	movlb	0	; () banked
  4176  00159A  EE20 F020          	lfsr	2,32
  4177  00159E  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  4178  0015A0  26D9               	addwf	fsr2l,f,c
  4179  0015A2  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  4180  0015A4  22DA               	addwfc	fsr2h,f,c
  4181  0015A6  50DF               	movf	indf2,w,c
  4182  0015A8  A4D8               	btfss	status,2,c
  4183  0015AA  D002               	goto	l2844
  4184                           
  4185                           ; BSR set to: 0
  4186                           ;mcp2515.c: 118: {
  4187                           ;mcp2515.c: 119: cmdMask4[3] = 0x20;
  4188  0015AC  0E20               	movlw	32
  4189  0015AE  D001               	goto	L4
  4190  0015B0                     l2844:
  4191                           
  4192                           ; BSR set to: 0
  4193                           ;mcp2515.c: 121: else
  4194                           ;mcp2515.c: 122: {
  4195                           ;mcp2515.c: 123: cmdMask4[3] = 0x40;
  4196  0015B0  0E40               	movlw	64
  4197  0015B2                     L4:
  4198  0015B2  0100               	movlb	0	; () banked
  4199  0015B4  6F98               	movwf	(Mcp2515_Init@cmdMask4+3)& (0+255),b
  4200                           
  4201                           ; BSR set to: 0
  4202                           ;mcp2515.c: 124: }
  4203                           ;mcp2515.c: 125: Spi_Write(cmdMask4,sizeof(cmdMask4));
  4204                           
  4205                           ; BSR set to: 0
  4206  0015B6  0E95               	movlw	low Mcp2515_Init@cmdMask4
  4207  0015B8  0100               	movlb	0	; () banked
  4208  0015BA  6F6C               	movwf	Spi_Write@tx& (0+255),b
  4209  0015BC  0E00               	movlw	high Mcp2515_Init@cmdMask4
  4210  0015BE  0100               	movlb	0	; () banked
  4211  0015C0  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  4212  0015C2  0E04               	movlw	4
  4213  0015C4  0100               	movlb	0	; () banked
  4214  0015C6  6F6E               	movwf	Spi_Write@size& (0+255),b
  4215  0015C8  0E00               	movlw	0
  4216  0015CA  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  4217  0015CC  0E00               	movlw	0
  4218  0015CE  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  4219  0015D0  0E00               	movlw	0
  4220  0015D2  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  4221  0015D4  ECBE  F019         	call	_Spi_Write	;wreg free
  4222                           
  4223                           ;mcp2515.c: 129: cmdMask4[0] = 0x05;
  4224  0015D8  0E05               	movlw	5
  4225  0015DA  0100               	movlb	0	; () banked
  4226  0015DC  6F95               	movwf	Mcp2515_Init@cmdMask4& (0+255),b
  4227                           
  4228                           ; BSR set to: 0
  4229                           ;mcp2515.c: 130: cmdMask4[1] = 0x2B;
  4230  0015DE  0E2B               	movlw	43
  4231  0015E0  0100               	movlb	0	; () banked
  4232  0015E2  6F96               	movwf	(Mcp2515_Init@cmdMask4+1)& (0+255),b
  4233                           
  4234                           ; BSR set to: 0
  4235                           ;mcp2515.c: 131: cmdMask4[2] = 0x1F;
  4236  0015E4  0E1F               	movlw	31
  4237  0015E6  0100               	movlb	0	; () banked
  4238  0015E8  6F97               	movwf	(Mcp2515_Init@cmdMask4+2)& (0+255),b
  4239                           
  4240                           ; BSR set to: 0
  4241                           ;mcp2515.c: 132: cmdMask4[3] = 0x1F;
  4242  0015EA  0E1F               	movlw	31
  4243  0015EC  0100               	movlb	0	; () banked
  4244  0015EE  6F98               	movwf	(Mcp2515_Init@cmdMask4+3)& (0+255),b
  4245                           
  4246                           ; BSR set to: 0
  4247                           ;mcp2515.c: 133: Spi_Write(cmdMask4,sizeof(cmdMask4));
  4248  0015F0  0E95               	movlw	low Mcp2515_Init@cmdMask4
  4249  0015F2  0100               	movlb	0	; () banked
  4250  0015F4  6F6C               	movwf	Spi_Write@tx& (0+255),b
  4251  0015F6  0E00               	movlw	high Mcp2515_Init@cmdMask4
  4252  0015F8  0100               	movlb	0	; () banked
  4253  0015FA  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  4254  0015FC  0E04               	movlw	4
  4255  0015FE  0100               	movlb	0	; () banked
  4256  001600  6F6E               	movwf	Spi_Write@size& (0+255),b
  4257  001602  0E00               	movlw	0
  4258  001604  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  4259  001606  0E00               	movlw	0
  4260  001608  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  4261  00160A  0E00               	movlw	0
  4262  00160C  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  4263  00160E  ECBE  F019         	call	_Spi_Write	;wreg free
  4264                           
  4265                           ;mcp2515.c: 137: cmdMask4[0] = 0x05;
  4266  001612  0E05               	movlw	5
  4267  001614  0100               	movlb	0	; () banked
  4268  001616  6F95               	movwf	Mcp2515_Init@cmdMask4& (0+255),b
  4269                           
  4270                           ;mcp2515.c: 138: cmdMask4[1] = 0x0F;
  4271  001618  0E0F               	movlw	15
  4272  00161A  0100               	movlb	0	; () banked
  4273  00161C  6F96               	movwf	(Mcp2515_Init@cmdMask4+1)& (0+255),b
  4274                           
  4275                           ;mcp2515.c: 139: cmdMask4[2] = 0xE0;
  4276  00161E  0EE0               	movlw	224
  4277  001620  0100               	movlb	0	; () banked
  4278  001622  6F97               	movwf	(Mcp2515_Init@cmdMask4+2)& (0+255),b
  4279                           
  4280                           ;mcp2515.c: 140: cmdMask4[3] = 0x00;
  4281  001624  0E00               	movlw	0
  4282  001626  0100               	movlb	0	; () banked
  4283  001628  6F98               	movwf	(Mcp2515_Init@cmdMask4+3)& (0+255),b
  4284                           
  4285                           ; BSR set to: 0
  4286                           ;mcp2515.c: 141: Spi_Write(cmdMask4,sizeof(cmdMask4));
  4287  00162A  0E95               	movlw	low Mcp2515_Init@cmdMask4
  4288  00162C  0100               	movlb	0	; () banked
  4289  00162E  6F6C               	movwf	Spi_Write@tx& (0+255),b
  4290  001630  0E00               	movlw	high Mcp2515_Init@cmdMask4
  4291  001632  0100               	movlb	0	; () banked
  4292  001634  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  4293  001636  0E04               	movlw	4
  4294  001638  0100               	movlb	0	; () banked
  4295  00163A  6F6E               	movwf	Spi_Write@size& (0+255),b
  4296  00163C  0E00               	movlw	0
  4297  00163E  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  4298  001640  0E00               	movlw	0
  4299  001642  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  4300  001644  0E00               	movlw	0
  4301  001646  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  4302  001648  ECBE  F019         	call	_Spi_Write	;wreg free
  4303  00164C  0012               	return		;funcret
  4304  00164E                     __end_of_Mcp2515_Init:
  4305                           	opt stack 0
  4306                           tblptru	equ	0xFF8
  4307                           tblptrh	equ	0xFF7
  4308                           tblptrl	equ	0xFF6
  4309                           tablat	equ	0xFF5
  4310                           prodh	equ	0xFF4
  4311                           prodl	equ	0xFF3
  4312                           intcon	equ	0xFF2
  4313                           intcon2	equ	0xFF1
  4314                           intcon3	equ	0xFF0
  4315                           postinc0	equ	0xFEE
  4316                           wreg	equ	0xFE8
  4317                           indf1	equ	0xFE7
  4318                           postinc1	equ	0xFE6
  4319                           postdec1	equ	0xFE5
  4320                           fsr1h	equ	0xFE2
  4321                           fsr1l	equ	0xFE1
  4322                           indf2	equ	0xFDF
  4323                           postinc2	equ	0xFDE
  4324                           fsr2h	equ	0xFDA
  4325                           fsr2l	equ	0xFD9
  4326                           status	equ	0xFD8
  4327                           
  4328 ;; *************** function _Mcp2515_Reset *****************
  4329 ;; Defined at:
  4330 ;;		line 21 in file "mcp2515.c"
  4331 ;; Parameters:    Size  Location     Type
  4332 ;;		None
  4333 ;; Auto vars:     Size  Location     Type
  4334 ;;  i               4   19[BANK0 ] unsigned long 
  4335 ;;  cmd             1   18[BANK0 ] unsigned char 
  4336 ;; Return value:  Size  Location     Type
  4337 ;;                  1    wreg      void 
  4338 ;; Registers used:
  4339 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4340 ;; Tracked objects:
  4341 ;;		On entry : 0/0
  4342 ;;		On exit  : 0/0
  4343 ;;		Unchanged: 0/0
  4344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4346 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4348 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4349 ;;Total ram usage:        5 bytes
  4350 ;; Hardware stack levels used:    1
  4351 ;; Hardware stack levels required when called:   10
  4352 ;; This function calls:
  4353 ;;		_Spi_Write
  4354 ;; This function is called by:
  4355 ;;		_Mcp2515_Init
  4356 ;; This function uses a non-reentrant model
  4357 ;;
  4358                           
  4359                           	psect	text12
  4360  002EE8                     __ptext12:
  4361                           	opt stack 0
  4362  002EE8                     _Mcp2515_Reset:
  4363                           	opt stack 17
  4364                           
  4365                           ;mcp2515.c: 23: uint32_t i;
  4366                           ;mcp2515.c: 24: uint8_t cmd = 0xC0;
  4367                           
  4368                           ;incstack = 0
  4369  002EE8  0EC0               	movlw	192
  4370  002EEA  0100               	movlb	0	; () banked
  4371  002EEC  6F72               	movwf	Mcp2515_Reset@cmd& (0+255),b
  4372                           
  4373                           ; BSR set to: 0
  4374                           ;mcp2515.c: 26: Spi_Write(&cmd,sizeof(cmd));
  4375  002EEE  0E72               	movlw	low Mcp2515_Reset@cmd
  4376  002EF0  0100               	movlb	0	; () banked
  4377  002EF2  6F6C               	movwf	Spi_Write@tx& (0+255),b
  4378  002EF4  0E00               	movlw	high Mcp2515_Reset@cmd
  4379  002EF6  0100               	movlb	0	; () banked
  4380  002EF8  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  4381  002EFA  0E01               	movlw	1
  4382  002EFC  0100               	movlb	0	; () banked
  4383  002EFE  6F6E               	movwf	Spi_Write@size& (0+255),b
  4384  002F00  0E00               	movlw	0
  4385  002F02  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  4386  002F04  0E00               	movlw	0
  4387  002F06  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  4388  002F08  0E00               	movlw	0
  4389  002F0A  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  4390  002F0C  ECBE  F019         	call	_Spi_Write	;wreg free
  4391                           
  4392                           ;mcp2515.c: 27: for(i=0;i<10000;i++){}
  4393  002F10  0E00               	movlw	0
  4394  002F12  0100               	movlb	0	; () banked
  4395  002F14  6F73               	movwf	Mcp2515_Reset@i& (0+255),b
  4396  002F16  0E00               	movlw	0
  4397  002F18  6F74               	movwf	(Mcp2515_Reset@i+1)& (0+255),b
  4398  002F1A  0E00               	movlw	0
  4399  002F1C  6F75               	movwf	(Mcp2515_Reset@i+2)& (0+255),b
  4400  002F1E  0E00               	movlw	0
  4401  002F20  6F76               	movwf	(Mcp2515_Reset@i+3)& (0+255),b
  4402  002F22                     l2542:
  4403                           
  4404                           ; BSR set to: 0
  4405  002F22  0100               	movlb	0	; () banked
  4406  002F24  5176               	movf	(Mcp2515_Reset@i+3)& (0+255),w,b
  4407  002F26  0100               	movlb	0	; () banked
  4408  002F28  1175               	iorwf	(Mcp2515_Reset@i+2)& (0+255),w,b
  4409  002F2A  E110               	bnz	l304
  4410  002F2C  0E10               	movlw	16
  4411  002F2E  0100               	movlb	0	; () banked
  4412  002F30  5D73               	subwf	Mcp2515_Reset@i& (0+255),w,b
  4413  002F32  0E27               	movlw	39
  4414  002F34  0100               	movlb	0	; () banked
  4415  002F36  5974               	subwfb	(Mcp2515_Reset@i+1)& (0+255),w,b
  4416  002F38  B0D8               	btfsc	status,0,c
  4417  002F3A  0012               	return	
  4418                           
  4419                           ; BSR set to: 0
  4420                           
  4421                           ; BSR set to: 0
  4422                           
  4423                           ; BSR set to: 0
  4424  002F3C  0E01               	movlw	1
  4425  002F3E  0100               	movlb	0	; () banked
  4426  002F40  2773               	addwf	Mcp2515_Reset@i& (0+255),f,b
  4427  002F42  0E00               	movlw	0
  4428  002F44  2374               	addwfc	(Mcp2515_Reset@i+1)& (0+255),f,b
  4429  002F46  2375               	addwfc	(Mcp2515_Reset@i+2)& (0+255),f,b
  4430  002F48  2376               	addwfc	(Mcp2515_Reset@i+3)& (0+255),f,b
  4431  002F4A  D7EB               	goto	l2542
  4432  002F4C                     l304:
  4433                           
  4434                           ; BSR set to: 0
  4435  002F4C  0012               	return		;funcret
  4436  002F4E                     __end_of_Mcp2515_Reset:
  4437                           	opt stack 0
  4438                           tblptru	equ	0xFF8
  4439                           tblptrh	equ	0xFF7
  4440                           tblptrl	equ	0xFF6
  4441                           tablat	equ	0xFF5
  4442                           prodh	equ	0xFF4
  4443                           prodl	equ	0xFF3
  4444                           intcon	equ	0xFF2
  4445                           intcon2	equ	0xFF1
  4446                           intcon3	equ	0xFF0
  4447                           postinc0	equ	0xFEE
  4448                           wreg	equ	0xFE8
  4449                           indf1	equ	0xFE7
  4450                           postinc1	equ	0xFE6
  4451                           postdec1	equ	0xFE5
  4452                           fsr1h	equ	0xFE2
  4453                           fsr1l	equ	0xFE1
  4454                           indf2	equ	0xFDF
  4455                           postinc2	equ	0xFDE
  4456                           fsr2h	equ	0xFDA
  4457                           fsr2l	equ	0xFD9
  4458                           status	equ	0xFD8
  4459                           
  4460 ;; *************** function _Mcp2515WriteCanId *****************
  4461 ;; Defined at:
  4462 ;;		line 233 in file "mcp2515.c"
  4463 ;; Parameters:    Size  Location     Type
  4464 ;;  mcp_addr        1    wreg     unsigned char 
  4465 ;;  ext             1   18[BANK0 ] unsigned char 
  4466 ;;  can_id          4   19[BANK0 ] unsigned long 
  4467 ;; Auto vars:     Size  Location     Type
  4468 ;;  mcp_addr        1   26[BANK0 ] unsigned char 
  4469 ;;  buf             6   27[BANK0 ] unsigned char [6]
  4470 ;;  canid           2   33[BANK0 ] unsigned int 
  4471 ;; Return value:  Size  Location     Type
  4472 ;;                  1    wreg      void 
  4473 ;; Registers used:
  4474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4475 ;; Tracked objects:
  4476 ;;		On entry : 0/0
  4477 ;;		On exit  : 0/0
  4478 ;;		Unchanged: 0/0
  4479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4480 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4481 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4482 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4483 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4484 ;;Total ram usage:       17 bytes
  4485 ;; Hardware stack levels used:    1
  4486 ;; Hardware stack levels required when called:   10
  4487 ;; This function calls:
  4488 ;;		_Spi_Write
  4489 ;; This function is called by:
  4490 ;;		_Mcp2515_Init
  4491 ;; This function uses a non-reentrant model
  4492 ;;
  4493                           
  4494                           	psect	text13
  4495  002674                     __ptext13:
  4496                           	opt stack 0
  4497  002674                     _Mcp2515WriteCanId:
  4498                           	opt stack 17
  4499                           
  4500                           ; BSR set to: 0
  4501                           ;incstack = 0
  4502                           ;Mcp2515WriteCanId@mcp_addr stored from wreg
  4503  002674  0100               	movlb	0	; () banked
  4504  002676  6F7A               	movwf	Mcp2515WriteCanId@mcp_addr& (0+255),b
  4505                           
  4506                           ;mcp2515.c: 235: uint16_t canid;
  4507                           ;mcp2515.c: 236: uint8_t buf[6];
  4508                           ;mcp2515.c: 238: canid = (uint16_t)(can_id & 0x0FFFF);
  4509  002678  C073  F081         	movff	Mcp2515WriteCanId@can_id,Mcp2515WriteCanId@canid
  4510  00267C  C074  F082         	movff	Mcp2515WriteCanId@can_id+1,Mcp2515WriteCanId@canid+1
  4511                           
  4512                           ;mcp2515.c: 240: buf[0] = 0x02;
  4513  002680  0E02               	movlw	2
  4514  002682  0100               	movlb	0	; () banked
  4515  002684  6F7B               	movwf	Mcp2515WriteCanId@buf& (0+255),b
  4516                           
  4517                           ; BSR set to: 0
  4518                           ;mcp2515.c: 241: buf[1] = mcp_addr;
  4519  002686  C07A  F07C         	movff	Mcp2515WriteCanId@mcp_addr,Mcp2515WriteCanId@buf+1
  4520                           
  4521                           ; BSR set to: 0
  4522                           ;mcp2515.c: 243: if ( ext == 1)
  4523  00268A  0100               	movlb	0	; () banked
  4524  00268C  0572               	decf	Mcp2515WriteCanId@ext& (0+255),w,b
  4525  00268E  A4D8               	btfss	status,2,c
  4526  002690  D034               	goto	l2570
  4527                           
  4528                           ; BSR set to: 0
  4529                           ;mcp2515.c: 244: {
  4530                           ;mcp2515.c: 245: buf[3+2] = (uint8_t) (canid & 0xFF);
  4531  002692  C081  F080         	movff	Mcp2515WriteCanId@canid,Mcp2515WriteCanId@buf+5
  4532                           
  4533                           ; BSR set to: 0
  4534                           ;mcp2515.c: 246: buf[2+2] = (uint8_t) (canid >> 8);
  4535  002696  0100               	movlb	0	; () banked
  4536  002698  5182               	movf	(Mcp2515WriteCanId@canid+1)& (0+255),w,b
  4537  00269A  0100               	movlb	0	; () banked
  4538  00269C  6F7F               	movwf	(Mcp2515WriteCanId@buf+4)& (0+255),b
  4539                           
  4540                           ; BSR set to: 0
  4541                           ;mcp2515.c: 247: canid = (uint16_t)( can_id / 0x10000L );
  4542  00269E  C075  F081         	movff	Mcp2515WriteCanId@can_id+2,Mcp2515WriteCanId@canid
  4543  0026A2  C076  F082         	movff	Mcp2515WriteCanId@can_id+3,Mcp2515WriteCanId@canid+1
  4544                           
  4545                           ; BSR set to: 0
  4546                           ;mcp2515.c: 248: buf[1+2] = (uint8_t) (canid & 0x03);
  4547  0026A6  0100               	movlb	0	; () banked
  4548  0026A8  5181               	movf	Mcp2515WriteCanId@canid& (0+255),w,b
  4549  0026AA  0B03               	andlw	3
  4550  0026AC  0100               	movlb	0	; () banked
  4551  0026AE  6F7E               	movwf	(Mcp2515WriteCanId@buf+3)& (0+255),b
  4552                           
  4553                           ; BSR set to: 0
  4554                           ;mcp2515.c: 249: buf[1+2] += (uint8_t) ((canid & 0x1C )*8);
  4555  0026B0  C081  F077         	movff	Mcp2515WriteCanId@canid,??_Mcp2515WriteCanId
  4556  0026B4  0E1C               	movlw	28
  4557  0026B6  0100               	movlb	0	; () banked
  4558  0026B8  1777               	andwf	??_Mcp2515WriteCanId& (0+255),f,b
  4559  0026BA  0100               	movlb	0	; () banked
  4560  0026BC  90D8               	bcf	status,0,c
  4561  0026BE  3777               	rlcf	??_Mcp2515WriteCanId& (0+255),f,b
  4562  0026C0  0100               	movlb	0	; () banked
  4563  0026C2  90D8               	bcf	status,0,c
  4564  0026C4  3777               	rlcf	??_Mcp2515WriteCanId& (0+255),f,b
  4565  0026C6  0100               	movlb	0	; () banked
  4566  0026C8  90D8               	bcf	status,0,c
  4567  0026CA  3577               	rlcf	??_Mcp2515WriteCanId& (0+255),w,b
  4568  0026CC  0100               	movlb	0	; () banked
  4569  0026CE  277E               	addwf	(Mcp2515WriteCanId@buf+3)& (0+255),f,b
  4570                           
  4571                           ; BSR set to: 0
  4572                           ;mcp2515.c: 250: buf[1+2] |= 0x08;
  4573  0026D0  0100               	movlb	0	; () banked
  4574  0026D2  877E               	bsf	(Mcp2515WriteCanId@buf+3)& (0+255),3,b
  4575                           
  4576                           ; BSR set to: 0
  4577                           ;mcp2515.c: 251: buf[0+2] = (uint8_t) (canid / 32 );
  4578  0026D4  C081  F077         	movff	Mcp2515WriteCanId@canid,??_Mcp2515WriteCanId
  4579  0026D8  C082  F078         	movff	Mcp2515WriteCanId@canid+1,??_Mcp2515WriteCanId+1
  4580  0026DC  0E05               	movlw	5
  4581  0026DE  0100               	movlb	0	; () banked
  4582  0026E0  6F79               	movwf	(??_Mcp2515WriteCanId+2)& (0+255),b
  4583  0026E2                     u1555:
  4584  0026E2  0100               	movlb	0	; () banked
  4585  0026E4  90D8               	bcf	status,0,c
  4586  0026E6  3378               	rrcf	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  4587  0026E8  3377               	rrcf	??_Mcp2515WriteCanId& (0+255),f,b
  4588  0026EA  0100               	movlb	0	; () banked
  4589  0026EC  2F79               	decfsz	(??_Mcp2515WriteCanId+2)& (0+255),f,b
  4590  0026EE  D7F9               	goto	u1555
  4591  0026F0  0100               	movlb	0	; () banked
  4592  0026F2  5177               	movf	??_Mcp2515WriteCanId& (0+255),w,b
  4593  0026F4  0100               	movlb	0	; () banked
  4594  0026F6  6F7D               	movwf	(Mcp2515WriteCanId@buf+2)& (0+255),b
  4595                           
  4596                           ;mcp2515.c: 252: }
  4597  0026F8  D02C               	goto	l2576
  4598  0026FA                     l2570:
  4599                           
  4600                           ; BSR set to: 0
  4601                           ;mcp2515.c: 254: else
  4602                           ;mcp2515.c: 255: {
  4603                           ;mcp2515.c: 256: buf[0+2] = (uint8_t) (canid >> 3);
  4604  0026FA  C081  F077         	movff	Mcp2515WriteCanId@canid,??_Mcp2515WriteCanId
  4605  0026FE  C082  F078         	movff	Mcp2515WriteCanId@canid+1,??_Mcp2515WriteCanId+1
  4606  002702  0100               	movlb	0	; () banked
  4607  002704  90D8               	bcf	status,0,c
  4608  002706  3378               	rrcf	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  4609  002708  3377               	rrcf	??_Mcp2515WriteCanId& (0+255),f,b
  4610  00270A  0100               	movlb	0	; () banked
  4611  00270C  90D8               	bcf	status,0,c
  4612  00270E  3378               	rrcf	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  4613  002710  3377               	rrcf	??_Mcp2515WriteCanId& (0+255),f,b
  4614  002712  0100               	movlb	0	; () banked
  4615  002714  90D8               	bcf	status,0,c
  4616  002716  3378               	rrcf	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  4617  002718  3377               	rrcf	??_Mcp2515WriteCanId& (0+255),f,b
  4618  00271A  0100               	movlb	0	; () banked
  4619  00271C  5177               	movf	??_Mcp2515WriteCanId& (0+255),w,b
  4620  00271E  0100               	movlb	0	; () banked
  4621  002720  6F7D               	movwf	(Mcp2515WriteCanId@buf+2)& (0+255),b
  4622                           
  4623                           ;mcp2515.c: 257: buf[1+2] = (uint8_t) ((canid & 0x07 )*32);
  4624  002722  C081  F077         	movff	Mcp2515WriteCanId@canid,??_Mcp2515WriteCanId
  4625  002726  0E07               	movlw	7
  4626  002728  0100               	movlb	0	; () banked
  4627  00272A  1777               	andwf	??_Mcp2515WriteCanId& (0+255),f,b
  4628  00272C  0E05               	movlw	5
  4629  00272E  0100               	movlb	0	; () banked
  4630  002730  6F78               	movwf	(??_Mcp2515WriteCanId+1)& (0+255),b
  4631  002732                     u1565:
  4632  002732  0100               	movlb	0	; () banked
  4633  002734  90D8               	bcf	status,0,c
  4634  002736  3777               	rlcf	??_Mcp2515WriteCanId& (0+255),f,b
  4635  002738  0100               	movlb	0	; () banked
  4636  00273A  2F78               	decfsz	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  4637  00273C  D7FA               	goto	u1565
  4638  00273E  0100               	movlb	0	; () banked
  4639  002740  5177               	movf	??_Mcp2515WriteCanId& (0+255),w,b
  4640  002742  0100               	movlb	0	; () banked
  4641  002744  6F7E               	movwf	(Mcp2515WriteCanId@buf+3)& (0+255),b
  4642                           
  4643                           ; BSR set to: 0
  4644                           ;mcp2515.c: 258: buf[3+2] = 0;
  4645  002746  0E00               	movlw	0
  4646  002748  0100               	movlb	0	; () banked
  4647  00274A  6F80               	movwf	(Mcp2515WriteCanId@buf+5)& (0+255),b
  4648                           
  4649                           ; BSR set to: 0
  4650                           ;mcp2515.c: 259: buf[2+2] = 0;
  4651  00274C  0E00               	movlw	0
  4652  00274E  0100               	movlb	0	; () banked
  4653  002750  6F7F               	movwf	(Mcp2515WriteCanId@buf+4)& (0+255),b
  4654  002752                     l2576:
  4655                           
  4656                           ; BSR set to: 0
  4657                           ;mcp2515.c: 260: }
  4658                           ;mcp2515.c: 261: Spi_Write(buf,6);
  4659  002752  0E7B               	movlw	low Mcp2515WriteCanId@buf
  4660  002754  0100               	movlb	0	; () banked
  4661  002756  6F6C               	movwf	Spi_Write@tx& (0+255),b
  4662  002758  0E00               	movlw	high Mcp2515WriteCanId@buf
  4663  00275A  0100               	movlb	0	; () banked
  4664  00275C  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  4665  00275E  0E06               	movlw	6
  4666  002760  0100               	movlb	0	; () banked
  4667  002762  6F6E               	movwf	Spi_Write@size& (0+255),b
  4668  002764  0E00               	movlw	0
  4669  002766  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  4670  002768  0E00               	movlw	0
  4671  00276A  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  4672  00276C  0E00               	movlw	0
  4673  00276E  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  4674  002770  ECBE  F019         	call	_Spi_Write	;wreg free
  4675  002774  0012               	return		;funcret
  4676  002776                     __end_of_Mcp2515WriteCanId:
  4677                           	opt stack 0
  4678                           tblptru	equ	0xFF8
  4679                           tblptrh	equ	0xFF7
  4680                           tblptrl	equ	0xFF6
  4681                           tablat	equ	0xFF5
  4682                           prodh	equ	0xFF4
  4683                           prodl	equ	0xFF3
  4684                           intcon	equ	0xFF2
  4685                           intcon2	equ	0xFF1
  4686                           intcon3	equ	0xFF0
  4687                           postinc0	equ	0xFEE
  4688                           wreg	equ	0xFE8
  4689                           indf1	equ	0xFE7
  4690                           postinc1	equ	0xFE6
  4691                           postdec1	equ	0xFE5
  4692                           fsr1h	equ	0xFE2
  4693                           fsr1l	equ	0xFE1
  4694                           indf2	equ	0xFDF
  4695                           postinc2	equ	0xFDE
  4696                           fsr2h	equ	0xFDA
  4697                           fsr2l	equ	0xFD9
  4698                           status	equ	0xFD8
  4699                           
  4700 ;; *************** function _Spi_Write *****************
  4701 ;; Defined at:
  4702 ;;		line 332 in file "can.c"
  4703 ;; Parameters:    Size  Location     Type
  4704 ;;  tx              2   12[BANK0 ] PTR unsigned char 
  4705 ;;		 -> Mcp2515WriteCanMsg@buf(10), Mcp2515WriteCanId@buf(6), Mcp2515Sleep@cmdMask4(3), Mcp2515_Init@cmdWrite3(3), 
  4706 ;;		 -> Mcp2515_Init@cmdMask4(4), Mcp2515_Reset@cmd(1), Can_SendMessage@buf(4), Can_ReadMessage@buf(4), 
  4707 ;;  size            4   14[BANK0 ] unsigned long 
  4708 ;; Auto vars:     Size  Location     Type
  4709 ;;		None
  4710 ;; Return value:  Size  Location     Type
  4711 ;;                  1    wreg      void 
  4712 ;; Registers used:
  4713 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4714 ;; Tracked objects:
  4715 ;;		On entry : 0/0
  4716 ;;		On exit  : 0/0
  4717 ;;		Unchanged: 0/0
  4718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4719 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4722 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4723 ;;Total ram usage:        6 bytes
  4724 ;; Hardware stack levels used:    1
  4725 ;; Hardware stack levels required when called:    9
  4726 ;; This function calls:
  4727 ;;		_SPIRW
  4728 ;; This function is called by:
  4729 ;;		_Mcp2515_Reset
  4730 ;;		_Mcp2515_Init
  4731 ;;		_Mcp2515WriteCanId
  4732 ;;		_Mcp2515Sleep
  4733 ;; This function uses a non-reentrant model
  4734 ;;
  4735                           
  4736                           	psect	text14
  4737  00337C                     __ptext14:
  4738                           	opt stack 0
  4739  00337C                     _Spi_Write:
  4740                           	opt stack 18
  4741                           
  4742                           ;can.c: 334: SPIRW(tx, 0, size);
  4743                           
  4744                           ;incstack = 0
  4745  00337C  C06C  F060         	movff	Spi_Write@tx,SPIRW@tx
  4746  003380  C06D  F061         	movff	Spi_Write@tx+1,SPIRW@tx+1
  4747  003384  0E00               	movlw	0
  4748  003386  0100               	movlb	0	; () banked
  4749  003388  6F62               	movwf	SPIRW@rx& (0+255),b
  4750  00338A  0E00               	movlw	0
  4751  00338C  0100               	movlb	0	; () banked
  4752  00338E  6F63               	movwf	(SPIRW@rx+1)& (0+255),b
  4753  003390  C06E  F064         	movff	Spi_Write@size,SPIRW@size
  4754  003394  C06F  F065         	movff	Spi_Write@size+1,SPIRW@size+1
  4755  003398  C070  F066         	movff	Spi_Write@size+2,SPIRW@size+2
  4756  00339C  C071  F067         	movff	Spi_Write@size+3,SPIRW@size+3
  4757  0033A0  EC79  F015         	call	_SPIRW	;wreg free
  4758  0033A4  0012               	return		;funcret
  4759  0033A6                     __end_of_Spi_Write:
  4760                           	opt stack 0
  4761                           tblptru	equ	0xFF8
  4762                           tblptrh	equ	0xFF7
  4763                           tblptrl	equ	0xFF6
  4764                           tablat	equ	0xFF5
  4765                           prodh	equ	0xFF4
  4766                           prodl	equ	0xFF3
  4767                           intcon	equ	0xFF2
  4768                           intcon2	equ	0xFF1
  4769                           intcon3	equ	0xFF0
  4770                           postinc0	equ	0xFEE
  4771                           wreg	equ	0xFE8
  4772                           indf1	equ	0xFE7
  4773                           postinc1	equ	0xFE6
  4774                           postdec1	equ	0xFE5
  4775                           fsr1h	equ	0xFE2
  4776                           fsr1l	equ	0xFE1
  4777                           indf2	equ	0xFDF
  4778                           postinc2	equ	0xFDE
  4779                           fsr2h	equ	0xFDA
  4780                           fsr2l	equ	0xFD9
  4781                           status	equ	0xFD8
  4782                           
  4783 ;; *************** function _SPIRW *****************
  4784 ;; Defined at:
  4785 ;;		line 293 in file "can.c"
  4786 ;; Parameters:    Size  Location     Type
  4787 ;;  tx              2    0[BANK0 ] PTR const unsigned char 
  4788 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515WriteCanMsg@buf(10), Mcp2515WriteCanId@buf(6), Mcp2515ReadCanMsg@cmd(10),
      + 
  4789 ;;		 -> Mcp2515ReadCanId@msg(6), Mcp2515Sleep@cmdMask4(3), Mcp2515_Init@cmdWrite3(3), Mcp2515_Init@cmdMask4(4), 
  4790 ;;		 -> Mcp2515_Reset@cmd(1), Can_SendMessage@buf(4), Can_ReadMessage@buf(4), Can_GetStatus@msg4(4), 
  4791 ;;		 -> Can_GetStatus@msg(3), 
  4792 ;;  rx              2    2[BANK0 ] PTR unsigned char 
  4793 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515ReadCanMsg@cmd(10), Mcp2515ReadCanId@msg(6), Can_ReadMessage@buf(4), 
  4794 ;;		 -> Can_GetStatus@msg4(4), Can_GetStatus@msg(3), NULL(0), 
  4795 ;;  size            4    4[BANK0 ] unsigned long 
  4796 ;; Auto vars:     Size  Location     Type
  4797 ;;  i               4    8[BANK0 ] unsigned long 
  4798 ;; Return value:  Size  Location     Type
  4799 ;;                  1    wreg      void 
  4800 ;; Registers used:
  4801 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4802 ;; Tracked objects:
  4803 ;;		On entry : 0/0
  4804 ;;		On exit  : 0/0
  4805 ;;		Unchanged: 0/0
  4806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4807 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4808 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4810 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4811 ;;Total ram usage:       12 bytes
  4812 ;; Hardware stack levels used:    1
  4813 ;; Hardware stack levels required when called:    8
  4814 ;; This function calls:
  4815 ;;		Nothing
  4816 ;; This function is called by:
  4817 ;;		_Spi_Write
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821                           	psect	text15
  4822  002AF2                     __ptext15:
  4823                           	opt stack 0
  4824  002AF2                     _SPIRW:
  4825                           	opt stack 18
  4826                           
  4827                           ;can.c: 295: uint32_t i;
  4828                           ;can.c: 297: SSPCON1 = 0b00111010;
  4829                           
  4830                           ;incstack = 0
  4831  002AF2  0E3A               	movlw	58
  4832  002AF4  6EC6               	movwf	4038,c	;volatile
  4833                           
  4834                           ;can.c: 299: LATD1 = 0;
  4835  002AF6  928C               	bcf	3980,1,c	;volatile
  4836                           
  4837                           ;can.c: 300: for(i=0;i<size;i++)
  4838  002AF8  0E00               	movlw	0
  4839  002AFA  0100               	movlb	0	; () banked
  4840  002AFC  6F68               	movwf	SPIRW@i& (0+255),b
  4841  002AFE  0E00               	movlw	0
  4842  002B00  6F69               	movwf	(SPIRW@i+1)& (0+255),b
  4843  002B02  0E00               	movlw	0
  4844  002B04  6F6A               	movwf	(SPIRW@i+2)& (0+255),b
  4845  002B06  0E00               	movlw	0
  4846  002B08  6F6B               	movwf	(SPIRW@i+3)& (0+255),b
  4847  002B0A  D028               	goto	l2356
  4848  002B0C                     l2348:
  4849                           
  4850                           ; BSR set to: 0
  4851                           ;can.c: 301: {
  4852                           ;can.c: 302: SSPBUF = tx[i];
  4853  002B0C  0100               	movlb	0	; () banked
  4854  002B0E  5168               	movf	SPIRW@i& (0+255),w,b
  4855  002B10  0100               	movlb	0	; () banked
  4856  002B12  2560               	addwf	SPIRW@tx& (0+255),w,b
  4857  002B14  6ED9               	movwf	fsr2l,c
  4858  002B16  0100               	movlb	0	; () banked
  4859  002B18  5169               	movf	(SPIRW@i+1)& (0+255),w,b
  4860  002B1A  0100               	movlb	0	; () banked
  4861  002B1C  2161               	addwfc	(SPIRW@tx+1)& (0+255),w,b
  4862  002B1E  6EDA               	movwf	fsr2h,c
  4863  002B20  50DF               	movf	indf2,w,c
  4864  002B22  6EC9               	movwf	4041,c	;volatile
  4865  002B24                     l226:
  4866  002B24  A69E               	btfss	3998,3,c	;volatile
  4867  002B26  D7FE               	goto	l226
  4868                           
  4869                           ;can.c: 304: SSP1IF = 0;
  4870  002B28  969E               	bcf	3998,3,c	;volatile
  4871                           
  4872                           ;can.c: 305: if(rx != 0)
  4873  002B2A  0100               	movlb	0	; () banked
  4874  002B2C  5162               	movf	SPIRW@rx& (0+255),w,b
  4875  002B2E  0100               	movlb	0	; () banked
  4876  002B30  1163               	iorwf	(SPIRW@rx+1)& (0+255),w,b
  4877  002B32  B4D8               	btfsc	status,2,c
  4878  002B34  D00C               	goto	l2354
  4879                           
  4880                           ; BSR set to: 0
  4881                           ;can.c: 306: rx[i] = SSPBUF;
  4882  002B36  0100               	movlb	0	; () banked
  4883  002B38  5168               	movf	SPIRW@i& (0+255),w,b
  4884  002B3A  0100               	movlb	0	; () banked
  4885  002B3C  2562               	addwf	SPIRW@rx& (0+255),w,b
  4886  002B3E  6ED9               	movwf	fsr2l,c
  4887  002B40  0100               	movlb	0	; () banked
  4888  002B42  5169               	movf	(SPIRW@i+1)& (0+255),w,b
  4889  002B44  0100               	movlb	0	; () banked
  4890  002B46  2163               	addwfc	(SPIRW@rx+1)& (0+255),w,b
  4891  002B48  6EDA               	movwf	fsr2h,c
  4892  002B4A  CFC9 FFDF          	movff	4041,indf2	;volatile
  4893  002B4E                     l2354:
  4894                           
  4895                           ; BSR set to: 0
  4896  002B4E  0E01               	movlw	1
  4897  002B50  0100               	movlb	0	; () banked
  4898  002B52  2768               	addwf	SPIRW@i& (0+255),f,b
  4899  002B54  0E00               	movlw	0
  4900  002B56  2369               	addwfc	(SPIRW@i+1)& (0+255),f,b
  4901  002B58  236A               	addwfc	(SPIRW@i+2)& (0+255),f,b
  4902  002B5A  236B               	addwfc	(SPIRW@i+3)& (0+255),f,b
  4903  002B5C                     l2356:
  4904                           
  4905                           ; BSR set to: 0
  4906  002B5C  0100               	movlb	0	; () banked
  4907  002B5E  5164               	movf	SPIRW@size& (0+255),w,b
  4908  002B60  0100               	movlb	0	; () banked
  4909  002B62  5D68               	subwf	SPIRW@i& (0+255),w,b
  4910  002B64  0100               	movlb	0	; () banked
  4911  002B66  5165               	movf	(SPIRW@size+1)& (0+255),w,b
  4912  002B68  0100               	movlb	0	; () banked
  4913  002B6A  5969               	subwfb	(SPIRW@i+1)& (0+255),w,b
  4914  002B6C  0100               	movlb	0	; () banked
  4915  002B6E  5166               	movf	(SPIRW@size+2)& (0+255),w,b
  4916  002B70  0100               	movlb	0	; () banked
  4917  002B72  596A               	subwfb	(SPIRW@i+2)& (0+255),w,b
  4918  002B74  0100               	movlb	0	; () banked
  4919  002B76  5167               	movf	(SPIRW@size+3)& (0+255),w,b
  4920  002B78  0100               	movlb	0	; () banked
  4921  002B7A  596B               	subwfb	(SPIRW@i+3)& (0+255),w,b
  4922  002B7C  A0D8               	btfss	status,0,c
  4923  002B7E  D7C6               	goto	l2348
  4924                           
  4925                           ; BSR set to: 0
  4926                           ;can.c: 307: }
  4927                           ;can.c: 308: LATD1 = 1;
  4928  002B80  828C               	bsf	3980,1,c	;volatile
  4929                           
  4930                           ; BSR set to: 0
  4931  002B82  0012               	return		;funcret
  4932  002B84                     __end_of_SPIRW:
  4933                           	opt stack 0
  4934                           tblptru	equ	0xFF8
  4935                           tblptrh	equ	0xFF7
  4936                           tblptrl	equ	0xFF6
  4937                           tablat	equ	0xFF5
  4938                           prodh	equ	0xFF4
  4939                           prodl	equ	0xFF3
  4940                           intcon	equ	0xFF2
  4941                           intcon2	equ	0xFF1
  4942                           intcon3	equ	0xFF0
  4943                           postinc0	equ	0xFEE
  4944                           wreg	equ	0xFE8
  4945                           indf1	equ	0xFE7
  4946                           postinc1	equ	0xFE6
  4947                           postdec1	equ	0xFE5
  4948                           fsr1h	equ	0xFE2
  4949                           fsr1l	equ	0xFE1
  4950                           indf2	equ	0xFDF
  4951                           postinc2	equ	0xFDE
  4952                           fsr2h	equ	0xFDA
  4953                           fsr2l	equ	0xFD9
  4954                           status	equ	0xFD8
  4955                           
  4956 ;; *************** function _decrPriority *****************
  4957 ;; Defined at:
  4958 ;;		line 181 in file "logic.c"
  4959 ;; Parameters:    Size  Location     Type
  4960 ;;  user            1    wreg     unsigned char 
  4961 ;; Auto vars:     Size  Location     Type
  4962 ;;  user            1    2[BANK0 ] unsigned char 
  4963 ;;  i               1    4[BANK0 ] unsigned char 
  4964 ;;  modified        1    3[BANK0 ] unsigned char 
  4965 ;; Return value:  Size  Location     Type
  4966 ;;                  1    wreg      void 
  4967 ;; Registers used:
  4968 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4969 ;; Tracked objects:
  4970 ;;		On entry : 0/0
  4971 ;;		On exit  : 0/0
  4972 ;;		Unchanged: 0/0
  4973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4975 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4976 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4977 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4978 ;;Total ram usage:        5 bytes
  4979 ;; Hardware stack levels used:    1
  4980 ;; Hardware stack levels required when called:    8
  4981 ;; This function calls:
  4982 ;;		Nothing
  4983 ;; This function is called by:
  4984 ;;		_main
  4985 ;; This function uses a non-reentrant model
  4986 ;;
  4987                           
  4988                           	psect	text16
  4989  002972                     __ptext16:
  4990                           	opt stack 0
  4991  002972                     _decrPriority:
  4992                           	opt stack 22
  4993                           
  4994                           ; BSR set to: 0
  4995                           ;incstack = 0
  4996                           ;decrPriority@user stored from wreg
  4997  002972  0100               	movlb	0	; () banked
  4998  002974  6F62               	movwf	decrPriority@user& (0+255),b
  4999                           
  5000                           ;logic.c: 183: uint8_t modified = 0;
  5001  002976  0E00               	movlw	0
  5002  002978  0100               	movlb	0	; () banked
  5003  00297A  6F63               	movwf	decrPriority@modified& (0+255),b
  5004                           
  5005                           ;logic.c: 186: for(uint8_t i = 0; i < 12; i++)
  5006  00297C  0E00               	movlw	0
  5007  00297E  0100               	movlb	0	; () banked
  5008  002980  6F64               	movwf	decrPriority@i& (0+255),b
  5009  002982                     l3180:
  5010                           
  5011                           ; BSR set to: 0
  5012  002982  0E0B               	movlw	11
  5013  002984  0100               	movlb	0	; () banked
  5014  002986  6564               	cpfsgt	decrPriority@i& (0+255),b
  5015  002988  D001               	goto	l3184
  5016  00298A  D04E               	goto	l3204
  5017  00298C                     l3184:
  5018                           
  5019                           ; BSR set to: 0
  5020                           ;logic.c: 187: {
  5021                           ;logic.c: 188: if(priorityUser[i] == user)
  5022  00298C  0100               	movlb	0	; () banked
  5023  00298E  5164               	movf	decrPriority@i& (0+255),w,b
  5024  002990  0D01               	mullw	1
  5025  002992  0EAF               	movlw	low _priorityUser
  5026  002994  24F3               	addwf	prodl,w,c
  5027  002996  6ED9               	movwf	fsr2l,c
  5028  002998  0E00               	movlw	high _priorityUser
  5029  00299A  20F4               	addwfc	prodh,w,c
  5030  00299C  6EDA               	movwf	fsr2h,c
  5031  00299E  0100               	movlb	0	; () banked
  5032  0029A0  5162               	movf	decrPriority@user& (0+255),w,b
  5033  0029A2  18DE               	xorwf	postinc2,w,c
  5034  0029A4  A4D8               	btfss	status,2,c
  5035  0029A6  D003               	goto	l3188
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;logic.c: 189: {
  5039                           ;logic.c: 190: modified = 1;
  5040  0029A8  0E01               	movlw	1
  5041  0029AA  0100               	movlb	0	; () banked
  5042  0029AC  6F63               	movwf	decrPriority@modified& (0+255),b
  5043  0029AE                     l3188:
  5044                           
  5045                           ; BSR set to: 0
  5046                           ;logic.c: 191: }
  5047                           ;logic.c: 192: if(modified == 1 && i < 12-1)
  5048  0029AE  0100               	movlb	0	; () banked
  5049  0029B0  0563               	decf	decrPriority@modified& (0+255),w,b
  5050  0029B2  A4D8               	btfss	status,2,c
  5051  0029B4  D022               	goto	l3194
  5052                           
  5053                           ; BSR set to: 0
  5054  0029B6  0E0B               	movlw	11
  5055  0029B8  0100               	movlb	0	; () banked
  5056  0029BA  6164               	cpfslt	decrPriority@i& (0+255),b
  5057  0029BC  D01E               	goto	l3194
  5058                           
  5059                           ; BSR set to: 0
  5060                           ;logic.c: 193: {
  5061                           ;logic.c: 194: priorityUser[i] = priorityUser[i+1];
  5062  0029BE  0100               	movlb	0	; () banked
  5063  0029C0  5164               	movf	decrPriority@i& (0+255),w,b
  5064  0029C2  0100               	movlb	0	; () banked
  5065  0029C4  6F60               	movwf	??_decrPriority& (0+255),b
  5066  0029C6  6B61               	clrf	(??_decrPriority+1)& (0+255),b
  5067  0029C8  0E01               	movlw	1
  5068  0029CA  0100               	movlb	0	; () banked
  5069  0029CC  2760               	addwf	??_decrPriority& (0+255),f,b
  5070  0029CE  0E00               	movlw	0
  5071  0029D0  2361               	addwfc	(??_decrPriority+1)& (0+255),f,b
  5072  0029D2  0EAF               	movlw	low _priorityUser
  5073  0029D4  0100               	movlb	0	; () banked
  5074  0029D6  2560               	addwf	??_decrPriority& (0+255),w,b
  5075  0029D8  6ED9               	movwf	fsr2l,c
  5076  0029DA  0E00               	movlw	high _priorityUser
  5077  0029DC  0100               	movlb	0	; () banked
  5078  0029DE  2161               	addwfc	(??_decrPriority+1)& (0+255),w,b
  5079  0029E0  6EDA               	movwf	fsr2h,c
  5080  0029E2  0100               	movlb	0	; () banked
  5081  0029E4  5164               	movf	decrPriority@i& (0+255),w,b
  5082  0029E6  0D01               	mullw	1
  5083  0029E8  0EAF               	movlw	low _priorityUser
  5084  0029EA  24F3               	addwf	prodl,w,c
  5085  0029EC  6EE1               	movwf	fsr1l,c
  5086  0029EE  0E00               	movlw	high _priorityUser
  5087  0029F0  20F4               	addwfc	prodh,w,c
  5088  0029F2  6EE2               	movwf	fsr1h,c
  5089  0029F4  CFDF FFE7          	movff	indf2,indf1
  5090                           
  5091                           ;logic.c: 195: }
  5092  0029F8  D014               	goto	l3200
  5093  0029FA                     l3194:
  5094                           
  5095                           ; BSR set to: 0
  5096                           ;logic.c: 196: else if(modified == 1 && i == 11)
  5097  0029FA  0100               	movlb	0	; () banked
  5098  0029FC  0563               	decf	decrPriority@modified& (0+255),w,b
  5099  0029FE  A4D8               	btfss	status,2,c
  5100  002A00  D010               	goto	l3200
  5101                           
  5102                           ; BSR set to: 0
  5103  002A02  0E0B               	movlw	11
  5104  002A04  0100               	movlb	0	; () banked
  5105  002A06  1964               	xorwf	decrPriority@i& (0+255),w,b
  5106  002A08  A4D8               	btfss	status,2,c
  5107  002A0A  D00B               	goto	l3200
  5108                           
  5109                           ; BSR set to: 0
  5110                           ;logic.c: 197: {
  5111                           ;logic.c: 198: priorityUser[i] = 255;
  5112  002A0C  0100               	movlb	0	; () banked
  5113  002A0E  5164               	movf	decrPriority@i& (0+255),w,b
  5114  002A10  0D01               	mullw	1
  5115  002A12  0EAF               	movlw	low _priorityUser
  5116  002A14  24F3               	addwf	prodl,w,c
  5117  002A16  6ED9               	movwf	fsr2l,c
  5118  002A18  0E00               	movlw	high _priorityUser
  5119  002A1A  20F4               	addwfc	prodh,w,c
  5120  002A1C  6EDA               	movwf	fsr2h,c
  5121  002A1E  0EFF               	movlw	255
  5122  002A20  6EDF               	movwf	indf2,c
  5123  002A22                     l3200:
  5124                           
  5125                           ; BSR set to: 0
  5126  002A22  0100               	movlb	0	; () banked
  5127  002A24  2B64               	incf	decrPriority@i& (0+255),f,b
  5128  002A26  D7AD               	goto	l3180
  5129  002A28                     l3204:
  5130                           
  5131                           ; BSR set to: 0
  5132                           ;logic.c: 199: }
  5133                           ;logic.c: 200: }
  5134                           ;logic.c: 202: if(modified==1)
  5135  002A28  0100               	movlb	0	; () banked
  5136  002A2A  0563               	decf	decrPriority@modified& (0+255),w,b
  5137  002A2C  A4D8               	btfss	status,2,c
  5138  002A2E  0012               	return	
  5139                           
  5140                           ; BSR set to: 0
  5141                           ;logic.c: 203: {
  5142                           ;logic.c: 204: numberWaitingUsers--;
  5143  002A30  065D               	decf	_numberWaitingUsers,f,c
  5144  002A32  0012               	return	
  5145  002A34                     __end_of_decrPriority:
  5146                           	opt stack 0
  5147                           tblptru	equ	0xFF8
  5148                           tblptrh	equ	0xFF7
  5149                           tblptrl	equ	0xFF6
  5150                           tablat	equ	0xFF5
  5151                           prodh	equ	0xFF4
  5152                           prodl	equ	0xFF3
  5153                           intcon	equ	0xFF2
  5154                           intcon2	equ	0xFF1
  5155                           intcon3	equ	0xFF0
  5156                           postinc0	equ	0xFEE
  5157                           wreg	equ	0xFE8
  5158                           indf1	equ	0xFE7
  5159                           postinc1	equ	0xFE6
  5160                           postdec1	equ	0xFE5
  5161                           fsr1h	equ	0xFE2
  5162                           fsr1l	equ	0xFE1
  5163                           indf2	equ	0xFDF
  5164                           postinc2	equ	0xFDE
  5165                           fsr2h	equ	0xFDA
  5166                           fsr2l	equ	0xFD9
  5167                           status	equ	0xFD8
  5168                           
  5169 ;; *************** function _Can_InBufferStatus *****************
  5170 ;; Defined at:
  5171 ;;		line 143 in file "can.c"
  5172 ;; Parameters:    Size  Location     Type
  5173 ;;		None
  5174 ;; Auto vars:     Size  Location     Type
  5175 ;;		None
  5176 ;; Return value:  Size  Location     Type
  5177 ;;                  1    wreg      unsigned char 
  5178 ;; Registers used:
  5179 ;;		wreg, status,2
  5180 ;; Tracked objects:
  5181 ;;		On entry : 0/0
  5182 ;;		On exit  : 0/0
  5183 ;;		Unchanged: 0/0
  5184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5189 ;;Total ram usage:        0 bytes
  5190 ;; Hardware stack levels used:    1
  5191 ;; Hardware stack levels required when called:    8
  5192 ;; This function calls:
  5193 ;;		Nothing
  5194 ;; This function is called by:
  5195 ;;		_main
  5196 ;; This function uses a non-reentrant model
  5197 ;;
  5198                           
  5199                           	psect	text17
  5200  00348A                     __ptext17:
  5201                           	opt stack 0
  5202  00348A                     _Can_InBufferStatus:
  5203                           	opt stack 22
  5204                           
  5205                           ;can.c: 145: return rxBufferCount;
  5206                           
  5207                           ; BSR set to: 0
  5208                           ;incstack = 0
  5209  00348A  5059               	movf	_rxBufferCount,w,c
  5210  00348C  0012               	return	
  5211  00348E                     __end_of_Can_InBufferStatus:
  5212                           	opt stack 0
  5213                           tblptru	equ	0xFF8
  5214                           tblptrh	equ	0xFF7
  5215                           tblptrl	equ	0xFF6
  5216                           tablat	equ	0xFF5
  5217                           prodh	equ	0xFF4
  5218                           prodl	equ	0xFF3
  5219                           intcon	equ	0xFF2
  5220                           intcon2	equ	0xFF1
  5221                           intcon3	equ	0xFF0
  5222                           postinc0	equ	0xFEE
  5223                           wreg	equ	0xFE8
  5224                           indf1	equ	0xFE7
  5225                           postinc1	equ	0xFE6
  5226                           postdec1	equ	0xFE5
  5227                           fsr1h	equ	0xFE2
  5228                           fsr1l	equ	0xFE1
  5229                           indf2	equ	0xFDF
  5230                           postinc2	equ	0xFDE
  5231                           fsr2h	equ	0xFDA
  5232                           fsr2l	equ	0xFD9
  5233                           status	equ	0xFD8
  5234                           
  5235 ;; *************** function _high_isr *****************
  5236 ;; Defined at:
  5237 ;;		line 5 in file "interrupt.c"
  5238 ;; Parameters:    Size  Location     Type
  5239 ;;		None
  5240 ;; Auto vars:     Size  Location     Type
  5241 ;;		None
  5242 ;; Return value:  Size  Location     Type
  5243 ;;                  1    wreg      void 
  5244 ;; Registers used:
  5245 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5246 ;; Tracked objects:
  5247 ;;		On entry : 0/0
  5248 ;;		On exit  : 0/0
  5249 ;;		Unchanged: 0/0
  5250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5253 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5254 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5255 ;;Total ram usage:       14 bytes
  5256 ;; Hardware stack levels used:    1
  5257 ;; Hardware stack levels required when called:    7
  5258 ;; This function calls:
  5259 ;;		_Can_Isr
  5260 ;;		_onTimeout
  5261 ;; This function is called by:
  5262 ;;		Interrupt level 2
  5263 ;; This function uses a non-reentrant model
  5264 ;;
  5265                           
  5266                           	psect	intcode
  5267  000008                     __pintcode:
  5268                           	opt stack 0
  5269  000008                     _high_isr:
  5270                           	opt stack 17
  5271                           
  5272                           ;incstack = 0
  5273  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5274  00000A  CFFA F04A          	movff	pclath,??_high_isr
  5275  00000E  CFFB F04B          	movff	pclatu,??_high_isr+1
  5276  000012  CFE9 F04C          	movff	fsr0l,??_high_isr+2
  5277  000016  CFEA F04D          	movff	fsr0h,??_high_isr+3
  5278  00001A  CFE1 F04E          	movff	fsr1l,??_high_isr+4
  5279  00001E  CFE2 F04F          	movff	fsr1h,??_high_isr+5
  5280  000022  CFD9 F050          	movff	fsr2l,??_high_isr+6
  5281  000026  CFDA F051          	movff	fsr2h,??_high_isr+7
  5282  00002A  CFF3 F052          	movff	prodl,??_high_isr+8
  5283  00002E  CFF4 F053          	movff	prodh,??_high_isr+9
  5284  000032  CFF6 F054          	movff	tblptrl,??_high_isr+10
  5285  000036  CFF7 F055          	movff	tblptrh,??_high_isr+11
  5286  00003A  CFF8 F056          	movff	tblptru,??_high_isr+12
  5287  00003E  CFF5 F057          	movff	tablat,??_high_isr+13
  5288                           
  5289                           ;interrupt.c: 6: if((INT3IF == 1)&&(INT3IE == 1))
  5290  000042  B4F0               	btfsc	intcon3,2,c	;volatile
  5291  000044  AAF0               	btfss	intcon3,5,c	;volatile
  5292  000046  D005               	goto	i2l288
  5293                           
  5294                           ;interrupt.c: 7: {
  5295                           ;interrupt.c: 8: INT3IF = 0;
  5296  000048  94F0               	bcf	intcon3,2,c	;volatile
  5297                           
  5298                           ;interrupt.c: 9: Can_Isr();
  5299  00004A  ECEA  F018         	call	_Can_Isr	;wreg free
  5300                           
  5301                           ;interrupt.c: 10: if(RB3 == 0)
  5302  00004E  A681               	btfss	3969,3,c	;volatile
  5303                           
  5304                           ;interrupt.c: 11: {
  5305                           ;interrupt.c: 12: INT3IF = 1;
  5306  000050  84F0               	bsf	intcon3,2,c	;volatile
  5307  000052                     i2l288:
  5308                           
  5309                           ;interrupt.c: 13: }
  5310                           ;interrupt.c: 14: }
  5311                           ;interrupt.c: 15: if(TMR0IF == 1){
  5312  000052  A4F2               	btfss	intcon,2,c	;volatile
  5313  000054  D009               	goto	i2l291
  5314                           
  5315                           ;interrupt.c: 17: T0CONbits.TMR0ON = 1;
  5316  000056  8ED5               	bsf	4053,7,c	;volatile
  5317                           
  5318                           ;interrupt.c: 20: onTimeout();
  5319  000058  ECA8  F019         	call	_onTimeout	;wreg free
  5320                           
  5321                           ;interrupt.c: 23: TMR0IF = 0;
  5322  00005C  94F2               	bcf	intcon,2,c	;volatile
  5323                           
  5324                           ;interrupt.c: 24: TMR0 = 0xe17b;
  5325  00005E  0EE1               	movlw	225
  5326  000060  6ED7               	movwf	4055,c	;volatile
  5327  000062  0E7B               	movlw	123
  5328  000064  6ED6               	movwf	4054,c	;volatile
  5329                           
  5330                           ;interrupt.c: 25: T0CONbits.TMR0ON = 1;
  5331  000066  8ED5               	bsf	4053,7,c	;volatile
  5332  000068                     i2l291:
  5333  000068  C057  FFF5         	movff	??_high_isr+13,tablat
  5334  00006C  C056  FFF8         	movff	??_high_isr+12,tblptru
  5335  000070  C055  FFF7         	movff	??_high_isr+11,tblptrh
  5336  000074  C054  FFF6         	movff	??_high_isr+10,tblptrl
  5337  000078  C053  FFF4         	movff	??_high_isr+9,prodh
  5338  00007C  C052  FFF3         	movff	??_high_isr+8,prodl
  5339  000080  C051  FFDA         	movff	??_high_isr+7,fsr2h
  5340  000084  C050  FFD9         	movff	??_high_isr+6,fsr2l
  5341  000088  C04F  FFE2         	movff	??_high_isr+5,fsr1h
  5342  00008C  C04E  FFE1         	movff	??_high_isr+4,fsr1l
  5343  000090  C04D  FFEA         	movff	??_high_isr+3,fsr0h
  5344  000094  C04C  FFE9         	movff	??_high_isr+2,fsr0l
  5345  000098  C04B  FFFB         	movff	??_high_isr+1,pclatu
  5346  00009C  C04A  FFFA         	movff	??_high_isr,pclath
  5347  0000A0  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5348  0000A2  0011               	retfie		f
  5349  0000A4                     __end_of_high_isr:
  5350                           	opt stack 0
  5351                           pclatu	equ	0xFFB
  5352                           pclath	equ	0xFFA
  5353                           tblptru	equ	0xFF8
  5354                           tblptrh	equ	0xFF7
  5355                           tblptrl	equ	0xFF6
  5356                           tablat	equ	0xFF5
  5357                           prodh	equ	0xFF4
  5358                           prodl	equ	0xFF3
  5359                           intcon	equ	0xFF2
  5360                           intcon2	equ	0xFF1
  5361                           intcon3	equ	0xFF0
  5362                           postinc0	equ	0xFEE
  5363                           fsr0h	equ	0xFEA
  5364                           fsr0l	equ	0xFE9
  5365                           wreg	equ	0xFE8
  5366                           indf1	equ	0xFE7
  5367                           postinc1	equ	0xFE6
  5368                           postdec1	equ	0xFE5
  5369                           fsr1h	equ	0xFE2
  5370                           fsr1l	equ	0xFE1
  5371                           indf2	equ	0xFDF
  5372                           postinc2	equ	0xFDE
  5373                           fsr2h	equ	0xFDA
  5374                           fsr2l	equ	0xFD9
  5375                           status	equ	0xFD8
  5376                           
  5377 ;; *************** function _onTimeout *****************
  5378 ;; Defined at:
  5379 ;;		line 140 in file "logic.c"
  5380 ;; Parameters:    Size  Location     Type
  5381 ;;		None
  5382 ;; Auto vars:     Size  Location     Type
  5383 ;;  i               1   18[COMRAM] unsigned char 
  5384 ;; Return value:  Size  Location     Type
  5385 ;;                  1    wreg      void 
  5386 ;; Registers used:
  5387 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5388 ;; Tracked objects:
  5389 ;;		On entry : 0/0
  5390 ;;		On exit  : 0/0
  5391 ;;		Unchanged: 0/0
  5392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5394 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5396 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5397 ;;Total ram usage:        1 bytes
  5398 ;; Hardware stack levels used:    1
  5399 ;; Hardware stack levels required when called:    4
  5400 ;; This function calls:
  5401 ;;		_firstRound
  5402 ;;		_secondRound
  5403 ;; This function is called by:
  5404 ;;		_high_isr
  5405 ;; This function uses a non-reentrant model
  5406 ;;
  5407                           
  5408                           	psect	text19
  5409  003350                     __ptext19:
  5410                           	opt stack 0
  5411  003350                     _onTimeout:
  5412                           	opt stack 19
  5413                           
  5414                           ;logic.c: 142: for(uint8_t i = 0; i < 12; i++)
  5415                           
  5416                           ;incstack = 0
  5417  003350  0E00               	movlw	0
  5418  003352  6E13               	movwf	onTimeout@i,c
  5419  003354                     i2l3244:
  5420  003354  0E0B               	movlw	11
  5421  003356  6413               	cpfsgt	onTimeout@i,c
  5422  003358  D001               	goto	i2l3248
  5423  00335A  D00B               	goto	i2l3254
  5424  00335C                     i2l3248:
  5425                           
  5426                           ;logic.c: 143: {
  5427                           ;logic.c: 144: durationLights[i] += 1;
  5428  00335C  5013               	movf	onTimeout@i,w,c
  5429  00335E  0D01               	mullw	1
  5430  003360  0E18               	movlw	low _durationLights
  5431  003362  24F3               	addwf	prodl,w,c
  5432  003364  6ED9               	movwf	fsr2l,c
  5433  003366  0E01               	movlw	high _durationLights
  5434  003368  20F4               	addwfc	prodh,w,c
  5435  00336A  6EDA               	movwf	fsr2h,c
  5436  00336C  2ADF               	incf	indf2,f,c
  5437  00336E  2A13               	incf	onTimeout@i,f,c
  5438  003370  D7F1               	goto	i2l3244
  5439  003372                     i2l3254:
  5440                           
  5441                           ;logic.c: 145: }
  5442                           ;logic.c: 146: firstRound();
  5443  003372  ECBB  F013         	call	_firstRound	;wreg free
  5444                           
  5445                           ;logic.c: 147: secondRound();
  5446  003376  ECF9  F00F         	call	_secondRound	;wreg free
  5447  00337A  0012               	return		;funcret
  5448  00337C                     __end_of_onTimeout:
  5449                           	opt stack 0
  5450                           pclatu	equ	0xFFB
  5451                           pclath	equ	0xFFA
  5452                           tblptru	equ	0xFF8
  5453                           tblptrh	equ	0xFF7
  5454                           tblptrl	equ	0xFF6
  5455                           tablat	equ	0xFF5
  5456                           prodh	equ	0xFF4
  5457                           prodl	equ	0xFF3
  5458                           intcon	equ	0xFF2
  5459                           intcon2	equ	0xFF1
  5460                           intcon3	equ	0xFF0
  5461                           postinc0	equ	0xFEE
  5462                           fsr0h	equ	0xFEA
  5463                           fsr0l	equ	0xFE9
  5464                           wreg	equ	0xFE8
  5465                           indf1	equ	0xFE7
  5466                           postinc1	equ	0xFE6
  5467                           postdec1	equ	0xFE5
  5468                           fsr1h	equ	0xFE2
  5469                           fsr1l	equ	0xFE1
  5470                           indf2	equ	0xFDF
  5471                           postinc2	equ	0xFDE
  5472                           fsr2h	equ	0xFDA
  5473                           fsr2l	equ	0xFD9
  5474                           status	equ	0xFD8
  5475                           
  5476 ;; *************** function _secondRound *****************
  5477 ;; Defined at:
  5478 ;;		line 81 in file "logic.c"
  5479 ;; Parameters:    Size  Location     Type
  5480 ;;		None
  5481 ;; Auto vars:     Size  Location     Type
  5482 ;;  conflict        1   15[COMRAM] unsigned char 
  5483 ;;  j               1   16[COMRAM] unsigned char 
  5484 ;;  waitingUser     1   17[COMRAM] unsigned char 
  5485 ;;  i               1   14[COMRAM] unsigned char 
  5486 ;; Return value:  Size  Location     Type
  5487 ;;                  1    wreg      void 
  5488 ;; Registers used:
  5489 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5490 ;; Tracked objects:
  5491 ;;		On entry : 0/0
  5492 ;;		On exit  : 0/0
  5493 ;;		Unchanged: 0/0
  5494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5496 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5497 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5498 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5499 ;;Total ram usage:        5 bytes
  5500 ;; Hardware stack levels used:    1
  5501 ;; Hardware stack levels required when called:    3
  5502 ;; This function calls:
  5503 ;;		_getConflict
  5504 ;;		_setLight
  5505 ;;		_setWarningLight
  5506 ;;		_shiftPriority
  5507 ;; This function is called by:
  5508 ;;		_onTimeout
  5509 ;; This function uses a non-reentrant model
  5510 ;;
  5511                           
  5512                           	psect	text20
  5513  001FF2                     __ptext20:
  5514                           	opt stack 0
  5515  001FF2                     _secondRound:
  5516                           	opt stack 19
  5517                           
  5518                           ;logic.c: 84: for(uint8_t i = 0; i < numberWaitingUsers; i++)
  5519                           
  5520                           ;incstack = 0
  5521  001FF2  0E00               	movlw	0
  5522  001FF4  6E0F               	movwf	secondRound@i,c
  5523  001FF6  D0B6               	goto	i2l3080
  5524  001FF8                     i2l3030:
  5525                           
  5526                           ;logic.c: 85: {
  5527                           ;logic.c: 87: uint8_t waitingUser = priorityUser[i];
  5528  001FF8  500F               	movf	secondRound@i,w,c
  5529  001FFA  0D01               	mullw	1
  5530  001FFC  0EAF               	movlw	low _priorityUser
  5531  001FFE  24F3               	addwf	prodl,w,c
  5532  002000  6ED9               	movwf	fsr2l,c
  5533  002002  0E00               	movlw	high _priorityUser
  5534  002004  20F4               	addwfc	prodh,w,c
  5535  002006  6EDA               	movwf	fsr2h,c
  5536  002008  50DF               	movf	indf2,w,c
  5537  00200A  6E12               	movwf	secondRound@waitingUser,c
  5538                           
  5539                           ;logic.c: 90: for(uint8_t j = 0; j < 12; j++)
  5540  00200C  0E00               	movlw	0
  5541  00200E  6E11               	movwf	secondRound@j,c
  5542  002010                     i2l3034:
  5543  002010  0E0B               	movlw	11
  5544  002012  6411               	cpfsgt	secondRound@j,c
  5545  002014  D001               	goto	i2l3038
  5546  002016  D0A5               	goto	i2l3078
  5547  002018                     i2l3038:
  5548                           
  5549                           ;logic.c: 91: {
  5550                           ;logic.c: 93: uint8_t conflict = getConflict(waitingUser, j);
  5551  002018  C011  F001         	movff	secondRound@j,getConflict@carPersonToLookAt
  5552  00201C  5012               	movf	secondRound@waitingUser,w,c
  5553  00201E  ECD3  F019         	call	_getConflict
  5554  002022  6E10               	movwf	secondRound@conflict,c
  5555                           
  5556                           ;logic.c: 96: if(conflict == 0)
  5557  002024  5010               	movf	secondRound@conflict,w,c
  5558  002026  A4D8               	btfss	status,2,c
  5559  002028  D01D               	goto	i2l3048
  5560                           
  5561                           ;logic.c: 97: {
  5562                           ;logic.c: 98: if( colorLights[waitingUser] == 0 && durationLights[waitingUser] == 2)
  5563  00202A  5012               	movf	secondRound@waitingUser,w,c
  5564  00202C  0D01               	mullw	1
  5565  00202E  0E0C               	movlw	low _colorLights
  5566  002030  24F3               	addwf	prodl,w,c
  5567  002032  6ED9               	movwf	fsr2l,c
  5568  002034  0E01               	movlw	high _colorLights
  5569  002036  20F4               	addwfc	prodh,w,c
  5570  002038  6EDA               	movwf	fsr2h,c
  5571  00203A  50DF               	movf	indf2,w,c
  5572  00203C  A4D8               	btfss	status,2,c
  5573  00203E  D08F               	goto	i2l3074
  5574  002040  5012               	movf	secondRound@waitingUser,w,c
  5575  002042  0D01               	mullw	1
  5576  002044  0E18               	movlw	low _durationLights
  5577  002046  24F3               	addwf	prodl,w,c
  5578  002048  6ED9               	movwf	fsr2l,c
  5579  00204A  0E01               	movlw	high _durationLights
  5580  00204C  20F4               	addwfc	prodh,w,c
  5581  00204E  6EDA               	movwf	fsr2h,c
  5582  002050  0E02               	movlw	2
  5583  002052  18DE               	xorwf	postinc2,w,c
  5584  002054  A4D8               	btfss	status,2,c
  5585  002056  D083               	goto	i2l3074
  5586                           
  5587                           ;logic.c: 99: {
  5588                           ;logic.c: 101: setLight(waitingUser, 3);
  5589  002058  0E03               	movlw	3
  5590  00205A  6E0A               	movwf	setLight@color,c
  5591  00205C  5012               	movf	secondRound@waitingUser,w,c
  5592  00205E  EC94  F018         	call	_setLight
  5593                           
  5594                           ;logic.c: 102: }
  5595                           ;logic.c: 103: }
  5596  002062  D07D               	goto	i2l3074
  5597  002064                     i2l3048:
  5598                           
  5599                           ;logic.c: 106: else if(conflict == 2)
  5600  002064  0E02               	movlw	2
  5601  002066  1810               	xorwf	secondRound@conflict,w,c
  5602  002068  A4D8               	btfss	status,2,c
  5603  00206A  D023               	goto	i2l3056
  5604                           
  5605                           ;logic.c: 107: {
  5606                           ;logic.c: 108: if(colorLights[waitingUser] == 0 && durationLights[waitingUser] == 2)
  5607  00206C  5012               	movf	secondRound@waitingUser,w,c
  5608  00206E  0D01               	mullw	1
  5609  002070  0E0C               	movlw	low _colorLights
  5610  002072  24F3               	addwf	prodl,w,c
  5611  002074  6ED9               	movwf	fsr2l,c
  5612  002076  0E01               	movlw	high _colorLights
  5613  002078  20F4               	addwfc	prodh,w,c
  5614  00207A  6EDA               	movwf	fsr2h,c
  5615  00207C  50DF               	movf	indf2,w,c
  5616  00207E  A4D8               	btfss	status,2,c
  5617  002080  D06E               	goto	i2l3074
  5618  002082  5012               	movf	secondRound@waitingUser,w,c
  5619  002084  0D01               	mullw	1
  5620  002086  0E18               	movlw	low _durationLights
  5621  002088  24F3               	addwf	prodl,w,c
  5622  00208A  6ED9               	movwf	fsr2l,c
  5623  00208C  0E01               	movlw	high _durationLights
  5624  00208E  20F4               	addwfc	prodh,w,c
  5625  002090  6EDA               	movwf	fsr2h,c
  5626  002092  0E02               	movlw	2
  5627  002094  18DE               	xorwf	postinc2,w,c
  5628  002096  A4D8               	btfss	status,2,c
  5629  002098  D062               	goto	i2l3074
  5630                           
  5631                           ;logic.c: 109: {
  5632                           ;logic.c: 111: setWarningLight(j-8, 1);
  5633  00209A  0E01               	movlw	1
  5634  00209C  6E0C               	movwf	setWarningLight@state,c
  5635  00209E  5011               	movf	secondRound@j,w,c
  5636  0020A0  0FF8               	addlw	248
  5637  0020A2  EC3B  F01A         	call	_setWarningLight
  5638                           
  5639                           ;logic.c: 114: setLight(waitingUser, 3);
  5640  0020A6  0E03               	movlw	3
  5641  0020A8  6E0A               	movwf	setLight@color,c
  5642  0020AA  5012               	movf	secondRound@waitingUser,w,c
  5643  0020AC  EC94  F018         	call	_setLight
  5644                           
  5645                           ;logic.c: 116: }
  5646                           ;logic.c: 117: }
  5647  0020B0  D056               	goto	i2l3074
  5648  0020B2                     i2l3056:
  5649                           
  5650                           ;logic.c: 120: else if(conflict == 1)
  5651  0020B2  0410               	decf	secondRound@conflict,w,c
  5652  0020B4  A4D8               	btfss	status,2,c
  5653  0020B6  D053               	goto	i2l3074
  5654                           
  5655                           ;logic.c: 121: {
  5656                           ;logic.c: 123: if(colorLights[j] == 2 && durationLights[j] == 4)
  5657  0020B8  5011               	movf	secondRound@j,w,c
  5658  0020BA  0D01               	mullw	1
  5659  0020BC  0E0C               	movlw	low _colorLights
  5660  0020BE  24F3               	addwf	prodl,w,c
  5661  0020C0  6ED9               	movwf	fsr2l,c
  5662  0020C2  0E01               	movlw	high _colorLights
  5663  0020C4  20F4               	addwfc	prodh,w,c
  5664  0020C6  6EDA               	movwf	fsr2h,c
  5665  0020C8  0E02               	movlw	2
  5666  0020CA  18DE               	xorwf	postinc2,w,c
  5667  0020CC  A4D8               	btfss	status,2,c
  5668  0020CE  D014               	goto	i2l3064
  5669  0020D0  5011               	movf	secondRound@j,w,c
  5670  0020D2  0D01               	mullw	1
  5671  0020D4  0E18               	movlw	low _durationLights
  5672  0020D6  24F3               	addwf	prodl,w,c
  5673  0020D8  6ED9               	movwf	fsr2l,c
  5674  0020DA  0E01               	movlw	high _durationLights
  5675  0020DC  20F4               	addwfc	prodh,w,c
  5676  0020DE  6EDA               	movwf	fsr2h,c
  5677  0020E0  0E04               	movlw	4
  5678  0020E2  18DE               	xorwf	postinc2,w,c
  5679  0020E4  A4D8               	btfss	status,2,c
  5680  0020E6  D008               	goto	i2l3064
  5681                           
  5682                           ;logic.c: 124: {
  5683                           ;logic.c: 126: setLight(j, 1);
  5684  0020E8  0E01               	movlw	1
  5685  0020EA  6E0A               	movwf	setLight@color,c
  5686  0020EC  5011               	movf	secondRound@j,w,c
  5687  0020EE  EC94  F018         	call	_setLight
  5688                           
  5689                           ;logic.c: 127: shiftPriority();
  5690  0020F2  ECC2  F015         	call	_shiftPriority	;wreg free
  5691                           
  5692                           ;logic.c: 128: }
  5693  0020F6  D033               	goto	i2l3074
  5694  0020F8                     i2l3064:
  5695                           
  5696                           ;logic.c: 130: else if(colorLights[j] == 0 && durationLights[j] == 2 && colorLights[wait
      +                          ingUser] == 0 && durationLights[waitingUser] == 2)
  5697  0020F8  5011               	movf	secondRound@j,w,c
  5698  0020FA  0D01               	mullw	1
  5699  0020FC  0E0C               	movlw	low _colorLights
  5700  0020FE  24F3               	addwf	prodl,w,c
  5701  002100  6ED9               	movwf	fsr2l,c
  5702  002102  0E01               	movlw	high _colorLights
  5703  002104  20F4               	addwfc	prodh,w,c
  5704  002106  6EDA               	movwf	fsr2h,c
  5705  002108  50DF               	movf	indf2,w,c
  5706  00210A  A4D8               	btfss	status,2,c
  5707  00210C  D028               	goto	i2l3074
  5708  00210E  5011               	movf	secondRound@j,w,c
  5709  002110  0D01               	mullw	1
  5710  002112  0E18               	movlw	low _durationLights
  5711  002114  24F3               	addwf	prodl,w,c
  5712  002116  6ED9               	movwf	fsr2l,c
  5713  002118  0E01               	movlw	high _durationLights
  5714  00211A  20F4               	addwfc	prodh,w,c
  5715  00211C  6EDA               	movwf	fsr2h,c
  5716  00211E  0E02               	movlw	2
  5717  002120  18DE               	xorwf	postinc2,w,c
  5718  002122  A4D8               	btfss	status,2,c
  5719  002124  D01C               	goto	i2l3074
  5720  002126  5012               	movf	secondRound@waitingUser,w,c
  5721  002128  0D01               	mullw	1
  5722  00212A  0E0C               	movlw	low _colorLights
  5723  00212C  24F3               	addwf	prodl,w,c
  5724  00212E  6ED9               	movwf	fsr2l,c
  5725  002130  0E01               	movlw	high _colorLights
  5726  002132  20F4               	addwfc	prodh,w,c
  5727  002134  6EDA               	movwf	fsr2h,c
  5728  002136  50DF               	movf	indf2,w,c
  5729  002138  A4D8               	btfss	status,2,c
  5730  00213A  D011               	goto	i2l3074
  5731  00213C  5012               	movf	secondRound@waitingUser,w,c
  5732  00213E  0D01               	mullw	1
  5733  002140  0E18               	movlw	low _durationLights
  5734  002142  24F3               	addwf	prodl,w,c
  5735  002144  6ED9               	movwf	fsr2l,c
  5736  002146  0E01               	movlw	high _durationLights
  5737  002148  20F4               	addwfc	prodh,w,c
  5738  00214A  6EDA               	movwf	fsr2h,c
  5739  00214C  0E02               	movlw	2
  5740  00214E  18DE               	xorwf	postinc2,w,c
  5741  002150  A4D8               	btfss	status,2,c
  5742  002152  D005               	goto	i2l3074
  5743                           
  5744                           ;logic.c: 131: {
  5745                           ;logic.c: 133: setLight(waitingUser, 3);
  5746  002154  0E03               	movlw	3
  5747  002156  6E0A               	movwf	setLight@color,c
  5748  002158  5012               	movf	secondRound@waitingUser,w,c
  5749  00215A  EC94  F018         	call	_setLight
  5750  00215E                     i2l3074:
  5751  00215E  2A11               	incf	secondRound@j,f,c
  5752  002160  D757               	goto	i2l3034
  5753  002162                     i2l3078:
  5754  002162  2A0F               	incf	secondRound@i,f,c
  5755  002164                     i2l3080:
  5756  002164  505D               	movf	_numberWaitingUsers,w,c
  5757  002166  5C0F               	subwf	secondRound@i,w,c
  5758  002168  B0D8               	btfsc	status,0,c
  5759  00216A  0012               	return	
  5760  00216C  D745               	goto	i2l3030
  5761  00216E                     __end_of_secondRound:
  5762                           	opt stack 0
  5763                           pclatu	equ	0xFFB
  5764                           pclath	equ	0xFFA
  5765                           tblptru	equ	0xFF8
  5766                           tblptrh	equ	0xFF7
  5767                           tblptrl	equ	0xFF6
  5768                           tablat	equ	0xFF5
  5769                           prodh	equ	0xFF4
  5770                           prodl	equ	0xFF3
  5771                           intcon	equ	0xFF2
  5772                           intcon2	equ	0xFF1
  5773                           intcon3	equ	0xFF0
  5774                           postinc0	equ	0xFEE
  5775                           fsr0h	equ	0xFEA
  5776                           fsr0l	equ	0xFE9
  5777                           wreg	equ	0xFE8
  5778                           indf1	equ	0xFE7
  5779                           postinc1	equ	0xFE6
  5780                           postdec1	equ	0xFE5
  5781                           fsr1h	equ	0xFE2
  5782                           fsr1l	equ	0xFE1
  5783                           indf2	equ	0xFDF
  5784                           postinc2	equ	0xFDE
  5785                           fsr2h	equ	0xFDA
  5786                           fsr2l	equ	0xFD9
  5787                           status	equ	0xFD8
  5788                           
  5789 ;; *************** function _shiftPriority *****************
  5790 ;; Defined at:
  5791 ;;		line 208 in file "logic.c"
  5792 ;; Parameters:    Size  Location     Type
  5793 ;;		None
  5794 ;; Auto vars:     Size  Location     Type
  5795 ;;  i               1    8[COMRAM] unsigned char 
  5796 ;;  temp            1    7[COMRAM] unsigned char 
  5797 ;; Return value:  Size  Location     Type
  5798 ;;                  1    wreg      void 
  5799 ;; Registers used:
  5800 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5801 ;; Tracked objects:
  5802 ;;		On entry : 0/0
  5803 ;;		On exit  : 0/0
  5804 ;;		Unchanged: 0/0
  5805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5807 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5808 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5809 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5810 ;;Total ram usage:        9 bytes
  5811 ;; Hardware stack levels used:    1
  5812 ;; This function calls:
  5813 ;;		Nothing
  5814 ;; This function is called by:
  5815 ;;		_secondRound
  5816 ;; This function uses a non-reentrant model
  5817 ;;
  5818                           
  5819                           	psect	text21
  5820  002B84                     __ptext21:
  5821                           	opt stack 0
  5822  002B84                     _shiftPriority:
  5823                           	opt stack 21
  5824                           
  5825                           ;logic.c: 210: uint8_t temp = priorityUser[0];
  5826                           
  5827                           ;incstack = 0
  5828  002B84  C0AF  F008         	movff	_priorityUser,shiftPriority@temp
  5829                           
  5830                           ;logic.c: 211: for(uint8_t i = 0; i < numberWaitingUsers-1; i++)
  5831  002B88  0E00               	movlw	0
  5832  002B8A  6E09               	movwf	shiftPriority@i,c
  5833  002B8C  D018               	goto	i2l2898
  5834  002B8E                     i2l2894:
  5835                           
  5836                           ;logic.c: 212: {
  5837                           ;logic.c: 213: priorityUser[i] = priorityUser[i+1];
  5838  002B8E  5009               	movf	shiftPriority@i,w,c
  5839  002B90  6E01               	movwf	??_shiftPriority& (0+255),c
  5840  002B92  6A02               	clrf	(??_shiftPriority+1)& (0+255),c
  5841  002B94  0E01               	movlw	1
  5842  002B96  2601               	addwf	??_shiftPriority,f,c
  5843  002B98  0E00               	movlw	0
  5844  002B9A  2202               	addwfc	??_shiftPriority+1,f,c
  5845  002B9C  0EAF               	movlw	low _priorityUser
  5846  002B9E  2401               	addwf	??_shiftPriority,w,c
  5847  002BA0  6ED9               	movwf	fsr2l,c
  5848  002BA2  0E00               	movlw	high _priorityUser
  5849  002BA4  2002               	addwfc	??_shiftPriority+1,w,c
  5850  002BA6  6EDA               	movwf	fsr2h,c
  5851  002BA8  5009               	movf	shiftPriority@i,w,c
  5852  002BAA  0D01               	mullw	1
  5853  002BAC  0EAF               	movlw	low _priorityUser
  5854  002BAE  24F3               	addwf	prodl,w,c
  5855  002BB0  6EE1               	movwf	fsr1l,c
  5856  002BB2  0E00               	movlw	high _priorityUser
  5857  002BB4  20F4               	addwfc	prodh,w,c
  5858  002BB6  6EE2               	movwf	fsr1h,c
  5859  002BB8  CFDF FFE7          	movff	indf2,indf1
  5860  002BBC  2A09               	incf	shiftPriority@i,f,c
  5861  002BBE                     i2l2898:
  5862  002BBE  0EFF               	movlw	255
  5863  002BC0  6E01               	movwf	??_shiftPriority& (0+255),c
  5864  002BC2  0EFF               	movlw	255
  5865  002BC4  6E02               	movwf	(??_shiftPriority+1)& (0+255),c
  5866  002BC6  505D               	movf	_numberWaitingUsers,w,c
  5867  002BC8  6E03               	movwf	(??_shiftPriority+2)& (0+255),c
  5868  002BCA  6A04               	clrf	(??_shiftPriority+3)& (0+255),c
  5869  002BCC  5001               	movf	??_shiftPriority,w,c
  5870  002BCE  2603               	addwf	??_shiftPriority+2,f,c
  5871  002BD0  5002               	movf	??_shiftPriority+1,w,c
  5872  002BD2  2204               	addwfc	??_shiftPriority+3,f,c
  5873  002BD4  5009               	movf	shiftPriority@i,w,c
  5874  002BD6  6E05               	movwf	(??_shiftPriority+4)& (0+255),c
  5875  002BD8  6A06               	clrf	(??_shiftPriority+5)& (0+255),c
  5876  002BDA  5003               	movf	??_shiftPriority+2,w,c
  5877  002BDC  5C05               	subwf	??_shiftPriority+4,w,c
  5878  002BDE  5006               	movf	??_shiftPriority+5,w,c
  5879  002BE0  0A80               	xorlw	128
  5880  002BE2  6E07               	movwf	(??_shiftPriority+6)& (0+255),c
  5881  002BE4  5004               	movf	??_shiftPriority+3,w,c
  5882  002BE6  0A80               	xorlw	128
  5883  002BE8  5807               	subwfb	(??_shiftPriority+6)& (0+255),w,c
  5884  002BEA  A0D8               	btfss	status,0,c
  5885  002BEC  D7D0               	goto	i2l2894
  5886                           
  5887                           ;logic.c: 214: }
  5888                           ;logic.c: 215: priorityUser[numberWaitingUsers-1] = temp;
  5889  002BEE  0EFF               	movlw	255
  5890  002BF0  6E01               	movwf	??_shiftPriority& (0+255),c
  5891  002BF2  0EFF               	movlw	255
  5892  002BF4  6E02               	movwf	(??_shiftPriority+1)& (0+255),c
  5893  002BF6  505D               	movf	_numberWaitingUsers,w,c
  5894  002BF8  6E03               	movwf	(??_shiftPriority+2)& (0+255),c
  5895  002BFA  6A04               	clrf	(??_shiftPriority+3)& (0+255),c
  5896  002BFC  5001               	movf	??_shiftPriority,w,c
  5897  002BFE  2603               	addwf	??_shiftPriority+2,f,c
  5898  002C00  5002               	movf	??_shiftPriority+1,w,c
  5899  002C02  2204               	addwfc	??_shiftPriority+3,f,c
  5900  002C04  0EAF               	movlw	low _priorityUser
  5901  002C06  2403               	addwf	??_shiftPriority+2,w,c
  5902  002C08  6ED9               	movwf	fsr2l,c
  5903  002C0A  0E00               	movlw	high _priorityUser
  5904  002C0C  2004               	addwfc	??_shiftPriority+3,w,c
  5905  002C0E  6EDA               	movwf	fsr2h,c
  5906  002C10  C008  FFDF         	movff	shiftPriority@temp,indf2
  5907  002C14  0012               	return		;funcret
  5908  002C16                     __end_of_shiftPriority:
  5909                           	opt stack 0
  5910                           pclatu	equ	0xFFB
  5911                           pclath	equ	0xFFA
  5912                           tblptru	equ	0xFF8
  5913                           tblptrh	equ	0xFF7
  5914                           tblptrl	equ	0xFF6
  5915                           tablat	equ	0xFF5
  5916                           prodh	equ	0xFF4
  5917                           prodl	equ	0xFF3
  5918                           intcon	equ	0xFF2
  5919                           intcon2	equ	0xFF1
  5920                           intcon3	equ	0xFF0
  5921                           postinc0	equ	0xFEE
  5922                           fsr0h	equ	0xFEA
  5923                           fsr0l	equ	0xFE9
  5924                           wreg	equ	0xFE8
  5925                           indf1	equ	0xFE7
  5926                           postinc1	equ	0xFE6
  5927                           postdec1	equ	0xFE5
  5928                           fsr1h	equ	0xFE2
  5929                           fsr1l	equ	0xFE1
  5930                           indf2	equ	0xFDF
  5931                           postinc2	equ	0xFDE
  5932                           fsr2h	equ	0xFDA
  5933                           fsr2l	equ	0xFD9
  5934                           status	equ	0xFD8
  5935                           
  5936 ;; *************** function _setWarningLight *****************
  5937 ;; Defined at:
  5938 ;;		line 166 in file "logic.c"
  5939 ;; Parameters:    Size  Location     Type
  5940 ;;  light           1    wreg     unsigned char 
  5941 ;;  state           1   11[COMRAM] unsigned char 
  5942 ;; Auto vars:     Size  Location     Type
  5943 ;;  light           1   12[COMRAM] unsigned char 
  5944 ;; Return value:  Size  Location     Type
  5945 ;;                  1    wreg      void 
  5946 ;; Registers used:
  5947 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5948 ;; Tracked objects:
  5949 ;;		On entry : 0/0
  5950 ;;		On exit  : 0/0
  5951 ;;		Unchanged: 0/0
  5952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5953 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5954 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5956 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5957 ;;Total ram usage:        2 bytes
  5958 ;; Hardware stack levels used:    1
  5959 ;; Hardware stack levels required when called:    2
  5960 ;; This function calls:
  5961 ;;		_sendWarningLight
  5962 ;; This function is called by:
  5963 ;;		_secondRound
  5964 ;; This function uses a non-reentrant model
  5965 ;;
  5966                           
  5967                           	psect	text22
  5968  003476                     __ptext22:
  5969                           	opt stack 0
  5970  003476                     _setWarningLight:
  5971                           	opt stack 19
  5972                           
  5973                           ;incstack = 0
  5974                           ;setWarningLight@light stored from wreg
  5975  003476  6E0D               	movwf	setWarningLight@light,c
  5976                           
  5977                           ;logic.c: 169: sendWarningLight(light,state);
  5978  003478  C00C  F006         	movff	setWarningLight@state,sendWarningLight@state
  5979  00347C  500D               	movf	setWarningLight@light,w,c
  5980  00347E  ECA7  F017         	call	_sendWarningLight
  5981  003482  0012               	return		;funcret
  5982  003484                     __end_of_setWarningLight:
  5983                           	opt stack 0
  5984                           pclatu	equ	0xFFB
  5985                           pclath	equ	0xFFA
  5986                           tblptru	equ	0xFF8
  5987                           tblptrh	equ	0xFF7
  5988                           tblptrl	equ	0xFF6
  5989                           tablat	equ	0xFF5
  5990                           prodh	equ	0xFF4
  5991                           prodl	equ	0xFF3
  5992                           intcon	equ	0xFF2
  5993                           intcon2	equ	0xFF1
  5994                           intcon3	equ	0xFF0
  5995                           postinc0	equ	0xFEE
  5996                           fsr0h	equ	0xFEA
  5997                           fsr0l	equ	0xFE9
  5998                           wreg	equ	0xFE8
  5999                           indf1	equ	0xFE7
  6000                           postinc1	equ	0xFE6
  6001                           postdec1	equ	0xFE5
  6002                           fsr1h	equ	0xFE2
  6003                           fsr1l	equ	0xFE1
  6004                           indf2	equ	0xFDF
  6005                           postinc2	equ	0xFDE
  6006                           fsr2h	equ	0xFDA
  6007                           fsr2l	equ	0xFD9
  6008                           status	equ	0xFD8
  6009                           
  6010 ;; *************** function _sendWarningLight *****************
  6011 ;; Defined at:
  6012 ;;		line 115 in file "function.c"
  6013 ;; Parameters:    Size  Location     Type
  6014 ;;  trafficLight    1    wreg     unsigned char 
  6015 ;;  state           1    5[COMRAM] unsigned char 
  6016 ;; Auto vars:     Size  Location     Type
  6017 ;;  trafficLight    1   10[COMRAM] unsigned char 
  6018 ;; Return value:  Size  Location     Type
  6019 ;;                  1    wreg      void 
  6020 ;; Registers used:
  6021 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6022 ;; Tracked objects:
  6023 ;;		On entry : 0/0
  6024 ;;		On exit  : 0/0
  6025 ;;		Unchanged: 0/0
  6026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6027 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6028 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6029 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6030 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6031 ;;Total ram usage:        6 bytes
  6032 ;; Hardware stack levels used:    1
  6033 ;; Hardware stack levels required when called:    1
  6034 ;; This function calls:
  6035 ;;		i2_Can_PutMessage
  6036 ;; This function is called by:
  6037 ;;		_setWarningLight
  6038 ;; This function uses a non-reentrant model
  6039 ;;
  6040                           
  6041                           	psect	text23
  6042  002F4E                     __ptext23:
  6043                           	opt stack 0
  6044  002F4E                     _sendWarningLight:
  6045                           	opt stack 19
  6046                           
  6047                           ;incstack = 0
  6048                           ;sendWarningLight@trafficLight stored from wreg
  6049  002F4E  6E0B               	movwf	sendWarningLight@trafficLight,c
  6050                           
  6051                           ;function.c: 117: messageTx.identifier = ((2<<7) | (trafficLight << 4) | id );
  6052  002F50  0E00               	movlw	0
  6053  002F52  6E07               	movwf	??_sendWarningLight& (0+255),c
  6054  002F54  0E01               	movlw	1
  6055  002F56  6E08               	movwf	(??_sendWarningLight+1)& (0+255),c
  6056  002F58  500B               	movf	sendWarningLight@trafficLight,w,c
  6057  002F5A  6E09               	movwf	(??_sendWarningLight+2)& (0+255),c
  6058  002F5C  6A0A               	clrf	(??_sendWarningLight+3)& (0+255),c
  6059  002F5E  3A09               	swapf	??_sendWarningLight+2,f,c
  6060  002F60  3A0A               	swapf	??_sendWarningLight+3,f,c
  6061  002F62  0EF0               	movlw	240
  6062  002F64  160A               	andwf	??_sendWarningLight+3,f,c
  6063  002F66  5009               	movf	??_sendWarningLight+2,w,c
  6064  002F68  0B0F               	andlw	15
  6065  002F6A  120A               	iorwf	??_sendWarningLight+3,f,c
  6066  002F6C  0EF0               	movlw	240
  6067  002F6E  1609               	andwf	??_sendWarningLight+2,f,c
  6068  002F70  0100               	movlb	0	; () banked
  6069  002F72  51C6               	movf	_id& (0+255),w,b
  6070  002F74  1209               	iorwf	??_sendWarningLight+2,f,c
  6071  002F76  0E00               	movlw	0
  6072  002F78  120A               	iorwf	??_sendWarningLight+3,f,c
  6073  002F7A  5007               	movf	??_sendWarningLight,w,c
  6074  002F7C  1209               	iorwf	??_sendWarningLight+2,f,c
  6075  002F7E  5008               	movf	??_sendWarningLight+1,w,c
  6076  002F80  120A               	iorwf	??_sendWarningLight+3,f,c
  6077  002F82  C009  F0C8         	movff	??_sendWarningLight+2,_messageTx+1
  6078  002F86  C00A  F0C9         	movff	??_sendWarningLight+3,_messageTx+2
  6079  002F8A  0100               	movlb	0	; () banked
  6080  002F8C  0E00               	movlw	0
  6081  002F8E  BFC9               	btfsc	(_messageTx+2)& (0+255),7,b
  6082  002F90  0EFF               	movlw	-1
  6083  002F92  6FCA               	movwf	(_messageTx+3)& (0+255),b
  6084  002F94  6FCB               	movwf	(_messageTx+4)& (0+255),b
  6085                           
  6086                           ; BSR set to: 0
  6087                           ;function.c: 118: messageTx.rtr = 0;
  6088  002F96  0E00               	movlw	0
  6089  002F98  0100               	movlb	0	; () banked
  6090  002F9A  6FD5               	movwf	(_messageTx+14)& (0+255),b
  6091                           
  6092                           ; BSR set to: 0
  6093                           ;function.c: 119: messageTx.dta[0] = state;
  6094  002F9C  C006  F0CD         	movff	sendWarningLight@state,_messageTx+6
  6095                           
  6096                           ; BSR set to: 0
  6097                           ;function.c: 120: messageTx.dlc = 1;
  6098  002FA0  0E01               	movlw	1
  6099  002FA2  0100               	movlb	0	; () banked
  6100  002FA4  6FCC               	movwf	(_messageTx+5)& (0+255),b
  6101                           
  6102                           ; BSR set to: 0
  6103                           ;function.c: 123: Can_PutMessage(&messageTx);
  6104  002FA6  0EC7               	movlw	low _messageTx
  6105  002FA8  6E01               	movwf	i2Can_PutMessage@msgPtr,c
  6106  002FAA  0E00               	movlw	high _messageTx
  6107  002FAC  6E02               	movwf	i2Can_PutMessage@msgPtr+1,c
  6108  002FAE  EC39  F00F         	call	i2_Can_PutMessage	;wreg free
  6109  002FB2  0012               	return		;funcret
  6110  002FB4                     __end_of_sendWarningLight:
  6111                           	opt stack 0
  6112                           pclatu	equ	0xFFB
  6113                           pclath	equ	0xFFA
  6114                           tblptru	equ	0xFF8
  6115                           tblptrh	equ	0xFF7
  6116                           tblptrl	equ	0xFF6
  6117                           tablat	equ	0xFF5
  6118                           prodh	equ	0xFF4
  6119                           prodl	equ	0xFF3
  6120                           intcon	equ	0xFF2
  6121                           intcon2	equ	0xFF1
  6122                           intcon3	equ	0xFF0
  6123                           postinc0	equ	0xFEE
  6124                           fsr0h	equ	0xFEA
  6125                           fsr0l	equ	0xFE9
  6126                           wreg	equ	0xFE8
  6127                           indf1	equ	0xFE7
  6128                           postinc1	equ	0xFE6
  6129                           postdec1	equ	0xFE5
  6130                           fsr1h	equ	0xFE2
  6131                           fsr1l	equ	0xFE1
  6132                           indf2	equ	0xFDF
  6133                           postinc2	equ	0xFDE
  6134                           fsr2h	equ	0xFDA
  6135                           fsr2l	equ	0xFD9
  6136                           status	equ	0xFD8
  6137                           
  6138 ;; *************** function _getConflict *****************
  6139 ;; Defined at:
  6140 ;;		line 218 in file "logic.c"
  6141 ;; Parameters:    Size  Location     Type
  6142 ;;  carPersonCon    1    wreg     unsigned char 
  6143 ;;  carPersonToL    1    0[COMRAM] unsigned char 
  6144 ;; Auto vars:     Size  Location     Type
  6145 ;;  carPersonCon    1    3[COMRAM] unsigned char 
  6146 ;; Return value:  Size  Location     Type
  6147 ;;                  1    wreg      unsigned char 
  6148 ;; Registers used:
  6149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6150 ;; Tracked objects:
  6151 ;;		On entry : 0/0
  6152 ;;		On exit  : 0/0
  6153 ;;		Unchanged: 0/0
  6154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6155 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6156 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6157 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6158 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6159 ;;Total ram usage:        4 bytes
  6160 ;; Hardware stack levels used:    1
  6161 ;; This function calls:
  6162 ;;		Nothing
  6163 ;; This function is called by:
  6164 ;;		_secondRound
  6165 ;; This function uses a non-reentrant model
  6166 ;;
  6167                           
  6168                           	psect	text24
  6169  0033A6                     __ptext24:
  6170                           	opt stack 0
  6171  0033A6                     _getConflict:
  6172                           	opt stack 21
  6173                           
  6174                           ;incstack = 0
  6175                           ;getConflict@carPersonConcerned stored from wreg
  6176  0033A6  6E04               	movwf	getConflict@carPersonConcerned,c
  6177                           
  6178                           ;logic.c: 220: return conflicts[carPersonConcerned][carPersonToLookAt];
  6179  0033A8  5004               	movf	getConflict@carPersonConcerned,w,c
  6180  0033AA  0D0C               	mullw	12
  6181  0033AC  0E00               	movlw	low _conflicts
  6182  0033AE  6E02               	movwf	??_getConflict& (0+255),c
  6183  0033B0  0E02               	movlw	high _conflicts
  6184  0033B2  6E03               	movwf	(??_getConflict+1)& (0+255),c
  6185  0033B4  50F3               	movf	prodl,w,c
  6186  0033B6  2602               	addwf	??_getConflict,f,c
  6187  0033B8  50F4               	movf	prodh,w,c
  6188  0033BA  2203               	addwfc	??_getConflict+1,f,c
  6189  0033BC  5001               	movf	getConflict@carPersonToLookAt,w,c
  6190  0033BE  0D01               	mullw	1
  6191  0033C0  50F3               	movf	prodl,w,c
  6192  0033C2  2402               	addwf	??_getConflict,w,c
  6193  0033C4  6ED9               	movwf	fsr2l,c
  6194  0033C6  50F4               	movf	prodh,w,c
  6195  0033C8  2003               	addwfc	??_getConflict+1,w,c
  6196  0033CA  6EDA               	movwf	fsr2h,c
  6197  0033CC  50DF               	movf	indf2,w,c
  6198  0033CE  0012               	return	
  6199  0033D0                     __end_of_getConflict:
  6200                           	opt stack 0
  6201                           pclatu	equ	0xFFB
  6202                           pclath	equ	0xFFA
  6203                           tblptru	equ	0xFF8
  6204                           tblptrh	equ	0xFF7
  6205                           tblptrl	equ	0xFF6
  6206                           tablat	equ	0xFF5
  6207                           prodh	equ	0xFF4
  6208                           prodl	equ	0xFF3
  6209                           intcon	equ	0xFF2
  6210                           intcon2	equ	0xFF1
  6211                           intcon3	equ	0xFF0
  6212                           postinc0	equ	0xFEE
  6213                           fsr0h	equ	0xFEA
  6214                           fsr0l	equ	0xFE9
  6215                           wreg	equ	0xFE8
  6216                           indf1	equ	0xFE7
  6217                           postinc1	equ	0xFE6
  6218                           postdec1	equ	0xFE5
  6219                           fsr1h	equ	0xFE2
  6220                           fsr1l	equ	0xFE1
  6221                           indf2	equ	0xFDF
  6222                           postinc2	equ	0xFDE
  6223                           fsr2h	equ	0xFDA
  6224                           fsr2l	equ	0xFD9
  6225                           status	equ	0xFD8
  6226                           
  6227 ;; *************** function _firstRound *****************
  6228 ;; Defined at:
  6229 ;;		line 16 in file "logic.c"
  6230 ;; Parameters:    Size  Location     Type
  6231 ;;		None
  6232 ;; Auto vars:     Size  Location     Type
  6233 ;;  duration        1   15[COMRAM] unsigned char 
  6234 ;;  occupancy       1   14[COMRAM] unsigned char 
  6235 ;;  color           1   13[COMRAM] unsigned char 
  6236 ;;  i               1   16[COMRAM] unsigned char 
  6237 ;; Return value:  Size  Location     Type
  6238 ;;                  1    wreg      void 
  6239 ;; Registers used:
  6240 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6241 ;; Tracked objects:
  6242 ;;		On entry : 0/0
  6243 ;;		On exit  : 0/0
  6244 ;;		Unchanged: 0/0
  6245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6247 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6248 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6249 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6250 ;;Total ram usage:        5 bytes
  6251 ;; Hardware stack levels used:    1
  6252 ;; Hardware stack levels required when called:    3
  6253 ;; This function calls:
  6254 ;;		_requestPed
  6255 ;;		_setLight
  6256 ;; This function is called by:
  6257 ;;		_onTimeout
  6258 ;; This function uses a non-reentrant model
  6259 ;;
  6260                           
  6261                           	psect	text25
  6262  002776                     __ptext25:
  6263                           	opt stack 0
  6264  002776                     _firstRound:
  6265                           	opt stack 19
  6266                           
  6267                           ;logic.c: 18: for(uint8_t i = 0; i < 12; i++)
  6268                           
  6269                           ;incstack = 0
  6270  002776  0E00               	movlw	0
  6271  002778  6E11               	movwf	firstRound@i,c
  6272  00277A                     i2l2986:
  6273  00277A  0E0B               	movlw	11
  6274  00277C  6411               	cpfsgt	firstRound@i,c
  6275  00277E  D001               	goto	i2l2990
  6276  002780  0012               	return	
  6277  002782                     i2l2990:
  6278                           
  6279                           ;logic.c: 19: {
  6280                           ;logic.c: 20: uint8_t color = colorLights[i];
  6281  002782  5011               	movf	firstRound@i,w,c
  6282  002784  0D01               	mullw	1
  6283  002786  0E0C               	movlw	low _colorLights
  6284  002788  24F3               	addwf	prodl,w,c
  6285  00278A  6ED9               	movwf	fsr2l,c
  6286  00278C  0E01               	movlw	high _colorLights
  6287  00278E  20F4               	addwfc	prodh,w,c
  6288  002790  6EDA               	movwf	fsr2h,c
  6289  002792  50DF               	movf	indf2,w,c
  6290  002794  6E0E               	movwf	firstRound@color,c
  6291                           
  6292                           ;logic.c: 21: uint8_t occupancy = occupancyPaths[i];
  6293  002796  5011               	movf	firstRound@i,w,c
  6294  002798  0D01               	mullw	1
  6295  00279A  0E00               	movlw	low _occupancyPaths
  6296  00279C  24F3               	addwf	prodl,w,c
  6297  00279E  6ED9               	movwf	fsr2l,c
  6298  0027A0  0E01               	movlw	high _occupancyPaths
  6299  0027A2  20F4               	addwfc	prodh,w,c
  6300  0027A4  6EDA               	movwf	fsr2h,c
  6301  0027A6  50DF               	movf	indf2,w,c
  6302  0027A8  6E0F               	movwf	firstRound@occupancy,c
  6303                           
  6304                           ;logic.c: 22: uint8_t duration = durationLights[i];
  6305  0027AA  5011               	movf	firstRound@i,w,c
  6306  0027AC  0D01               	mullw	1
  6307  0027AE  0E18               	movlw	low _durationLights
  6308  0027B0  24F3               	addwf	prodl,w,c
  6309  0027B2  6ED9               	movwf	fsr2l,c
  6310  0027B4  0E01               	movlw	high _durationLights
  6311  0027B6  20F4               	addwfc	prodh,w,c
  6312  0027B8  6EDA               	movwf	fsr2h,c
  6313  0027BA  50DF               	movf	indf2,w,c
  6314  0027BC  6E10               	movwf	firstRound@duration,c
  6315                           
  6316                           ;logic.c: 25: switch (color)
  6317  0027BE  D04D               	goto	i2l3022
  6318  0027C0                     i2l2992:
  6319                           
  6320                           ;logic.c: 32: if(i<8)
  6321  0027C0  0E08               	movlw	8
  6322  0027C2  6011               	cpfslt	firstRound@i,c
  6323  0027C4  D00A               	goto	i2l2998
  6324                           
  6325                           ;logic.c: 33: {
  6326                           ;logic.c: 34: if(duration == 5)
  6327  0027C6  0E05               	movlw	5
  6328  0027C8  1810               	xorwf	firstRound@duration,w,c
  6329  0027CA  A4D8               	btfss	status,2,c
  6330  0027CC  D053               	goto	i2l3024
  6331                           
  6332                           ;logic.c: 35: {
  6333                           ;logic.c: 37: setLight(i,0);
  6334  0027CE  0E00               	movlw	0
  6335  0027D0  6E0A               	movwf	setLight@color,c
  6336  0027D2  5011               	movf	firstRound@i,w,c
  6337  0027D4  EC94  F018         	call	_setLight
  6338                           
  6339                           ;logic.c: 38: }
  6340                           ;logic.c: 39: }
  6341  0027D8  D04D               	goto	i2l3024
  6342  0027DA                     i2l2998:
  6343                           
  6344                           ;logic.c: 40: else
  6345                           ;logic.c: 41: {
  6346                           ;logic.c: 42: if(duration == 8)
  6347  0027DA  0E08               	movlw	8
  6348  0027DC  1810               	xorwf	firstRound@duration,w,c
  6349  0027DE  A4D8               	btfss	status,2,c
  6350  0027E0  D049               	goto	i2l3024
  6351                           
  6352                           ;logic.c: 43: {
  6353                           ;logic.c: 45: setLight(i,0);
  6354  0027E2  0E00               	movlw	0
  6355  0027E4  6E0A               	movwf	setLight@color,c
  6356  0027E6  5011               	movf	firstRound@i,w,c
  6357  0027E8  EC94  F018         	call	_setLight
  6358                           
  6359                           ;logic.c: 46: }
  6360                           ;logic.c: 47: }
  6361                           ;logic.c: 48: break;
  6362  0027EC  D043               	goto	i2l3024
  6363  0027EE                     i2l3002:
  6364                           
  6365                           ;logic.c: 52: if(i > 7 && duration == 4)
  6366  0027EE  0E07               	movlw	7
  6367  0027F0  6411               	cpfsgt	firstRound@i,c
  6368  0027F2  D01C               	goto	i2l3010
  6369  0027F4  0E04               	movlw	4
  6370  0027F6  1810               	xorwf	firstRound@duration,w,c
  6371  0027F8  A4D8               	btfss	status,2,c
  6372  0027FA  D018               	goto	i2l3010
  6373                           
  6374                           ;logic.c: 53: {
  6375                           ;logic.c: 55: occupancyPaths[i] = requestPed(i);
  6376  0027FC  5011               	movf	firstRound@i,w,c
  6377  0027FE  EC91  F016         	call	_requestPed
  6378  002802  6E0D               	movwf	??_firstRound& (0+255),c
  6379  002804  5011               	movf	firstRound@i,w,c
  6380  002806  0D01               	mullw	1
  6381  002808  0E00               	movlw	low _occupancyPaths
  6382  00280A  24F3               	addwf	prodl,w,c
  6383  00280C  6ED9               	movwf	fsr2l,c
  6384  00280E  0E01               	movlw	high _occupancyPaths
  6385  002810  20F4               	addwfc	prodh,w,c
  6386  002812  6EDA               	movwf	fsr2h,c
  6387  002814  C00D  FFDF         	movff	??_firstRound,indf2
  6388                           
  6389                           ;logic.c: 56: occupancy = occupancyPaths[i];
  6390  002818  5011               	movf	firstRound@i,w,c
  6391  00281A  0D01               	mullw	1
  6392  00281C  0E00               	movlw	low _occupancyPaths
  6393  00281E  24F3               	addwf	prodl,w,c
  6394  002820  6ED9               	movwf	fsr2l,c
  6395  002822  0E01               	movlw	high _occupancyPaths
  6396  002824  20F4               	addwfc	prodh,w,c
  6397  002826  6EDA               	movwf	fsr2h,c
  6398  002828  50DF               	movf	indf2,w,c
  6399  00282A  6E0F               	movwf	firstRound@occupancy,c
  6400  00282C                     i2l3010:
  6401                           
  6402                           ;logic.c: 57: }
  6403                           ;logic.c: 58: if(duration == 4 && occupancy == 0)
  6404  00282C  0E04               	movlw	4
  6405  00282E  1810               	xorwf	firstRound@duration,w,c
  6406  002830  A4D8               	btfss	status,2,c
  6407  002832  D020               	goto	i2l3024
  6408  002834  500F               	movf	firstRound@occupancy,w,c
  6409  002836  A4D8               	btfss	status,2,c
  6410  002838  D01D               	goto	i2l3024
  6411                           
  6412                           ;logic.c: 59: {
  6413                           ;logic.c: 61: setLight(i,1);
  6414  00283A  0E01               	movlw	1
  6415  00283C  6E0A               	movwf	setLight@color,c
  6416  00283E  5011               	movf	firstRound@i,w,c
  6417  002840  EC94  F018         	call	_setLight
  6418                           
  6419                           ;logic.c: 63: }
  6420                           ;logic.c: 64: break;
  6421  002844  D017               	goto	i2l3024
  6422  002846                     i2l3016:
  6423                           
  6424                           ;logic.c: 67: if(duration == 2)
  6425  002846  0E02               	movlw	2
  6426  002848  1810               	xorwf	firstRound@duration,w,c
  6427  00284A  A4D8               	btfss	status,2,c
  6428  00284C  D013               	goto	i2l3024
  6429                           
  6430                           ;logic.c: 68: {
  6431                           ;logic.c: 70: setLight(i,2);
  6432  00284E  0E02               	movlw	2
  6433  002850  6E0A               	movwf	setLight@color,c
  6434  002852  5011               	movf	firstRound@i,w,c
  6435  002854  EC94  F018         	call	_setLight
  6436                           
  6437                           ;logic.c: 77: }
  6438                           
  6439                           ;logic.c: 75: break;
  6440                           
  6441                           ;logic.c: 74: default:
  6442                           
  6443                           ;logic.c: 71: }
  6444                           ;logic.c: 72: break;
  6445  002858  D00D               	goto	i2l3024
  6446  00285A                     i2l3022:
  6447  00285A  500E               	movf	firstRound@color,w,c
  6448                           
  6449                           ; Switch size 1, requested type "space"
  6450                           ; Number of cases is 4, Range of values is 0 to 3
  6451                           ; switch strategies available:
  6452                           ; Name         Instructions Cycles
  6453                           ; simple_byte           13     7 (average)
  6454                           ;	Chosen strategy is simple_byte
  6455  00285C  0A00               	xorlw	0	; case 0
  6456  00285E  B4D8               	btfsc	status,2,c
  6457  002860  D009               	goto	i2l3024
  6458  002862  0A01               	xorlw	1	; case 1
  6459  002864  B4D8               	btfsc	status,2,c
  6460  002866  D7AC               	goto	i2l2992
  6461  002868  0A03               	xorlw	3	; case 2
  6462  00286A  B4D8               	btfsc	status,2,c
  6463  00286C  D7C0               	goto	i2l3002
  6464  00286E  0A01               	xorlw	1	; case 3
  6465  002870  B4D8               	btfsc	status,2,c
  6466  002872  D7E9               	goto	i2l3016
  6467  002874                     i2l3024:
  6468  002874  2A11               	incf	firstRound@i,f,c
  6469  002876  D781               	goto	i2l2986
  6470  002878                     __end_of_firstRound:
  6471                           	opt stack 0
  6472                           pclatu	equ	0xFFB
  6473                           pclath	equ	0xFFA
  6474                           tblptru	equ	0xFF8
  6475                           tblptrh	equ	0xFF7
  6476                           tblptrl	equ	0xFF6
  6477                           tablat	equ	0xFF5
  6478                           prodh	equ	0xFF4
  6479                           prodl	equ	0xFF3
  6480                           intcon	equ	0xFF2
  6481                           intcon2	equ	0xFF1
  6482                           intcon3	equ	0xFF0
  6483                           postinc0	equ	0xFEE
  6484                           fsr0h	equ	0xFEA
  6485                           fsr0l	equ	0xFE9
  6486                           wreg	equ	0xFE8
  6487                           indf1	equ	0xFE7
  6488                           postinc1	equ	0xFE6
  6489                           postdec1	equ	0xFE5
  6490                           fsr1h	equ	0xFE2
  6491                           fsr1l	equ	0xFE1
  6492                           indf2	equ	0xFDF
  6493                           postinc2	equ	0xFDE
  6494                           fsr2h	equ	0xFDA
  6495                           fsr2l	equ	0xFD9
  6496                           status	equ	0xFD8
  6497                           
  6498 ;; *************** function _setLight *****************
  6499 ;; Defined at:
  6500 ;;		line 150 in file "logic.c"
  6501 ;; Parameters:    Size  Location     Type
  6502 ;;  light           1    wreg     unsigned char 
  6503 ;;  color           1    9[COMRAM] unsigned char 
  6504 ;; Auto vars:     Size  Location     Type
  6505 ;;  light           1   10[COMRAM] unsigned char 
  6506 ;; Return value:  Size  Location     Type
  6507 ;;                  1    wreg      void 
  6508 ;; Registers used:
  6509 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6510 ;; Tracked objects:
  6511 ;;		On entry : 0/0
  6512 ;;		On exit  : 0/0
  6513 ;;		Unchanged: 0/0
  6514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6515 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6516 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6518 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6519 ;;Total ram usage:        2 bytes
  6520 ;; Hardware stack levels used:    1
  6521 ;; Hardware stack levels required when called:    2
  6522 ;; This function calls:
  6523 ;;		_sendPedestrianLight
  6524 ;;		_sendTrafficLight
  6525 ;; This function is called by:
  6526 ;;		_firstRound
  6527 ;;		_secondRound
  6528 ;; This function uses a non-reentrant model
  6529 ;;
  6530                           
  6531                           	psect	text26
  6532  003128                     __ptext26:
  6533                           	opt stack 0
  6534  003128                     _setLight:
  6535                           	opt stack 19
  6536                           
  6537                           ;incstack = 0
  6538                           ;setLight@light stored from wreg
  6539  003128  6E0B               	movwf	setLight@light,c
  6540                           
  6541                           ;logic.c: 152: durationLights[light] = 0;
  6542  00312A  500B               	movf	setLight@light,w,c
  6543  00312C  0D01               	mullw	1
  6544  00312E  0E18               	movlw	low _durationLights
  6545  003130  24F3               	addwf	prodl,w,c
  6546  003132  6ED9               	movwf	fsr2l,c
  6547  003134  0E01               	movlw	high _durationLights
  6548  003136  20F4               	addwfc	prodh,w,c
  6549  003138  6EDA               	movwf	fsr2h,c
  6550  00313A  0E00               	movlw	0
  6551  00313C  6EDF               	movwf	indf2,c
  6552                           
  6553                           ;logic.c: 153: colorLights[light] = color;
  6554  00313E  500B               	movf	setLight@light,w,c
  6555  003140  0D01               	mullw	1
  6556  003142  0E0C               	movlw	low _colorLights
  6557  003144  24F3               	addwf	prodl,w,c
  6558  003146  6ED9               	movwf	fsr2l,c
  6559  003148  0E01               	movlw	high _colorLights
  6560  00314A  20F4               	addwfc	prodh,w,c
  6561  00314C  6EDA               	movwf	fsr2h,c
  6562  00314E  C00A  FFDF         	movff	setLight@color,indf2
  6563                           
  6564                           ;logic.c: 156: if(light < 8){
  6565  003152  0E08               	movlw	8
  6566  003154  600B               	cpfslt	setLight@light,c
  6567  003156  D006               	goto	i2l2866
  6568                           
  6569                           ;logic.c: 157: sendTrafficLight(light,color);
  6570  003158  C00A  F006         	movff	setLight@color,sendTrafficLight@color
  6571  00315C  500B               	movf	setLight@light,w,c
  6572  00315E  ECBF  F018         	call	_sendTrafficLight
  6573                           
  6574                           ;logic.c: 158: }
  6575  003162  0012               	return	
  6576  003164                     i2l2866:
  6577                           
  6578                           ;logic.c: 159: else if(light > 7 && light < 12){
  6579  003164  0E07               	movlw	7
  6580  003166  640B               	cpfsgt	setLight@light,c
  6581  003168  0012               	return	
  6582  00316A  0E0C               	movlw	12
  6583  00316C  600B               	cpfslt	setLight@light,c
  6584  00316E  0012               	return	
  6585                           
  6586                           ;logic.c: 160: sendPedestrianLight((light-8),color);
  6587  003170  C00A  F006         	movff	setLight@color,sendPedestrianLight@color
  6588  003174  500B               	movf	setLight@light,w,c
  6589  003176  0FF8               	addlw	248
  6590  003178  EC3D  F018         	call	_sendPedestrianLight
  6591  00317C  0012               	return	
  6592  00317E                     __end_of_setLight:
  6593                           	opt stack 0
  6594                           pclatu	equ	0xFFB
  6595                           pclath	equ	0xFFA
  6596                           tblptru	equ	0xFF8
  6597                           tblptrh	equ	0xFF7
  6598                           tblptrl	equ	0xFF6
  6599                           tablat	equ	0xFF5
  6600                           prodh	equ	0xFF4
  6601                           prodl	equ	0xFF3
  6602                           intcon	equ	0xFF2
  6603                           intcon2	equ	0xFF1
  6604                           intcon3	equ	0xFF0
  6605                           postinc0	equ	0xFEE
  6606                           fsr0h	equ	0xFEA
  6607                           fsr0l	equ	0xFE9
  6608                           wreg	equ	0xFE8
  6609                           indf1	equ	0xFE7
  6610                           postinc1	equ	0xFE6
  6611                           postdec1	equ	0xFE5
  6612                           fsr1h	equ	0xFE2
  6613                           fsr1l	equ	0xFE1
  6614                           indf2	equ	0xFDF
  6615                           postinc2	equ	0xFDE
  6616                           fsr2h	equ	0xFDA
  6617                           fsr2l	equ	0xFD9
  6618                           status	equ	0xFD8
  6619                           
  6620 ;; *************** function _sendTrafficLight *****************
  6621 ;; Defined at:
  6622 ;;		line 82 in file "function.c"
  6623 ;; Parameters:    Size  Location     Type
  6624 ;;  trafficLight    1    wreg     unsigned char 
  6625 ;;  color           1    5[COMRAM] unsigned char 
  6626 ;; Auto vars:     Size  Location     Type
  6627 ;;  trafficLight    1    8[COMRAM] unsigned char 
  6628 ;; Return value:  Size  Location     Type
  6629 ;;                  1    wreg      void 
  6630 ;; Registers used:
  6631 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6632 ;; Tracked objects:
  6633 ;;		On entry : 0/0
  6634 ;;		On exit  : 0/0
  6635 ;;		Unchanged: 0/0
  6636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6637 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6638 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6639 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6640 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6641 ;;Total ram usage:        4 bytes
  6642 ;; Hardware stack levels used:    1
  6643 ;; Hardware stack levels required when called:    1
  6644 ;; This function calls:
  6645 ;;		i2_Can_PutMessage
  6646 ;; This function is called by:
  6647 ;;		_setLight
  6648 ;; This function uses a non-reentrant model
  6649 ;;
  6650                           
  6651                           	psect	text27
  6652  00317E                     __ptext27:
  6653                           	opt stack 0
  6654  00317E                     _sendTrafficLight:
  6655                           	opt stack 19
  6656                           
  6657                           ;incstack = 0
  6658                           ;sendTrafficLight@trafficLight stored from wreg
  6659  00317E  6E09               	movwf	sendTrafficLight@trafficLight,c
  6660                           
  6661                           ;function.c: 85: messageTx.identifier = ((0<<7) | (trafficLight << 4) | id );
  6662  003180  5009               	movf	sendTrafficLight@trafficLight,w,c
  6663  003182  6E07               	movwf	??_sendTrafficLight& (0+255),c
  6664  003184  6A08               	clrf	(??_sendTrafficLight+1)& (0+255),c
  6665  003186  3A07               	swapf	??_sendTrafficLight,f,c
  6666  003188  3A08               	swapf	??_sendTrafficLight+1,f,c
  6667  00318A  0EF0               	movlw	240
  6668  00318C  1608               	andwf	??_sendTrafficLight+1,f,c
  6669  00318E  5007               	movf	??_sendTrafficLight,w,c
  6670  003190  0B0F               	andlw	15
  6671  003192  1208               	iorwf	??_sendTrafficLight+1,f,c
  6672  003194  0EF0               	movlw	240
  6673  003196  1607               	andwf	??_sendTrafficLight,f,c
  6674  003198  0100               	movlb	0	; () banked
  6675  00319A  51C6               	movf	_id& (0+255),w,b
  6676  00319C  1207               	iorwf	??_sendTrafficLight,f,c
  6677  00319E  0E00               	movlw	0
  6678  0031A0  1208               	iorwf	??_sendTrafficLight+1,f,c
  6679  0031A2  C007  F0C8         	movff	??_sendTrafficLight,_messageTx+1
  6680  0031A6  C008  F0C9         	movff	??_sendTrafficLight+1,_messageTx+2
  6681  0031AA  0100               	movlb	0	; () banked
  6682  0031AC  0E00               	movlw	0
  6683  0031AE  BFC9               	btfsc	(_messageTx+2)& (0+255),7,b
  6684  0031B0  0EFF               	movlw	-1
  6685  0031B2  6FCA               	movwf	(_messageTx+3)& (0+255),b
  6686  0031B4  6FCB               	movwf	(_messageTx+4)& (0+255),b
  6687                           
  6688                           ; BSR set to: 0
  6689                           ;function.c: 86: messageTx.rtr = 0;
  6690  0031B6  0E00               	movlw	0
  6691  0031B8  0100               	movlb	0	; () banked
  6692  0031BA  6FD5               	movwf	(_messageTx+14)& (0+255),b
  6693                           
  6694                           ; BSR set to: 0
  6695                           ;function.c: 87: messageTx.dta[0] = color;
  6696  0031BC  C006  F0CD         	movff	sendTrafficLight@color,_messageTx+6
  6697                           
  6698                           ; BSR set to: 0
  6699                           ;function.c: 88: messageTx.dlc = 1;
  6700  0031C0  0E01               	movlw	1
  6701  0031C2  0100               	movlb	0	; () banked
  6702  0031C4  6FCC               	movwf	(_messageTx+5)& (0+255),b
  6703                           
  6704                           ; BSR set to: 0
  6705                           ;function.c: 91: Can_PutMessage(&messageTx);
  6706  0031C6  0EC7               	movlw	low _messageTx
  6707  0031C8  6E01               	movwf	i2Can_PutMessage@msgPtr,c
  6708  0031CA  0E00               	movlw	high _messageTx
  6709  0031CC  6E02               	movwf	i2Can_PutMessage@msgPtr+1,c
  6710  0031CE  EC39  F00F         	call	i2_Can_PutMessage	;wreg free
  6711  0031D2  0012               	return		;funcret
  6712  0031D4                     __end_of_sendTrafficLight:
  6713                           	opt stack 0
  6714                           pclatu	equ	0xFFB
  6715                           pclath	equ	0xFFA
  6716                           tblptru	equ	0xFF8
  6717                           tblptrh	equ	0xFF7
  6718                           tblptrl	equ	0xFF6
  6719                           tablat	equ	0xFF5
  6720                           prodh	equ	0xFF4
  6721                           prodl	equ	0xFF3
  6722                           intcon	equ	0xFF2
  6723                           intcon2	equ	0xFF1
  6724                           intcon3	equ	0xFF0
  6725                           postinc0	equ	0xFEE
  6726                           fsr0h	equ	0xFEA
  6727                           fsr0l	equ	0xFE9
  6728                           wreg	equ	0xFE8
  6729                           indf1	equ	0xFE7
  6730                           postinc1	equ	0xFE6
  6731                           postdec1	equ	0xFE5
  6732                           fsr1h	equ	0xFE2
  6733                           fsr1l	equ	0xFE1
  6734                           indf2	equ	0xFDF
  6735                           postinc2	equ	0xFDE
  6736                           fsr2h	equ	0xFDA
  6737                           fsr2l	equ	0xFD9
  6738                           status	equ	0xFD8
  6739                           
  6740 ;; *************** function _sendPedestrianLight *****************
  6741 ;; Defined at:
  6742 ;;		line 100 in file "function.c"
  6743 ;; Parameters:    Size  Location     Type
  6744 ;;  trafficLight    1    wreg     unsigned char 
  6745 ;;  color           1    5[COMRAM] unsigned char 
  6746 ;; Auto vars:     Size  Location     Type
  6747 ;;  trafficLight    1    8[COMRAM] unsigned char 
  6748 ;; Return value:  Size  Location     Type
  6749 ;;                  1    wreg      void 
  6750 ;; Registers used:
  6751 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6752 ;; Tracked objects:
  6753 ;;		On entry : 0/0
  6754 ;;		On exit  : 0/0
  6755 ;;		Unchanged: 0/0
  6756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6757 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6758 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6759 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6760 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6761 ;;Total ram usage:        4 bytes
  6762 ;; Hardware stack levels used:    1
  6763 ;; Hardware stack levels required when called:    1
  6764 ;; This function calls:
  6765 ;;		i2_Can_PutMessage
  6766 ;; This function is called by:
  6767 ;;		_setLight
  6768 ;; This function uses a non-reentrant model
  6769 ;;
  6770                           
  6771                           	psect	text28
  6772  00307A                     __ptext28:
  6773                           	opt stack 0
  6774  00307A                     _sendPedestrianLight:
  6775                           	opt stack 19
  6776                           
  6777                           ;incstack = 0
  6778                           ;sendPedestrianLight@trafficLight stored from wreg
  6779  00307A  6E09               	movwf	sendPedestrianLight@trafficLight,c
  6780                           
  6781                           ;function.c: 102: messageTx.identifier = ((1<<7) | (trafficLight << 4) | id );
  6782  00307C  5009               	movf	sendPedestrianLight@trafficLight,w,c
  6783  00307E  6E07               	movwf	??_sendPedestrianLight& (0+255),c
  6784  003080  6A08               	clrf	(??_sendPedestrianLight+1)& (0+255),c
  6785  003082  3A07               	swapf	??_sendPedestrianLight,f,c
  6786  003084  3A08               	swapf	??_sendPedestrianLight+1,f,c
  6787  003086  0EF0               	movlw	240
  6788  003088  1608               	andwf	??_sendPedestrianLight+1,f,c
  6789  00308A  5007               	movf	??_sendPedestrianLight,w,c
  6790  00308C  0B0F               	andlw	15
  6791  00308E  1208               	iorwf	??_sendPedestrianLight+1,f,c
  6792  003090  0EF0               	movlw	240
  6793  003092  1607               	andwf	??_sendPedestrianLight,f,c
  6794  003094  0100               	movlb	0	; () banked
  6795  003096  51C6               	movf	_id& (0+255),w,b
  6796  003098  1207               	iorwf	??_sendPedestrianLight,f,c
  6797  00309A  0E00               	movlw	0
  6798  00309C  1208               	iorwf	??_sendPedestrianLight+1,f,c
  6799  00309E  8E07               	bsf	??_sendPedestrianLight,7,c
  6800  0030A0  C007  F0C8         	movff	??_sendPedestrianLight,_messageTx+1
  6801  0030A4  C008  F0C9         	movff	??_sendPedestrianLight+1,_messageTx+2
  6802  0030A8  0100               	movlb	0	; () banked
  6803  0030AA  0E00               	movlw	0
  6804  0030AC  BFC9               	btfsc	(_messageTx+2)& (0+255),7,b
  6805  0030AE  0EFF               	movlw	-1
  6806  0030B0  6FCA               	movwf	(_messageTx+3)& (0+255),b
  6807  0030B2  6FCB               	movwf	(_messageTx+4)& (0+255),b
  6808                           
  6809                           ; BSR set to: 0
  6810                           ;function.c: 103: messageTx.rtr = 0;
  6811  0030B4  0E00               	movlw	0
  6812  0030B6  0100               	movlb	0	; () banked
  6813  0030B8  6FD5               	movwf	(_messageTx+14)& (0+255),b
  6814                           
  6815                           ; BSR set to: 0
  6816                           ;function.c: 104: messageTx.dta[0] = color;
  6817  0030BA  C006  F0CD         	movff	sendPedestrianLight@color,_messageTx+6
  6818                           
  6819                           ; BSR set to: 0
  6820                           ;function.c: 105: messageTx.dlc = 1;
  6821  0030BE  0E01               	movlw	1
  6822  0030C0  0100               	movlb	0	; () banked
  6823  0030C2  6FCC               	movwf	(_messageTx+5)& (0+255),b
  6824                           
  6825                           ; BSR set to: 0
  6826                           ;function.c: 108: Can_PutMessage(&messageTx);
  6827  0030C4  0EC7               	movlw	low _messageTx
  6828  0030C6  6E01               	movwf	i2Can_PutMessage@msgPtr,c
  6829  0030C8  0E00               	movlw	high _messageTx
  6830  0030CA  6E02               	movwf	i2Can_PutMessage@msgPtr+1,c
  6831  0030CC  EC39  F00F         	call	i2_Can_PutMessage	;wreg free
  6832  0030D0  0012               	return		;funcret
  6833  0030D2                     __end_of_sendPedestrianLight:
  6834                           	opt stack 0
  6835                           pclatu	equ	0xFFB
  6836                           pclath	equ	0xFFA
  6837                           tblptru	equ	0xFF8
  6838                           tblptrh	equ	0xFF7
  6839                           tblptrl	equ	0xFF6
  6840                           tablat	equ	0xFF5
  6841                           prodh	equ	0xFF4
  6842                           prodl	equ	0xFF3
  6843                           intcon	equ	0xFF2
  6844                           intcon2	equ	0xFF1
  6845                           intcon3	equ	0xFF0
  6846                           postinc0	equ	0xFEE
  6847                           fsr0h	equ	0xFEA
  6848                           fsr0l	equ	0xFE9
  6849                           wreg	equ	0xFE8
  6850                           indf1	equ	0xFE7
  6851                           postinc1	equ	0xFE6
  6852                           postdec1	equ	0xFE5
  6853                           fsr1h	equ	0xFE2
  6854                           fsr1l	equ	0xFE1
  6855                           indf2	equ	0xFDF
  6856                           postinc2	equ	0xFDE
  6857                           fsr2h	equ	0xFDA
  6858                           fsr2l	equ	0xFD9
  6859                           status	equ	0xFD8
  6860                           
  6861 ;; *************** function _requestPed *****************
  6862 ;; Defined at:
  6863 ;;		line 126 in file "function.c"
  6864 ;; Parameters:    Size  Location     Type
  6865 ;;  ped             1    wreg     unsigned char 
  6866 ;; Auto vars:     Size  Location     Type
  6867 ;;  ped             1   11[COMRAM] unsigned char 
  6868 ;; Return value:  Size  Location     Type
  6869 ;;                  1    wreg      unsigned char 
  6870 ;; Registers used:
  6871 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6872 ;; Tracked objects:
  6873 ;;		On entry : 0/0
  6874 ;;		On exit  : 0/0
  6875 ;;		Unchanged: 0/0
  6876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6878 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6879 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6880 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6881 ;;Total ram usage:        7 bytes
  6882 ;; Hardware stack levels used:    1
  6883 ;; Hardware stack levels required when called:    1
  6884 ;; This function calls:
  6885 ;;		i2_Can_GetMessage
  6886 ;;		i2_Can_PutMessage
  6887 ;; This function is called by:
  6888 ;;		_firstRound
  6889 ;; This function uses a non-reentrant model
  6890 ;;
  6891                           
  6892                           	psect	text29
  6893  002D22                     __ptext29:
  6894                           	opt stack 0
  6895  002D22                     _requestPed:
  6896                           	opt stack 20
  6897                           
  6898                           ;incstack = 0
  6899                           ;requestPed@ped stored from wreg
  6900  002D22  6E0C               	movwf	requestPed@ped,c
  6901                           
  6902                           ;function.c: 128: messageTx.identifier = ((4<<7) | ((ped-8) << 4) | id );
  6903  002D24  0E00               	movlw	0
  6904  002D26  6E06               	movwf	??_requestPed& (0+255),c
  6905  002D28  0E02               	movlw	2
  6906  002D2A  6E07               	movwf	(??_requestPed+1)& (0+255),c
  6907  002D2C  0E80               	movlw	128
  6908  002D2E  6E08               	movwf	(??_requestPed+2)& (0+255),c
  6909  002D30  0EFF               	movlw	255
  6910  002D32  6E09               	movwf	(??_requestPed+3)& (0+255),c
  6911  002D34  500C               	movf	requestPed@ped,w,c
  6912  002D36  6E0A               	movwf	(??_requestPed+4)& (0+255),c
  6913  002D38  6A0B               	clrf	(??_requestPed+5)& (0+255),c
  6914  002D3A  3A0A               	swapf	??_requestPed+4,f,c
  6915  002D3C  3A0B               	swapf	??_requestPed+5,f,c
  6916  002D3E  0EF0               	movlw	240
  6917  002D40  160B               	andwf	??_requestPed+5,f,c
  6918  002D42  500A               	movf	??_requestPed+4,w,c
  6919  002D44  0B0F               	andlw	15
  6920  002D46  120B               	iorwf	??_requestPed+5,f,c
  6921  002D48  0EF0               	movlw	240
  6922  002D4A  160A               	andwf	??_requestPed+4,f,c
  6923  002D4C  5008               	movf	??_requestPed+2,w,c
  6924  002D4E  260A               	addwf	??_requestPed+4,f,c
  6925  002D50  5009               	movf	??_requestPed+3,w,c
  6926  002D52  220B               	addwfc	??_requestPed+5,f,c
  6927  002D54  0100               	movlb	0	; () banked
  6928  002D56  51C6               	movf	_id& (0+255),w,b
  6929  002D58  120A               	iorwf	??_requestPed+4,f,c
  6930  002D5A  0E00               	movlw	0
  6931  002D5C  120B               	iorwf	??_requestPed+5,f,c
  6932  002D5E  5006               	movf	??_requestPed,w,c
  6933  002D60  120A               	iorwf	??_requestPed+4,f,c
  6934  002D62  5007               	movf	??_requestPed+1,w,c
  6935  002D64  120B               	iorwf	??_requestPed+5,f,c
  6936  002D66  C00A  F0C8         	movff	??_requestPed+4,_messageTx+1
  6937  002D6A  C00B  F0C9         	movff	??_requestPed+5,_messageTx+2
  6938  002D6E  0100               	movlb	0	; () banked
  6939  002D70  0E00               	movlw	0
  6940  002D72  BFC9               	btfsc	(_messageTx+2)& (0+255),7,b
  6941  002D74  0EFF               	movlw	-1
  6942  002D76  6FCA               	movwf	(_messageTx+3)& (0+255),b
  6943  002D78  6FCB               	movwf	(_messageTx+4)& (0+255),b
  6944                           
  6945                           ; BSR set to: 0
  6946                           ;function.c: 129: messageTx.rtr = 1;
  6947  002D7A  0E01               	movlw	1
  6948  002D7C  0100               	movlb	0	; () banked
  6949  002D7E  6FD5               	movwf	(_messageTx+14)& (0+255),b
  6950                           
  6951                           ; BSR set to: 0
  6952                           ;function.c: 132: Can_PutMessage(&messageTx);
  6953  002D80  0EC7               	movlw	low _messageTx
  6954  002D82  6E01               	movwf	i2Can_PutMessage@msgPtr,c
  6955  002D84  0E00               	movlw	high _messageTx
  6956  002D86  6E02               	movwf	i2Can_PutMessage@msgPtr+1,c
  6957  002D88  EC39  F00F         	call	i2_Can_PutMessage	;wreg free
  6958  002D8C                     i2l2878:
  6959  002D8C  0ED8               	movlw	low _message
  6960  002D8E  6E01               	movwf	i2Can_GetMessage@msgPtr,c
  6961  002D90  0E00               	movlw	high _message
  6962  002D92  6E02               	movwf	i2Can_GetMessage@msgPtr+1,c
  6963  002D94  EC74  F011         	call	i2_Can_GetMessage	;wreg free
  6964  002D98  0900               	iorlw	0
  6965  002D9A  A4D8               	btfss	status,2,c
  6966  002D9C  D7F7               	goto	i2l2878
  6967                           
  6968                           ;function.c: 137: return message.dta[0];
  6969  002D9E  0100               	movlb	0	; () banked
  6970  002DA0  51DE               	movf	(_message+6)& (0+255),w,b
  6971  002DA2  0012               	return	
  6972  002DA4                     __end_of_requestPed:
  6973                           	opt stack 0
  6974                           pclatu	equ	0xFFB
  6975                           pclath	equ	0xFFA
  6976                           tblptru	equ	0xFF8
  6977                           tblptrh	equ	0xFF7
  6978                           tblptrl	equ	0xFF6
  6979                           tablat	equ	0xFF5
  6980                           prodh	equ	0xFF4
  6981                           prodl	equ	0xFF3
  6982                           intcon	equ	0xFF2
  6983                           intcon2	equ	0xFF1
  6984                           intcon3	equ	0xFF0
  6985                           postinc0	equ	0xFEE
  6986                           fsr0h	equ	0xFEA
  6987                           fsr0l	equ	0xFE9
  6988                           wreg	equ	0xFE8
  6989                           indf1	equ	0xFE7
  6990                           postinc1	equ	0xFE6
  6991                           postdec1	equ	0xFE5
  6992                           fsr1h	equ	0xFE2
  6993                           fsr1l	equ	0xFE1
  6994                           indf2	equ	0xFDF
  6995                           postinc2	equ	0xFDE
  6996                           fsr2h	equ	0xFDA
  6997                           fsr2l	equ	0xFD9
  6998                           status	equ	0xFD8
  6999                           
  7000 ;; *************** function i2_Can_PutMessage *****************
  7001 ;; Defined at:
  7002 ;;		line 200 in file "can.c"
  7003 ;; Parameters:    Size  Location     Type
  7004 ;;  msgPtr          2    0[COMRAM] PTR struct CANMESSAGE
  7005 ;;		 -> messageTx(17), 
  7006 ;; Auto vars:     Size  Location     Type
  7007 ;;  Can_PutMessa    1    4[COMRAM] unsigned char 
  7008 ;; Return value:  Size  Location     Type
  7009 ;;                  1    wreg      unsigned char 
  7010 ;; Registers used:
  7011 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7012 ;; Tracked objects:
  7013 ;;		On entry : 0/0
  7014 ;;		On exit  : 0/0
  7015 ;;		Unchanged: 0/0
  7016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7017 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7018 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7019 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7020 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7021 ;;Total ram usage:        5 bytes
  7022 ;; Hardware stack levels used:    1
  7023 ;; This function calls:
  7024 ;;		Nothing
  7025 ;; This function is called by:
  7026 ;;		_sendTrafficLight
  7027 ;;		_sendPedestrianLight
  7028 ;;		_sendWarningLight
  7029 ;;		_requestPed
  7030 ;; This function uses a non-reentrant model
  7031 ;;
  7032                           
  7033                           	psect	text30
  7034  001E72                     __ptext30:
  7035                           	opt stack 0
  7036  001E72                     i2_Can_PutMessage:
  7037                           	opt stack 19
  7038                           
  7039                           ;can.c: 202: uint8_t i;
  7040                           ;can.c: 204: if((txBufferCount) < 4)
  7041                           
  7042                           ; BSR set to: 0
  7043                           ;incstack = 0
  7044  001E72  0E04               	movlw	4
  7045  001E74  0100               	movlb	0	; () banked
  7046  001E76  61C1               	cpfslt	_txBufferCount& (0+255),b
  7047  001E78  0012               	return	
  7048                           
  7049                           ; BSR set to: 0
  7050                           ;can.c: 205: {
  7051                           ;can.c: 206: txBuffer[txBufferPtrIn].dlc = msgPtr->dlc;
  7052  001E7A  EE20 F005          	lfsr	2,5
  7053  001E7E  5001               	movf	i2Can_PutMessage@msgPtr,w,c
  7054  001E80  26D9               	addwf	fsr2l,f,c
  7055  001E82  5002               	movf	i2Can_PutMessage@msgPtr+1,w,c
  7056  001E84  22DA               	addwfc	fsr2h,f,c
  7057  001E86  0100               	movlb	0	; () banked
  7058  001E88  51C2               	movf	_txBufferPtrIn& (0+255),w,b
  7059  001E8A  0D11               	mullw	17
  7060  001E8C  0E05               	movlw	5
  7061  001E8E  26F3               	addwf	prodl,f,c
  7062  001E90  0E00               	movlw	0
  7063  001E92  22F4               	addwfc	prodh,f,c
  7064  001E94  0E24               	movlw	low _txBuffer
  7065  001E96  24F3               	addwf	prodl,w,c
  7066  001E98  6EE1               	movwf	fsr1l,c
  7067  001E9A  0E01               	movlw	high _txBuffer
  7068  001E9C  20F4               	addwfc	prodh,w,c
  7069  001E9E  6EE2               	movwf	fsr1h,c
  7070  001EA0  CFDF FFE7          	movff	indf2,indf1
  7071                           
  7072                           ;can.c: 207: txBuffer[txBufferPtrIn].extended_identifier = msgPtr->extended_identifier;
  7073  001EA4  C001  FFD9         	movff	i2Can_PutMessage@msgPtr,fsr2l
  7074  001EA8  C002  FFDA         	movff	i2Can_PutMessage@msgPtr+1,fsr2h
  7075  001EAC  0100               	movlb	0	; () banked
  7076  001EAE  51C2               	movf	_txBufferPtrIn& (0+255),w,b
  7077  001EB0  0D11               	mullw	17
  7078  001EB2  0E24               	movlw	low _txBuffer
  7079  001EB4  24F3               	addwf	prodl,w,c
  7080  001EB6  6EE1               	movwf	fsr1l,c
  7081  001EB8  0E01               	movlw	high _txBuffer
  7082  001EBA  20F4               	addwfc	prodh,w,c
  7083  001EBC  6EE2               	movwf	fsr1h,c
  7084  001EBE  CFDF FFE7          	movff	indf2,indf1
  7085                           
  7086                           ;can.c: 208: txBuffer[txBufferPtrIn].filhit = msgPtr->filhit;
  7087  001EC2  EE20 F00F          	lfsr	2,15
  7088  001EC6  5001               	movf	i2Can_PutMessage@msgPtr,w,c
  7089  001EC8  26D9               	addwf	fsr2l,f,c
  7090  001ECA  5002               	movf	i2Can_PutMessage@msgPtr+1,w,c
  7091  001ECC  22DA               	addwfc	fsr2h,f,c
  7092  001ECE  0100               	movlb	0	; () banked
  7093  001ED0  51C2               	movf	_txBufferPtrIn& (0+255),w,b
  7094  001ED2  0D11               	mullw	17
  7095  001ED4  0E0F               	movlw	15
  7096  001ED6  26F3               	addwf	prodl,f,c
  7097  001ED8  0E00               	movlw	0
  7098  001EDA  22F4               	addwfc	prodh,f,c
  7099  001EDC  0E24               	movlw	low _txBuffer
  7100  001EDE  24F3               	addwf	prodl,w,c
  7101  001EE0  6EE1               	movwf	fsr1l,c
  7102  001EE2  0E01               	movlw	high _txBuffer
  7103  001EE4  20F4               	addwfc	prodh,w,c
  7104  001EE6  6EE2               	movwf	fsr1h,c
  7105  001EE8  CFDF FFE7          	movff	indf2,indf1
  7106                           
  7107                           ;can.c: 209: txBuffer[txBufferPtrIn].identifier = msgPtr->identifier;
  7108  001EEC  EE20 F001          	lfsr	2,1
  7109  001EF0  5001               	movf	i2Can_PutMessage@msgPtr,w,c
  7110  001EF2  26D9               	addwf	fsr2l,f,c
  7111  001EF4  5002               	movf	i2Can_PutMessage@msgPtr+1,w,c
  7112  001EF6  22DA               	addwfc	fsr2h,f,c
  7113  001EF8  0100               	movlb	0	; () banked
  7114  001EFA  51C2               	movf	_txBufferPtrIn& (0+255),w,b
  7115  001EFC  0D11               	mullw	17
  7116  001EFE  0E01               	movlw	1
  7117  001F00  26F3               	addwf	prodl,f,c
  7118  001F02  0E00               	movlw	0
  7119  001F04  22F4               	addwfc	prodh,f,c
  7120  001F06  0E24               	movlw	low _txBuffer
  7121  001F08  24F3               	addwf	prodl,w,c
  7122  001F0A  6EE1               	movwf	fsr1l,c
  7123  001F0C  0E01               	movlw	high _txBuffer
  7124  001F0E  20F4               	addwfc	prodh,w,c
  7125  001F10  6EE2               	movwf	fsr1h,c
  7126  001F12  CFDE FFE6          	movff	postinc2,postinc1
  7127  001F16  CFDE FFE6          	movff	postinc2,postinc1
  7128  001F1A  CFDE FFE6          	movff	postinc2,postinc1
  7129  001F1E  CFDE FFE6          	movff	postinc2,postinc1
  7130                           
  7131                           ;can.c: 210: txBuffer[txBufferPtrIn].rtr = msgPtr->rtr;
  7132  001F22  EE20 F00E          	lfsr	2,14
  7133  001F26  5001               	movf	i2Can_PutMessage@msgPtr,w,c
  7134  001F28  26D9               	addwf	fsr2l,f,c
  7135  001F2A  5002               	movf	i2Can_PutMessage@msgPtr+1,w,c
  7136  001F2C  22DA               	addwfc	fsr2h,f,c
  7137  001F2E  0100               	movlb	0	; () banked
  7138  001F30  51C2               	movf	_txBufferPtrIn& (0+255),w,b
  7139  001F32  0D11               	mullw	17
  7140  001F34  0E0E               	movlw	14
  7141  001F36  26F3               	addwf	prodl,f,c
  7142  001F38  0E00               	movlw	0
  7143  001F3A  22F4               	addwfc	prodh,f,c
  7144  001F3C  0E24               	movlw	low _txBuffer
  7145  001F3E  24F3               	addwf	prodl,w,c
  7146  001F40  6EE1               	movwf	fsr1l,c
  7147  001F42  0E01               	movlw	high _txBuffer
  7148  001F44  20F4               	addwfc	prodh,w,c
  7149  001F46  6EE2               	movwf	fsr1h,c
  7150  001F48  CFDF FFE7          	movff	indf2,indf1
  7151                           
  7152                           ;can.c: 211: txBuffer[txBufferPtrIn].txPrio = msgPtr->txPrio;
  7153  001F4C  EE20 F010          	lfsr	2,16
  7154  001F50  5001               	movf	i2Can_PutMessage@msgPtr,w,c
  7155  001F52  26D9               	addwf	fsr2l,f,c
  7156  001F54  5002               	movf	i2Can_PutMessage@msgPtr+1,w,c
  7157  001F56  22DA               	addwfc	fsr2h,f,c
  7158  001F58  0100               	movlb	0	; () banked
  7159  001F5A  51C2               	movf	_txBufferPtrIn& (0+255),w,b
  7160  001F5C  0D11               	mullw	17
  7161  001F5E  0E10               	movlw	16
  7162  001F60  26F3               	addwf	prodl,f,c
  7163  001F62  0E00               	movlw	0
  7164  001F64  22F4               	addwfc	prodh,f,c
  7165  001F66  0E24               	movlw	low _txBuffer
  7166  001F68  24F3               	addwf	prodl,w,c
  7167  001F6A  6EE1               	movwf	fsr1l,c
  7168  001F6C  0E01               	movlw	high _txBuffer
  7169  001F6E  20F4               	addwfc	prodh,w,c
  7170  001F70  6EE2               	movwf	fsr1h,c
  7171  001F72  CFDF FFE7          	movff	indf2,indf1
  7172                           
  7173                           ; BSR set to: 0
  7174                           ;can.c: 212: for(i=0;i< msgPtr->dlc;i++)
  7175  001F76  0E00               	movlw	0
  7176  001F78  6E05               	movwf	i2Can_PutMessage@i,c
  7177  001F7A  D026               	goto	i2l2404
  7178  001F7C                     i2l2400:
  7179                           
  7180                           ; BSR set to: 0
  7181                           ;can.c: 213: {
  7182                           ;can.c: 214: txBuffer[txBufferPtrIn].dta[i] = msgPtr->dta[i];
  7183  001F7C  5005               	movf	i2Can_PutMessage@i,w,c
  7184  001F7E  0D01               	mullw	1
  7185  001F80  0E06               	movlw	6
  7186  001F82  26F3               	addwf	prodl,f,c
  7187  001F84  0E00               	movlw	0
  7188  001F86  22F4               	addwfc	prodh,f,c
  7189  001F88  50F3               	movf	prodl,w,c
  7190  001F8A  2401               	addwf	i2Can_PutMessage@msgPtr,w,c
  7191  001F8C  6ED9               	movwf	fsr2l,c
  7192  001F8E  50F4               	movf	prodh,w,c
  7193  001F90  2002               	addwfc	i2Can_PutMessage@msgPtr+1,w,c
  7194  001F92  6EDA               	movwf	fsr2h,c
  7195  001F94  5005               	movf	i2Can_PutMessage@i,w,c
  7196  001F96  0D01               	mullw	1
  7197  001F98  0E06               	movlw	6
  7198  001F9A  26F3               	addwf	prodl,f,c
  7199  001F9C  0E00               	movlw	0
  7200  001F9E  22F4               	addwfc	prodh,f,c
  7201  001FA0  0E24               	movlw	low _txBuffer
  7202  001FA2  6E03               	movwf	??i2_Can_PutMessage& (0+255),c
  7203  001FA4  0E01               	movlw	high _txBuffer
  7204  001FA6  6E04               	movwf	(??i2_Can_PutMessage+1)& (0+255),c
  7205  001FA8  50F3               	movf	prodl,w,c
  7206  001FAA  2603               	addwf	??i2_Can_PutMessage,f,c
  7207  001FAC  50F4               	movf	prodh,w,c
  7208  001FAE  2204               	addwfc	??i2_Can_PutMessage+1,f,c
  7209  001FB0  0100               	movlb	0	; () banked
  7210  001FB2  51C2               	movf	_txBufferPtrIn& (0+255),w,b
  7211  001FB4  0D11               	mullw	17
  7212  001FB6  50F3               	movf	prodl,w,c
  7213  001FB8  2403               	addwf	??i2_Can_PutMessage,w,c
  7214  001FBA  6EE1               	movwf	fsr1l,c
  7215  001FBC  50F4               	movf	prodh,w,c
  7216  001FBE  2004               	addwfc	??i2_Can_PutMessage+1,w,c
  7217  001FC0  6EE2               	movwf	fsr1h,c
  7218  001FC2  CFDF FFE7          	movff	indf2,indf1
  7219                           
  7220                           ; BSR set to: 0
  7221  001FC6  2A05               	incf	i2Can_PutMessage@i,f,c
  7222  001FC8                     i2l2404:
  7223                           
  7224                           ; BSR set to: 0
  7225  001FC8  EE20 F005          	lfsr	2,5
  7226  001FCC  5001               	movf	i2Can_PutMessage@msgPtr,w,c
  7227  001FCE  26D9               	addwf	fsr2l,f,c
  7228  001FD0  5002               	movf	i2Can_PutMessage@msgPtr+1,w,c
  7229  001FD2  22DA               	addwfc	fsr2h,f,c
  7230  001FD4  50DE               	movf	postinc2,w,c
  7231  001FD6  5C05               	subwf	i2Can_PutMessage@i,w,c
  7232  001FD8  A0D8               	btfss	status,0,c
  7233  001FDA  D7D0               	goto	i2l2400
  7234                           
  7235                           ; BSR set to: 0
  7236                           ;can.c: 215: }
  7237                           ;can.c: 216: INT3IE = 0;
  7238  001FDC  9AF0               	bcf	intcon3,5,c	;volatile
  7239                           
  7240                           ; BSR set to: 0
  7241                           ;can.c: 217: txBufferCount++;
  7242  001FDE  0100               	movlb	0	; () banked
  7243  001FE0  2BC1               	incf	_txBufferCount& (0+255),f,b
  7244                           
  7245                           ; BSR set to: 0
  7246                           ;can.c: 218: txBufferPtrIn = (txBufferPtrIn + 1) % 4;
  7247  001FE2  0100               	movlb	0	; () banked
  7248  001FE4  29C2               	incf	_txBufferPtrIn& (0+255),w,b
  7249  001FE6  0B03               	andlw	3
  7250  001FE8  0100               	movlb	0	; () banked
  7251  001FEA  6FC2               	movwf	_txBufferPtrIn& (0+255),b
  7252                           
  7253                           ; BSR set to: 0
  7254                           ;can.c: 219: INT3IE = 1;
  7255  001FEC  8AF0               	bsf	intcon3,5,c	;volatile
  7256                           
  7257                           ; BSR set to: 0
  7258                           ;can.c: 220: INT3IF = 1;
  7259  001FEE  84F0               	bsf	intcon3,2,c	;volatile
  7260                           
  7261                           ; BSR set to: 0
  7262                           ;can.c: 223: else
  7263                           ;can.c: 224: {
  7264                           ;can.c: 225: return 1;
  7265                           ;	Return value of i2_Can_PutMessage is never used
  7266                           
  7267                           ; BSR set to: 0
  7268                           ;can.c: 222: }
  7269                           
  7270                           ; BSR set to: 0
  7271                           ;can.c: 221: return 0;
  7272                           ;	Return value of i2_Can_PutMessage is never used
  7273  001FF0  0012               	return	
  7274  001FF2                     __end_ofi2_Can_PutMessage:
  7275                           	opt stack 0
  7276                           pclatu	equ	0xFFB
  7277                           pclath	equ	0xFFA
  7278                           tblptru	equ	0xFF8
  7279                           tblptrh	equ	0xFF7
  7280                           tblptrl	equ	0xFF6
  7281                           tablat	equ	0xFF5
  7282                           prodh	equ	0xFF4
  7283                           prodl	equ	0xFF3
  7284                           intcon	equ	0xFF2
  7285                           intcon2	equ	0xFF1
  7286                           intcon3	equ	0xFF0
  7287                           postinc0	equ	0xFEE
  7288                           fsr0h	equ	0xFEA
  7289                           fsr0l	equ	0xFE9
  7290                           wreg	equ	0xFE8
  7291                           indf1	equ	0xFE7
  7292                           postinc1	equ	0xFE6
  7293                           postdec1	equ	0xFE5
  7294                           fsr1h	equ	0xFE2
  7295                           fsr1l	equ	0xFE1
  7296                           indf2	equ	0xFDF
  7297                           postinc2	equ	0xFDE
  7298                           fsr2h	equ	0xFDA
  7299                           fsr2l	equ	0xFD9
  7300                           status	equ	0xFD8
  7301                           
  7302 ;; *************** function i2_Can_GetMessage *****************
  7303 ;; Defined at:
  7304 ;;		line 169 in file "can.c"
  7305 ;; Parameters:    Size  Location     Type
  7306 ;;  msgPtr          2    0[COMRAM] PTR struct CANMESSAGE
  7307 ;;		 -> message(17), 
  7308 ;; Auto vars:     Size  Location     Type
  7309 ;;  Can_GetMessa    1    4[COMRAM] unsigned char 
  7310 ;; Return value:  Size  Location     Type
  7311 ;;                  1    wreg      unsigned char 
  7312 ;; Registers used:
  7313 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7314 ;; Tracked objects:
  7315 ;;		On entry : 0/0
  7316 ;;		On exit  : 0/0
  7317 ;;		Unchanged: 0/0
  7318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7319 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7320 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7321 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7322 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7323 ;;Total ram usage:        5 bytes
  7324 ;; Hardware stack levels used:    1
  7325 ;; This function calls:
  7326 ;;		Nothing
  7327 ;; This function is called by:
  7328 ;;		_requestPed
  7329 ;; This function uses a non-reentrant model
  7330 ;;
  7331                           
  7332                           	psect	text31
  7333  0022E8                     __ptext31:
  7334                           	opt stack 0
  7335  0022E8                     i2_Can_GetMessage:
  7336                           	opt stack 20
  7337                           
  7338                           ;can.c: 171: uint8_t i;
  7339                           ;can.c: 172: if(rxBufferCount > 0)
  7340                           
  7341                           ; BSR set to: 0
  7342                           ;incstack = 0
  7343  0022E8  5059               	movf	_rxBufferCount,w,c
  7344  0022EA  B4D8               	btfsc	status,2,c
  7345  0022EC  D0A6               	goto	i2l2628
  7346                           
  7347                           ;can.c: 173: {
  7348                           ;can.c: 174: msgPtr->dlc = rxBuffer[rxBufferPtrOut].dlc;
  7349  0022EE  0100               	movlb	0	; () banked
  7350  0022F0  51C3               	movf	_rxBufferPtrOut& (0+255),w,b
  7351  0022F2  0D11               	mullw	17
  7352  0022F4  0E05               	movlw	5
  7353  0022F6  26F3               	addwf	prodl,f,c
  7354  0022F8  0E00               	movlw	0
  7355  0022FA  22F4               	addwfc	prodh,f,c
  7356  0022FC  0E68               	movlw	low _rxBuffer
  7357  0022FE  24F3               	addwf	prodl,w,c
  7358  002300  6ED9               	movwf	fsr2l,c
  7359  002302  0E01               	movlw	high _rxBuffer
  7360  002304  20F4               	addwfc	prodh,w,c
  7361  002306  6EDA               	movwf	fsr2h,c
  7362  002308  EE10 F005          	lfsr	1,5
  7363  00230C  5001               	movf	i2Can_GetMessage@msgPtr,w,c
  7364  00230E  26E1               	addwf	fsr1l,f,c
  7365  002310  5002               	movf	i2Can_GetMessage@msgPtr+1,w,c
  7366  002312  22E2               	addwfc	fsr1h,f,c
  7367  002314  CFDF FFE7          	movff	indf2,indf1
  7368                           
  7369                           ;can.c: 175: msgPtr->extended_identifier = rxBuffer[rxBufferPtrOut].extended_identifier;
  7370  002318  0100               	movlb	0	; () banked
  7371  00231A  51C3               	movf	_rxBufferPtrOut& (0+255),w,b
  7372  00231C  0D11               	mullw	17
  7373  00231E  0E68               	movlw	low _rxBuffer
  7374  002320  24F3               	addwf	prodl,w,c
  7375  002322  6ED9               	movwf	fsr2l,c
  7376  002324  0E01               	movlw	high _rxBuffer
  7377  002326  20F4               	addwfc	prodh,w,c
  7378  002328  6EDA               	movwf	fsr2h,c
  7379  00232A  C001  FFE1         	movff	i2Can_GetMessage@msgPtr,fsr1l
  7380  00232E  C002  FFE2         	movff	i2Can_GetMessage@msgPtr+1,fsr1h
  7381  002332  CFDF FFE7          	movff	indf2,indf1
  7382                           
  7383                           ;can.c: 176: msgPtr->filhit = rxBuffer[rxBufferPtrOut].filhit;
  7384  002336  0100               	movlb	0	; () banked
  7385  002338  51C3               	movf	_rxBufferPtrOut& (0+255),w,b
  7386  00233A  0D11               	mullw	17
  7387  00233C  0E0F               	movlw	15
  7388  00233E  26F3               	addwf	prodl,f,c
  7389  002340  0E00               	movlw	0
  7390  002342  22F4               	addwfc	prodh,f,c
  7391  002344  0E68               	movlw	low _rxBuffer
  7392  002346  24F3               	addwf	prodl,w,c
  7393  002348  6ED9               	movwf	fsr2l,c
  7394  00234A  0E01               	movlw	high _rxBuffer
  7395  00234C  20F4               	addwfc	prodh,w,c
  7396  00234E  6EDA               	movwf	fsr2h,c
  7397  002350  EE10 F00F          	lfsr	1,15
  7398  002354  5001               	movf	i2Can_GetMessage@msgPtr,w,c
  7399  002356  26E1               	addwf	fsr1l,f,c
  7400  002358  5002               	movf	i2Can_GetMessage@msgPtr+1,w,c
  7401  00235A  22E2               	addwfc	fsr1h,f,c
  7402  00235C  CFDF FFE7          	movff	indf2,indf1
  7403                           
  7404                           ;can.c: 177: msgPtr->identifier = rxBuffer[rxBufferPtrOut].identifier;
  7405  002360  0100               	movlb	0	; () banked
  7406  002362  51C3               	movf	_rxBufferPtrOut& (0+255),w,b
  7407  002364  0D11               	mullw	17
  7408  002366  0E01               	movlw	1
  7409  002368  26F3               	addwf	prodl,f,c
  7410  00236A  0E00               	movlw	0
  7411  00236C  22F4               	addwfc	prodh,f,c
  7412  00236E  0E68               	movlw	low _rxBuffer
  7413  002370  24F3               	addwf	prodl,w,c
  7414  002372  6ED9               	movwf	fsr2l,c
  7415  002374  0E01               	movlw	high _rxBuffer
  7416  002376  20F4               	addwfc	prodh,w,c
  7417  002378  6EDA               	movwf	fsr2h,c
  7418  00237A  EE10 F001          	lfsr	1,1
  7419  00237E  5001               	movf	i2Can_GetMessage@msgPtr,w,c
  7420  002380  26E1               	addwf	fsr1l,f,c
  7421  002382  5002               	movf	i2Can_GetMessage@msgPtr+1,w,c
  7422  002384  22E2               	addwfc	fsr1h,f,c
  7423  002386  CFDE FFE6          	movff	postinc2,postinc1
  7424  00238A  CFDE FFE6          	movff	postinc2,postinc1
  7425  00238E  CFDE FFE6          	movff	postinc2,postinc1
  7426  002392  CFDE FFE6          	movff	postinc2,postinc1
  7427                           
  7428                           ;can.c: 178: msgPtr->rtr = rxBuffer[rxBufferPtrOut].rtr;
  7429  002396  0100               	movlb	0	; () banked
  7430  002398  51C3               	movf	_rxBufferPtrOut& (0+255),w,b
  7431  00239A  0D11               	mullw	17
  7432  00239C  0E0E               	movlw	14
  7433  00239E  26F3               	addwf	prodl,f,c
  7434  0023A0  0E00               	movlw	0
  7435  0023A2  22F4               	addwfc	prodh,f,c
  7436  0023A4  0E68               	movlw	low _rxBuffer
  7437  0023A6  24F3               	addwf	prodl,w,c
  7438  0023A8  6ED9               	movwf	fsr2l,c
  7439  0023AA  0E01               	movlw	high _rxBuffer
  7440  0023AC  20F4               	addwfc	prodh,w,c
  7441  0023AE  6EDA               	movwf	fsr2h,c
  7442  0023B0  EE10 F00E          	lfsr	1,14
  7443  0023B4  5001               	movf	i2Can_GetMessage@msgPtr,w,c
  7444  0023B6  26E1               	addwf	fsr1l,f,c
  7445  0023B8  5002               	movf	i2Can_GetMessage@msgPtr+1,w,c
  7446  0023BA  22E2               	addwfc	fsr1h,f,c
  7447  0023BC  CFDF FFE7          	movff	indf2,indf1
  7448                           
  7449                           ; BSR set to: 0
  7450                           ;can.c: 179: for(i=0;i< msgPtr->dlc;i++)
  7451  0023C0  0E00               	movlw	0
  7452  0023C2  6E05               	movwf	i2Can_GetMessage@i,c
  7453  0023C4  D026               	goto	i2l2618
  7454  0023C6                     i2l2614:
  7455                           
  7456                           ; BSR set to: 0
  7457                           ;can.c: 180: {
  7458                           ;can.c: 181: msgPtr->dta[i] = rxBuffer[rxBufferPtrOut].dta[i];
  7459  0023C6  5005               	movf	i2Can_GetMessage@i,w,c
  7460  0023C8  0D01               	mullw	1
  7461  0023CA  0E06               	movlw	6
  7462  0023CC  26F3               	addwf	prodl,f,c
  7463  0023CE  0E00               	movlw	0
  7464  0023D0  22F4               	addwfc	prodh,f,c
  7465  0023D2  0E68               	movlw	low _rxBuffer
  7466  0023D4  6E03               	movwf	??i2_Can_GetMessage& (0+255),c
  7467  0023D6  0E01               	movlw	high _rxBuffer
  7468  0023D8  6E04               	movwf	(??i2_Can_GetMessage+1)& (0+255),c
  7469  0023DA  50F3               	movf	prodl,w,c
  7470  0023DC  2603               	addwf	??i2_Can_GetMessage,f,c
  7471  0023DE  50F4               	movf	prodh,w,c
  7472  0023E0  2204               	addwfc	??i2_Can_GetMessage+1,f,c
  7473  0023E2  0100               	movlb	0	; () banked
  7474  0023E4  51C3               	movf	_rxBufferPtrOut& (0+255),w,b
  7475  0023E6  0D11               	mullw	17
  7476  0023E8  50F3               	movf	prodl,w,c
  7477  0023EA  2403               	addwf	??i2_Can_GetMessage,w,c
  7478  0023EC  6ED9               	movwf	fsr2l,c
  7479  0023EE  50F4               	movf	prodh,w,c
  7480  0023F0  2004               	addwfc	??i2_Can_GetMessage+1,w,c
  7481  0023F2  6EDA               	movwf	fsr2h,c
  7482  0023F4  5005               	movf	i2Can_GetMessage@i,w,c
  7483  0023F6  0D01               	mullw	1
  7484  0023F8  0E06               	movlw	6
  7485  0023FA  26F3               	addwf	prodl,f,c
  7486  0023FC  0E00               	movlw	0
  7487  0023FE  22F4               	addwfc	prodh,f,c
  7488  002400  50F3               	movf	prodl,w,c
  7489  002402  2401               	addwf	i2Can_GetMessage@msgPtr,w,c
  7490  002404  6EE1               	movwf	fsr1l,c
  7491  002406  50F4               	movf	prodh,w,c
  7492  002408  2002               	addwfc	i2Can_GetMessage@msgPtr+1,w,c
  7493  00240A  6EE2               	movwf	fsr1h,c
  7494  00240C  CFDF FFE7          	movff	indf2,indf1
  7495                           
  7496                           ; BSR set to: 0
  7497  002410  2A05               	incf	i2Can_GetMessage@i,f,c
  7498  002412                     i2l2618:
  7499                           
  7500                           ; BSR set to: 0
  7501  002412  EE20 F005          	lfsr	2,5
  7502  002416  5001               	movf	i2Can_GetMessage@msgPtr,w,c
  7503  002418  26D9               	addwf	fsr2l,f,c
  7504  00241A  5002               	movf	i2Can_GetMessage@msgPtr+1,w,c
  7505  00241C  22DA               	addwfc	fsr2h,f,c
  7506  00241E  50DE               	movf	postinc2,w,c
  7507  002420  5C05               	subwf	i2Can_GetMessage@i,w,c
  7508  002422  A0D8               	btfss	status,0,c
  7509  002424  D7D0               	goto	i2l2614
  7510                           
  7511                           ; BSR set to: 0
  7512                           ;can.c: 182: }
  7513                           ;can.c: 183: INT3IE = 0;
  7514  002426  9AF0               	bcf	intcon3,5,c	;volatile
  7515                           
  7516                           ; BSR set to: 0
  7517                           ;can.c: 184: rxBufferPtrOut = (rxBufferPtrOut + 1) % 4;
  7518  002428  0100               	movlb	0	; () banked
  7519  00242A  29C3               	incf	_rxBufferPtrOut& (0+255),w,b
  7520  00242C  0B03               	andlw	3
  7521  00242E  0100               	movlb	0	; () banked
  7522  002430  6FC3               	movwf	_rxBufferPtrOut& (0+255),b
  7523                           
  7524                           ; BSR set to: 0
  7525                           ;can.c: 185: rxBufferCount--;
  7526  002432  0659               	decf	_rxBufferCount,f,c
  7527                           
  7528                           ; BSR set to: 0
  7529                           ;can.c: 186: INT3IE = 1;
  7530  002434  8AF0               	bsf	intcon3,5,c	;volatile
  7531                           
  7532                           ;can.c: 187: return 0;
  7533  002436  0E00               	movlw	0
  7534                           
  7535                           ; BSR set to: 0
  7536  002438  0012               	return	
  7537  00243A                     i2l2628:
  7538                           
  7539                           ;can.c: 188: }
  7540                           ;can.c: 189: return 1;
  7541  00243A  0E01               	movlw	1
  7542  00243C  0012               	return	
  7543  00243E                     __end_ofi2_Can_GetMessage:
  7544                           	opt stack 0
  7545                           pclatu	equ	0xFFB
  7546                           pclath	equ	0xFFA
  7547                           tblptru	equ	0xFF8
  7548                           tblptrh	equ	0xFF7
  7549                           tblptrl	equ	0xFF6
  7550                           tablat	equ	0xFF5
  7551                           prodh	equ	0xFF4
  7552                           prodl	equ	0xFF3
  7553                           intcon	equ	0xFF2
  7554                           intcon2	equ	0xFF1
  7555                           intcon3	equ	0xFF0
  7556                           postinc0	equ	0xFEE
  7557                           fsr0h	equ	0xFEA
  7558                           fsr0l	equ	0xFE9
  7559                           wreg	equ	0xFE8
  7560                           indf1	equ	0xFE7
  7561                           postinc1	equ	0xFE6
  7562                           postdec1	equ	0xFE5
  7563                           fsr1h	equ	0xFE2
  7564                           fsr1l	equ	0xFE1
  7565                           indf2	equ	0xFDF
  7566                           postinc2	equ	0xFDE
  7567                           fsr2h	equ	0xFDA
  7568                           fsr2l	equ	0xFD9
  7569                           status	equ	0xFD8
  7570                           
  7571 ;; *************** function _Can_Isr *****************
  7572 ;; Defined at:
  7573 ;;		line 50 in file "can.c"
  7574 ;; Parameters:    Size  Location     Type
  7575 ;;		None
  7576 ;; Auto vars:     Size  Location     Type
  7577 ;;  retCode         1   72[COMRAM] unsigned char 
  7578 ;; Return value:  Size  Location     Type
  7579 ;;                  1    wreg      void 
  7580 ;; Registers used:
  7581 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7582 ;; Tracked objects:
  7583 ;;		On entry : 0/0
  7584 ;;		On exit  : 0/0
  7585 ;;		Unchanged: 0/0
  7586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7588 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7589 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7590 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7591 ;;Total ram usage:        2 bytes
  7592 ;; Hardware stack levels used:    1
  7593 ;; Hardware stack levels required when called:    6
  7594 ;; This function calls:
  7595 ;;		_Can_GetStatus
  7596 ;;		_Can_OutBufferStatus
  7597 ;;		_Can_ReadInBuffer
  7598 ;;		_Can_WriteOutBuffer
  7599 ;; This function is called by:
  7600 ;;		_high_isr
  7601 ;; This function uses a non-reentrant model
  7602 ;;
  7603                           
  7604                           	psect	text32
  7605  0031D4                     __ptext32:
  7606                           	opt stack 0
  7607  0031D4                     _Can_Isr:
  7608                           	opt stack 17
  7609                           
  7610                           ;can.c: 52: static uint8_t nbTxBuf=3;
  7611                           ;can.c: 53: uint8_t retCode;
  7612                           ;can.c: 55: retCode = Can_GetStatus();
  7613                           
  7614                           ;incstack = 0
  7615  0031D4  EC0C  F018         	call	_Can_GetStatus	;wreg free
  7616  0031D8  6E49               	movwf	Can_Isr@retCode,c
  7617                           
  7618                           ;can.c: 57: if((retCode & 0x03) != 0)
  7619  0031DA  C049  F048         	movff	Can_Isr@retCode,??_Can_Isr
  7620  0031DE  0E03               	movlw	3
  7621  0031E0  1648               	andwf	??_Can_Isr,f,c
  7622  0031E2  A4D8               	btfss	status,2,c
  7623                           
  7624                           ;can.c: 58: {
  7625                           ;can.c: 59: Can_ReadInBuffer();
  7626  0031E4  EC0E  F019         	call	_Can_ReadInBuffer	;wreg free
  7627                           
  7628                           ;can.c: 60: }
  7629                           ;can.c: 62: if((retCode & 0x1C) != 0)
  7630  0031E8  C049  F048         	movff	Can_Isr@retCode,??_Can_Isr
  7631  0031EC  0E1C               	movlw	28
  7632  0031EE  1648               	andwf	??_Can_Isr,f,c
  7633  0031F0  B4D8               	btfsc	status,2,c
  7634  0031F2  D00B               	goto	i2l3238
  7635                           
  7636                           ;can.c: 63: {
  7637                           ;can.c: 64: if((retCode & 0x10) != 0)
  7638  0031F4  B849               	btfsc	Can_Isr@retCode,4,c
  7639                           
  7640                           ;can.c: 65: {
  7641                           ;can.c: 66: nbTxBuf++;
  7642  0031F6  2A5E               	incf	Can_Isr@nbTxBuf,f,c
  7643                           
  7644                           ;can.c: 67: }
  7645                           ;can.c: 68: if((retCode & 0x08) != 0)
  7646  0031F8  B649               	btfsc	Can_Isr@retCode,3,c
  7647                           
  7648                           ;can.c: 69: {
  7649                           ;can.c: 70: nbTxBuf++;
  7650  0031FA  2A5E               	incf	Can_Isr@nbTxBuf,f,c
  7651                           
  7652                           ;can.c: 71: }
  7653                           ;can.c: 72: if((retCode & 0x04) != 0)
  7654  0031FC  A449               	btfss	Can_Isr@retCode,2,c
  7655  0031FE  D005               	goto	i2l3238
  7656                           
  7657                           ;can.c: 73: {
  7658                           ;can.c: 74: nbTxBuf++;
  7659  003200  2A5E               	incf	Can_Isr@nbTxBuf,f,c
  7660                           
  7661                           ;can.c: 75: }
  7662                           ;can.c: 76: }
  7663                           ;can.c: 78: while((Can_OutBufferStatus() != 0) && (nbTxBuf != 0))
  7664  003202  D003               	goto	i2l3238
  7665  003204                     i2l3234:
  7666                           
  7667                           ;can.c: 79: {
  7668                           ;can.c: 80: Can_WriteOutBuffer();
  7669  003204  EC1F  F01A         	call	_Can_WriteOutBuffer	;wreg free
  7670                           
  7671                           ;can.c: 81: nbTxBuf--;
  7672  003208  065E               	decf	Can_Isr@nbTxBuf,f,c
  7673  00320A                     i2l3238:
  7674  00320A  EC42  F01A         	call	_Can_OutBufferStatus	;wreg free
  7675  00320E  0900               	iorlw	0
  7676  003210  B4D8               	btfsc	status,2,c
  7677  003212  0012               	return	
  7678  003214  505E               	movf	Can_Isr@nbTxBuf,w,c
  7679  003216  B4D8               	btfsc	status,2,c
  7680  003218  0012               	return	
  7681  00321A  D7F4               	goto	i2l3234
  7682  00321C                     __end_of_Can_Isr:
  7683                           	opt stack 0
  7684                           pclatu	equ	0xFFB
  7685                           pclath	equ	0xFFA
  7686                           tblptru	equ	0xFF8
  7687                           tblptrh	equ	0xFF7
  7688                           tblptrl	equ	0xFF6
  7689                           tablat	equ	0xFF5
  7690                           prodh	equ	0xFF4
  7691                           prodl	equ	0xFF3
  7692                           intcon	equ	0xFF2
  7693                           intcon2	equ	0xFF1
  7694                           intcon3	equ	0xFF0
  7695                           postinc0	equ	0xFEE
  7696                           fsr0h	equ	0xFEA
  7697                           fsr0l	equ	0xFE9
  7698                           wreg	equ	0xFE8
  7699                           indf1	equ	0xFE7
  7700                           postinc1	equ	0xFE6
  7701                           postdec1	equ	0xFE5
  7702                           fsr1h	equ	0xFE2
  7703                           fsr1l	equ	0xFE1
  7704                           indf2	equ	0xFDF
  7705                           postinc2	equ	0xFDE
  7706                           fsr2h	equ	0xFDA
  7707                           fsr2l	equ	0xFD9
  7708                           status	equ	0xFD8
  7709                           
  7710 ;; *************** function _Can_WriteOutBuffer *****************
  7711 ;; Defined at:
  7712 ;;		line 127 in file "can.c"
  7713 ;; Parameters:    Size  Location     Type
  7714 ;;		None
  7715 ;; Auto vars:     Size  Location     Type
  7716 ;;		None
  7717 ;; Return value:  Size  Location     Type
  7718 ;;                  1    wreg      unsigned char 
  7719 ;; Registers used:
  7720 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7721 ;; Tracked objects:
  7722 ;;		On entry : 0/0
  7723 ;;		On exit  : 0/0
  7724 ;;		Unchanged: 0/0
  7725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7730 ;;Total ram usage:        0 bytes
  7731 ;; Hardware stack levels used:    1
  7732 ;; Hardware stack levels required when called:    5
  7733 ;; This function calls:
  7734 ;;		_Can_SendMessage
  7735 ;; This function is called by:
  7736 ;;		_Can_Isr
  7737 ;; This function uses a non-reentrant model
  7738 ;;
  7739                           
  7740                           	psect	text33
  7741  00343E                     __ptext33:
  7742                           	opt stack 0
  7743  00343E                     _Can_WriteOutBuffer:
  7744                           	opt stack 17
  7745                           
  7746                           ;can.c: 129: Can_SendMessage(&txBuffer[txBufferPtrOut]);
  7747                           
  7748                           ;incstack = 0
  7749  00343E  5058               	movf	_txBufferPtrOut,w,c
  7750  003440  0D11               	mullw	17
  7751  003442  0E24               	movlw	low _txBuffer
  7752  003444  24F3               	addwf	prodl,w,c
  7753  003446  6E36               	movwf	Can_SendMessage@msg,c
  7754  003448  0E01               	movlw	high _txBuffer
  7755  00344A  20F4               	addwfc	prodh,w,c
  7756  00344C  6E37               	movwf	Can_SendMessage@msg+1,c
  7757  00344E  ECDA  F017         	call	_Can_SendMessage	;wreg free
  7758                           
  7759                           ;can.c: 130: txBufferPtrOut = (txBufferPtrOut + 1) % 4;
  7760  003452  2858               	incf	_txBufferPtrOut,w,c
  7761  003454  0B03               	andlw	3
  7762  003456  6E58               	movwf	_txBufferPtrOut,c
  7763                           
  7764                           ;can.c: 131: txBufferCount--;
  7765  003458  0100               	movlb	0	; () banked
  7766  00345A  07C1               	decf	_txBufferCount& (0+255),f,b
  7767  00345C  0012               	return	
  7768  00345E                     __end_of_Can_WriteOutBuffer:
  7769                           	opt stack 0
  7770                           pclatu	equ	0xFFB
  7771                           pclath	equ	0xFFA
  7772                           tblptru	equ	0xFF8
  7773                           tblptrh	equ	0xFF7
  7774                           tblptrl	equ	0xFF6
  7775                           tablat	equ	0xFF5
  7776                           prodh	equ	0xFF4
  7777                           prodl	equ	0xFF3
  7778                           intcon	equ	0xFF2
  7779                           intcon2	equ	0xFF1
  7780                           intcon3	equ	0xFF0
  7781                           postinc0	equ	0xFEE
  7782                           fsr0h	equ	0xFEA
  7783                           fsr0l	equ	0xFE9
  7784                           wreg	equ	0xFE8
  7785                           indf1	equ	0xFE7
  7786                           postinc1	equ	0xFE6
  7787                           postdec1	equ	0xFE5
  7788                           fsr1h	equ	0xFE2
  7789                           fsr1l	equ	0xFE1
  7790                           indf2	equ	0xFDF
  7791                           postinc2	equ	0xFDE
  7792                           fsr2h	equ	0xFDA
  7793                           fsr2l	equ	0xFD9
  7794                           status	equ	0xFD8
  7795                           
  7796 ;; *************** function _Can_SendMessage *****************
  7797 ;; Defined at:
  7798 ;;		line 426 in file "can.c"
  7799 ;; Parameters:    Size  Location     Type
  7800 ;;  msg             2   53[COMRAM] PTR const struct CANMESS
  7801 ;;		 -> txBuffer(68), 
  7802 ;; Auto vars:     Size  Location     Type
  7803 ;;  buf             4   55[COMRAM] unsigned char [4]
  7804 ;;  txbuf_n         1   60[COMRAM] unsigned char 
  7805 ;;  res             1   59[COMRAM] unsigned char 
  7806 ;; Return value:  Size  Location     Type
  7807 ;;                  1    wreg      unsigned char 
  7808 ;; Registers used:
  7809 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7810 ;; Tracked objects:
  7811 ;;		On entry : 0/0
  7812 ;;		On exit  : 0/0
  7813 ;;		Unchanged: 0/0
  7814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7815 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7816 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7818 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7819 ;;Total ram usage:        8 bytes
  7820 ;; Hardware stack levels used:    1
  7821 ;; Hardware stack levels required when called:    4
  7822 ;; This function calls:
  7823 ;;		_Mcp2515GetNextFreeTXBuf
  7824 ;;		_Mcp2515WriteCanMsg
  7825 ;;		i2_Spi_Write
  7826 ;; This function is called by:
  7827 ;;		_Can_WriteOutBuffer
  7828 ;; This function uses a non-reentrant model
  7829 ;;
  7830                           
  7831                           	psect	text34
  7832  002FB4                     __ptext34:
  7833                           	opt stack 0
  7834  002FB4                     _Can_SendMessage:
  7835                           	opt stack 17
  7836  002FB4                     
  7837                           ;can.c: 433: {
  7838                           ;can.c: 434: res = Mcp2515GetNextFreeTXBuf(&txbuf_n);
  7839  002FB4  0E3D               	movlw	low Can_SendMessage@txbuf_n
  7840  002FB6  6E13               	movwf	Mcp2515GetNextFreeTXBuf@txbuf_n,c
  7841  002FB8  0E00               	movlw	high Can_SendMessage@txbuf_n
  7842  002FBA  6E14               	movwf	Mcp2515GetNextFreeTXBuf@txbuf_n+1,c
  7843  002FBC  EC0B  F016         	call	_Mcp2515GetNextFreeTXBuf	;wreg free
  7844  002FC0  6E3C               	movwf	Can_SendMessage@res,c
  7845                           
  7846                           ;can.c: 436: } while (res == (2));
  7847  002FC2  0E02               	movlw	2
  7848  002FC4  183C               	xorwf	Can_SendMessage@res,w,c
  7849  002FC6  B4D8               	btfsc	status,2,c
  7850  002FC8  D7F5               	goto	i2l2720
  7851                           
  7852                           ;can.c: 438: if (res != (2))
  7853  002FCA  0E02               	movlw	2
  7854  002FCC  183C               	xorwf	Can_SendMessage@res,w,c
  7855  002FCE  B4D8               	btfsc	status,2,c
  7856  002FD0  0012               	return	
  7857                           
  7858                           ;can.c: 439: {
  7859                           ;can.c: 440: Mcp2515WriteCanMsg( txbuf_n, msg);
  7860  002FD2  C036  F024         	movff	Can_SendMessage@msg,Mcp2515WriteCanMsg@msg
  7861  002FD6  C037  F025         	movff	Can_SendMessage@msg+1,Mcp2515WriteCanMsg@msg+1
  7862  002FDA  503D               	movf	Can_SendMessage@txbuf_n,w,c
  7863  002FDC  EC1F  F012         	call	_Mcp2515WriteCanMsg
  7864                           
  7865                           ;can.c: 441: buf[0] = 0x02;
  7866  002FE0  0E02               	movlw	2
  7867  002FE2  6E38               	movwf	Can_SendMessage@buf,c
  7868                           
  7869                           ;can.c: 442: buf[1] = txbuf_n-1;
  7870  002FE4  043D               	decf	Can_SendMessage@txbuf_n,w,c
  7871  002FE6  6E39               	movwf	Can_SendMessage@buf+1,c
  7872                           
  7873                           ;can.c: 443: buf[2] = 0x08 | msg->txPrio;
  7874  002FE8  EE20 F010          	lfsr	2,16
  7875  002FEC  5036               	movf	Can_SendMessage@msg,w,c
  7876  002FEE  26D9               	addwf	fsr2l,f,c
  7877  002FF0  5037               	movf	Can_SendMessage@msg+1,w,c
  7878  002FF2  22DA               	addwfc	fsr2h,f,c
  7879  002FF4  50DF               	movf	indf2,w,c
  7880  002FF6  0908               	iorlw	8
  7881  002FF8  6E3A               	movwf	Can_SendMessage@buf+2,c
  7882                           
  7883                           ;can.c: 444: Spi_Write(buf,3);
  7884  002FFA  0E38               	movlw	low Can_SendMessage@buf
  7885  002FFC  6E0D               	movwf	i2Spi_Write@tx,c
  7886  002FFE  0E00               	movlw	high Can_SendMessage@buf
  7887  003000  6E0E               	movwf	i2Spi_Write@tx+1,c
  7888  003002  0E03               	movlw	3
  7889  003004  6E0F               	movwf	i2Spi_Write@size,c
  7890  003006  0E00               	movlw	0
  7891  003008  6E10               	movwf	i2Spi_Write@size+1,c
  7892  00300A  0E00               	movlw	0
  7893  00300C  6E11               	movwf	i2Spi_Write@size+2,c
  7894  00300E  0E00               	movlw	0
  7895  003010  6E12               	movwf	i2Spi_Write@size+3,c
  7896  003012  ECE8  F019         	call	i2_Spi_Write	;wreg free
  7897                           
  7898                           ;can.c: 447: else
  7899                           ;can.c: 448: {
  7900                           ;can.c: 449: return (2);
  7901                           ;	Return value of _Can_SendMessage is never used
  7902                           
  7903                           ;can.c: 446: }
  7904                           
  7905                           ;can.c: 445: return (0);
  7906                           ;	Return value of _Can_SendMessage is never used
  7907  003016  0012               	return	
  7908  003018                     __end_of_Can_SendMessage:
  7909                           	opt stack 0
  7910                           pclatu	equ	0xFFB
  7911                           pclath	equ	0xFFA
  7912                           tblptru	equ	0xFF8
  7913                           tblptrh	equ	0xFF7
  7914                           tblptrl	equ	0xFF6
  7915                           tablat	equ	0xFF5
  7916                           prodh	equ	0xFF4
  7917                           prodl	equ	0xFF3
  7918                           intcon	equ	0xFF2
  7919                           intcon2	equ	0xFF1
  7920                           intcon3	equ	0xFF0
  7921                           postinc0	equ	0xFEE
  7922                           fsr0h	equ	0xFEA
  7923                           fsr0l	equ	0xFE9
  7924                           wreg	equ	0xFE8
  7925                           indf1	equ	0xFE7
  7926                           postinc1	equ	0xFE6
  7927                           postdec1	equ	0xFE5
  7928                           fsr1h	equ	0xFE2
  7929                           fsr1l	equ	0xFE1
  7930                           indf2	equ	0xFDF
  7931                           postinc2	equ	0xFDE
  7932                           fsr2h	equ	0xFDA
  7933                           fsr2l	equ	0xFD9
  7934                           status	equ	0xFD8
  7935                           
  7936 ;; *************** function _Mcp2515WriteCanMsg *****************
  7937 ;; Defined at:
  7938 ;;		line 272 in file "mcp2515.c"
  7939 ;; Parameters:    Size  Location     Type
  7940 ;;  buffer_sidh_    1    wreg     const unsigned char 
  7941 ;;  msg             2   35[COMRAM] PTR const struct CANMESS
  7942 ;;		 -> txBuffer(68), 
  7943 ;; Auto vars:     Size  Location     Type
  7944 ;;  buffer_sidh_    1   49[COMRAM] const unsigned char 
  7945 ;;  buf            10   39[COMRAM] unsigned char [10]
  7946 ;;  i               1   52[COMRAM] unsigned char 
  7947 ;;  mcp_addr        1   51[COMRAM] unsigned char 
  7948 ;;  dlc             1   50[COMRAM] unsigned char 
  7949 ;; Return value:  Size  Location     Type
  7950 ;;                  1    wreg      void 
  7951 ;; Registers used:
  7952 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7953 ;; Tracked objects:
  7954 ;;		On entry : 0/0
  7955 ;;		On exit  : 0/0
  7956 ;;		Unchanged: 0/0
  7957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7958 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7959 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7960 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7961 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7962 ;;Total ram usage:       18 bytes
  7963 ;; Hardware stack levels used:    1
  7964 ;; Hardware stack levels required when called:    3
  7965 ;; This function calls:
  7966 ;;		i2_Mcp2515WriteCanId
  7967 ;;		i2_Spi_Write
  7968 ;; This function is called by:
  7969 ;;		_Can_SendMessage
  7970 ;; This function uses a non-reentrant model
  7971 ;;
  7972                           
  7973                           	psect	text35
  7974  00243E                     __ptext35:
  7975                           	opt stack 0
  7976  00243E                     _Mcp2515WriteCanMsg:
  7977                           	opt stack 17
  7978                           
  7979                           ;incstack = 0
  7980                           ;Mcp2515WriteCanMsg@buffer_sidh_addr stored from wreg
  7981  00243E  6E32               	movwf	Mcp2515WriteCanMsg@buffer_sidh_addr,c
  7982                           
  7983                           ;mcp2515.c: 275: uint8_t mcp_addr, i, dlc;
  7984                           ;mcp2515.c: 276: uint8_t buf[10];
  7985                           ;mcp2515.c: 277: mcp_addr = buffer_sidh_addr;
  7986  002440  C032  F034         	movff	Mcp2515WriteCanMsg@buffer_sidh_addr,Mcp2515WriteCanMsg@mcp_addr
  7987                           
  7988                           ;mcp2515.c: 279: buf[0] = 0x02;
  7989  002444  0E02               	movlw	2
  7990  002446  6E28               	movwf	Mcp2515WriteCanMsg@buf,c
  7991                           
  7992                           ;mcp2515.c: 280: buf[1] = mcp_addr+5;
  7993  002448  5034               	movf	Mcp2515WriteCanMsg@mcp_addr,w,c
  7994  00244A  0F05               	addlw	5
  7995  00244C  6E29               	movwf	Mcp2515WriteCanMsg@buf+1,c
  7996                           
  7997                           ;mcp2515.c: 282: for(i=0;i<msg->dlc;i++)
  7998  00244E  0E00               	movlw	0
  7999  002450  6E35               	movwf	Mcp2515WriteCanMsg@i,c
  8000  002452  D01C               	goto	i2l2518
  8001  002454                     i2l2514:
  8002                           
  8003                           ;mcp2515.c: 283: {
  8004                           ;mcp2515.c: 284: buf[i+2] = msg->dta[i];
  8005  002454  5035               	movf	Mcp2515WriteCanMsg@i,w,c
  8006  002456  0D01               	mullw	1
  8007  002458  0E06               	movlw	6
  8008  00245A  26F3               	addwf	prodl,f,c
  8009  00245C  0E00               	movlw	0
  8010  00245E  22F4               	addwfc	prodh,f,c
  8011  002460  50F3               	movf	prodl,w,c
  8012  002462  2424               	addwf	Mcp2515WriteCanMsg@msg,w,c
  8013  002464  6ED9               	movwf	fsr2l,c
  8014  002466  50F4               	movf	prodh,w,c
  8015  002468  2025               	addwfc	Mcp2515WriteCanMsg@msg+1,w,c
  8016  00246A  6EDA               	movwf	fsr2h,c
  8017  00246C  5035               	movf	Mcp2515WriteCanMsg@i,w,c
  8018  00246E  6E26               	movwf	??_Mcp2515WriteCanMsg& (0+255),c
  8019  002470  6A27               	clrf	(??_Mcp2515WriteCanMsg+1)& (0+255),c
  8020  002472  0E02               	movlw	2
  8021  002474  2626               	addwf	??_Mcp2515WriteCanMsg,f,c
  8022  002476  0E00               	movlw	0
  8023  002478  2227               	addwfc	??_Mcp2515WriteCanMsg+1,f,c
  8024  00247A  0E28               	movlw	low Mcp2515WriteCanMsg@buf
  8025  00247C  2426               	addwf	??_Mcp2515WriteCanMsg,w,c
  8026  00247E  6EE1               	movwf	fsr1l,c
  8027  002480  0E00               	movlw	high Mcp2515WriteCanMsg@buf
  8028  002482  2027               	addwfc	??_Mcp2515WriteCanMsg+1,w,c
  8029  002484  6EE2               	movwf	fsr1h,c
  8030  002486  CFDF FFE7          	movff	indf2,indf1
  8031  00248A  2A35               	incf	Mcp2515WriteCanMsg@i,f,c
  8032  00248C                     i2l2518:
  8033  00248C  EE20 F005          	lfsr	2,5
  8034  002490  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  8035  002492  26D9               	addwf	fsr2l,f,c
  8036  002494  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  8037  002496  22DA               	addwfc	fsr2h,f,c
  8038  002498  50DE               	movf	postinc2,w,c
  8039  00249A  5C35               	subwf	Mcp2515WriteCanMsg@i,w,c
  8040  00249C  A0D8               	btfss	status,0,c
  8041  00249E  D7DA               	goto	i2l2514
  8042                           
  8043                           ;mcp2515.c: 285: }
  8044                           ;mcp2515.c: 286: Spi_Write(buf,msg->dlc + 2);
  8045  0024A0  0E28               	movlw	low Mcp2515WriteCanMsg@buf
  8046  0024A2  6E0D               	movwf	i2Spi_Write@tx,c
  8047  0024A4  0E00               	movlw	high Mcp2515WriteCanMsg@buf
  8048  0024A6  6E0E               	movwf	i2Spi_Write@tx+1,c
  8049  0024A8  EE20 F005          	lfsr	2,5
  8050  0024AC  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  8051  0024AE  26D9               	addwf	fsr2l,f,c
  8052  0024B0  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  8053  0024B2  22DA               	addwfc	fsr2h,f,c
  8054  0024B4  50DF               	movf	indf2,w,c
  8055  0024B6  6E26               	movwf	??_Mcp2515WriteCanMsg& (0+255),c
  8056  0024B8  6A27               	clrf	(??_Mcp2515WriteCanMsg+1)& (0+255),c
  8057  0024BA  0E02               	movlw	2
  8058  0024BC  2626               	addwf	??_Mcp2515WriteCanMsg,f,c
  8059  0024BE  0E00               	movlw	0
  8060  0024C0  2227               	addwfc	??_Mcp2515WriteCanMsg+1,f,c
  8061  0024C2  C026  F00F         	movff	??_Mcp2515WriteCanMsg,i2Spi_Write@size
  8062  0024C6  C027  F010         	movff	??_Mcp2515WriteCanMsg+1,i2Spi_Write@size+1
  8063  0024CA  0E00               	movlw	0
  8064  0024CC  BE10               	btfsc	i2Spi_Write@size+1,7,c
  8065  0024CE  0EFF               	movlw	-1
  8066  0024D0  6E11               	movwf	i2Spi_Write@size+2,c
  8067  0024D2  6E12               	movwf	i2Spi_Write@size+3,c
  8068  0024D4  ECE8  F019         	call	i2_Spi_Write	;wreg free
  8069                           
  8070                           ;mcp2515.c: 288: Mcp2515WriteCanId( mcp_addr,
  8071                           ;mcp2515.c: 289: msg->extended_identifier,
  8072                           ;mcp2515.c: 290: msg->identifier );
  8073  0024D8  C024  FFD9         	movff	Mcp2515WriteCanMsg@msg,fsr2l
  8074  0024DC  C025  FFDA         	movff	Mcp2515WriteCanMsg@msg+1,fsr2h
  8075  0024E0  50DF               	movf	indf2,w,c
  8076  0024E2  6E13               	movwf	i2Mcp2515WriteCanId@ext,c
  8077  0024E4  EE20 F001          	lfsr	2,1
  8078  0024E8  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  8079  0024EA  26D9               	addwf	fsr2l,f,c
  8080  0024EC  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  8081  0024EE  22DA               	addwfc	fsr2h,f,c
  8082  0024F0  CFDE F014          	movff	postinc2,i2Mcp2515WriteCanId@can_id
  8083  0024F4  CFDE F015          	movff	postinc2,i2Mcp2515WriteCanId@can_id+1
  8084  0024F8  CFDE F016          	movff	postinc2,i2Mcp2515WriteCanId@can_id+2
  8085  0024FC  CFDE F017          	movff	postinc2,i2Mcp2515WriteCanId@can_id+3
  8086  002500  5034               	movf	Mcp2515WriteCanMsg@mcp_addr,w,c
  8087  002502  EC1A  F015         	call	i2_Mcp2515WriteCanId
  8088                           
  8089                           ;mcp2515.c: 291: dlc = msg->dlc;
  8090  002506  EE20 F005          	lfsr	2,5
  8091  00250A  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  8092  00250C  26D9               	addwf	fsr2l,f,c
  8093  00250E  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  8094  002510  22DA               	addwfc	fsr2h,f,c
  8095  002512  50DF               	movf	indf2,w,c
  8096  002514  6E33               	movwf	Mcp2515WriteCanMsg@dlc,c
  8097                           
  8098                           ;mcp2515.c: 293: if ( msg->rtr == 1)
  8099  002516  EE20 F00E          	lfsr	2,14
  8100  00251A  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  8101  00251C  26D9               	addwf	fsr2l,f,c
  8102  00251E  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  8103  002520  22DA               	addwfc	fsr2h,f,c
  8104  002522  04DE               	decf	postinc2,w,c
  8105  002524  A4D8               	btfss	status,2,c
  8106  002526  D009               	goto	i2l2528
  8107                           
  8108                           ;mcp2515.c: 294: {
  8109                           ;mcp2515.c: 295: dlc = msg->dlc | 0x40;
  8110  002528  EE20 F005          	lfsr	2,5
  8111  00252C  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  8112  00252E  26D9               	addwf	fsr2l,f,c
  8113  002530  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  8114  002532  22DA               	addwfc	fsr2h,f,c
  8115  002534  50DF               	movf	indf2,w,c
  8116  002536  0940               	iorlw	64
  8117  002538  6E33               	movwf	Mcp2515WriteCanMsg@dlc,c
  8118  00253A                     i2l2528:
  8119                           
  8120                           ;mcp2515.c: 296: }
  8121                           ;mcp2515.c: 297: buf[0] = 0x02;
  8122  00253A  0E02               	movlw	2
  8123  00253C  6E28               	movwf	Mcp2515WriteCanMsg@buf,c
  8124                           
  8125                           ;mcp2515.c: 298: buf[1] = mcp_addr+4;
  8126  00253E  5034               	movf	Mcp2515WriteCanMsg@mcp_addr,w,c
  8127  002540  0F04               	addlw	4
  8128  002542  6E29               	movwf	Mcp2515WriteCanMsg@buf+1,c
  8129                           
  8130                           ;mcp2515.c: 299: buf[2] = dlc;
  8131  002544  C033  F02A         	movff	Mcp2515WriteCanMsg@dlc,Mcp2515WriteCanMsg@buf+2
  8132                           
  8133                           ;mcp2515.c: 300: Spi_Write(buf,3);
  8134  002548  0E28               	movlw	low Mcp2515WriteCanMsg@buf
  8135  00254A  6E0D               	movwf	i2Spi_Write@tx,c
  8136  00254C  0E00               	movlw	high Mcp2515WriteCanMsg@buf
  8137  00254E  6E0E               	movwf	i2Spi_Write@tx+1,c
  8138  002550  0E03               	movlw	3
  8139  002552  6E0F               	movwf	i2Spi_Write@size,c
  8140  002554  0E00               	movlw	0
  8141  002556  6E10               	movwf	i2Spi_Write@size+1,c
  8142  002558  0E00               	movlw	0
  8143  00255A  6E11               	movwf	i2Spi_Write@size+2,c
  8144  00255C  0E00               	movlw	0
  8145  00255E  6E12               	movwf	i2Spi_Write@size+3,c
  8146  002560  ECE8  F019         	call	i2_Spi_Write	;wreg free
  8147  002564  0012               	return		;funcret
  8148  002566                     __end_of_Mcp2515WriteCanMsg:
  8149                           	opt stack 0
  8150                           pclatu	equ	0xFFB
  8151                           pclath	equ	0xFFA
  8152                           tblptru	equ	0xFF8
  8153                           tblptrh	equ	0xFF7
  8154                           tblptrl	equ	0xFF6
  8155                           tablat	equ	0xFF5
  8156                           prodh	equ	0xFF4
  8157                           prodl	equ	0xFF3
  8158                           intcon	equ	0xFF2
  8159                           intcon2	equ	0xFF1
  8160                           intcon3	equ	0xFF0
  8161                           postinc0	equ	0xFEE
  8162                           fsr0h	equ	0xFEA
  8163                           fsr0l	equ	0xFE9
  8164                           wreg	equ	0xFE8
  8165                           indf1	equ	0xFE7
  8166                           postinc1	equ	0xFE6
  8167                           postdec1	equ	0xFE5
  8168                           fsr1h	equ	0xFE2
  8169                           fsr1l	equ	0xFE1
  8170                           indf2	equ	0xFDF
  8171                           postinc2	equ	0xFDE
  8172                           fsr2h	equ	0xFDA
  8173                           fsr2l	equ	0xFD9
  8174                           status	equ	0xFD8
  8175                           
  8176 ;; *************** function i2_Mcp2515WriteCanId *****************
  8177 ;; Defined at:
  8178 ;;		line 233 in file "mcp2515.c"
  8179 ;; Parameters:    Size  Location     Type
  8180 ;;  mcp_addr        1    wreg     unsigned char 
  8181 ;;  ext             1   18[COMRAM] unsigned char 
  8182 ;;  can_id          4   19[COMRAM] unsigned long 
  8183 ;; Auto vars:     Size  Location     Type
  8184 ;;  mcp_addr        1   26[COMRAM] unsigned char 
  8185 ;;  Mcp2515Write    6   27[COMRAM] unsigned char [6]
  8186 ;;  Mcp2515Write    2   33[COMRAM] unsigned int 
  8187 ;; Return value:  Size  Location     Type
  8188 ;;                  1    wreg      void 
  8189 ;; Registers used:
  8190 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8191 ;; Tracked objects:
  8192 ;;		On entry : 0/0
  8193 ;;		On exit  : 0/0
  8194 ;;		Unchanged: 0/0
  8195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8196 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8197 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8198 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8199 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8200 ;;Total ram usage:       17 bytes
  8201 ;; Hardware stack levels used:    1
  8202 ;; Hardware stack levels required when called:    2
  8203 ;; This function calls:
  8204 ;;		i2_Spi_Write
  8205 ;; This function is called by:
  8206 ;;		_Mcp2515WriteCanMsg
  8207 ;; This function uses a non-reentrant model
  8208 ;;
  8209                           
  8210                           	psect	text36
  8211  002A34                     __ptext36:
  8212                           	opt stack 0
  8213  002A34                     i2_Mcp2515WriteCanId:
  8214                           	opt stack 17
  8215                           
  8216                           ;incstack = 0
  8217                           ;i2Mcp2515WriteCanId@mcp_addr stored from wreg
  8218  002A34  6E1B               	movwf	i2Mcp2515WriteCanId@mcp_addr,c
  8219                           
  8220                           ;mcp2515.c: 235: uint16_t canid;
  8221                           ;mcp2515.c: 236: uint8_t buf[6];
  8222                           ;mcp2515.c: 238: canid = (uint16_t)(can_id & 0x0FFFF);
  8223  002A36  C014  F022         	movff	i2Mcp2515WriteCanId@can_id,i2Mcp2515WriteCanId@canid
  8224  002A3A  C015  F023         	movff	i2Mcp2515WriteCanId@can_id+1,i2Mcp2515WriteCanId@canid+1
  8225                           
  8226                           ;mcp2515.c: 240: buf[0] = 0x02;
  8227  002A3E  0E02               	movlw	2
  8228  002A40  6E1C               	movwf	i2Mcp2515WriteCanId@buf,c
  8229                           
  8230                           ;mcp2515.c: 241: buf[1] = mcp_addr;
  8231  002A42  C01B  F01D         	movff	i2Mcp2515WriteCanId@mcp_addr,i2Mcp2515WriteCanId@buf+1
  8232                           
  8233                           ;mcp2515.c: 243: if ( ext == 1)
  8234  002A46  0413               	decf	i2Mcp2515WriteCanId@ext,w,c
  8235  002A48  A4D8               	btfss	status,2,c
  8236  002A4A  D025               	goto	i2l2440
  8237                           
  8238                           ;mcp2515.c: 244: {
  8239                           ;mcp2515.c: 245: buf[3+2] = (uint8_t) (canid & 0xFF);
  8240  002A4C  C022  F021         	movff	i2Mcp2515WriteCanId@canid,i2Mcp2515WriteCanId@buf+5
  8241                           
  8242                           ;mcp2515.c: 246: buf[2+2] = (uint8_t) (canid >> 8);
  8243  002A50  5023               	movf	i2Mcp2515WriteCanId@canid+1,w,c
  8244  002A52  6E20               	movwf	i2Mcp2515WriteCanId@buf+4,c
  8245                           
  8246                           ;mcp2515.c: 247: canid = (uint16_t)( can_id / 0x10000L );
  8247  002A54  C016  F022         	movff	i2Mcp2515WriteCanId@can_id+2,i2Mcp2515WriteCanId@canid
  8248  002A58  C017  F023         	movff	i2Mcp2515WriteCanId@can_id+3,i2Mcp2515WriteCanId@canid+1
  8249                           
  8250                           ;mcp2515.c: 248: buf[1+2] = (uint8_t) (canid & 0x03);
  8251  002A5C  5022               	movf	i2Mcp2515WriteCanId@canid,w,c
  8252  002A5E  0B03               	andlw	3
  8253  002A60  6E1F               	movwf	i2Mcp2515WriteCanId@buf+3,c
  8254                           
  8255                           ;mcp2515.c: 249: buf[1+2] += (uint8_t) ((canid & 0x1C )*8);
  8256  002A62  C022  F018         	movff	i2Mcp2515WriteCanId@canid,??i2_Mcp2515WriteCanId
  8257  002A66  0E1C               	movlw	28
  8258  002A68  1618               	andwf	??i2_Mcp2515WriteCanId,f,c
  8259  002A6A  90D8               	bcf	status,0,c
  8260  002A6C  3618               	rlcf	??i2_Mcp2515WriteCanId,f,c
  8261  002A6E  90D8               	bcf	status,0,c
  8262  002A70  3618               	rlcf	??i2_Mcp2515WriteCanId,f,c
  8263  002A72  90D8               	bcf	status,0,c
  8264  002A74  3418               	rlcf	??i2_Mcp2515WriteCanId,w,c
  8265  002A76  261F               	addwf	i2Mcp2515WriteCanId@buf+3,f,c
  8266                           
  8267                           ;mcp2515.c: 250: buf[1+2] |= 0x08;
  8268  002A78  861F               	bsf	i2Mcp2515WriteCanId@buf+3,3,c
  8269                           
  8270                           ;mcp2515.c: 251: buf[0+2] = (uint8_t) (canid / 32 );
  8271  002A7A  C022  F018         	movff	i2Mcp2515WriteCanId@canid,??i2_Mcp2515WriteCanId
  8272  002A7E  C023  F019         	movff	i2Mcp2515WriteCanId@canid+1,??i2_Mcp2515WriteCanId+1
  8273  002A82  0E05               	movlw	5
  8274  002A84  6E1A               	movwf	(??i2_Mcp2515WriteCanId+2)& (0+255),c
  8275  002A86                     i2u144_45:
  8276  002A86  90D8               	bcf	status,0,c
  8277  002A88  3219               	rrcf	??i2_Mcp2515WriteCanId+1,f,c
  8278  002A8A  3218               	rrcf	??i2_Mcp2515WriteCanId,f,c
  8279  002A8C  2E1A               	decfsz	(??i2_Mcp2515WriteCanId+2)& (0+255),f,c
  8280  002A8E  D7FB               	goto	i2u144_45
  8281  002A90  5018               	movf	??i2_Mcp2515WriteCanId,w,c
  8282  002A92  6E1E               	movwf	i2Mcp2515WriteCanId@buf+2,c
  8283                           
  8284                           ;mcp2515.c: 252: }
  8285  002A94  D01F               	goto	i2l2446
  8286  002A96                     i2l2440:
  8287                           
  8288                           ;mcp2515.c: 254: else
  8289                           ;mcp2515.c: 255: {
  8290                           ;mcp2515.c: 256: buf[0+2] = (uint8_t) (canid >> 3);
  8291  002A96  C022  F018         	movff	i2Mcp2515WriteCanId@canid,??i2_Mcp2515WriteCanId
  8292  002A9A  C023  F019         	movff	i2Mcp2515WriteCanId@canid+1,??i2_Mcp2515WriteCanId+1
  8293  002A9E  90D8               	bcf	status,0,c
  8294  002AA0  3219               	rrcf	??i2_Mcp2515WriteCanId+1,f,c
  8295  002AA2  3218               	rrcf	??i2_Mcp2515WriteCanId,f,c
  8296  002AA4  90D8               	bcf	status,0,c
  8297  002AA6  3219               	rrcf	??i2_Mcp2515WriteCanId+1,f,c
  8298  002AA8  3218               	rrcf	??i2_Mcp2515WriteCanId,f,c
  8299  002AAA  90D8               	bcf	status,0,c
  8300  002AAC  3219               	rrcf	??i2_Mcp2515WriteCanId+1,f,c
  8301  002AAE  3218               	rrcf	??i2_Mcp2515WriteCanId,f,c
  8302  002AB0  5018               	movf	??i2_Mcp2515WriteCanId,w,c
  8303  002AB2  6E1E               	movwf	i2Mcp2515WriteCanId@buf+2,c
  8304                           
  8305                           ;mcp2515.c: 257: buf[1+2] = (uint8_t) ((canid & 0x07 )*32);
  8306  002AB4  C022  F018         	movff	i2Mcp2515WriteCanId@canid,??i2_Mcp2515WriteCanId
  8307  002AB8  0E07               	movlw	7
  8308  002ABA  1618               	andwf	??i2_Mcp2515WriteCanId,f,c
  8309  002ABC  0E05               	movlw	5
  8310  002ABE  6E19               	movwf	(??i2_Mcp2515WriteCanId+1)& (0+255),c
  8311  002AC0                     i2u145_45:
  8312  002AC0  90D8               	bcf	status,0,c
  8313  002AC2  3618               	rlcf	??i2_Mcp2515WriteCanId,f,c
  8314  002AC4  2E19               	decfsz	(??i2_Mcp2515WriteCanId+1)& (0+255),f,c
  8315  002AC6  D7FC               	goto	i2u145_45
  8316  002AC8  5018               	movf	??i2_Mcp2515WriteCanId,w,c
  8317  002ACA  6E1F               	movwf	i2Mcp2515WriteCanId@buf+3,c
  8318                           
  8319                           ;mcp2515.c: 258: buf[3+2] = 0;
  8320  002ACC  0E00               	movlw	0
  8321  002ACE  6E21               	movwf	i2Mcp2515WriteCanId@buf+5,c
  8322                           
  8323                           ;mcp2515.c: 259: buf[2+2] = 0;
  8324  002AD0  0E00               	movlw	0
  8325  002AD2  6E20               	movwf	i2Mcp2515WriteCanId@buf+4,c
  8326  002AD4                     i2l2446:
  8327                           
  8328                           ;mcp2515.c: 260: }
  8329                           ;mcp2515.c: 261: Spi_Write(buf,6);
  8330  002AD4  0E1C               	movlw	low i2Mcp2515WriteCanId@buf
  8331  002AD6  6E0D               	movwf	i2Spi_Write@tx,c
  8332  002AD8  0E00               	movlw	high i2Mcp2515WriteCanId@buf
  8333  002ADA  6E0E               	movwf	i2Spi_Write@tx+1,c
  8334  002ADC  0E06               	movlw	6
  8335  002ADE  6E0F               	movwf	i2Spi_Write@size,c
  8336  002AE0  0E00               	movlw	0
  8337  002AE2  6E10               	movwf	i2Spi_Write@size+1,c
  8338  002AE4  0E00               	movlw	0
  8339  002AE6  6E11               	movwf	i2Spi_Write@size+2,c
  8340  002AE8  0E00               	movlw	0
  8341  002AEA  6E12               	movwf	i2Spi_Write@size+3,c
  8342  002AEC  ECE8  F019         	call	i2_Spi_Write	;wreg free
  8343  002AF0  0012               	return		;funcret
  8344  002AF2                     __end_ofi2_Mcp2515WriteCanId:
  8345                           	opt stack 0
  8346                           pclatu	equ	0xFFB
  8347                           pclath	equ	0xFFA
  8348                           tblptru	equ	0xFF8
  8349                           tblptrh	equ	0xFF7
  8350                           tblptrl	equ	0xFF6
  8351                           tablat	equ	0xFF5
  8352                           prodh	equ	0xFF4
  8353                           prodl	equ	0xFF3
  8354                           intcon	equ	0xFF2
  8355                           intcon2	equ	0xFF1
  8356                           intcon3	equ	0xFF0
  8357                           postinc0	equ	0xFEE
  8358                           fsr0h	equ	0xFEA
  8359                           fsr0l	equ	0xFE9
  8360                           wreg	equ	0xFE8
  8361                           indf1	equ	0xFE7
  8362                           postinc1	equ	0xFE6
  8363                           postdec1	equ	0xFE5
  8364                           fsr1h	equ	0xFE2
  8365                           fsr1l	equ	0xFE1
  8366                           indf2	equ	0xFDF
  8367                           postinc2	equ	0xFDE
  8368                           fsr2h	equ	0xFDA
  8369                           fsr2l	equ	0xFD9
  8370                           status	equ	0xFD8
  8371                           
  8372 ;; *************** function _Mcp2515GetNextFreeTXBuf *****************
  8373 ;; Defined at:
  8374 ;;		line 311 in file "mcp2515.c"
  8375 ;; Parameters:    Size  Location     Type
  8376 ;;  txbuf_n         2   18[COMRAM] PTR unsigned char 
  8377 ;;		 -> Can_SendMessage@txbuf_n(1), 
  8378 ;; Auto vars:     Size  Location     Type
  8379 ;;  buf             3   24[COMRAM] unsigned char [3]
  8380 ;;  ctrlregs        3   21[COMRAM] unsigned char [3]
  8381 ;;  i               1   27[COMRAM] unsigned char 
  8382 ;; Return value:  Size  Location     Type
  8383 ;;                  1    wreg      unsigned char 
  8384 ;; Registers used:
  8385 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8386 ;; Tracked objects:
  8387 ;;		On entry : 0/0
  8388 ;;		On exit  : 0/0
  8389 ;;		Unchanged: 0/0
  8390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8391 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8392 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8393 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8394 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8395 ;;Total ram usage:       10 bytes
  8396 ;; Hardware stack levels used:    1
  8397 ;; Hardware stack levels required when called:    2
  8398 ;; This function calls:
  8399 ;;		_Spi_ReadWrite
  8400 ;; This function is called by:
  8401 ;;		_Can_SendMessage
  8402 ;; This function uses a non-reentrant model
  8403 ;;
  8404                           
  8405                           	psect	text37
  8406  002C16                     __ptext37:
  8407                           	opt stack 0
  8408  002C16                     _Mcp2515GetNextFreeTXBuf:
  8409                           	opt stack 18
  8410                           
  8411                           ;mcp2515.c: 313: uint8_t i;
  8412                           ;mcp2515.c: 314: uint8_t ctrlregs[(3)] = {0x30,0x40,0x50};
  8413                           
  8414                           ;incstack = 0
  8415  002C16  C0F7  F016         	movff	Mcp2515GetNextFreeTXBuf@F8153,Mcp2515GetNextFreeTXBuf@ctrlregs
  8416  002C1A  C0F8  F017         	movff	Mcp2515GetNextFreeTXBuf@F8153+1,Mcp2515GetNextFreeTXBuf@ctrlregs+1
  8417  002C1E  C0F9  F018         	movff	Mcp2515GetNextFreeTXBuf@F8153+2,Mcp2515GetNextFreeTXBuf@ctrlregs+2
  8418                           
  8419                           ;mcp2515.c: 315: uint8_t buf[3];
  8420                           ;mcp2515.c: 316: *txbuf_n = 0x00;
  8421  002C22  C013  FFD9         	movff	Mcp2515GetNextFreeTXBuf@txbuf_n,fsr2l
  8422  002C26  C014  FFDA         	movff	Mcp2515GetNextFreeTXBuf@txbuf_n+1,fsr2h
  8423  002C2A  0E00               	movlw	0
  8424  002C2C  6EDF               	movwf	indf2,c
  8425                           
  8426                           ;mcp2515.c: 319: for (i=0; i<(3); i++)
  8427  002C2E  0E00               	movlw	0
  8428  002C30  6E1C               	movwf	Mcp2515GetNextFreeTXBuf@i,c
  8429  002C32                     i2l2480:
  8430  002C32  0E02               	movlw	2
  8431  002C34  641C               	cpfsgt	Mcp2515GetNextFreeTXBuf@i,c
  8432  002C36  D001               	goto	i2l2484
  8433  002C38  D030               	goto	i2l2502
  8434  002C3A                     i2l2484:
  8435                           
  8436                           ;mcp2515.c: 320: {
  8437                           ;mcp2515.c: 321: buf[0] = 0x03;
  8438  002C3A  0E03               	movlw	3
  8439  002C3C  6E19               	movwf	Mcp2515GetNextFreeTXBuf@buf,c
  8440                           
  8441                           ;mcp2515.c: 322: buf[1] = ctrlregs[i];
  8442  002C3E  501C               	movf	Mcp2515GetNextFreeTXBuf@i,w,c
  8443  002C40  0D01               	mullw	1
  8444  002C42  0E16               	movlw	low Mcp2515GetNextFreeTXBuf@ctrlregs
  8445  002C44  24F3               	addwf	prodl,w,c
  8446  002C46  6ED9               	movwf	fsr2l,c
  8447  002C48  0E00               	movlw	high Mcp2515GetNextFreeTXBuf@ctrlregs
  8448  002C4A  20F4               	addwfc	prodh,w,c
  8449  002C4C  6EDA               	movwf	fsr2h,c
  8450  002C4E  50DF               	movf	indf2,w,c
  8451  002C50  6E1A               	movwf	Mcp2515GetNextFreeTXBuf@buf+1,c
  8452                           
  8453                           ;mcp2515.c: 323: Spi_ReadWrite(buf,3);
  8454  002C52  0E19               	movlw	low Mcp2515GetNextFreeTXBuf@buf
  8455  002C54  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  8456  002C56  0E00               	movlw	high Mcp2515GetNextFreeTXBuf@buf
  8457  002C58  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  8458  002C5A  0E03               	movlw	3
  8459  002C5C  6E0F               	movwf	Spi_ReadWrite@size,c
  8460  002C5E  0E00               	movlw	0
  8461  002C60  6E10               	movwf	Spi_ReadWrite@size+1,c
  8462  002C62  0E00               	movlw	0
  8463  002C64  6E11               	movwf	Spi_ReadWrite@size+2,c
  8464  002C66  0E00               	movlw	0
  8465  002C68  6E12               	movwf	Spi_ReadWrite@size+3,c
  8466  002C6A  ECFB  F019         	call	_Spi_ReadWrite	;wreg free
  8467                           
  8468                           ;mcp2515.c: 325: if ( (buf[2] & 0x08) == 0 )
  8469  002C6E  B61B               	btfsc	Mcp2515GetNextFreeTXBuf@buf+2,3,c
  8470  002C70  D012               	goto	i2l2498
  8471                           
  8472                           ;mcp2515.c: 326: {
  8473                           ;mcp2515.c: 327: *txbuf_n = ctrlregs[i]+1;
  8474  002C72  501C               	movf	Mcp2515GetNextFreeTXBuf@i,w,c
  8475  002C74  0D01               	mullw	1
  8476  002C76  0E16               	movlw	low Mcp2515GetNextFreeTXBuf@ctrlregs
  8477  002C78  24F3               	addwf	prodl,w,c
  8478  002C7A  6ED9               	movwf	fsr2l,c
  8479  002C7C  0E00               	movlw	high Mcp2515GetNextFreeTXBuf@ctrlregs
  8480  002C7E  20F4               	addwfc	prodh,w,c
  8481  002C80  6EDA               	movwf	fsr2h,c
  8482  002C82  50DF               	movf	indf2,w,c
  8483  002C84  6E15               	movwf	??_Mcp2515GetNextFreeTXBuf& (0+255),c
  8484  002C86  2815               	incf	??_Mcp2515GetNextFreeTXBuf,w,c
  8485  002C88  C013  FFD9         	movff	Mcp2515GetNextFreeTXBuf@txbuf_n,fsr2l
  8486  002C8C  C014  FFDA         	movff	Mcp2515GetNextFreeTXBuf@txbuf_n+1,fsr2h
  8487  002C90  6EDF               	movwf	indf2,c
  8488                           
  8489                           ;mcp2515.c: 328: return (0);
  8490  002C92  0E00               	movlw	0
  8491  002C94  0012               	return	
  8492  002C96                     i2l2498:
  8493  002C96  2A1C               	incf	Mcp2515GetNextFreeTXBuf@i,f,c
  8494  002C98  D7CC               	goto	i2l2480
  8495  002C9A                     i2l2502:
  8496                           
  8497                           ;mcp2515.c: 329: }
  8498                           ;mcp2515.c: 330: }
  8499                           ;mcp2515.c: 331: return (2);
  8500  002C9A  0E02               	movlw	2
  8501  002C9C  0012               	return	
  8502  002C9E                     __end_of_Mcp2515GetNextFreeTXBuf:
  8503                           	opt stack 0
  8504                           pclatu	equ	0xFFB
  8505                           pclath	equ	0xFFA
  8506                           tblptru	equ	0xFF8
  8507                           tblptrh	equ	0xFF7
  8508                           tblptrl	equ	0xFF6
  8509                           tablat	equ	0xFF5
  8510                           prodh	equ	0xFF4
  8511                           prodl	equ	0xFF3
  8512                           intcon	equ	0xFF2
  8513                           intcon2	equ	0xFF1
  8514                           intcon3	equ	0xFF0
  8515                           postinc0	equ	0xFEE
  8516                           fsr0h	equ	0xFEA
  8517                           fsr0l	equ	0xFE9
  8518                           wreg	equ	0xFE8
  8519                           indf1	equ	0xFE7
  8520                           postinc1	equ	0xFE6
  8521                           postdec1	equ	0xFE5
  8522                           fsr1h	equ	0xFE2
  8523                           fsr1l	equ	0xFE1
  8524                           indf2	equ	0xFDF
  8525                           postinc2	equ	0xFDE
  8526                           fsr2h	equ	0xFDA
  8527                           fsr2l	equ	0xFD9
  8528                           status	equ	0xFD8
  8529                           
  8530 ;; *************** function _Can_ReadInBuffer *****************
  8531 ;; Defined at:
  8532 ;;		line 94 in file "can.c"
  8533 ;; Parameters:    Size  Location     Type
  8534 ;;		None
  8535 ;; Auto vars:     Size  Location     Type
  8536 ;;  i               1   70[COMRAM] unsigned char 
  8537 ;;  rdStatus        1   69[COMRAM] unsigned char 
  8538 ;;  error           1   68[COMRAM] unsigned char 
  8539 ;; Return value:  Size  Location     Type
  8540 ;;                  1    wreg      unsigned char 
  8541 ;; Registers used:
  8542 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8543 ;; Tracked objects:
  8544 ;;		On entry : 0/0
  8545 ;;		On exit  : 0/0
  8546 ;;		Unchanged: 0/0
  8547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8549 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8551 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8552 ;;Total ram usage:        3 bytes
  8553 ;; Hardware stack levels used:    1
  8554 ;; Hardware stack levels required when called:    5
  8555 ;; This function calls:
  8556 ;;		_Can_ReadMessage
  8557 ;; This function is called by:
  8558 ;;		_Can_Isr
  8559 ;; This function uses a non-reentrant model
  8560 ;;
  8561                           
  8562                           	psect	text38
  8563  00321C                     __ptext38:
  8564                           	opt stack 0
  8565  00321C                     _Can_ReadInBuffer:
  8566                           	opt stack 17
  8567                           
  8568                           ;can.c: 96: uint8_t i;
  8569                           ;can.c: 97: uint8_t error=0;
  8570                           
  8571                           ;incstack = 0
  8572  00321C  0E00               	movlw	0
  8573  00321E  6E45               	movwf	Can_ReadInBuffer@error,c
  8574                           
  8575                           ;can.c: 98: uint8_t rdStatus;
  8576                           ;can.c: 100: for(i=0;i<2;i++)
  8577  003220  0E00               	movlw	0
  8578  003222  6E47               	movwf	Can_ReadInBuffer@i,c
  8579  003224                     i2l2936:
  8580  003224  0E01               	movlw	1
  8581  003226  6447               	cpfsgt	Can_ReadInBuffer@i,c
  8582  003228  D001               	goto	i2l2940
  8583  00322A  0012               	return	
  8584  00322C                     i2l2940:
  8585                           
  8586                           ;can.c: 101: {
  8587                           ;can.c: 102: rdStatus = Can_ReadMessage(&rxBuffer[rxBufferPtrIn]);
  8588  00322C  505A               	movf	_rxBufferPtrIn,w,c
  8589  00322E  0D11               	mullw	17
  8590  003230  0E68               	movlw	low _rxBuffer
  8591  003232  24F3               	addwf	prodl,w,c
  8592  003234  6E3F               	movwf	Can_ReadMessage@msg,c
  8593  003236  0E01               	movlw	high _rxBuffer
  8594  003238  20F4               	addwfc	prodh,w,c
  8595  00323A  6E40               	movwf	Can_ReadMessage@msg+1,c
  8596  00323C  EC3C  F014         	call	_Can_ReadMessage	;wreg free
  8597  003240  6E46               	movwf	Can_ReadInBuffer@rdStatus,c
  8598                           
  8599                           ;can.c: 103: if((rxBufferCount) < 4)
  8600  003242  0E04               	movlw	4
  8601  003244  6059               	cpfslt	_rxBufferCount,c
  8602  003246  D008               	goto	i2l2950
  8603                           
  8604                           ;can.c: 104: {
  8605                           ;can.c: 105: if(rdStatus == (0))
  8606  003248  5046               	movf	Can_ReadInBuffer@rdStatus,w,c
  8607  00324A  A4D8               	btfss	status,2,c
  8608  00324C  D007               	goto	i2l2952
  8609                           
  8610                           ;can.c: 106: {
  8611                           ;can.c: 107: rxBufferCount++;
  8612  00324E  2A59               	incf	_rxBufferCount,f,c
  8613                           
  8614                           ;can.c: 108: rxBufferPtrIn = (rxBufferPtrIn + 1) % 4;
  8615  003250  285A               	incf	_rxBufferPtrIn,w,c
  8616  003252  0B03               	andlw	3
  8617  003254  6E5A               	movwf	_rxBufferPtrIn,c
  8618                           
  8619                           ;can.c: 109: }
  8620                           ;can.c: 110: }
  8621  003256  D002               	goto	i2l2952
  8622  003258                     i2l2950:
  8623                           
  8624                           ;can.c: 111: else
  8625                           ;can.c: 112: {
  8626                           ;can.c: 113: error = 1;
  8627  003258  0E01               	movlw	1
  8628  00325A  6E45               	movwf	Can_ReadInBuffer@error,c
  8629  00325C                     i2l2952:
  8630  00325C  2A47               	incf	Can_ReadInBuffer@i,f,c
  8631  00325E  D7E2               	goto	i2l2936
  8632  003260                     __end_of_Can_ReadInBuffer:
  8633                           	opt stack 0
  8634                           pclatu	equ	0xFFB
  8635                           pclath	equ	0xFFA
  8636                           tblptru	equ	0xFF8
  8637                           tblptrh	equ	0xFF7
  8638                           tblptrl	equ	0xFF6
  8639                           tablat	equ	0xFF5
  8640                           prodh	equ	0xFF4
  8641                           prodl	equ	0xFF3
  8642                           intcon	equ	0xFF2
  8643                           intcon2	equ	0xFF1
  8644                           intcon3	equ	0xFF0
  8645                           postinc0	equ	0xFEE
  8646                           fsr0h	equ	0xFEA
  8647                           fsr0l	equ	0xFE9
  8648                           wreg	equ	0xFE8
  8649                           indf1	equ	0xFE7
  8650                           postinc1	equ	0xFE6
  8651                           postdec1	equ	0xFE5
  8652                           fsr1h	equ	0xFE2
  8653                           fsr1l	equ	0xFE1
  8654                           indf2	equ	0xFDF
  8655                           postinc2	equ	0xFDE
  8656                           fsr2h	equ	0xFDA
  8657                           fsr2l	equ	0xFD9
  8658                           status	equ	0xFD8
  8659                           
  8660 ;; *************** function _Can_ReadMessage *****************
  8661 ;; Defined at:
  8662 ;;		line 372 in file "can.c"
  8663 ;; Parameters:    Size  Location     Type
  8664 ;;  msg             2   62[COMRAM] PTR struct CANMESSAGE
  8665 ;;		 -> rxBuffer(68), 
  8666 ;; Auto vars:     Size  Location     Type
  8667 ;;  buf             4   64[COMRAM] unsigned char [4]
  8668 ;; Return value:  Size  Location     Type
  8669 ;;                  1    wreg      unsigned char 
  8670 ;; Registers used:
  8671 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8672 ;; Tracked objects:
  8673 ;;		On entry : 0/0
  8674 ;;		On exit  : 0/0
  8675 ;;		Unchanged: 0/0
  8676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8677 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8678 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8680 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8681 ;;Total ram usage:        6 bytes
  8682 ;; Hardware stack levels used:    1
  8683 ;; Hardware stack levels required when called:    4
  8684 ;; This function calls:
  8685 ;;		_Mcp2515ReadCanMsg
  8686 ;;		_Spi_ReadWrite
  8687 ;;		i2_Spi_Write
  8688 ;; This function is called by:
  8689 ;;		_Can_ReadInBuffer
  8690 ;; This function uses a non-reentrant model
  8691 ;;
  8692                           
  8693                           	psect	text39
  8694  002878                     __ptext39:
  8695                           	opt stack 0
  8696  002878                     _Can_ReadMessage:
  8697                           	opt stack 17
  8698                           
  8699                           ;can.c: 374: uint8_t buf[4];
  8700                           ;can.c: 376: buf[0] = 0xA0;
  8701                           
  8702                           ;incstack = 0
  8703  002878  0EA0               	movlw	160
  8704  00287A  6E41               	movwf	Can_ReadMessage@buf,c
  8705                           
  8706                           ;can.c: 377: Spi_ReadWrite(buf,2);
  8707  00287C  0E41               	movlw	low Can_ReadMessage@buf
  8708  00287E  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  8709  002880  0E00               	movlw	high Can_ReadMessage@buf
  8710  002882  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  8711  002884  0E02               	movlw	2
  8712  002886  6E0F               	movwf	Spi_ReadWrite@size,c
  8713  002888  0E00               	movlw	0
  8714  00288A  6E10               	movwf	Spi_ReadWrite@size+1,c
  8715  00288C  0E00               	movlw	0
  8716  00288E  6E11               	movwf	Spi_ReadWrite@size+2,c
  8717  002890  0E00               	movlw	0
  8718  002892  6E12               	movwf	Spi_ReadWrite@size+3,c
  8719  002894  ECFB  F019         	call	_Spi_ReadWrite	;wreg free
  8720                           
  8721                           ;can.c: 379: if ( buf[1] & (1<<0) )
  8722  002898  A042               	btfss	Can_ReadMessage@buf+1,0,c
  8723  00289A  D034               	goto	i2l247
  8724                           
  8725                           ;can.c: 380: {
  8726                           ;can.c: 381: Mcp2515ReadCanMsg( (0x61), msg);
  8727  00289C  C03F  F030         	movff	Can_ReadMessage@msg,Mcp2515ReadCanMsg@msg
  8728  0028A0  C040  F031         	movff	Can_ReadMessage@msg+1,Mcp2515ReadCanMsg@msg+1
  8729  0028A4  0E61               	movlw	97
  8730  0028A6  ECB3  F012         	call	_Mcp2515ReadCanMsg
  8731                           
  8732                           ;can.c: 382: buf[0] = 0x05;
  8733  0028AA  0E05               	movlw	5
  8734  0028AC  6E41               	movwf	Can_ReadMessage@buf,c
  8735                           
  8736                           ;can.c: 383: buf[1] = 0x2C;
  8737  0028AE  0E2C               	movlw	44
  8738  0028B0  6E42               	movwf	Can_ReadMessage@buf+1,c
  8739                           
  8740                           ;can.c: 384: buf[2] = 0x01;
  8741  0028B2  0E01               	movlw	1
  8742  0028B4  6E43               	movwf	Can_ReadMessage@buf+2,c
  8743                           
  8744                           ;can.c: 385: buf[3] = 0;
  8745  0028B6  0E00               	movlw	0
  8746  0028B8  6E44               	movwf	Can_ReadMessage@buf+3,c
  8747                           
  8748                           ;can.c: 386: Spi_Write(buf,4);
  8749  0028BA  0E41               	movlw	low Can_ReadMessage@buf
  8750  0028BC  6E0D               	movwf	i2Spi_Write@tx,c
  8751  0028BE  0E00               	movlw	high Can_ReadMessage@buf
  8752  0028C0  6E0E               	movwf	i2Spi_Write@tx+1,c
  8753  0028C2  0E04               	movlw	4
  8754  0028C4  6E0F               	movwf	i2Spi_Write@size,c
  8755  0028C6  0E00               	movlw	0
  8756  0028C8  6E10               	movwf	i2Spi_Write@size+1,c
  8757  0028CA  0E00               	movlw	0
  8758  0028CC  6E11               	movwf	i2Spi_Write@size+2,c
  8759  0028CE  0E00               	movlw	0
  8760  0028D0  6E12               	movwf	i2Spi_Write@size+3,c
  8761  0028D2  ECE8  F019         	call	i2_Spi_Write	;wreg free
  8762                           
  8763                           ;can.c: 387: buf[0] = 0x05;
  8764  0028D6  0E05               	movlw	5
  8765  0028D8  6E41               	movwf	Can_ReadMessage@buf,c
  8766                           
  8767                           ;can.c: 388: buf[1] = 0x2B;
  8768  0028DA  0E2B               	movlw	43
  8769  0028DC  6E42               	movwf	Can_ReadMessage@buf+1,c
  8770                           
  8771                           ;can.c: 389: buf[2] = 0x01;
  8772  0028DE  0E01               	movlw	1
  8773  0028E0  6E43               	movwf	Can_ReadMessage@buf+2,c
  8774                           
  8775                           ;can.c: 390: buf[3] = 0xFF;
  8776  0028E2  6844               	setf	Can_ReadMessage@buf+3,c
  8777                           
  8778                           ;can.c: 391: Spi_Write(buf,4);
  8779  0028E4  0E41               	movlw	low Can_ReadMessage@buf
  8780  0028E6  6E0D               	movwf	i2Spi_Write@tx,c
  8781  0028E8  0E00               	movlw	high Can_ReadMessage@buf
  8782  0028EA  6E0E               	movwf	i2Spi_Write@tx+1,c
  8783  0028EC  0E04               	movlw	4
  8784  0028EE  6E0F               	movwf	i2Spi_Write@size,c
  8785  0028F0  0E00               	movlw	0
  8786  0028F2  6E10               	movwf	i2Spi_Write@size+1,c
  8787  0028F4  0E00               	movlw	0
  8788  0028F6  6E11               	movwf	i2Spi_Write@size+2,c
  8789  0028F8  0E00               	movlw	0
  8790  0028FA  6E12               	movwf	i2Spi_Write@size+3,c
  8791  0028FC  ECE8  F019         	call	i2_Spi_Write	;wreg free
  8792  002900                     i2l2684:
  8793                           
  8794                           ;can.c: 392: return (0);
  8795  002900  0E00               	movlw	0
  8796  002902  0012               	return	
  8797  002904                     i2l247:
  8798                           
  8799                           ;can.c: 395: else if ( buf[1] & (1<<1) )
  8800  002904  A242               	btfss	Can_ReadMessage@buf+1,1,c
  8801  002906  D033               	goto	i2l2716
  8802                           
  8803                           ;can.c: 396: {
  8804                           ;can.c: 398: Mcp2515ReadCanMsg( (0x71), msg);
  8805  002908  C03F  F030         	movff	Can_ReadMessage@msg,Mcp2515ReadCanMsg@msg
  8806  00290C  C040  F031         	movff	Can_ReadMessage@msg+1,Mcp2515ReadCanMsg@msg+1
  8807  002910  0E71               	movlw	113
  8808  002912  ECB3  F012         	call	_Mcp2515ReadCanMsg
  8809                           
  8810                           ;can.c: 399: buf[0] = 0x05;
  8811  002916  0E05               	movlw	5
  8812  002918  6E41               	movwf	Can_ReadMessage@buf,c
  8813                           
  8814                           ;can.c: 400: buf[1] = 0x2C;
  8815  00291A  0E2C               	movlw	44
  8816  00291C  6E42               	movwf	Can_ReadMessage@buf+1,c
  8817                           
  8818                           ;can.c: 401: buf[2] = 0x02;
  8819  00291E  0E02               	movlw	2
  8820  002920  6E43               	movwf	Can_ReadMessage@buf+2,c
  8821                           
  8822                           ;can.c: 402: buf[3] = 0;
  8823  002922  0E00               	movlw	0
  8824  002924  6E44               	movwf	Can_ReadMessage@buf+3,c
  8825                           
  8826                           ;can.c: 403: Spi_Write(buf,4);
  8827  002926  0E41               	movlw	low Can_ReadMessage@buf
  8828  002928  6E0D               	movwf	i2Spi_Write@tx,c
  8829  00292A  0E00               	movlw	high Can_ReadMessage@buf
  8830  00292C  6E0E               	movwf	i2Spi_Write@tx+1,c
  8831  00292E  0E04               	movlw	4
  8832  002930  6E0F               	movwf	i2Spi_Write@size,c
  8833  002932  0E00               	movlw	0
  8834  002934  6E10               	movwf	i2Spi_Write@size+1,c
  8835  002936  0E00               	movlw	0
  8836  002938  6E11               	movwf	i2Spi_Write@size+2,c
  8837  00293A  0E00               	movlw	0
  8838  00293C  6E12               	movwf	i2Spi_Write@size+3,c
  8839  00293E  ECE8  F019         	call	i2_Spi_Write	;wreg free
  8840                           
  8841                           ;can.c: 404: buf[0] = 0x05;
  8842  002942  0E05               	movlw	5
  8843  002944  6E41               	movwf	Can_ReadMessage@buf,c
  8844                           
  8845                           ;can.c: 405: buf[1] = 0x2B;
  8846  002946  0E2B               	movlw	43
  8847  002948  6E42               	movwf	Can_ReadMessage@buf+1,c
  8848                           
  8849                           ;can.c: 406: buf[2] = 0x02;
  8850  00294A  0E02               	movlw	2
  8851  00294C  6E43               	movwf	Can_ReadMessage@buf+2,c
  8852                           
  8853                           ;can.c: 407: buf[3] = 0xFF;
  8854  00294E  6844               	setf	Can_ReadMessage@buf+3,c
  8855                           
  8856                           ;can.c: 408: Spi_Write(buf,4);
  8857  002950  0E41               	movlw	low Can_ReadMessage@buf
  8858  002952  6E0D               	movwf	i2Spi_Write@tx,c
  8859  002954  0E00               	movlw	high Can_ReadMessage@buf
  8860  002956  6E0E               	movwf	i2Spi_Write@tx+1,c
  8861  002958  0E04               	movlw	4
  8862  00295A  6E0F               	movwf	i2Spi_Write@size,c
  8863  00295C  0E00               	movlw	0
  8864  00295E  6E10               	movwf	i2Spi_Write@size+1,c
  8865  002960  0E00               	movlw	0
  8866  002962  6E11               	movwf	i2Spi_Write@size+2,c
  8867  002964  0E00               	movlw	0
  8868  002966  6E12               	movwf	i2Spi_Write@size+3,c
  8869  002968  ECE8  F019         	call	i2_Spi_Write	;wreg free
  8870  00296C  D7C9               	goto	i2l2684
  8871  00296E                     i2l2716:
  8872                           
  8873                           ;can.c: 410: }
  8874                           ;can.c: 412: return (4);
  8875  00296E  0E04               	movlw	4
  8876  002970  0012               	return	
  8877  002972                     __end_of_Can_ReadMessage:
  8878                           	opt stack 0
  8879                           pclatu	equ	0xFFB
  8880                           pclath	equ	0xFFA
  8881                           tblptru	equ	0xFF8
  8882                           tblptrh	equ	0xFF7
  8883                           tblptrl	equ	0xFF6
  8884                           tablat	equ	0xFF5
  8885                           prodh	equ	0xFF4
  8886                           prodl	equ	0xFF3
  8887                           intcon	equ	0xFF2
  8888                           intcon2	equ	0xFF1
  8889                           intcon3	equ	0xFF0
  8890                           postinc0	equ	0xFEE
  8891                           fsr0h	equ	0xFEA
  8892                           fsr0l	equ	0xFE9
  8893                           wreg	equ	0xFE8
  8894                           indf1	equ	0xFE7
  8895                           postinc1	equ	0xFE6
  8896                           postdec1	equ	0xFE5
  8897                           fsr1h	equ	0xFE2
  8898                           fsr1l	equ	0xFE1
  8899                           indf2	equ	0xFDF
  8900                           postinc2	equ	0xFDE
  8901                           fsr2h	equ	0xFDA
  8902                           fsr2l	equ	0xFD9
  8903                           status	equ	0xFD8
  8904                           
  8905 ;; *************** function i2_Spi_Write *****************
  8906 ;; Defined at:
  8907 ;;		line 332 in file "can.c"
  8908 ;; Parameters:    Size  Location     Type
  8909 ;;  tx              2   12[COMRAM] PTR unsigned char 
  8910 ;;		 -> Mcp2515WriteCanMsg@buf(10), Mcp2515WriteCanId@buf(6), Mcp2515Sleep@cmdMask4(3), Mcp2515_Init@cmdWrite3(3), 
  8911 ;;		 -> Mcp2515_Init@cmdMask4(4), Mcp2515_Reset@cmd(1), Can_SendMessage@buf(4), Can_ReadMessage@buf(4), 
  8912 ;;  size            4   14[COMRAM] unsigned long 
  8913 ;; Auto vars:     Size  Location     Type
  8914 ;;		None
  8915 ;; Return value:  Size  Location     Type
  8916 ;;                  1    wreg      void 
  8917 ;; Registers used:
  8918 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8919 ;; Tracked objects:
  8920 ;;		On entry : 0/0
  8921 ;;		On exit  : 0/0
  8922 ;;		Unchanged: 0/0
  8923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8924 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8927 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8928 ;;Total ram usage:        6 bytes
  8929 ;; Hardware stack levels used:    1
  8930 ;; Hardware stack levels required when called:    1
  8931 ;; This function calls:
  8932 ;;		i2_SPIRW
  8933 ;; This function is called by:
  8934 ;;		_Can_ReadMessage
  8935 ;;		_Can_SendMessage
  8936 ;;		_Mcp2515WriteCanMsg
  8937 ;;		i2_Mcp2515WriteCanId
  8938 ;; This function uses a non-reentrant model
  8939 ;;
  8940                           
  8941                           	psect	text40
  8942  0033D0                     __ptext40:
  8943                           	opt stack 0
  8944  0033D0                     i2_Spi_Write:
  8945                           	opt stack 19
  8946                           
  8947                           ;can.c: 334: SPIRW(tx, 0, size);
  8948                           
  8949                           ;incstack = 0
  8950  0033D0  C00D  F001         	movff	i2Spi_Write@tx,i2SPIRW@tx
  8951  0033D4  C00E  F002         	movff	i2Spi_Write@tx+1,i2SPIRW@tx+1
  8952  0033D8  0E00               	movlw	0
  8953  0033DA  6E03               	movwf	i2SPIRW@rx,c
  8954  0033DC  0E00               	movlw	0
  8955  0033DE  6E04               	movwf	i2SPIRW@rx+1,c
  8956  0033E0  C00F  F005         	movff	i2Spi_Write@size,i2SPIRW@size
  8957  0033E4  C010  F006         	movff	i2Spi_Write@size+1,i2SPIRW@size+1
  8958  0033E8  C011  F007         	movff	i2Spi_Write@size+2,i2SPIRW@size+2
  8959  0033EC  C012  F008         	movff	i2Spi_Write@size+3,i2SPIRW@size+3
  8960  0033F0  EC3F  F017         	call	i2_SPIRW	;wreg free
  8961  0033F4  0012               	return		;funcret
  8962  0033F6                     __end_ofi2_Spi_Write:
  8963                           	opt stack 0
  8964                           pclatu	equ	0xFFB
  8965                           pclath	equ	0xFFA
  8966                           tblptru	equ	0xFF8
  8967                           tblptrh	equ	0xFF7
  8968                           tblptrl	equ	0xFF6
  8969                           tablat	equ	0xFF5
  8970                           prodh	equ	0xFF4
  8971                           prodl	equ	0xFF3
  8972                           intcon	equ	0xFF2
  8973                           intcon2	equ	0xFF1
  8974                           intcon3	equ	0xFF0
  8975                           postinc0	equ	0xFEE
  8976                           fsr0h	equ	0xFEA
  8977                           fsr0l	equ	0xFE9
  8978                           wreg	equ	0xFE8
  8979                           indf1	equ	0xFE7
  8980                           postinc1	equ	0xFE6
  8981                           postdec1	equ	0xFE5
  8982                           fsr1h	equ	0xFE2
  8983                           fsr1l	equ	0xFE1
  8984                           indf2	equ	0xFDF
  8985                           postinc2	equ	0xFDE
  8986                           fsr2h	equ	0xFDA
  8987                           fsr2l	equ	0xFD9
  8988                           status	equ	0xFD8
  8989                           
  8990 ;; *************** function _Mcp2515ReadCanMsg *****************
  8991 ;; Defined at:
  8992 ;;		line 194 in file "mcp2515.c"
  8993 ;; Parameters:    Size  Location     Type
  8994 ;;  mcp_addr        1    wreg     const unsigned char 
  8995 ;;  msg             2   47[COMRAM] PTR struct CANMESSAGE
  8996 ;;		 -> rxBuffer(68), 
  8997 ;; Auto vars:     Size  Location     Type
  8998 ;;  mcp_addr        1   61[COMRAM] const unsigned char 
  8999 ;;  cmd            10   51[COMRAM] unsigned char [10]
  9000 ;; Return value:  Size  Location     Type
  9001 ;;                  1    wreg      void 
  9002 ;; Registers used:
  9003 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9004 ;; Tracked objects:
  9005 ;;		On entry : 0/0
  9006 ;;		On exit  : 0/0
  9007 ;;		Unchanged: 0/0
  9008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9009 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9010 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9011 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9012 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9013 ;;Total ram usage:       15 bytes
  9014 ;; Hardware stack levels used:    1
  9015 ;; Hardware stack levels required when called:    3
  9016 ;; This function calls:
  9017 ;;		_Mcp2515ReadCanId
  9018 ;;		_Spi_ReadWrite
  9019 ;;		_memcpy
  9020 ;; This function is called by:
  9021 ;;		_Can_ReadMessage
  9022 ;; This function uses a non-reentrant model
  9023 ;;
  9024                           
  9025                           	psect	text41
  9026  002566                     __ptext41:
  9027                           	opt stack 0
  9028  002566                     _Mcp2515ReadCanMsg:
  9029                           	opt stack 17
  9030                           
  9031                           ;incstack = 0
  9032                           ;Mcp2515ReadCanMsg@mcp_addr stored from wreg
  9033  002566  6E3E               	movwf	Mcp2515ReadCanMsg@mcp_addr,c
  9034                           
  9035                           ;mcp2515.c: 197: uint8_t cmd[10];
  9036                           ;mcp2515.c: 202: Mcp2515ReadCanId( mcp_addr, &(msg->extended_identifier),
  9037                           ;mcp2515.c: 203: &(msg->identifier) );
  9038  002568  C030  F013         	movff	Mcp2515ReadCanMsg@msg,Mcp2515ReadCanId@ext
  9039  00256C  C031  F014         	movff	Mcp2515ReadCanMsg@msg+1,Mcp2515ReadCanId@ext+1
  9040  002570  0E01               	movlw	1
  9041  002572  2430               	addwf	Mcp2515ReadCanMsg@msg,w,c
  9042  002574  6E15               	movwf	Mcp2515ReadCanId@can_id,c
  9043  002576  0E00               	movlw	0
  9044  002578  2031               	addwfc	Mcp2515ReadCanMsg@msg+1,w,c
  9045  00257A  6E16               	movwf	Mcp2515ReadCanId@can_id+1,c
  9046  00257C  503E               	movf	Mcp2515ReadCanMsg@mcp_addr,w,c
  9047  00257E  EC90  F00D         	call	_Mcp2515ReadCanId
  9048                           
  9049                           ;mcp2515.c: 205: cmd[0] = 0x03;
  9050  002582  0E03               	movlw	3
  9051  002584  6E34               	movwf	Mcp2515ReadCanMsg@cmd,c
  9052                           
  9053                           ;mcp2515.c: 206: cmd[1] = mcp_addr-1;
  9054  002586  043E               	decf	Mcp2515ReadCanMsg@mcp_addr,w,c
  9055  002588  6E35               	movwf	Mcp2515ReadCanMsg@cmd+1,c
  9056                           
  9057                           ;mcp2515.c: 207: Spi_ReadWrite(cmd,3);
  9058  00258A  0E34               	movlw	low Mcp2515ReadCanMsg@cmd
  9059  00258C  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  9060  00258E  0E00               	movlw	high Mcp2515ReadCanMsg@cmd
  9061  002590  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  9062  002592  0E03               	movlw	3
  9063  002594  6E0F               	movwf	Spi_ReadWrite@size,c
  9064  002596  0E00               	movlw	0
  9065  002598  6E10               	movwf	Spi_ReadWrite@size+1,c
  9066  00259A  0E00               	movlw	0
  9067  00259C  6E11               	movwf	Spi_ReadWrite@size+2,c
  9068  00259E  0E00               	movlw	0
  9069  0025A0  6E12               	movwf	Spi_ReadWrite@size+3,c
  9070  0025A2  ECFB  F019         	call	_Spi_ReadWrite	;wreg free
  9071                           
  9072                           ;mcp2515.c: 208: msg->rtr = 0;
  9073  0025A6  EE20 F00E          	lfsr	2,14
  9074  0025AA  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  9075  0025AC  26D9               	addwf	fsr2l,f,c
  9076  0025AE  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  9077  0025B0  22DA               	addwfc	fsr2h,f,c
  9078  0025B2  0E00               	movlw	0
  9079  0025B4  6EDF               	movwf	indf2,c
  9080                           
  9081                           ;mcp2515.c: 209: if (cmd[2] & 0x08)
  9082  0025B6  A636               	btfss	Mcp2515ReadCanMsg@cmd+2,3,c
  9083  0025B8  D008               	goto	i2l2462
  9084                           
  9085                           ;mcp2515.c: 210: {
  9086                           ;mcp2515.c: 211: msg->rtr = 1;
  9087  0025BA  EE20 F00E          	lfsr	2,14
  9088  0025BE  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  9089  0025C0  26D9               	addwf	fsr2l,f,c
  9090  0025C2  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  9091  0025C4  22DA               	addwfc	fsr2h,f,c
  9092  0025C6  0E01               	movlw	1
  9093  0025C8  6EDF               	movwf	indf2,c
  9094  0025CA                     i2l2462:
  9095                           
  9096                           ;mcp2515.c: 212: }
  9097                           ;mcp2515.c: 214: cmd[0] = 0x03;
  9098  0025CA  0E03               	movlw	3
  9099  0025CC  6E34               	movwf	Mcp2515ReadCanMsg@cmd,c
  9100                           
  9101                           ;mcp2515.c: 215: cmd[1] = mcp_addr+4;
  9102  0025CE  503E               	movf	Mcp2515ReadCanMsg@mcp_addr,w,c
  9103  0025D0  0F04               	addlw	4
  9104  0025D2  6E35               	movwf	Mcp2515ReadCanMsg@cmd+1,c
  9105                           
  9106                           ;mcp2515.c: 216: Spi_ReadWrite(cmd,3);
  9107  0025D4  0E34               	movlw	low Mcp2515ReadCanMsg@cmd
  9108  0025D6  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  9109  0025D8  0E00               	movlw	high Mcp2515ReadCanMsg@cmd
  9110  0025DA  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  9111  0025DC  0E03               	movlw	3
  9112  0025DE  6E0F               	movwf	Spi_ReadWrite@size,c
  9113  0025E0  0E00               	movlw	0
  9114  0025E2  6E10               	movwf	Spi_ReadWrite@size+1,c
  9115  0025E4  0E00               	movlw	0
  9116  0025E6  6E11               	movwf	Spi_ReadWrite@size+2,c
  9117  0025E8  0E00               	movlw	0
  9118  0025EA  6E12               	movwf	Spi_ReadWrite@size+3,c
  9119  0025EC  ECFB  F019         	call	_Spi_ReadWrite	;wreg free
  9120                           
  9121                           ;mcp2515.c: 217: msg->dlc = cmd[2] & 0x0F;
  9122  0025F0  EE20 F005          	lfsr	2,5
  9123  0025F4  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  9124  0025F6  26D9               	addwf	fsr2l,f,c
  9125  0025F8  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  9126  0025FA  22DA               	addwfc	fsr2h,f,c
  9127  0025FC  5036               	movf	Mcp2515ReadCanMsg@cmd+2,w,c
  9128  0025FE  0B0F               	andlw	15
  9129  002600  6EDF               	movwf	indf2,c
  9130                           
  9131                           ;mcp2515.c: 219: cmd[0] = 0x03;
  9132  002602  0E03               	movlw	3
  9133  002604  6E34               	movwf	Mcp2515ReadCanMsg@cmd,c
  9134                           
  9135                           ;mcp2515.c: 220: cmd[1] = mcp_addr+5;
  9136  002606  503E               	movf	Mcp2515ReadCanMsg@mcp_addr,w,c
  9137  002608  0F05               	addlw	5
  9138  00260A  6E35               	movwf	Mcp2515ReadCanMsg@cmd+1,c
  9139                           
  9140                           ;mcp2515.c: 221: Spi_ReadWrite(cmd,msg->dlc + 2);
  9141  00260C  0E34               	movlw	low Mcp2515ReadCanMsg@cmd
  9142  00260E  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  9143  002610  0E00               	movlw	high Mcp2515ReadCanMsg@cmd
  9144  002612  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  9145  002614  EE20 F005          	lfsr	2,5
  9146  002618  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  9147  00261A  26D9               	addwf	fsr2l,f,c
  9148  00261C  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  9149  00261E  22DA               	addwfc	fsr2h,f,c
  9150  002620  50DF               	movf	indf2,w,c
  9151  002622  6E32               	movwf	??_Mcp2515ReadCanMsg& (0+255),c
  9152  002624  6A33               	clrf	(??_Mcp2515ReadCanMsg+1)& (0+255),c
  9153  002626  0E02               	movlw	2
  9154  002628  2632               	addwf	??_Mcp2515ReadCanMsg,f,c
  9155  00262A  0E00               	movlw	0
  9156  00262C  2233               	addwfc	??_Mcp2515ReadCanMsg+1,f,c
  9157  00262E  C032  F00F         	movff	??_Mcp2515ReadCanMsg,Spi_ReadWrite@size
  9158  002632  C033  F010         	movff	??_Mcp2515ReadCanMsg+1,Spi_ReadWrite@size+1
  9159  002636  0E00               	movlw	0
  9160  002638  BE10               	btfsc	Spi_ReadWrite@size+1,7,c
  9161  00263A  0EFF               	movlw	-1
  9162  00263C  6E11               	movwf	Spi_ReadWrite@size+2,c
  9163  00263E  6E12               	movwf	Spi_ReadWrite@size+3,c
  9164  002640  ECFB  F019         	call	_Spi_ReadWrite	;wreg free
  9165                           
  9166                           ;mcp2515.c: 222: memcpy((void *)msg->dta,(const void *)&cmd[2],msg->dlc);
  9167  002644  0E06               	movlw	6
  9168  002646  2430               	addwf	Mcp2515ReadCanMsg@msg,w,c
  9169  002648  6E01               	movwf	memcpy@d1,c
  9170  00264A  0E00               	movlw	0
  9171  00264C  2031               	addwfc	Mcp2515ReadCanMsg@msg+1,w,c
  9172  00264E  6E02               	movwf	memcpy@d1+1,c
  9173  002650  0E36               	movlw	low (Mcp2515ReadCanMsg@cmd+2)
  9174  002652  6E03               	movwf	memcpy@s1,c
  9175  002654  0E00               	movlw	high (Mcp2515ReadCanMsg@cmd+2)
  9176  002656  6E04               	movwf	memcpy@s1+1,c
  9177  002658  EE20 F005          	lfsr	2,5
  9178  00265C  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  9179  00265E  26D9               	addwf	fsr2l,f,c
  9180  002660  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  9181  002662  22DA               	addwfc	fsr2h,f,c
  9182  002664  50DF               	movf	indf2,w,c
  9183  002666  6E32               	movwf	??_Mcp2515ReadCanMsg& (0+255),c
  9184  002668  5032               	movf	??_Mcp2515ReadCanMsg,w,c
  9185  00266A  6E05               	movwf	memcpy@n,c
  9186  00266C  6A06               	clrf	memcpy@n+1,c
  9187  00266E  EC30  F019         	call	_memcpy	;wreg free
  9188  002672  0012               	return		;funcret
  9189  002674                     __end_of_Mcp2515ReadCanMsg:
  9190                           	opt stack 0
  9191                           pclatu	equ	0xFFB
  9192                           pclath	equ	0xFFA
  9193                           tblptru	equ	0xFF8
  9194                           tblptrh	equ	0xFF7
  9195                           tblptrl	equ	0xFF6
  9196                           tablat	equ	0xFF5
  9197                           prodh	equ	0xFF4
  9198                           prodl	equ	0xFF3
  9199                           intcon	equ	0xFF2
  9200                           intcon2	equ	0xFF1
  9201                           intcon3	equ	0xFF0
  9202                           postinc0	equ	0xFEE
  9203                           fsr0h	equ	0xFEA
  9204                           fsr0l	equ	0xFE9
  9205                           wreg	equ	0xFE8
  9206                           indf1	equ	0xFE7
  9207                           postinc1	equ	0xFE6
  9208                           postdec1	equ	0xFE5
  9209                           fsr1h	equ	0xFE2
  9210                           fsr1l	equ	0xFE1
  9211                           indf2	equ	0xFDF
  9212                           postinc2	equ	0xFDE
  9213                           fsr2h	equ	0xFDA
  9214                           fsr2l	equ	0xFD9
  9215                           status	equ	0xFD8
  9216                           
  9217 ;; *************** function _memcpy *****************
  9218 ;; Defined at:
  9219 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\memcpy.c"
  9220 ;; Parameters:    Size  Location     Type
  9221 ;;  d1              2    0[COMRAM] PTR void 
  9222 ;;		 -> rxBuffer(68), 
  9223 ;;  s1              2    2[COMRAM] PTR const void 
  9224 ;;		 -> Mcp2515ReadCanMsg@cmd(10), 
  9225 ;;  n               2    4[COMRAM] unsigned int 
  9226 ;; Auto vars:     Size  Location     Type
  9227 ;;  s               2    8[COMRAM] PTR const unsigned char 
  9228 ;;		 -> Mcp2515ReadCanMsg@cmd(10), 
  9229 ;;  d               2    6[COMRAM] PTR unsigned char 
  9230 ;;		 -> rxBuffer(68), 
  9231 ;;  tmp             1   10[COMRAM] unsigned char 
  9232 ;; Return value:  Size  Location     Type
  9233 ;;                  2    0[COMRAM] PTR void 
  9234 ;; Registers used:
  9235 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9236 ;; Tracked objects:
  9237 ;;		On entry : 0/0
  9238 ;;		On exit  : 0/0
  9239 ;;		Unchanged: 0/0
  9240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9241 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9242 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9244 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9245 ;;Total ram usage:       11 bytes
  9246 ;; Hardware stack levels used:    1
  9247 ;; This function calls:
  9248 ;;		Nothing
  9249 ;; This function is called by:
  9250 ;;		_Mcp2515ReadCanMsg
  9251 ;; This function uses a non-reentrant model
  9252 ;;
  9253                           
  9254                           	psect	text42
  9255  003260                     __ptext42:
  9256                           	opt stack 0
  9257  003260                     _memcpy:
  9258                           	opt stack 19
  9259                           
  9260                           ;incstack = 0
  9261  003260  C003  F009         	movff	memcpy@s1,memcpy@s
  9262  003264  C004  F00A         	movff	memcpy@s1+1,memcpy@s+1
  9263  003268  C001  F007         	movff	memcpy@d1,memcpy@d
  9264  00326C  C002  F008         	movff	memcpy@d1+1,memcpy@d+1
  9265  003270  D010               	goto	i2l2392
  9266  003272                     i2l2384:
  9267  003272  C009  FFD9         	movff	memcpy@s,fsr2l
  9268  003276  C00A  FFDA         	movff	memcpy@s+1,fsr2h
  9269  00327A  50DF               	movf	indf2,w,c
  9270  00327C  6E0B               	movwf	memcpy@tmp,c
  9271  00327E  4A09               	infsnz	memcpy@s,f,c
  9272  003280  2A0A               	incf	memcpy@s+1,f,c
  9273  003282  C007  FFD9         	movff	memcpy@d,fsr2l
  9274  003286  C008  FFDA         	movff	memcpy@d+1,fsr2h
  9275  00328A  C00B  FFDF         	movff	memcpy@tmp,indf2
  9276  00328E  4A07               	infsnz	memcpy@d,f,c
  9277  003290  2A08               	incf	memcpy@d+1,f,c
  9278  003292                     i2l2392:
  9279  003292  0605               	decf	memcpy@n,f,c
  9280  003294  A0D8               	btfss	status,0,c
  9281  003296  0606               	decf	memcpy@n+1,f,c
  9282  003298  2805               	incf	memcpy@n,w,c
  9283  00329A  E1EB               	bnz	i2l2384
  9284  00329C  2806               	incf	memcpy@n+1,w,c
  9285  00329E  B4D8               	btfsc	status,2,c
  9286  0032A0  0012               	return	
  9287  0032A2  D7E7               	goto	i2l2384
  9288  0032A4                     __end_of_memcpy:
  9289                           	opt stack 0
  9290                           pclatu	equ	0xFFB
  9291                           pclath	equ	0xFFA
  9292                           tblptru	equ	0xFF8
  9293                           tblptrh	equ	0xFF7
  9294                           tblptrl	equ	0xFF6
  9295                           tablat	equ	0xFF5
  9296                           prodh	equ	0xFF4
  9297                           prodl	equ	0xFF3
  9298                           intcon	equ	0xFF2
  9299                           intcon2	equ	0xFF1
  9300                           intcon3	equ	0xFF0
  9301                           postinc0	equ	0xFEE
  9302                           fsr0h	equ	0xFEA
  9303                           fsr0l	equ	0xFE9
  9304                           wreg	equ	0xFE8
  9305                           indf1	equ	0xFE7
  9306                           postinc1	equ	0xFE6
  9307                           postdec1	equ	0xFE5
  9308                           fsr1h	equ	0xFE2
  9309                           fsr1l	equ	0xFE1
  9310                           indf2	equ	0xFDF
  9311                           postinc2	equ	0xFDE
  9312                           fsr2h	equ	0xFDA
  9313                           fsr2l	equ	0xFD9
  9314                           status	equ	0xFD8
  9315                           
  9316 ;; *************** function _Mcp2515ReadCanId *****************
  9317 ;; Defined at:
  9318 ;;		line 164 in file "mcp2515.c"
  9319 ;; Parameters:    Size  Location     Type
  9320 ;;  mcp_addr        1    wreg     const unsigned char 
  9321 ;;  ext             2   18[COMRAM] PTR unsigned char 
  9322 ;;		 -> rxBuffer(68), 
  9323 ;;  can_id          2   20[COMRAM] PTR unsigned long 
  9324 ;;		 -> rxBuffer(68), 
  9325 ;; Auto vars:     Size  Location     Type
  9326 ;;  mcp_addr        1   40[COMRAM] const unsigned char 
  9327 ;;  msg             6   41[COMRAM] unsigned char [6]
  9328 ;; Return value:  Size  Location     Type
  9329 ;;                  1    wreg      void 
  9330 ;; Registers used:
  9331 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9332 ;; Tracked objects:
  9333 ;;		On entry : 0/0
  9334 ;;		On exit  : 0/0
  9335 ;;		Unchanged: 0/0
  9336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9337 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9338 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9339 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9340 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9341 ;;Total ram usage:       29 bytes
  9342 ;; Hardware stack levels used:    1
  9343 ;; Hardware stack levels required when called:    2
  9344 ;; This function calls:
  9345 ;;		_Spi_ReadWrite
  9346 ;; This function is called by:
  9347 ;;		_Mcp2515ReadCanMsg
  9348 ;; This function uses a non-reentrant model
  9349 ;;
  9350                           
  9351                           	psect	text43
  9352  001B20                     __ptext43:
  9353                           	opt stack 0
  9354  001B20                     _Mcp2515ReadCanId:
  9355                           	opt stack 17
  9356                           
  9357                           ;incstack = 0
  9358                           ;Mcp2515ReadCanId@mcp_addr stored from wreg
  9359  001B20  6E29               	movwf	Mcp2515ReadCanId@mcp_addr,c
  9360                           
  9361                           ;mcp2515.c: 167: uint8_t msg[]={0x03,0,0,0,0,0};
  9362  001B22  EE20  F0E9         	lfsr	2,Mcp2515ReadCanId@F8123
  9363  001B26  EE10  F02A         	lfsr	1,Mcp2515ReadCanId@msg
  9364  001B2A  0E05               	movlw	5
  9365  001B2C                     i2u135_41:
  9366  001B2C  CFDB FFE3          	movff	plusw2,plusw1
  9367  001B30  06E8               	decf	wreg,f,c
  9368  001B32  E2FC               	bc	i2u135_41
  9369                           
  9370                           ;mcp2515.c: 169: msg[1] = mcp_addr;
  9371  001B34  C029  F02B         	movff	Mcp2515ReadCanId@mcp_addr,Mcp2515ReadCanId@msg+1
  9372                           
  9373                           ;mcp2515.c: 170: *ext = 0;
  9374  001B38  C013  FFD9         	movff	Mcp2515ReadCanId@ext,fsr2l
  9375  001B3C  C014  FFDA         	movff	Mcp2515ReadCanId@ext+1,fsr2h
  9376  001B40  0E00               	movlw	0
  9377  001B42  6EDF               	movwf	indf2,c
  9378                           
  9379                           ;mcp2515.c: 171: *can_id = 0;
  9380  001B44  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  9381  001B48  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  9382  001B4C  6ADE               	clrf	postinc2,c
  9383  001B4E  6ADE               	clrf	postinc2,c
  9384  001B50  6ADE               	clrf	postinc2,c
  9385  001B52  6ADD               	clrf	postdec2,c
  9386                           
  9387                           ;mcp2515.c: 172: Spi_ReadWrite(msg,sizeof(msg));
  9388  001B54  0E2A               	movlw	low Mcp2515ReadCanId@msg
  9389  001B56  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  9390  001B58  0E00               	movlw	high Mcp2515ReadCanId@msg
  9391  001B5A  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  9392  001B5C  0E06               	movlw	6
  9393  001B5E  6E0F               	movwf	Spi_ReadWrite@size,c
  9394  001B60  0E00               	movlw	0
  9395  001B62  6E10               	movwf	Spi_ReadWrite@size+1,c
  9396  001B64  0E00               	movlw	0
  9397  001B66  6E11               	movwf	Spi_ReadWrite@size+2,c
  9398  001B68  0E00               	movlw	0
  9399  001B6A  6E12               	movwf	Spi_ReadWrite@size+3,c
  9400  001B6C  ECFB  F019         	call	_Spi_ReadWrite	;wreg free
  9401                           
  9402                           ;mcp2515.c: 174: *can_id = (msg[0+2]<<3) + (msg[1+2]>>5);
  9403  001B70  C02D  F017         	movff	Mcp2515ReadCanId@msg+3,??_Mcp2515ReadCanId
  9404  001B74  0E05               	movlw	5
  9405  001B76  6E18               	movwf	(??_Mcp2515ReadCanId+1)& (0+255),c
  9406  001B78                     i2u136_45:
  9407  001B78  90D8               	bcf	status,0,c
  9408  001B7A  3217               	rrcf	??_Mcp2515ReadCanId,f,c
  9409  001B7C  2E18               	decfsz	(??_Mcp2515ReadCanId+1)& (0+255),f,c
  9410  001B7E  D7FC               	goto	i2u136_45
  9411  001B80  502C               	movf	Mcp2515ReadCanId@msg+2,w,c
  9412  001B82  6E19               	movwf	(??_Mcp2515ReadCanId+2)& (0+255),c
  9413  001B84  6A1A               	clrf	(??_Mcp2515ReadCanId+3)& (0+255),c
  9414  001B86  90D8               	bcf	status,0,c
  9415  001B88  3619               	rlcf	??_Mcp2515ReadCanId+2,f,c
  9416  001B8A  361A               	rlcf	??_Mcp2515ReadCanId+3,f,c
  9417  001B8C  90D8               	bcf	status,0,c
  9418  001B8E  3619               	rlcf	??_Mcp2515ReadCanId+2,f,c
  9419  001B90  361A               	rlcf	??_Mcp2515ReadCanId+3,f,c
  9420  001B92  90D8               	bcf	status,0,c
  9421  001B94  3619               	rlcf	??_Mcp2515ReadCanId+2,f,c
  9422  001B96  361A               	rlcf	??_Mcp2515ReadCanId+3,f,c
  9423  001B98  5017               	movf	??_Mcp2515ReadCanId,w,c
  9424  001B9A  2419               	addwf	??_Mcp2515ReadCanId+2,w,c
  9425  001B9C  6E1B               	movwf	(??_Mcp2515ReadCanId+4)& (0+255),c
  9426  001B9E  0E00               	movlw	0
  9427  001BA0  201A               	addwfc	??_Mcp2515ReadCanId+3,w,c
  9428  001BA2  6E1C               	movwf	(??_Mcp2515ReadCanId+5)& (0+255),c
  9429  001BA4  6A1D               	clrf	(??_Mcp2515ReadCanId+6)& (0+255),c
  9430  001BA6  BE1C               	btfsc	(??_Mcp2515ReadCanId+5)& (0+255),7,c
  9431  001BA8  061D               	decf	(??_Mcp2515ReadCanId+6)& (0+255),f,c
  9432  001BAA  501D               	movf	(??_Mcp2515ReadCanId+6)& (0+255),w,c
  9433  001BAC  6E1E               	movwf	(??_Mcp2515ReadCanId+7)& (0+255),c
  9434  001BAE  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  9435  001BB2  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  9436  001BB6  C01B  FFDE         	movff	??_Mcp2515ReadCanId+4,postinc2
  9437  001BBA  C01C  FFDE         	movff	??_Mcp2515ReadCanId+5,postinc2
  9438  001BBE  C01D  FFDE         	movff	??_Mcp2515ReadCanId+6,postinc2
  9439  001BC2  C01E  FFDE         	movff	??_Mcp2515ReadCanId+7,postinc2
  9440                           
  9441                           ;mcp2515.c: 176: if ( (msg[1+2] & 0x08) == 0x08 )
  9442  001BC6  A62D               	btfss	Mcp2515ReadCanId@msg+3,3,c
  9443  001BC8  0012               	return	
  9444                           
  9445                           ;mcp2515.c: 177: {
  9446                           ;mcp2515.c: 179: *can_id = (*can_id<<2) + (msg[1+2] & 0x03);
  9447  001BCA  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  9448  001BCE  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  9449  001BD2  CFDE F017          	movff	postinc2,??_Mcp2515ReadCanId
  9450  001BD6  CFDE F018          	movff	postinc2,??_Mcp2515ReadCanId+1
  9451  001BDA  CFDE F019          	movff	postinc2,??_Mcp2515ReadCanId+2
  9452  001BDE  CFDE F01A          	movff	postinc2,??_Mcp2515ReadCanId+3
  9453  001BE2  0E02               	movlw	2
  9454  001BE4                     i2u138_45:
  9455  001BE4  90D8               	bcf	status,0,c
  9456  001BE6  3617               	rlcf	??_Mcp2515ReadCanId,f,c
  9457  001BE8  3618               	rlcf	??_Mcp2515ReadCanId+1,f,c
  9458  001BEA  3619               	rlcf	??_Mcp2515ReadCanId+2,f,c
  9459  001BEC  361A               	rlcf	??_Mcp2515ReadCanId+3,f,c
  9460  001BEE  2EE8               	decfsz	wreg,f,c
  9461  001BF0  D7F9               	goto	i2u138_45
  9462  001BF2  C02D  F01B         	movff	Mcp2515ReadCanId@msg+3,??_Mcp2515ReadCanId+4
  9463  001BF6  0E03               	movlw	3
  9464  001BF8  161B               	andwf	??_Mcp2515ReadCanId+4,f,c
  9465  001BFA  501B               	movf	??_Mcp2515ReadCanId+4,w,c
  9466  001BFC  2417               	addwf	??_Mcp2515ReadCanId,w,c
  9467  001BFE  6E1C               	movwf	(??_Mcp2515ReadCanId+5)& (0+255),c
  9468  001C00  0E00               	movlw	0
  9469  001C02  2018               	addwfc	??_Mcp2515ReadCanId+1,w,c
  9470  001C04  6E1D               	movwf	(??_Mcp2515ReadCanId+6)& (0+255),c
  9471  001C06  0E00               	movlw	0
  9472  001C08  2019               	addwfc	??_Mcp2515ReadCanId+2,w,c
  9473  001C0A  6E1E               	movwf	(??_Mcp2515ReadCanId+7)& (0+255),c
  9474  001C0C  0E00               	movlw	0
  9475  001C0E  201A               	addwfc	??_Mcp2515ReadCanId+3,w,c
  9476  001C10  6E1F               	movwf	(??_Mcp2515ReadCanId+8)& (0+255),c
  9477  001C12  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  9478  001C16  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  9479  001C1A  C01C  FFDE         	movff	??_Mcp2515ReadCanId+5,postinc2
  9480  001C1E  C01D  FFDE         	movff	??_Mcp2515ReadCanId+6,postinc2
  9481  001C22  C01E  FFDE         	movff	??_Mcp2515ReadCanId+7,postinc2
  9482  001C26  C01F  FFDE         	movff	??_Mcp2515ReadCanId+8,postinc2
  9483                           
  9484                           ;mcp2515.c: 180: *can_id <<= 16;
  9485  001C2A  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  9486  001C2E  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  9487  001C32  0E10               	movlw	16
  9488  001C34                     i2u139_45:
  9489  001C34  90D8               	bcf	status,0,c
  9490  001C36  36DE               	rlcf	postinc2,f,c
  9491  001C38  36DE               	rlcf	postinc2,f,c
  9492  001C3A  36DE               	rlcf	postinc2,f,c
  9493  001C3C  36DD               	rlcf	postdec2,f,c
  9494  001C3E  06D9               	decf	fsr2l,f,c
  9495  001C40  06D9               	decf	fsr2l,f,c
  9496  001C42  2EE8               	decfsz	wreg,f,c
  9497  001C44  D7F7               	goto	i2u139_45
  9498                           
  9499                           ;mcp2515.c: 181: *can_id = *can_id +(msg[2+2]<<8) + msg[3+2];
  9500  001C46  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  9501  001C4A  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  9502  001C4E  CFDE F017          	movff	postinc2,??_Mcp2515ReadCanId
  9503  001C52  CFDE F018          	movff	postinc2,??_Mcp2515ReadCanId+1
  9504  001C56  CFDE F019          	movff	postinc2,??_Mcp2515ReadCanId+2
  9505  001C5A  CFDE F01A          	movff	postinc2,??_Mcp2515ReadCanId+3
  9506  001C5E  502E               	movf	Mcp2515ReadCanId@msg+4,w,c
  9507  001C60  6E1C               	movwf	(??_Mcp2515ReadCanId+5)& (0+255),c
  9508  001C62  6A1B               	clrf	(??_Mcp2515ReadCanId+4)& (0+255),c
  9509  001C64  C01B  F01D         	movff	??_Mcp2515ReadCanId+4,??_Mcp2515ReadCanId+6
  9510  001C68  C01C  F01E         	movff	??_Mcp2515ReadCanId+5,??_Mcp2515ReadCanId+7
  9511  001C6C  0E00               	movlw	0
  9512  001C6E  BE1E               	btfsc	(??_Mcp2515ReadCanId+7)& (0+255),7,c
  9513  001C70  0EFF               	movlw	255
  9514  001C72  6E1F               	movwf	(??_Mcp2515ReadCanId+8)& (0+255),c
  9515  001C74  6E20               	movwf	(??_Mcp2515ReadCanId+9)& (0+255),c
  9516  001C76  502F               	movf	Mcp2515ReadCanId@msg+5,w,c
  9517  001C78  241D               	addwf	??_Mcp2515ReadCanId+6,w,c
  9518  001C7A  6E21               	movwf	(??_Mcp2515ReadCanId+10)& (0+255),c
  9519  001C7C  0E00               	movlw	0
  9520  001C7E  201E               	addwfc	??_Mcp2515ReadCanId+7,w,c
  9521  001C80  6E22               	movwf	(??_Mcp2515ReadCanId+11)& (0+255),c
  9522  001C82  0E00               	movlw	0
  9523  001C84  201F               	addwfc	??_Mcp2515ReadCanId+8,w,c
  9524  001C86  6E23               	movwf	(??_Mcp2515ReadCanId+12)& (0+255),c
  9525  001C88  0E00               	movlw	0
  9526  001C8A  2020               	addwfc	??_Mcp2515ReadCanId+9,w,c
  9527  001C8C  6E24               	movwf	(??_Mcp2515ReadCanId+13)& (0+255),c
  9528  001C8E  5017               	movf	??_Mcp2515ReadCanId,w,c
  9529  001C90  2421               	addwf	??_Mcp2515ReadCanId+10,w,c
  9530  001C92  6E25               	movwf	(??_Mcp2515ReadCanId+14)& (0+255),c
  9531  001C94  5018               	movf	??_Mcp2515ReadCanId+1,w,c
  9532  001C96  2022               	addwfc	??_Mcp2515ReadCanId+11,w,c
  9533  001C98  6E26               	movwf	(??_Mcp2515ReadCanId+15)& (0+255),c
  9534  001C9A  5019               	movf	??_Mcp2515ReadCanId+2,w,c
  9535  001C9C  2023               	addwfc	??_Mcp2515ReadCanId+12,w,c
  9536  001C9E  6E27               	movwf	(??_Mcp2515ReadCanId+16)& (0+255),c
  9537  001CA0  501A               	movf	??_Mcp2515ReadCanId+3,w,c
  9538  001CA2  2024               	addwfc	??_Mcp2515ReadCanId+13,w,c
  9539  001CA4  6E28               	movwf	(??_Mcp2515ReadCanId+17)& (0+255),c
  9540  001CA6  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  9541  001CAA  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  9542  001CAE  C025  FFDE         	movff	??_Mcp2515ReadCanId+14,postinc2
  9543  001CB2  C026  FFDE         	movff	??_Mcp2515ReadCanId+15,postinc2
  9544  001CB6  C027  FFDE         	movff	??_Mcp2515ReadCanId+16,postinc2
  9545  001CBA  C028  FFDE         	movff	??_Mcp2515ReadCanId+17,postinc2
  9546                           
  9547                           ;mcp2515.c: 182: *ext = 1;
  9548  001CBE  C013  FFD9         	movff	Mcp2515ReadCanId@ext,fsr2l
  9549  001CC2  C014  FFDA         	movff	Mcp2515ReadCanId@ext+1,fsr2h
  9550  001CC6  0E01               	movlw	1
  9551  001CC8  6EDF               	movwf	indf2,c
  9552  001CCA  0012               	return	
  9553  001CCC                     __end_of_Mcp2515ReadCanId:
  9554                           	opt stack 0
  9555                           pclatu	equ	0xFFB
  9556                           pclath	equ	0xFFA
  9557                           tblptru	equ	0xFF8
  9558                           tblptrh	equ	0xFF7
  9559                           tblptrl	equ	0xFF6
  9560                           tablat	equ	0xFF5
  9561                           prodh	equ	0xFF4
  9562                           prodl	equ	0xFF3
  9563                           intcon	equ	0xFF2
  9564                           intcon2	equ	0xFF1
  9565                           intcon3	equ	0xFF0
  9566                           postinc0	equ	0xFEE
  9567                           fsr0h	equ	0xFEA
  9568                           fsr0l	equ	0xFE9
  9569                           wreg	equ	0xFE8
  9570                           indf1	equ	0xFE7
  9571                           postinc1	equ	0xFE6
  9572                           postdec1	equ	0xFE5
  9573                           plusw1	equ	0xFE3
  9574                           fsr1h	equ	0xFE2
  9575                           fsr1l	equ	0xFE1
  9576                           indf2	equ	0xFDF
  9577                           postinc2	equ	0xFDE
  9578                           postdec2	equ	0xFDD
  9579                           plusw2	equ	0xFDB
  9580                           fsr2h	equ	0xFDA
  9581                           fsr2l	equ	0xFD9
  9582                           status	equ	0xFD8
  9583                           
  9584 ;; *************** function _Can_OutBufferStatus *****************
  9585 ;; Defined at:
  9586 ;;		line 156 in file "can.c"
  9587 ;; Parameters:    Size  Location     Type
  9588 ;;		None
  9589 ;; Auto vars:     Size  Location     Type
  9590 ;;		None
  9591 ;; Return value:  Size  Location     Type
  9592 ;;                  1    wreg      unsigned char 
  9593 ;; Registers used:
  9594 ;;		wreg, status,2
  9595 ;; Tracked objects:
  9596 ;;		On entry : 0/0
  9597 ;;		On exit  : 0/0
  9598 ;;		Unchanged: 0/0
  9599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9604 ;;Total ram usage:        0 bytes
  9605 ;; Hardware stack levels used:    1
  9606 ;; This function calls:
  9607 ;;		Nothing
  9608 ;; This function is called by:
  9609 ;;		_Can_Isr
  9610 ;; This function uses a non-reentrant model
  9611 ;;
  9612                           
  9613                           	psect	text44
  9614  003484                     __ptext44:
  9615                           	opt stack 0
  9616  003484                     _Can_OutBufferStatus:
  9617                           	opt stack 22
  9618                           
  9619                           ;can.c: 158: return txBufferCount;
  9620                           
  9621                           ;incstack = 0
  9622  003484  0100               	movlb	0	; () banked
  9623  003486  51C1               	movf	_txBufferCount& (0+255),w,b
  9624  003488  0012               	return	
  9625  00348A                     __end_of_Can_OutBufferStatus:
  9626                           	opt stack 0
  9627                           pclatu	equ	0xFFB
  9628                           pclath	equ	0xFFA
  9629                           tblptru	equ	0xFF8
  9630                           tblptrh	equ	0xFF7
  9631                           tblptrl	equ	0xFF6
  9632                           tablat	equ	0xFF5
  9633                           prodh	equ	0xFF4
  9634                           prodl	equ	0xFF3
  9635                           intcon	equ	0xFF2
  9636                           intcon2	equ	0xFF1
  9637                           intcon3	equ	0xFF0
  9638                           postinc0	equ	0xFEE
  9639                           fsr0h	equ	0xFEA
  9640                           fsr0l	equ	0xFE9
  9641                           wreg	equ	0xFE8
  9642                           indf1	equ	0xFE7
  9643                           postinc1	equ	0xFE6
  9644                           postdec1	equ	0xFE5
  9645                           plusw1	equ	0xFE3
  9646                           fsr1h	equ	0xFE2
  9647                           fsr1l	equ	0xFE1
  9648                           indf2	equ	0xFDF
  9649                           postinc2	equ	0xFDE
  9650                           postdec2	equ	0xFDD
  9651                           plusw2	equ	0xFDB
  9652                           fsr2h	equ	0xFDA
  9653                           fsr2l	equ	0xFD9
  9654                           status	equ	0xFD8
  9655                           
  9656 ;; *************** function _Can_GetStatus *****************
  9657 ;; Defined at:
  9658 ;;		line 349 in file "can.c"
  9659 ;; Parameters:    Size  Location     Type
  9660 ;;		None
  9661 ;; Auto vars:     Size  Location     Type
  9662 ;;  msg4            4   18[COMRAM] unsigned char [4]
  9663 ;;  msg             3   22[COMRAM] unsigned char [3]
  9664 ;;  status          1   25[COMRAM] unsigned char 
  9665 ;; Return value:  Size  Location     Type
  9666 ;;                  1    wreg      unsigned char 
  9667 ;; Registers used:
  9668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9669 ;; Tracked objects:
  9670 ;;		On entry : 0/0
  9671 ;;		On exit  : 0/0
  9672 ;;		Unchanged: 0/0
  9673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9675 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9677 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9678 ;;Total ram usage:        8 bytes
  9679 ;; Hardware stack levels used:    1
  9680 ;; Hardware stack levels required when called:    2
  9681 ;; This function calls:
  9682 ;;		_Spi_ReadWrite
  9683 ;; This function is called by:
  9684 ;;		_Can_Isr
  9685 ;; This function uses a non-reentrant model
  9686 ;;
  9687                           
  9688                           	psect	text45
  9689  003018                     __ptext45:
  9690                           	opt stack 0
  9691  003018                     _Can_GetStatus:
  9692                           	opt stack 20
  9693                           
  9694                           ;can.c: 351: uint8_t status;
  9695                           ;can.c: 352: uint8_t msg[]={0x03,0x2C,0};
  9696                           
  9697                           ; BSR set to: 0
  9698                           ;incstack = 0
  9699  003018  C0FD  F017         	movff	Can_GetStatus@F8262,Can_GetStatus@msg
  9700  00301C  C0FE  F018         	movff	Can_GetStatus@F8262+1,Can_GetStatus@msg+1
  9701  003020  C0FF  F019         	movff	Can_GetStatus@F8262+2,Can_GetStatus@msg+2
  9702                           
  9703                           ;can.c: 353: uint8_t msg4[]={0x05,0x2C,0x1C,0};
  9704  003024  C0F3  F013         	movff	Can_GetStatus@F8264,Can_GetStatus@msg4
  9705  003028  C0F4  F014         	movff	Can_GetStatus@F8264+1,Can_GetStatus@msg4+1
  9706  00302C  C0F5  F015         	movff	Can_GetStatus@F8264+2,Can_GetStatus@msg4+2
  9707  003030  C0F6  F016         	movff	Can_GetStatus@F8264+3,Can_GetStatus@msg4+3
  9708                           
  9709                           ;can.c: 355: Spi_ReadWrite(msg,sizeof(msg));
  9710  003034  0E17               	movlw	low Can_GetStatus@msg
  9711  003036  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  9712  003038  0E00               	movlw	high Can_GetStatus@msg
  9713  00303A  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  9714  00303C  0E03               	movlw	3
  9715  00303E  6E0F               	movwf	Spi_ReadWrite@size,c
  9716  003040  0E00               	movlw	0
  9717  003042  6E10               	movwf	Spi_ReadWrite@size+1,c
  9718  003044  0E00               	movlw	0
  9719  003046  6E11               	movwf	Spi_ReadWrite@size+2,c
  9720  003048  0E00               	movlw	0
  9721  00304A  6E12               	movwf	Spi_ReadWrite@size+3,c
  9722  00304C  ECFB  F019         	call	_Spi_ReadWrite	;wreg free
  9723                           
  9724                           ;can.c: 356: status = msg[2];
  9725  003050  C019  F01A         	movff	Can_GetStatus@msg+2,Can_GetStatus@status
  9726                           
  9727                           ;can.c: 357: msg4[2] = status & 0x1C;
  9728  003054  501A               	movf	Can_GetStatus@status,w,c
  9729  003056  0B1C               	andlw	28
  9730  003058  6E15               	movwf	Can_GetStatus@msg4+2,c
  9731                           
  9732                           ;can.c: 358: Spi_ReadWrite(msg4,sizeof(msg4));
  9733  00305A  0E13               	movlw	low Can_GetStatus@msg4
  9734  00305C  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  9735  00305E  0E00               	movlw	high Can_GetStatus@msg4
  9736  003060  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  9737  003062  0E04               	movlw	4
  9738  003064  6E0F               	movwf	Spi_ReadWrite@size,c
  9739  003066  0E00               	movlw	0
  9740  003068  6E10               	movwf	Spi_ReadWrite@size+1,c
  9741  00306A  0E00               	movlw	0
  9742  00306C  6E11               	movwf	Spi_ReadWrite@size+2,c
  9743  00306E  0E00               	movlw	0
  9744  003070  6E12               	movwf	Spi_ReadWrite@size+3,c
  9745  003072  ECFB  F019         	call	_Spi_ReadWrite	;wreg free
  9746                           
  9747                           ;can.c: 359: return status;
  9748  003076  501A               	movf	Can_GetStatus@status,w,c
  9749  003078  0012               	return	
  9750  00307A                     __end_of_Can_GetStatus:
  9751                           	opt stack 0
  9752                           pclatu	equ	0xFFB
  9753                           pclath	equ	0xFFA
  9754                           tblptru	equ	0xFF8
  9755                           tblptrh	equ	0xFF7
  9756                           tblptrl	equ	0xFF6
  9757                           tablat	equ	0xFF5
  9758                           prodh	equ	0xFF4
  9759                           prodl	equ	0xFF3
  9760                           intcon	equ	0xFF2
  9761                           intcon2	equ	0xFF1
  9762                           intcon3	equ	0xFF0
  9763                           postinc0	equ	0xFEE
  9764                           fsr0h	equ	0xFEA
  9765                           fsr0l	equ	0xFE9
  9766                           wreg	equ	0xFE8
  9767                           indf1	equ	0xFE7
  9768                           postinc1	equ	0xFE6
  9769                           postdec1	equ	0xFE5
  9770                           plusw1	equ	0xFE3
  9771                           fsr1h	equ	0xFE2
  9772                           fsr1l	equ	0xFE1
  9773                           indf2	equ	0xFDF
  9774                           postinc2	equ	0xFDE
  9775                           postdec2	equ	0xFDD
  9776                           plusw2	equ	0xFDB
  9777                           fsr2h	equ	0xFDA
  9778                           fsr2l	equ	0xFD9
  9779                           status	equ	0xFD8
  9780                           
  9781 ;; *************** function _Spi_ReadWrite *****************
  9782 ;; Defined at:
  9783 ;;		line 319 in file "can.c"
  9784 ;; Parameters:    Size  Location     Type
  9785 ;;  rx_tx           2   12[COMRAM] PTR unsigned char 
  9786 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515ReadCanMsg@cmd(10), Mcp2515ReadCanId@msg(6), Can_ReadMessage@buf(4), 
  9787 ;;		 -> Can_GetStatus@msg4(4), Can_GetStatus@msg(3), 
  9788 ;;  size            4   14[COMRAM] unsigned long 
  9789 ;; Auto vars:     Size  Location     Type
  9790 ;;		None
  9791 ;; Return value:  Size  Location     Type
  9792 ;;                  1    wreg      void 
  9793 ;; Registers used:
  9794 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9795 ;; Tracked objects:
  9796 ;;		On entry : 0/0
  9797 ;;		On exit  : 0/0
  9798 ;;		Unchanged: 0/0
  9799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9800 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9803 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9804 ;;Total ram usage:        6 bytes
  9805 ;; Hardware stack levels used:    1
  9806 ;; Hardware stack levels required when called:    1
  9807 ;; This function calls:
  9808 ;;		i2_SPIRW
  9809 ;; This function is called by:
  9810 ;;		_Can_GetStatus
  9811 ;;		_Can_ReadMessage
  9812 ;;		_Mcp2515ReadCanId
  9813 ;;		_Mcp2515ReadCanMsg
  9814 ;;		_Mcp2515GetNextFreeTXBuf
  9815 ;; This function uses a non-reentrant model
  9816 ;;
  9817                           
  9818                           	psect	text46
  9819  0033F6                     __ptext46:
  9820                           	opt stack 0
  9821  0033F6                     _Spi_ReadWrite:
  9822                           	opt stack 18
  9823                           
  9824                           ;can.c: 321: SPIRW(rx_tx, rx_tx, size);
  9825                           
  9826                           ;incstack = 0
  9827  0033F6  C00D  F001         	movff	Spi_ReadWrite@rx_tx,i2SPIRW@tx
  9828  0033FA  C00E  F002         	movff	Spi_ReadWrite@rx_tx+1,i2SPIRW@tx+1
  9829  0033FE  C00D  F003         	movff	Spi_ReadWrite@rx_tx,i2SPIRW@rx
  9830  003402  C00E  F004         	movff	Spi_ReadWrite@rx_tx+1,i2SPIRW@rx+1
  9831  003406  C00F  F005         	movff	Spi_ReadWrite@size,i2SPIRW@size
  9832  00340A  C010  F006         	movff	Spi_ReadWrite@size+1,i2SPIRW@size+1
  9833  00340E  C011  F007         	movff	Spi_ReadWrite@size+2,i2SPIRW@size+2
  9834  003412  C012  F008         	movff	Spi_ReadWrite@size+3,i2SPIRW@size+3
  9835  003416  EC3F  F017         	call	i2_SPIRW	;wreg free
  9836  00341A  0012               	return		;funcret
  9837  00341C                     __end_of_Spi_ReadWrite:
  9838                           	opt stack 0
  9839                           pclatu	equ	0xFFB
  9840                           pclath	equ	0xFFA
  9841                           tblptru	equ	0xFF8
  9842                           tblptrh	equ	0xFF7
  9843                           tblptrl	equ	0xFF6
  9844                           tablat	equ	0xFF5
  9845                           prodh	equ	0xFF4
  9846                           prodl	equ	0xFF3
  9847                           intcon	equ	0xFF2
  9848                           intcon2	equ	0xFF1
  9849                           intcon3	equ	0xFF0
  9850                           postinc0	equ	0xFEE
  9851                           fsr0h	equ	0xFEA
  9852                           fsr0l	equ	0xFE9
  9853                           wreg	equ	0xFE8
  9854                           indf1	equ	0xFE7
  9855                           postinc1	equ	0xFE6
  9856                           postdec1	equ	0xFE5
  9857                           plusw1	equ	0xFE3
  9858                           fsr1h	equ	0xFE2
  9859                           fsr1l	equ	0xFE1
  9860                           indf2	equ	0xFDF
  9861                           postinc2	equ	0xFDE
  9862                           postdec2	equ	0xFDD
  9863                           plusw2	equ	0xFDB
  9864                           fsr2h	equ	0xFDA
  9865                           fsr2l	equ	0xFD9
  9866                           status	equ	0xFD8
  9867                           
  9868 ;; *************** function i2_SPIRW *****************
  9869 ;; Defined at:
  9870 ;;		line 293 in file "can.c"
  9871 ;; Parameters:    Size  Location     Type
  9872 ;;  tx              2    0[COMRAM] PTR const unsigned char 
  9873 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515WriteCanMsg@buf(10), Mcp2515WriteCanId@buf(6), Mcp2515ReadCanMsg@cmd(10),
      + 
  9874 ;;		 -> Mcp2515ReadCanId@msg(6), Mcp2515Sleep@cmdMask4(3), Mcp2515_Init@cmdWrite3(3), Mcp2515_Init@cmdMask4(4), 
  9875 ;;		 -> Mcp2515_Reset@cmd(1), Can_SendMessage@buf(4), Can_ReadMessage@buf(4), Can_GetStatus@msg4(4), 
  9876 ;;		 -> Can_GetStatus@msg(3), 
  9877 ;;  rx              2    2[COMRAM] PTR unsigned char 
  9878 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515ReadCanMsg@cmd(10), Mcp2515ReadCanId@msg(6), Can_ReadMessage@buf(4), 
  9879 ;;		 -> Can_GetStatus@msg4(4), Can_GetStatus@msg(3), NULL(0), 
  9880 ;;  size            4    4[COMRAM] unsigned long 
  9881 ;; Auto vars:     Size  Location     Type
  9882 ;;  SPIRW           4    8[COMRAM] unsigned long 
  9883 ;; Return value:  Size  Location     Type
  9884 ;;                  1    wreg      void 
  9885 ;; Registers used:
  9886 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9887 ;; Tracked objects:
  9888 ;;		On entry : 0/0
  9889 ;;		On exit  : 0/0
  9890 ;;		Unchanged: 0/0
  9891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9892 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9893 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9895 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9896 ;;Total ram usage:       12 bytes
  9897 ;; Hardware stack levels used:    1
  9898 ;; This function calls:
  9899 ;;		Nothing
  9900 ;; This function is called by:
  9901 ;;		_Spi_ReadWrite
  9902 ;;		i2_Spi_Write
  9903 ;; This function uses a non-reentrant model
  9904 ;;
  9905                           
  9906                           	psect	text47
  9907  002E7E                     __ptext47:
  9908                           	opt stack 0
  9909  002E7E                     i2_SPIRW:
  9910                           	opt stack 19
  9911                           
  9912                           ;can.c: 295: uint32_t i;
  9913                           ;can.c: 297: SSPCON1 = 0b00111010;
  9914                           
  9915                           ;incstack = 0
  9916  002E7E  0E3A               	movlw	58
  9917  002E80  6EC6               	movwf	4038,c	;volatile
  9918                           
  9919                           ;can.c: 299: LATD1 = 0;
  9920  002E82  928C               	bcf	3980,1,c	;volatile
  9921                           
  9922                           ;can.c: 300: for(i=0;i<size;i++)
  9923  002E84  0E00               	movlw	0
  9924  002E86  6E09               	movwf	i2SPIRW@i,c
  9925  002E88  0E00               	movlw	0
  9926  002E8A  6E0A               	movwf	i2SPIRW@i+1,c
  9927  002E8C  0E00               	movlw	0
  9928  002E8E  6E0B               	movwf	i2SPIRW@i+2,c
  9929  002E90  0E00               	movlw	0
  9930  002E92  6E0C               	movwf	i2SPIRW@i+3,c
  9931  002E94  D01D               	goto	i2l2342
  9932  002E96                     i2l2334:
  9933                           
  9934                           ;can.c: 301: {
  9935                           ;can.c: 302: SSPBUF = tx[i];
  9936  002E96  5009               	movf	i2SPIRW@i,w,c
  9937  002E98  2401               	addwf	i2SPIRW@tx,w,c
  9938  002E9A  6ED9               	movwf	fsr2l,c
  9939  002E9C  500A               	movf	i2SPIRW@i+1,w,c
  9940  002E9E  2002               	addwfc	i2SPIRW@tx+1,w,c
  9941  002EA0  6EDA               	movwf	fsr2h,c
  9942  002EA2  50DF               	movf	indf2,w,c
  9943  002EA4  6EC9               	movwf	4041,c	;volatile
  9944  002EA6                     i2l226:
  9945  002EA6  A69E               	btfss	3998,3,c	;volatile
  9946  002EA8  D7FE               	goto	i2l226
  9947                           
  9948                           ;can.c: 304: SSP1IF = 0;
  9949  002EAA  969E               	bcf	3998,3,c	;volatile
  9950                           
  9951                           ;can.c: 305: if(rx != 0)
  9952  002EAC  5003               	movf	i2SPIRW@rx,w,c
  9953  002EAE  1004               	iorwf	i2SPIRW@rx+1,w,c
  9954  002EB0  B4D8               	btfsc	status,2,c
  9955  002EB2  D008               	goto	i2l2340
  9956                           
  9957                           ;can.c: 306: rx[i] = SSPBUF;
  9958  002EB4  5009               	movf	i2SPIRW@i,w,c
  9959  002EB6  2403               	addwf	i2SPIRW@rx,w,c
  9960  002EB8  6ED9               	movwf	fsr2l,c
  9961  002EBA  500A               	movf	i2SPIRW@i+1,w,c
  9962  002EBC  2004               	addwfc	i2SPIRW@rx+1,w,c
  9963  002EBE  6EDA               	movwf	fsr2h,c
  9964  002EC0  CFC9 FFDF          	movff	4041,indf2	;volatile
  9965  002EC4                     i2l2340:
  9966  002EC4  0E01               	movlw	1
  9967  002EC6  2609               	addwf	i2SPIRW@i,f,c
  9968  002EC8  0E00               	movlw	0
  9969  002ECA  220A               	addwfc	i2SPIRW@i+1,f,c
  9970  002ECC  220B               	addwfc	i2SPIRW@i+2,f,c
  9971  002ECE  220C               	addwfc	i2SPIRW@i+3,f,c
  9972  002ED0                     i2l2342:
  9973  002ED0  5005               	movf	i2SPIRW@size,w,c
  9974  002ED2  5C09               	subwf	i2SPIRW@i,w,c
  9975  002ED4  5006               	movf	i2SPIRW@size+1,w,c
  9976  002ED6  580A               	subwfb	i2SPIRW@i+1,w,c
  9977  002ED8  5007               	movf	i2SPIRW@size+2,w,c
  9978  002EDA  580B               	subwfb	i2SPIRW@i+2,w,c
  9979  002EDC  5008               	movf	i2SPIRW@size+3,w,c
  9980  002EDE  580C               	subwfb	i2SPIRW@i+3,w,c
  9981  002EE0  A0D8               	btfss	status,0,c
  9982  002EE2  D7D9               	goto	i2l2334
  9983                           
  9984                           ;can.c: 307: }
  9985                           ;can.c: 308: LATD1 = 1;
  9986  002EE4  828C               	bsf	3980,1,c	;volatile
  9987  002EE6  0012               	return		;funcret
  9988  002EE8                     __end_ofi2_SPIRW:
  9989                           	opt stack 0
  9990                           pclatu	equ	0xFFB
  9991                           pclath	equ	0xFFA
  9992                           tblptru	equ	0xFF8
  9993                           tblptrh	equ	0xFF7
  9994                           tblptrl	equ	0xFF6
  9995                           tablat	equ	0xFF5
  9996                           prodh	equ	0xFF4
  9997                           prodl	equ	0xFF3
  9998                           intcon	equ	0xFF2
  9999                           intcon2	equ	0xFF1
 10000                           intcon3	equ	0xFF0
 10001                           postinc0	equ	0xFEE
 10002                           fsr0h	equ	0xFEA
 10003                           fsr0l	equ	0xFE9
 10004                           wreg	equ	0xFE8
 10005                           indf1	equ	0xFE7
 10006                           postinc1	equ	0xFE6
 10007                           postdec1	equ	0xFE5
 10008                           plusw1	equ	0xFE3
 10009                           fsr1h	equ	0xFE2
 10010                           fsr1l	equ	0xFE1
 10011                           indf2	equ	0xFDF
 10012                           postinc2	equ	0xFDE
 10013                           postdec2	equ	0xFDD
 10014                           plusw2	equ	0xFDB
 10015                           fsr2h	equ	0xFDA
 10016                           fsr2l	equ	0xFD9
 10017                           status	equ	0xFD8
 10018                           pclatu	equ	0xFFB
 10019                           pclath	equ	0xFFA
 10020                           tblptru	equ	0xFF8
 10021                           tblptrh	equ	0xFF7
 10022                           tblptrl	equ	0xFF6
 10023                           tablat	equ	0xFF5
 10024                           prodh	equ	0xFF4
 10025                           prodl	equ	0xFF3
 10026                           intcon	equ	0xFF2
 10027                           intcon2	equ	0xFF1
 10028                           intcon3	equ	0xFF0
 10029                           postinc0	equ	0xFEE
 10030                           fsr0h	equ	0xFEA
 10031                           fsr0l	equ	0xFE9
 10032                           wreg	equ	0xFE8
 10033                           indf1	equ	0xFE7
 10034                           postinc1	equ	0xFE6
 10035                           postdec1	equ	0xFE5
 10036                           plusw1	equ	0xFE3
 10037                           fsr1h	equ	0xFE2
 10038                           fsr1l	equ	0xFE1
 10039                           indf2	equ	0xFDF
 10040                           postinc2	equ	0xFDE
 10041                           postdec2	equ	0xFDD
 10042                           plusw2	equ	0xFDB
 10043                           fsr2h	equ	0xFDA
 10044                           fsr2l	equ	0xFD9
 10045                           status	equ	0xFD8
 10046                           
 10047                           	psect	rparam
 10048  0000                     pclatu	equ	0xFFB
 10049                           pclath	equ	0xFFA
 10050                           tblptru	equ	0xFF8
 10051                           tblptrh	equ	0xFF7
 10052                           tblptrl	equ	0xFF6
 10053                           tablat	equ	0xFF5
 10054                           prodh	equ	0xFF4
 10055                           prodl	equ	0xFF3
 10056                           intcon	equ	0xFF2
 10057                           intcon2	equ	0xFF1
 10058                           intcon3	equ	0xFF0
 10059                           postinc0	equ	0xFEE
 10060                           fsr0h	equ	0xFEA
 10061                           fsr0l	equ	0xFE9
 10062                           wreg	equ	0xFE8
 10063                           indf1	equ	0xFE7
 10064                           postinc1	equ	0xFE6
 10065                           postdec1	equ	0xFE5
 10066                           plusw1	equ	0xFE3
 10067                           fsr1h	equ	0xFE2
 10068                           fsr1l	equ	0xFE1
 10069                           indf2	equ	0xFDF
 10070                           postinc2	equ	0xFDE
 10071                           postdec2	equ	0xFDD
 10072                           plusw2	equ	0xFDB
 10073                           fsr2h	equ	0xFDA
 10074                           fsr2l	equ	0xFD9
 10075                           status	equ	0xFD8
 10076                           
 10077                           	psect	temp
 10078  00005F                     btemp:
 10079                           	opt stack 0
 10080  00005F                     	ds	1
 10081  0000                     int$flags	set	btemp
 10082                           pclatu	equ	0xFFB
 10083                           pclath	equ	0xFFA
 10084                           tblptru	equ	0xFF8
 10085                           tblptrh	equ	0xFF7
 10086                           tblptrl	equ	0xFF6
 10087                           tablat	equ	0xFF5
 10088                           prodh	equ	0xFF4
 10089                           prodl	equ	0xFF3
 10090                           intcon	equ	0xFF2
 10091                           intcon2	equ	0xFF1
 10092                           intcon3	equ	0xFF0
 10093                           postinc0	equ	0xFEE
 10094                           fsr0h	equ	0xFEA
 10095                           fsr0l	equ	0xFE9
 10096                           wreg	equ	0xFE8
 10097                           indf1	equ	0xFE7
 10098                           postinc1	equ	0xFE6
 10099                           postdec1	equ	0xFE5
 10100                           plusw1	equ	0xFE3
 10101                           fsr1h	equ	0xFE2
 10102                           fsr1l	equ	0xFE1
 10103                           indf2	equ	0xFDF
 10104                           postinc2	equ	0xFDE
 10105                           postdec2	equ	0xFDD
 10106                           plusw2	equ	0xFDB
 10107                           fsr2h	equ	0xFDA
 10108                           fsr2l	equ	0xFD9
 10109                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    63
    Data        24
    BSS         413
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     87      94
    BANK0           160     79     160
    BANK1           256      0     205
    BANK2           256      0     144
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           22      0       0

Pointer List with Targets:

    memcpy@d1	PTR void  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    memcpy@s1	PTR const void  size(2) Largest target is 10
		 -> Mcp2515ReadCanMsg@cmd(COMRAM[10]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 10
		 -> Mcp2515ReadCanMsg@cmd(COMRAM[10]), 

    Mcp2515GetNextFreeTXBuf@txbuf_n	PTR unsigned char  size(2) Largest target is 1
		 -> Can_SendMessage@txbuf_n(COMRAM[1]), 

    Mcp2515WriteCanMsg@msg	PTR const struct CANMESSAGE size(2) Largest target is 68
		 -> txBuffer(BANK1[68]), 

    sp__memcpy	PTR void  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Mcp2515ReadCanMsg@msg	PTR struct CANMESSAGE size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Mcp2515ReadCanId@can_id	PTR unsigned long  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Mcp2515ReadCanId@ext	PTR unsigned char  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Mcp2515_Init@filterCfg	PTR struct CANFILTER size(2) Largest target is 33
		 -> filter(BANK1[33]), 

    Mcp2515_Init@speedCfg	PTR const struct CANSPEED size(2) Largest target is 7
		 -> canSpeed125k(CODE[7]), 

    Can_SendMessage@msg	PTR const struct CANMESSAGE size(2) Largest target is 68
		 -> txBuffer(BANK1[68]), 

    Can_ReadMessage@msg	PTR struct CANMESSAGE size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Spi_Write@tx	PTR unsigned char  size(2) Largest target is 10
		 -> Mcp2515WriteCanMsg@buf(COMRAM[10]), Mcp2515WriteCanId@buf(BANK0[6]), Mcp2515Sleep@cmdMask4(COMRAM[3]), Mcp2515_Init@cmdWrite3(BANK0[3]), 
		 -> Mcp2515_Init@cmdMask4(BANK0[4]), Mcp2515_Reset@cmd(BANK0[1]), Can_SendMessage@buf(COMRAM[4]), Can_ReadMessage@buf(COMRAM[4]), 

    Spi_ReadWrite@rx_tx	PTR unsigned char  size(2) Largest target is 10
		 -> Mcp2515GetNextFreeTXBuf@buf(COMRAM[3]), Mcp2515ReadCanMsg@cmd(COMRAM[10]), Mcp2515ReadCanId@msg(COMRAM[6]), Can_ReadMessage@buf(COMRAM[4]), 
		 -> Can_GetStatus@msg4(COMRAM[4]), Can_GetStatus@msg(COMRAM[3]), 

    SPIRW@rx	PTR unsigned char  size(2) Largest target is 10
		 -> Mcp2515GetNextFreeTXBuf@buf(COMRAM[3]), Mcp2515ReadCanMsg@cmd(COMRAM[10]), Mcp2515ReadCanId@msg(COMRAM[6]), Can_ReadMessage@buf(COMRAM[4]), 
		 -> Can_GetStatus@msg4(COMRAM[4]), Can_GetStatus@msg(COMRAM[3]), NULL(NULL[0]), 

    SPIRW@tx	PTR const unsigned char  size(2) Largest target is 10
		 -> Mcp2515GetNextFreeTXBuf@buf(COMRAM[3]), Mcp2515WriteCanMsg@buf(COMRAM[10]), Mcp2515WriteCanId@buf(BANK0[6]), Mcp2515ReadCanMsg@cmd(COMRAM[10]), 
		 -> Mcp2515ReadCanId@msg(COMRAM[6]), Mcp2515Sleep@cmdMask4(COMRAM[3]), Mcp2515_Init@cmdWrite3(BANK0[3]), Mcp2515_Init@cmdMask4(BANK0[4]), 
		 -> Mcp2515_Reset@cmd(BANK0[1]), Can_SendMessage@buf(COMRAM[4]), Can_ReadMessage@buf(COMRAM[4]), Can_GetStatus@msg4(COMRAM[4]), 
		 -> Can_GetStatus@msg(COMRAM[3]), 

    Can_Init@filterCfg	PTR struct CANFILTER size(2) Largest target is 33
		 -> filter(BANK1[33]), 

    Can_Init@speedCfg	PTR const struct CANSPEED size(2) Largest target is 7
		 -> canSpeed125k(CODE[7]), 

    Can_PutMessage@msgPtr	PTR struct CANMESSAGE size(2) Largest target is 17
		 -> messageTx(BANK0[17]), 

    Can_GetMessage@msgPtr	PTR struct CANMESSAGE size(2) Largest target is 17
		 -> message(BANK0[17]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_Can_Isr
    _onTimeout->_secondRound
    _secondRound->_setWarningLight
    _setWarningLight->_sendWarningLight
    _sendWarningLight->i2_Can_PutMessage
    _firstRound->_requestPed
    _setLight->_sendPedestrianLight
    _setLight->_sendTrafficLight
    _sendTrafficLight->i2_Can_PutMessage
    _sendPedestrianLight->i2_Can_PutMessage
    _requestPed->i2_Can_GetMessage
    _requestPed->i2_Can_PutMessage
    _Can_Isr->_Can_ReadInBuffer
    _Can_WriteOutBuffer->_Can_SendMessage
    _Can_SendMessage->_Mcp2515WriteCanMsg
    _Mcp2515WriteCanMsg->i2_Mcp2515WriteCanId
    i2_Mcp2515WriteCanId->i2_Spi_Write
    _Mcp2515GetNextFreeTXBuf->_Spi_ReadWrite
    _Can_ReadInBuffer->_Can_ReadMessage
    _Can_ReadMessage->_Mcp2515ReadCanMsg
    i2_Spi_Write->i2_SPIRW
    _Mcp2515ReadCanMsg->_Mcp2515ReadCanId
    _Mcp2515ReadCanId->_Spi_ReadWrite
    _Can_GetStatus->_Spi_ReadWrite
    _Spi_ReadWrite->i2_SPIRW

Critical Paths under _main in BANK0

    _init->_Can_Init
    _readID->_Can_GetMessage
    _readID->_Can_PutMessage
    _readConflictInfo->___wmul
    _Can_Init->_Mcp2515_Init
    _Mcp2515_Init->_Mcp2515WriteCanId
    _Mcp2515_Reset->_Spi_Write
    _Mcp2515WriteCanId->_Spi_Write
    _Spi_Write->_SPIRW

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                15    10      5   20048
                                             64 BANK0     15    10      5
                     _Can_GetMessage
                 _Can_InBufferStatus
                       _decrPriority
                               _init
                          _initLogic
                        _setPriority
 ---------------------------------------------------------------------------------
 (1) _setPriority                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initLogic                                            1     1      0     134
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0   18695
                           _Can_Init
                   _readConflictInfo
                             _readID
 ---------------------------------------------------------------------------------
 (2) _readID                                               1     1      0    1188
                                              5 BANK0      1     1      0
                     _Can_GetMessage
                     _Can_PutMessage
                          _resetData
 ---------------------------------------------------------------------------------
 (2) _readConflictInfo                                    10    10      0    2309
                                              6 BANK0     10    10      0
                     _Can_GetMessage
                     _Can_PutMessage
                             ___wmul
                          _resetData
 ---------------------------------------------------------------------------------
 (3) _resetData                                            2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     767
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _Can_PutMessage                                       5     3      2     596
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (3) _Can_GetMessage                                       5     3      2     500
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _Can_Init                                             4     0      4   15198
                                             60 BANK0      4     0      4
                       _Mcp2515_Init
 ---------------------------------------------------------------------------------
 (3) _Mcp2515_Init                                        25    21      4   14850
                                             35 BANK0     25    21      4
                  _Mcp2515WriteCanId
                      _Mcp2515_Reset
                          _Spi_Write
 ---------------------------------------------------------------------------------
 (4) _Mcp2515_Reset                                        5     5      0    3781
                                             18 BANK0      5     5      0
                          _Spi_Write
 ---------------------------------------------------------------------------------
 (4) _Mcp2515WriteCanId                                   17    12      5    5581
                                             18 BANK0     17    12      5
                          _Spi_Write
 ---------------------------------------------------------------------------------
 (4) _Spi_Write                                            6     0      6    3710
                                             12 BANK0      6     0      6
                              _SPIRW
 ---------------------------------------------------------------------------------
 (5) _SPIRW                                               12     4      8     534
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _decrPriority                                         5     5      0     268
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _Can_InBufferStatus                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _high_isr                                            14    14      0   21331
                                             73 COMRAM    14    14      0
                            _Can_Isr
                          _onTimeout
 ---------------------------------------------------------------------------------
 (8) _onTimeout                                            1     1      0    6015
                                             18 COMRAM     1     1      0
                         _firstRound
                        _secondRound
 ---------------------------------------------------------------------------------
 (9) _secondRound                                          5     5      0    3097
                                             13 COMRAM     5     5      0
                        _getConflict
                           _setLight
                    _setWarningLight
                      _shiftPriority
 ---------------------------------------------------------------------------------
 (10) _shiftPriority                                       9     9      0      91
                                              0 COMRAM     9     9      0
 ---------------------------------------------------------------------------------
 (10) _setWarningLight                                     2     1      1     588
                                             11 COMRAM     2     1      1
                   _sendWarningLight
 ---------------------------------------------------------------------------------
 (11) _sendWarningLight                                    6     5      1     468
                                              5 COMRAM     6     5      1
                   i2_Can_PutMessage
 ---------------------------------------------------------------------------------
 (10) _getConflict                                         4     3      1     120
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (9) _firstRound                                           5     5      0    2850
                                             12 COMRAM     5     5      0
                         _requestPed
                           _setLight
 ---------------------------------------------------------------------------------
 (10) _setLight                                            2     1      1    1764
                                              9 COMRAM     2     1      1
                _sendPedestrianLight
                   _sendTrafficLight
 ---------------------------------------------------------------------------------
 (11) _sendTrafficLight                                    4     3      1     468
                                              5 COMRAM     4     3      1
                   i2_Can_PutMessage
 ---------------------------------------------------------------------------------
 (11) _sendPedestrianLight                                 4     3      1     468
                                              5 COMRAM     4     3      1
                   i2_Can_PutMessage
 ---------------------------------------------------------------------------------
 (10) _requestPed                                          7     7      0     618
                                              5 COMRAM     7     7      0
                   i2_Can_GetMessage
                   i2_Can_PutMessage
 ---------------------------------------------------------------------------------
 (12) i2_Can_PutMessage                                    5     3      2     348
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (11) i2_Can_GetMessage                                    5     3      2     248
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (8) _Can_Isr                                              2     2      0   15316
                                             71 COMRAM     2     2      0
                      _Can_GetStatus
                _Can_OutBufferStatus
                   _Can_ReadInBuffer
                 _Can_WriteOutBuffer
 ---------------------------------------------------------------------------------
 (9) _Can_WriteOutBuffer                                   0     0      0    5689
                    _Can_SendMessage
 ---------------------------------------------------------------------------------
 (10) _Can_SendMessage                                     8     6      2    5689
                                             53 COMRAM     8     6      2
            _Mcp2515GetNextFreeTXBuf
                 _Mcp2515WriteCanMsg
                        i2_Spi_Write
 ---------------------------------------------------------------------------------
 (11) _Mcp2515WriteCanMsg                                 18    16      2    2682
                                             35 COMRAM    18    16      2
                i2_Mcp2515WriteCanId
                        i2_Spi_Write
 ---------------------------------------------------------------------------------
 (12) i2_Mcp2515WriteCanId                                17    12      5    1333
                                             18 COMRAM    17    12      5
                        i2_Spi_Write
 ---------------------------------------------------------------------------------
 (11) _Mcp2515GetNextFreeTXBuf                            10     8      2    1927
                                             18 COMRAM    10     8      2
                      _Spi_ReadWrite
 ---------------------------------------------------------------------------------
 (9) _Can_ReadInBuffer                                     3     3      0    7772
                                             68 COMRAM     3     3      0
                    _Can_ReadMessage
 ---------------------------------------------------------------------------------
 (10) _Can_ReadMessage                                     6     4      2    7695
                                             62 COMRAM     6     4      2
                  _Mcp2515ReadCanMsg
                      _Spi_ReadWrite
                        i2_Spi_Write
 ---------------------------------------------------------------------------------
 (11) i2_Spi_Write                                         6     0      6     772
                                             12 COMRAM     6     0      6
                            i2_SPIRW
 ---------------------------------------------------------------------------------
 (11) _Mcp2515ReadCanMsg                                  15    13      2    4754
                                             47 COMRAM    15    13      2
                   _Mcp2515ReadCanId
                      _Spi_ReadWrite
                             _memcpy
 ---------------------------------------------------------------------------------
 (12) _memcpy                                             11     5      6     371
                                              0 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (12) _Mcp2515ReadCanId                                   29    25      4    2157
                                             18 COMRAM    29    25      4
                      _Spi_ReadWrite
 ---------------------------------------------------------------------------------
 (9) _Can_OutBufferStatus                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _Can_GetStatus                                        8     8      0    1744
                                             18 COMRAM     8     8      0
                      _Spi_ReadWrite
 ---------------------------------------------------------------------------------
 (12) _Spi_ReadWrite                                       6     0      6    1594
                                             12 COMRAM     6     0      6
                            i2_SPIRW
 ---------------------------------------------------------------------------------
 (12) i2_SPIRW                                            12     4      8     312
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Can_GetMessage
   _Can_InBufferStatus
   _decrPriority
   _init
     _Can_Init
       _Mcp2515_Init
         _Mcp2515WriteCanId
           _Spi_Write
             _SPIRW
         _Mcp2515_Reset
           _Spi_Write
             _SPIRW
         _Spi_Write
           _SPIRW
     _readConflictInfo
       _Can_GetMessage
       _Can_PutMessage
       ___wmul
       _resetData
     _readID
       _Can_GetMessage
       _Can_PutMessage
       _resetData
   _initLogic
   _setPriority

 _high_isr (ROOT)
   _Can_Isr
     _Can_GetStatus
       _Spi_ReadWrite
         i2_SPIRW
     _Can_OutBufferStatus
     _Can_ReadInBuffer
       _Can_ReadMessage
         _Mcp2515ReadCanMsg
           _Mcp2515ReadCanId
             _Spi_ReadWrite
               i2_SPIRW
           _Spi_ReadWrite
             i2_SPIRW
           _memcpy
         _Spi_ReadWrite
           i2_SPIRW
         i2_Spi_Write
           i2_SPIRW
     _Can_WriteOutBuffer
       _Can_SendMessage
         _Mcp2515GetNextFreeTXBuf
           _Spi_ReadWrite
             i2_SPIRW
         _Mcp2515WriteCanMsg
           i2_Mcp2515WriteCanId
             i2_Spi_Write
               i2_SPIRW
           i2_Spi_Write
             i2_SPIRW
         i2_Spi_Write
           i2_SPIRW
   _onTimeout
     _firstRound
       _requestPed
         i2_Can_GetMessage
         i2_Can_PutMessage
       _setLight
         _sendPedestrianLight
           i2_Can_PutMessage
         _sendTrafficLight
           i2_Can_PutMessage
     _secondRound
       _getConflict
       _setLight
         _sendPedestrianLight
           i2_Can_PutMessage
         _sendTrafficLight
           i2_Can_PutMessage
       _setWarningLight
         _sendWarningLight
           i2_Can_PutMessage
       _shiftPriority

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F15      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      90       9       56.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      CD       7       80.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4F      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     57      5E       1      100.0%
BITBANK15           16      0       0      35        0.0%
BANK15              16      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     25B      12        0.0%
DATA                 0      0     25B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Thu May 24 15:51:50 2018

     getConflict@carPersonConcerned 0004                         i2_Spi_Write 33D0  
                  i2_Can_GetMessage 22E8                   i2Can_PutMessage@i 0005  
                                _id 00C6                 ___wmul@multiplicand 0062  
                       __CFG_BORV$2 000000                __end_of_decrPriority 2A34  
                     i2Spi_Write@tx 000D                        __CFG_CP0$OFF 000000  
                      __CFG_CP1$OFF 000000                        __CFG_CP2$OFF 000000  
                      __CFG_CP3$OFF 000000                        __CFG_CP4$OFF 000000  
                      __CFG_CP5$OFF 000000                        __CFG_CP6$OFF 000000  
                      __CFG_CP7$OFF 000000                                 l304 2F4C  
                               l226 2B24                                 l578 1960  
                               l598 32E0                                 _GIE 007F97  
                      __CFG_CPB$OFF 000000                                 _RB3 007C0B  
                      __CFG_CPD$OFF 000000        __size_of_sendPedestrianLight 0058  
                               fsr2 000FD9                                 prod 000FF3  
                               wreg 000FE8                                l3200 2A22  
                              l3120 171E                                l3112 16E4  
                              l3204 2A28                                l3108 167C  
                              l3126 1948                                l3310 1AA8  
                              l3304 1A86                                l2354 2B4E  
                              l3090 3104                                l3410 1B08  
                              l3322 1ADA                                l3314 1AB2  
                              l3180 2982                                l2348 2B0C  
                              l2356 2B5C                                l3164 2DAA  
                              l3412 1B14                                l3260 196A  
                              l2542 2F22                                l3318 1AD4  
                              l3184 298C                                l2800 1456  
                              l3168 2DB4                                l3280 1A12  
                              l3328 1AEE                                l3194 29FA  
                              l2570 26FA                                l2642 22B8  
                              l3274 19F0                                l3188 29AE  
                              l2804 1460                                l2652 22E4  
                              l3292 1A44                                l3284 1A1C  
                              l3268 19C8                                l2638 2256  
                              l2750 1E44                                l2576 2752  
                              l2832 1564                                l2904 32AE  
                              l3296 1A58                                l3288 1A3E  
                              l2818 14EA                                l2746 1DE2  
                              l2844 15B0                                l2908 32C4  
                              _CKE1 007E3E                                _CKP1 007E34  
                              u2120 167A                                u2140 171C  
                              u2155 1920                                u1555 26E2  
                     __CFG_DEBUG$ON 000000                                u1565 2732  
                              u2390 19B8                                u1675 10C8  
                              u2395 19AC                                u1685 1188  
                              u1695 1256                                _PEIE 007F96  
                              _TMR0 000FD6                        __CFG_WDTPS$1 000000  
                              _TXIF 007CF4               Mcp2515ReadCanId@F8123 00E9  
                   __end_ofi2_SPIRW 2EE8                Mcp2515ReadCanMsg@cmd 0034  
              Mcp2515ReadCanMsg@msg 0030                                _main 1962  
                              _init 2C9E                                fsr0h 000FEA  
                              fsr1h 000FE2                                fsr2h 000FDA  
                              fsr0l 000FE9                                indf1 000FE7  
                              indf2 000FDF                                fsr1l 000FE1  
                              fsr2l 000FD9                                btemp 005F  
                   __end_of_Can_Isr 321C                                prodh 000FF4  
                              prodl 000FF3                                start 00A4  
                     __CFG_IESO$OFF 000000            __end_of_Mcp2515ReadCanId 1CCC  
                     __CFG_MCLRE$ON 000000               __size_of_Mcp2515_Init 060C  
                      ___param_bank 000000                     i2Spi_Write@size 000F  
          __size_of_Can_ReadMessage 00FA                  Can_ReadMessage@buf 0041  
                Can_ReadMessage@msg 003F           Mcp2515WriteCanId@mcp_addr 007A  
                             ?_main 00A0                               ?_init 0001  
                             _BRGH1 007D62                               _CREN1 007D5C  
                             _LATD1 007C61                               _LATG0 007C78  
                             _LATF6 007C76                               _LATF7 007C77  
                             i2l226 2EA6                               i2l247 2904  
                             i2l291 0068                               i2l288 0052  
                     _Can_GetStatus 3018                               _PLLEN 007CDE  
                   firstRound@color 000E                               _SPEN1 007D5F  
                             _SPIRW 2AF2                               _SSPIF 007CF3  
                             _TXEN1 007D65                               _SYNC1 007D64  
                             _TXREG 000FAD                       __CFG_WRT0$OFF 000000  
                     __CFG_WRT1$OFF 000000                       __CFG_WRT2$OFF 000000  
                     __CFG_WRT3$OFF 000000                       __CFG_WRT4$OFF 000000  
                    __CFG_EBRT0$OFF 000000                       __CFG_WRT5$OFF 000000  
                    __CFG_EBRT1$OFF 000000                       __CFG_WRT6$OFF 000000  
                    __CFG_EBRT2$OFF 000000                       __CFG_WRT7$OFF 000000  
                    __CFG_EBRT3$OFF 000000                      __CFG_EBRT4$OFF 000000  
                    __CFG_FCMEN$OFF 000000                      __CFG_EBRT5$OFF 000000  
                    __CFG_EBRT6$OFF 000000                      __CFG_EBRT7$OFF 000000  
                     __CFG_WRTB$OFF 000000                       __CFG_WRTC$OFF 000000  
                     __CFG_WRTD$OFF 000000                      __CFG_EBRTB$OFF 000000  
                             _nbTx0 00C0                               _nbTx1 00BF  
                             _nbTx2 00BE                               main@i 00AC  
                    __CFG_BOREN$OFF 000000                               pclath 000FFA  
                             tablat 000FF5                    __end_of_Can_Init 331A  
                      _Mcp2515_Init 1042             __size_of_Can_PutMessage 01A6  
                             plusw1 000FE3                               plusw2 000FDB  
                             status 000FD8                setPriority@carPerson 0060  
          __end_of_readConflictInfo 1962            ?_Mcp2515GetNextFreeTXBuf 0013  
                       firstRound@i 0011                     __initialization 2E12  
            __size_of_Mcp2515_Reset 0066              Mcp2515ReadCanId@can_id 0015  
                      __end_of_main 1B20                        __end_of_init 2D22  
          __end_of_Can_ReadInBuffer 3260            __size_of_Can_SendMessage 0064  
             Can_ReadInBuffer@error 0045                        _canSpeed100k 101D  
                      _canSpeed125k 1039                        _canSpeed250k 1016  
                      _canSpeed500k 100F                        _canSpeed800k 1008  
                  i2_Can_PutMessage 1E72                              ??_main 00A5  
              __size_of_getConflict 002A                              ??_init 00A0  
          Can_ReadInBuffer@rdStatus 0046                      ?_Can_GetStatus 0001  
             __end_of_Spi_ReadWrite 341C                       __activetblptr 000003  
                      ?_secondRound 0001                      __CFG_PLLCFG$ON 000000  
                            ?_SPIRW 0060                      __CFG_RETEN$OFF 000000  
                _numberWaitingUsers 005D                           ??i2_SPIRW 0009  
                    _Can_GetMessage 216E                              SPIRW@i 0068  
                            _BRG161 007B2B        sendTrafficLight@trafficLight 0009  
                         ??_Can_Isr 0048                main@isAlreadyWaiting 00AB  
                      ?_setPriority 0001                              _INT3IE 007F85  
                            _INT3IF 007F82                     __CFG_BBSIZ$BB1K 000000  
                            i2l3010 282C                              i2l3002 27EE  
                            i2l3022 285A                              i2l3030 1FF8  
                            i2l2400 1F7C                              i2l3016 2846  
                            i2l3024 2874                              i2l3034 2010  
                            i2l2340 2EC4                              i2l2404 1FC8  
                            i2l2334 2E96                              i2l2342 2ED0  
                            i2l2502 2C9A                              i2l3038 2018  
                            i2l2440 2A96                              i2l3064 20F8  
                            i2l3056 20B2                              i2l3048 2064  
                            i2l3080 2164                              i2l2514 2454  
                            i2l3234 3204                              i2l3074 215E  
                            i2l3244 3354                              i2l2462 25CA  
                            i2l2446 2AD4                              i2l2518 248C  
                            i2l3238 320A                              i2l2614 23C6  
                            i2l3078 2162                              i2l3254 3372  
                    __CFG_WDTEN$OFF 000000                              i2l2384 3272  
                            i2l2392 3292                              i2l2480 2C32  
                            i2l2528 253A                              i2l2720 2FB4  
                            i2l3248 335C                              i2l2618 2412  
                            i2l2716 296E                              i2l2484 2C3A  
                            i2l2628 243A                              i2l2498 2C96  
                            i2l2684 2900                              i2l2940 322C  
                            i2l2950 3258                              i2l2952 325C  
                            i2l2936 3224                              i2l2866 3164  
                            i2l2878 2D8C                              i2l2990 2782  
                            i2l2894 2B8E                              i2l2992 27C0  
                            i2l2986 277A                              i2l2898 2BBE  
                            i2l2998 27DA                              _OSCCON 000FD3  
            Mcp2515WriteCanId@canid 0081                              _TMR0IE 007F95  
                            _SPBRG1 000FAF                              _TMR0IF 007F92  
                            _SSP1IF 007CF3                              _TRISC3 007CA3  
                            _TRISD1 007CA9                              _TRISC4 007CA4  
                            _TRISC5 007CA5                              _SSPEN1 007E35  
                            _TRISG0 007CC0                              _TRISF6 007CBE  
                            _TRISF7 007CBF                              _SSPBUF 000FC9  
                 ?_sendTrafficLight 0006                      __CFG_PWRTEN$ON 000000  
                    __CFG_XINST$OFF 000000                   ?_sendWarningLight 0006  
                ??_sendTrafficLight 0007            __size_of_setWarningLight 000E  
                  __end_of_high_isr 00A4               __size_of_decrPriority 00C2  
             sendTrafficLight@color 0006                  ??_sendWarningLight 0007  
                            ___wmul 331A     Mcp2515GetNextFreeTXBuf@ctrlregs 0016  
                    __CFG_STVREN$ON 000000                              _filter 01AC  
                            _readID 30D2                              _memcpy 3260  
                            clear_0 2E4A                              clear_1 2E56  
                            clear_2 2E62                   ??_Can_ReadMessage 0041  
                  __end_of_setLight 317E                  __size_of_Spi_Write 002A  
                 Can_GetStatus@msg4 0013                        __pdataCOMRAM 005E  
      getConflict@carPersonToLookAt 0001                    decrPriority@user 0062  
            __end_of_Can_GetMessage 22E8                  Can_SendMessage@buf 0038  
                Can_SendMessage@msg 0036                  Can_SendMessage@res 003C  
                      __mediumconst 0000                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
                     _Mcp2515_Reset 2EE8               __end_of_shiftPriority 2C16  
                    _rxBufferPtrOut 00C3          __end_of_Can_InBufferStatus 348E  
          __end_ofi2_Can_GetMessage 243E                     __CFG_BORPWR$LOW 000000  
   __end_of_Mcp2515GetNextFreeTXBuf 2C9E                          __accesstop 0060  
           __end_of__initialization 2E74                        _decrPriority 2972  
                     ___rparam_used 000001                 _sendPedestrianLight 307A  
      __size_ofi2_Mcp2515WriteCanId 00BE                        readID@retVal 0065  
                     __end_of_SPIRW 2B84           Mcp2515ReadCanMsg@mcp_addr 003E  
                    __pcstackCOMRAM 0001                        __pidataBANK0 345E  
                      ?i2_Spi_Write 000D                       decrPriority@i 0064  
                   ??_Can_GetStatus 0013                           ?_Can_Init 009C  
                     _canSpeed1000k 1001                ?_sendPedestrianLight 0006  
                 ??_Can_SendMessage 0038                             ??_SPIRW 0068  
                    ?_Mcp2515_Reset 0001                Mcp2515WriteCanId@buf 007B  
                   ?_Can_GetMessage 0060                Mcp2515WriteCanId@ext 0072  
        __end_of_Mcp2515WriteCanMsg 2566         __size_of_Can_WriteOutBuffer 0020  
      __size_of_Can_OutBufferStatus 0006                          __pbssBANK0 00AF  
                        __pbssBANK1 0100                          __pbssBANK2 0200  
                    _Can_PutMessage 1CCC                  __size_of_initLogic 006E  
                 __end_of_Spi_Write 33A6                  __size_of_onTimeout 002C  
                 ?_Mcp2515ReadCanId 0013                  __CFG_CCP2MX$PORTBE 000000  
                   Can_PutMessage@i 0064                  ??_Mcp2515ReadCanId 0017  
                           ?___wmul 0060                             SPIRW@rx 0062  
                           SPIRW@tx 0060                             ?_readID 0001  
                           ?_memcpy 0001                  __size_of_resetData 003E  
                 ??_setWarningLight 000D                          ??_Can_Init 00A0  
             ??_sendPedestrianLight 0007                             _INTEDG3 007F8B  
                 Spi_ReadWrite@size 000F             Mcp2515WriteCanId@can_id 0073  
              __size_of_secondRound 017C                             i2_SPIRW 2E7E  
                           _SPBRGH1 000FD4                      shiftPriority@i 0009  
                           _SSPCON1 000FC6              __end_of_Can_PutMessage 1E72  
                         SPIRW@size 0064                           ?_high_isr 0001  
                           _Can_Isr 31D4                       setLight@color 000A  
                     setLight@light 000B                Can_GetMessage@msgPtr 0060  
          __end_ofi2_Can_PutMessage 1FF2                          _bottomLeft 00C4  
              __size_of_setPriority 0022                          _firstRound 2776  
                 ?_readConflictInfo 0001                           ?_setLight 000A  
                           __Hparam 0000              i2Can_PutMessage@msgPtr 0001  
                           __Lparam 0000                  ??_readConflictInfo 0066  
                   __size_of___wmul 0036                   ?_Can_ReadInBuffer 0001  
                      __psmallconst 1000                         Spi_Write@tx 006C  
                   __size_of_readID 0056                             __pcinit 2E12  
                   __size_of_memcpy 0044                             __ramtop 1000  
                ??_Can_ReadInBuffer 0045                             __ptext0 1962  
                           __ptext1 341C                             __ptext2 2DA4  
                           __ptext3 2C9E                             __ptext4 30D2  
                           __ptext5 164E                             __ptext6 32A4  
                           __ptext7 331A                             __ptext8 1CCC  
                           __ptext9 216E                           _T0CONbits 000FD5  
                   ??_Mcp2515_Reset 0072                   __end_of_initLogic 2E12  
  __size_of_Mcp2515GetNextFreeTXBuf 0088                  Can_GetStatus@F8262 00FD  
                Can_GetStatus@F8264 00F3                   __end_of_onTimeout 337C  
                           _message 00D8                   __CFG_MSSPMSK$MSK7 000000  
                           _topLeft 00C5                   i2Can_GetMessage@i 0005  
                           main@cmd 00A9                     ?_Can_PutMessage 0060  
                        ??_high_isr 004A                  __CFG_INTOSCSEL$LOW 000000  
             Mcp2515_Init@cmdWrite3 0099                end_of_initialization 2E74  
                         i2SPIRW@rx 0003                           i2SPIRW@tx 0001  
                 __end_of_resetData 32E2                             memcpy@d 0007  
                           memcpy@n 0005                             memcpy@s 0009  
               __end_of_canSpeed10k 1039                 __end_of_canSpeed20k 1032  
               __end_of_canSpeed50k 102B                          ??_setLight 000B  
                   _Can_ReadMessage 2878               Mcp2515_Init@filterCfg 0085  
                           postdec1 000FE5                             postdec2 000FDD  
                    Mcp2515_Reset@i 0073                             postinc0 000FEE  
                           postinc1 000FE6                             postinc2 000FDE  
                        _requestPed 2D22                       ??_getConflict 0002  
              __size_ofi2_Spi_Write 0026           __size_of_sendTrafficLight 0056  
               firstRound@occupancy 000F                    __CFG_FOSC$INTIO2 000000  
         __size_of_sendWarningLight 0066                 i2_Mcp2515WriteCanId 2A34  
                    _txBufferPtrOut 0058        sendWarningLight@trafficLight 000B  
                 ?i2_Can_GetMessage 0001                 Mcp2515ReadCanId@ext 0013  
               Mcp2515ReadCanId@msg 002A                  ??i2_Can_GetMessage 0003  
                       ?_firstRound 0001                ?i2_Mcp2515WriteCanId 0013  
            __size_of_Spi_ReadWrite 0026                  _Can_InBufferStatus 348A  
      Mcp2515GetNextFreeTXBuf@F8153 00F7                     _Can_SendMessage 2FB4  
               _Can_OutBufferStatus 3484         i2Mcp2515WriteCanId@mcp_addr 001B  
             sendWarningLight@state 0006                      __end_of___wmul 3350  
               ?_Can_InBufferStatus 0001                       __pidataCOMRAM 348E  
                  ??_Can_GetMessage 0062                      __end_of_readID 3128  
                    __end_of_memcpy 32A4                 __end_of_getConflict 33D0  
               start_initialization 2E12                   __size_of_Can_Init 0038  
          Mcp2515ReadCanId@mcp_addr 0029                      _durationLights 0118  
          i2Mcp2515WriteCanId@canid 0022                         _canSpeed10k 1032  
                       _canSpeed20k 102B                         _canSpeed50k 1024  
              ?_Can_OutBufferStatus 0001                ??_Can_InBufferStatus 0060  
           __end_of_Can_ReadMessage 2972                          initLogic@i 0060  
             ??i2_Mcp2515WriteCanId 0018                  _Mcp2515WriteCanMsg 243E  
        Mcp2515GetNextFreeTXBuf@buf 0019                     _setWarningLight 3476  
          Mcp2515GetNextFreeTXBuf@i 001C                      _occupancyPaths 0100  
                         _Spi_Write 337C                            ??___wmul 0064  
                       ?_requestPed 0001                 ?_Mcp2515WriteCanMsg 0024  
            __size_of_shiftPriority 0092               Mcp2515WriteCanMsg@dlc 0033  
             Mcp2515WriteCanMsg@buf 0028               Mcp2515WriteCanMsg@msg 0024  
                       __pdataBANK0 00E9                            ??_readID 0065  
                  Can_GetStatus@msg 0017                            ??_memcpy 0007  
                        onTimeout@i 0013                       _rxBufferCount 0059  
                     _rxBufferPtrIn 005A             _Mcp2515GetNextFreeTXBuf 2C16  
             __end_of_Can_GetStatus 307A                       _Spi_ReadWrite 33F6  
         __size_of_Mcp2515ReadCanId 01AC                 __size_of_firstRound 0102  
                       __pbssCOMRAM 0058          __end_of_Can_WriteOutBuffer 345E  
                     __pcstackBANK0 0060                            ?i2_SPIRW 0001  
             ??_Can_OutBufferStatus 0001                ??_Mcp2515WriteCanMsg 0026  
              decrPriority@modified 0063                            ?_Can_Isr 0001  
                     ?_Mcp2515_Init 0083                       Spi_Write@size 006E  
                 __size_of_high_isr 009C                 Mcp2515WriteCanMsg@i 0035  
           __end_of_Can_SendMessage 3018                   _Mcp2515ReadCanMsg 2566  
                 ?i2_Can_PutMessage 0001                  ?_Mcp2515ReadCanMsg 0030  
                ??i2_Can_PutMessage 0003              secondRound@waitingUser 0012  
                         __pintcode 0008                   __size_of_setLight 0056  
                        ?_Spi_Write 006C         __end_of_sendPedestrianLight 30D2  
                       _getConflict 33A6                 ??_Mcp2515ReadCanMsg 0032  
                         _conflicts 0200                    _sendTrafficLight 317E  
                     ??_secondRound 000E                      ?_Spi_ReadWrite 000D  
         __size_of_readConflictInfo 0314                         __smallconst 1000  
                  ??_Can_PutMessage 0062                    _sendWarningLight 2F4E  
                    __size_of_SPIRW 0092                   Mcp2515_Init@F8112 00EF  
                 Mcp2515_Init@F8114 00FA                          resetData@i 0060  
            Can_SendMessage@txbuf_n 003D                        secondRound@i 000F  
                      secondRound@j 0011                           _initLogic 2DA4  
         __size_of_Can_ReadInBuffer 0044                           _onTimeout 3350  
                     _shiftPriority 2B84          Mcp2515WriteCanMsg@mcp_addr 0034  
                     ??_setPriority 0060                      ??_Mcp2515_Init 0087  
               __size_of_requestPed 0082           __end_of_Mcp2515ReadCanMsg 2674  
                         _messageTx 00C7             __end_of_setWarningLight 3484  
              Mcp2515_Init@cmdMask4 0095                    ?_Can_ReadMessage 003F  
                    ___wmul@product 0064                            i2SPIRW@i 0009  
                         _resetData 32A4                            i2u135_41 1B2C  
                          i2u136_45 1B78                            i2u144_45 2A86  
                          i2u145_45 2AC0                            i2u138_45 1BE4  
                          i2u139_45 1C34                  Spi_ReadWrite@rx_tx 000D  
                     Mcp2515_Init@i 0094           i2Mcp2515WriteCanId@can_id 0014  
                 Mcp2515Sleep@F8117 00BB                         _colorLights 010C  
         ??_Mcp2515GetNextFreeTXBuf 0015                  firstRound@duration 0010  
                     _txBufferCount 00C1                           main@i_115 00AD  
                          _Can_Init 32E2                   ___wmul@multiplier 0060  
                     _txBufferPtrIn 00C2                    __CFG_SOSCSEL$LOW 000000  
              Mcp2515_Init@speedCfg 0083                     Can_GetMessage@i 0064  
             __end_of_Mcp2515_Reset 2F4E  Mcp2515WriteCanMsg@buffer_sidh_addr 0032  
              setWarningLight@light 000D                          ?_initLogic 0001  
              setWarningLight@state 000C            sendPedestrianLight@color 0006  
                    ?_shiftPriority 0001                    __size_ofi2_SPIRW 006A  
               __end_of_secondRound 216E                          ?_onTimeout 0001  
                       _bottomRight 005C                           copy_data0 2E26  
                       i2SPIRW@size 0005                    __size_of_Can_Isr 0048  
                     ?_decrPriority 0001                    ?_Can_SendMessage 0036  
                      ??_firstRound 000D                          ?_resetData 0001  
               __end_of_setPriority 343E                   _Mcp2515WriteCanId 2674  
                          __Hrparam 0000                           memcpy@tmp 000B  
                          __Lrparam 0000                Can_PutMessage@msgPtr 0060  
                ?_Mcp2515WriteCanId 0072                       ??i2_Spi_Write 0013  
               secondRound@conflict 0010                         ??_Spi_Write 0072  
         __size_ofi2_Can_GetMessage 0156                     ??_Spi_ReadWrite 0013  
               ??_Mcp2515WriteCanId 0077               __end_of_canSpeed1000k 1008  
    Mcp2515GetNextFreeTXBuf@txbuf_n 0013                    _Mcp2515ReadCanId 1B20  
                __end_of_firstRound 2878                            __ptext10 32E2  
                          __ptext11 1042                            __ptext20 1FF2  
                          __ptext12 2EE8                            __ptext21 2B84  
                          __ptext13 2674                            __ptext30 1E72  
                          __ptext22 3476                            __ptext14 337C  
                          __ptext31 22E8                            __ptext23 2F4E  
                          __ptext15 2AF2                            __ptext40 33D0  
                          __ptext32 31D4                            __ptext24 33A6  
                          __ptext16 2972                            __ptext41 2566  
                          __ptext33 343E                            __ptext25 2776  
                          __ptext17 348A                            __ptext42 3260  
                          __ptext34 2FB4                            __ptext26 3128  
                          __ptext43 1B20                            __ptext35 243E  
                          __ptext27 317E                            __ptext19 3350  
                          __ptext44 3484                            __ptext36 2A34  
                          __ptext28 307A                            __ptext45 3018  
                          __ptext37 2C16                            __ptext29 2D22  
                          __ptext46 33F6                            __ptext38 321C  
                          __ptext47 2E7E                            __ptext39 2878  
                          _high_isr 0008                      ??_decrPriority 0060  
        __size_of_Mcp2515ReadCanMsg 010E                   Can_Init@filterCfg 009E  
                  ?_setWarningLight 000C                       __size_of_main 01BE  
                     __size_of_init 0084           __end_of_Mcp2515WriteCanId 2776  
                     requestPed@ped 000C                            _setLight 3128  
               __CFG_RTCOSC$SOSCREF 000000                            _rxBuffer 0168  
                          _txBuffer 0124                        ??_requestPed 0006  
                          int$flags 005F                            _topRight 005B  
                 readConflictInfo@i 006C                   readConflictInfo@j 006E  
                          main@argc 00A0                            main@argv 00A2  
              __end_of_Mcp2515_Init 164E     sendPedestrianLight@trafficLight 0009  
                          main@user 00AE                    Mcp2515_Reset@cmd 0072  
               __end_ofi2_Spi_Write 33F6                    _readConflictInfo 164E  
                       _secondRound 1FF2              i2Mcp2515WriteCanId@buf 001C  
            i2Mcp2515WriteCanId@ext 0013                     ??_shiftPriority 0001  
                          memcpy@d1 0001                            memcpy@s1 0003  
                       ??_initLogic 0060                    _Can_ReadInBuffer 321C  
                       ??_onTimeout 0013                 Can_GetStatus@status 001A  
       __end_ofi2_Mcp2515WriteCanId 2AF2                __end_of_canSpeed100k 1024  
              __end_of_canSpeed125k 1040                __end_of_canSpeed250k 101D  
              __end_of_canSpeed500k 1016                            intlevel2 0000  
              __end_of_canSpeed800k 100F                         _setPriority 341C  
       __size_of_Can_InBufferStatus 0004                  __end_of_requestPed 2DA4  
                _Can_WriteOutBuffer 343E            __end_of_sendTrafficLight 31D4  
                       ??_resetData 0060            __end_of_sendWarningLight 2FB4  
               ?_Can_WriteOutBuffer 0001                        ?_getConflict 0001  
                 Can_ReadInBuffer@i 0047                    Can_Init@speedCfg 009C  
         __size_ofi2_Can_PutMessage 0180         __end_of_Can_OutBufferStatus 348A  
              ??_Can_WriteOutBuffer 003E             __size_of_Can_GetMessage 017A  
       __size_of_Mcp2515WriteCanMsg 0128              i2Can_GetMessage@msgPtr 0001  
                      _priorityUser 00AF                   shiftPriority@temp 0008  
        __size_of_Mcp2515WriteCanId 0102                      Can_Isr@nbTxBuf 005E  
            __size_of_Can_GetStatus 0062                      Can_Isr@retCode 0049  
