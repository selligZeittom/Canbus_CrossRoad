

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue May 22 10:22:07 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F87K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           ; Version 1.42
    53                           ; Generated 13/04/2017 GMT
    54                           ; 
    55                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC18F87K22 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     
    87                           	psect	idataCOMRAM
    88  002918                     __pidataCOMRAM:
    89                           	opt stack 0
    90                           
    91                           ;initializer for Can_Isr@nbTxBuf
    92  002918  03                 	db	3
    93                           
    94                           	psect	idataBANK0
    95  0028F4                     __pidataBANK0:
    96                           	opt stack 0
    97                           
    98                           ;initializer for Mcp2515ReadCanId@F8123
    99  0028F4  03                 	db	3
   100  0028F5  00                 	db	0
   101  0028F6  00                 	db	0
   102  0028F7  00                 	db	0
   103  0028F8  00                 	db	0
   104  0028F9  00                 	db	0
   105                           
   106                           ;initializer for Mcp2515_Init@F8112
   107  0028FA  05                 	db	5
   108  0028FB  0F                 	db	15
   109  0028FC  E0                 	db	224
   110  0028FD  80                 	db	128
   111                           
   112                           ;initializer for Can_GetStatus@F8264
   113  0028FE  05                 	db	5
   114  0028FF  2C                 	db	44
   115  002900  1C                 	db	28
   116  002901  00                 	db	0
   117                           
   118                           ;initializer for Mcp2515GetNextFreeTXBuf@F8153
   119  002902  30                 	db	48
   120  002903  40                 	db	64
   121  002904  50                 	db	80
   122                           
   123                           ;initializer for Mcp2515_Init@F8114
   124  002905  02                 	db	2
   125  002906  00                 	db	0
   126  002907  00                 	db	0
   127                           
   128                           ;initializer for Can_GetStatus@F8262
   129  002908  03                 	db	3
   130  002909  2C                 	db	44
   131  00290A  00                 	db	0
   132                           
   133                           	psect	smallconst
   134  001000                     __psmallconst:
   135                           	opt stack 0
   136  001000  00                 	db	0
   137  001001                     _canSpeed1000k:
   138                           	opt stack 0
   139  001001  00                 	db	0
   140  001002  01                 	db	1
   141  001003  00                 	db	0
   142  001004  03                 	db	3
   143  001005  01                 	db	1
   144  001006  01                 	db	1
   145  001007  01                 	db	1
   146  001008                     __end_of_canSpeed1000k:
   147                           	opt stack 0
   148  001008                     _canSpeed800k:
   149                           	opt stack 0
   150  001008  00                 	db	0
   151  001009  01                 	db	1
   152  00100A  02                 	db	2
   153  00100B  03                 	db	3
   154  00100C  01                 	db	1
   155  00100D  01                 	db	1
   156  00100E  01                 	db	1
   157  00100F                     __end_of_canSpeed800k:
   158                           	opt stack 0
   159  00100F                     _canSpeed500k:
   160                           	opt stack 0
   161  00100F  01                 	db	1
   162  001010  01                 	db	1
   163  001011  00                 	db	0
   164  001012  03                 	db	3
   165  001013  01                 	db	1
   166  001014  01                 	db	1
   167  001015  01                 	db	1
   168  001016                     __end_of_canSpeed500k:
   169                           	opt stack 0
   170  001016                     _canSpeed250k:
   171                           	opt stack 0
   172  001016  03                 	db	3
   173  001017  01                 	db	1
   174  001018  00                 	db	0
   175  001019  03                 	db	3
   176  00101A  01                 	db	1
   177  00101B  01                 	db	1
   178  00101C  01                 	db	1
   179  00101D                     __end_of_canSpeed250k:
   180                           	opt stack 0
   181  00101D                     _canSpeed100k:
   182                           	opt stack 0
   183  00101D  07                 	db	7
   184  00101E  01                 	db	1
   185  00101F  02                 	db	2
   186  001020  03                 	db	3
   187  001021  01                 	db	1
   188  001022  01                 	db	1
   189  001023  01                 	db	1
   190  001024                     __end_of_canSpeed100k:
   191                           	opt stack 0
   192  001024                     _canSpeed50k:
   193                           	opt stack 0
   194  001024  0F                 	db	15
   195  001025  01                 	db	1
   196  001026  02                 	db	2
   197  001027  03                 	db	3
   198  001028  01                 	db	1
   199  001029  01                 	db	1
   200  00102A  01                 	db	1
   201  00102B                     __end_of_canSpeed50k:
   202                           	opt stack 0
   203  00102B                     _canSpeed20k:
   204                           	opt stack 0
   205  00102B  13                 	db	19
   206  00102C  01                 	db	1
   207  00102D  06                 	db	6
   208  00102E  06                 	db	6
   209  00102F  04                 	db	4
   210  001030  01                 	db	1
   211  001031  01                 	db	1
   212  001032                     __end_of_canSpeed20k:
   213                           	opt stack 0
   214  001032                     _canSpeed10k:
   215                           	opt stack 0
   216  001032  1F                 	db	31
   217  001033  01                 	db	1
   218  001034  07                 	db	7
   219  001035  07                 	db	7
   220  001036  07                 	db	7
   221  001037  01                 	db	1
   222  001038  01                 	db	1
   223  001039                     __end_of_canSpeed10k:
   224                           	opt stack 0
   225  001039                     _canSpeed125k:
   226                           	opt stack 0
   227  001039  07                 	db	7
   228  00103A  01                 	db	1
   229  00103B  00                 	db	0
   230  00103C  03                 	db	3
   231  00103D  01                 	db	1
   232  00103E  01                 	db	1
   233  00103F  01                 	db	1
   234  001040                     __end_of_canSpeed125k:
   235                           	opt stack 0
   236  0000                     _SPBRG1	set	4015
   237  0000                     _SPBRGH1	set	4052
   238  0000                     _OSCCON	set	4051
   239  0000                     _TXREG	set	4013
   240  0000                     _SSPBUF	set	4041
   241  0000                     _SSPCON1	set	4038
   242  0000                     _TXEN1	set	32101
   243  0000                     _CREN1	set	32092
   244  0000                     _SPEN1	set	32095
   245  0000                     _SYNC1	set	32100
   246  0000                     _BRG161	set	31531
   247  0000                     _BRGH1	set	32098
   248  0000                     _LATG0	set	31864
   249  0000                     _TRISG0	set	31936
   250  0000                     _PLLEN	set	31966
   251  0000                     _TXIF	set	31988
   252  0000                     _RB3	set	31755
   253  0000                     _SSP1IF	set	31987
   254  0000                     _SSPIF	set	31987
   255  0000                     _LATD1	set	31841
   256  0000                     _INTEDG3	set	32651
   257  0000                     _SSPEN1	set	32309
   258  0000                     _CKP1	set	32308
   259  0000                     _CKE1	set	32318
   260  0000                     _TRISD1	set	31913
   261  0000                     _TRISC3	set	31907
   262  0000                     _TRISC5	set	31909
   263  0000                     _TRISC4	set	31908
   264  0000                     _LATF7	set	31863
   265  0000                     _LATF6	set	31862
   266  0000                     _TRISF7	set	31935
   267  0000                     _TRISF6	set	31934
   268  0000                     _INT3IF	set	32642
   269  0000                     _INT3IE	set	32645
   270  0000                     _GIE	set	32663
   271  0000                     _PEIE	set	32662
   272                           
   273                           ; #config settings
   274  001040  00                 	db	0	; dummy byte at the end
   275  0000                     
   276                           	psect	cinit
   277  002418                     __pcinit:
   278                           	opt stack 0
   279  002418                     start_initialization:
   280                           	opt stack 0
   281  002418                     __initialization:
   282                           	opt stack 0
   283                           
   284                           ; Initialize objects allocated to BANK0 (23 bytes)
   285                           ; load TBLPTR registers with __pidataBANK0
   286  002418  0EF4               	movlw	low __pidataBANK0
   287  00241A  6EF6               	movwf	tblptrl,c
   288  00241C  0E28               	movlw	high __pidataBANK0
   289  00241E  6EF7               	movwf	tblptrh,c
   290  002420  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   291  002422  6EF8               	movwf	tblptru,c
   292  002424  EE00  F0E2         	lfsr	0,__pdataBANK0
   293  002428  EE10 F017          	lfsr	1,23
   294  00242C                     copy_data0:
   295  00242C  0009               	tblrd		*+
   296  00242E  CFF5 FFEE          	movff	tablat,postinc0
   297  002432  50E5               	movf	postdec1,w,c
   298  002434  50E1               	movf	fsr1l,w,c
   299  002436  E1FA               	bnz	copy_data0
   300                           
   301                           ; Initialize objects allocated to COMRAM (1 bytes)
   302                           ; load TBLPTR registers with __pidataCOMRAM
   303  002438  0E18               	movlw	low __pidataCOMRAM
   304  00243A  6EF6               	movwf	tblptrl,c
   305  00243C  0E29               	movlw	high __pidataCOMRAM
   306  00243E  6EF7               	movwf	tblptrh,c
   307  002440  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   308  002442  6EF8               	movwf	tblptru,c
   309  002444  0009               	tblrd		*+	;fetch initializer
   310  002446  CFF5 F05E          	movff	tablat,__pdataCOMRAM
   311                           
   312                           ; Clear objects allocated to BANK2 (144 bytes)
   313  00244A  EE02  F000         	lfsr	0,__pbssBANK2
   314  00244E  0E90               	movlw	144
   315  002450                     clear_0:
   316  002450  6AEE               	clrf	postinc0,c
   317  002452  06E8               	decf	wreg,f,c
   318  002454  E1FD               	bnz	clear_0
   319                           
   320                           ; Clear objects allocated to BANK1 (153 bytes)
   321  002456  EE01  F000         	lfsr	0,__pbssBANK1
   322  00245A  0E99               	movlw	153
   323  00245C                     clear_1:
   324  00245C  6AEE               	clrf	postinc0,c
   325  00245E  06E8               	decf	wreg,f,c
   326  002460  E1FD               	bnz	clear_1
   327                           
   328                           ; Clear objects allocated to BANK0 (61 bytes)
   329  002462  EE00  F0A5         	lfsr	0,__pbssBANK0
   330  002466  0E3D               	movlw	61
   331  002468                     clear_2:
   332  002468  6AEE               	clrf	postinc0,c
   333  00246A  06E8               	decf	wreg,f,c
   334  00246C  E1FD               	bnz	clear_2
   335                           
   336                           ; Clear objects allocated to COMRAM (6 bytes)
   337  00246E  6A5D               	clrf	(__pbssCOMRAM+5)& (0+255),c
   338  002470  6A5C               	clrf	(__pbssCOMRAM+4)& (0+255),c
   339  002472  6A5B               	clrf	(__pbssCOMRAM+3)& (0+255),c
   340  002474  6A5A               	clrf	(__pbssCOMRAM+2)& (0+255),c
   341  002476  6A59               	clrf	(__pbssCOMRAM+1)& (0+255),c
   342  002478  6A58               	clrf	__pbssCOMRAM& (0+255),c
   343  00247A                     end_of_initialization:
   344                           	opt stack 0
   345  00247A                     __end_of__initialization:
   346                           	opt stack 0
   347  00247A  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   348  00247C  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   349  00247E  0E00               	movlw	low (__Lsmallconst shr (0+16))
   350  002480  6EF8               	movwf	tblptru,c
   351  002482  0E10               	movlw	high __Lsmallconst
   352  002484  6EF7               	movwf	tblptrh,c
   353  002486  0100               	movlb	0
   354  002488  EF86  F014         	goto	_main	;jump to C main() function
   355                           tblptru	equ	0xFF8
   356                           tblptrh	equ	0xFF7
   357                           tblptrl	equ	0xFF6
   358                           tablat	equ	0xFF5
   359                           postinc0	equ	0xFEE
   360                           wreg	equ	0xFE8
   361                           postdec1	equ	0xFE5
   362                           fsr1l	equ	0xFE1
   363                           
   364                           	psect	bssCOMRAM
   365  000058                     __pbssCOMRAM:
   366                           	opt stack 0
   367  000058                     _txBufferPtrOut:
   368                           	opt stack 0
   369  000058                     	ds	1
   370  000059                     _rxBufferCount:
   371                           	opt stack 0
   372  000059                     	ds	1
   373  00005A                     _rxBufferPtrIn:
   374                           	opt stack 0
   375  00005A                     	ds	1
   376  00005B                     _topLeft:
   377                           	opt stack 0
   378  00005B                     	ds	1
   379  00005C                     _topRight:
   380                           	opt stack 0
   381  00005C                     	ds	1
   382  00005D                     _bottomRight:
   383                           	opt stack 0
   384  00005D                     	ds	1
   385                           tblptru	equ	0xFF8
   386                           tblptrh	equ	0xFF7
   387                           tblptrl	equ	0xFF6
   388                           tablat	equ	0xFF5
   389                           postinc0	equ	0xFEE
   390                           wreg	equ	0xFE8
   391                           postdec1	equ	0xFE5
   392                           fsr1l	equ	0xFE1
   393                           
   394                           	psect	dataCOMRAM
   395  00005E                     __pdataCOMRAM:
   396                           	opt stack 0
   397  00005E                     Can_Isr@nbTxBuf:
   398                           	opt stack 0
   399  00005E                     	ds	1
   400                           tblptru	equ	0xFF8
   401                           tblptrh	equ	0xFF7
   402                           tblptrl	equ	0xFF6
   403                           tablat	equ	0xFF5
   404                           postinc0	equ	0xFEE
   405                           wreg	equ	0xFE8
   406                           postdec1	equ	0xFE5
   407                           fsr1l	equ	0xFE1
   408                           
   409                           	psect	bssBANK0
   410  0000A5                     __pbssBANK0:
   411                           	opt stack 0
   412  0000A5                     Mcp2515Sleep@F8117:
   413                           	opt stack 0
   414  0000A5                     	ds	3
   415  0000A8                     _nbTx2:
   416                           	opt stack 0
   417  0000A8                     	ds	1
   418  0000A9                     _nbTx1:
   419                           	opt stack 0
   420  0000A9                     	ds	1
   421  0000AA                     _nbTx0:
   422                           	opt stack 0
   423  0000AA                     	ds	1
   424  0000AB                     _txBufferCount:
   425                           	opt stack 0
   426  0000AB                     	ds	1
   427  0000AC                     _txBufferPtrIn:
   428                           	opt stack 0
   429  0000AC                     	ds	1
   430  0000AD                     _rxBufferPtrOut:
   431                           	opt stack 0
   432  0000AD                     	ds	1
   433  0000AE                     _bottomLeft:
   434                           	opt stack 0
   435  0000AE                     	ds	1
   436  0000AF                     _id:
   437                           	opt stack 0
   438  0000AF                     	ds	1
   439  0000B0                     _filter:
   440                           	opt stack 0
   441  0000B0                     	ds	33
   442  0000D1                     _message:
   443                           	opt stack 0
   444  0000D1                     	ds	17
   445                           tblptru	equ	0xFF8
   446                           tblptrh	equ	0xFF7
   447                           tblptrl	equ	0xFF6
   448                           tablat	equ	0xFF5
   449                           postinc0	equ	0xFEE
   450                           wreg	equ	0xFE8
   451                           postdec1	equ	0xFE5
   452                           fsr1l	equ	0xFE1
   453                           
   454                           	psect	dataBANK0
   455  0000E2                     __pdataBANK0:
   456                           	opt stack 0
   457  0000E2                     Mcp2515ReadCanId@F8123:
   458                           	opt stack 0
   459  0000E2                     	ds	6
   460  0000E8                     Mcp2515_Init@F8112:
   461                           	opt stack 0
   462  0000E8                     	ds	4
   463  0000EC                     Can_GetStatus@F8264:
   464                           	opt stack 0
   465  0000EC                     	ds	4
   466  0000F0                     Mcp2515GetNextFreeTXBuf@F8153:
   467                           	opt stack 0
   468  0000F0                     	ds	3
   469  0000F3                     Mcp2515_Init@F8114:
   470                           	opt stack 0
   471  0000F3                     	ds	3
   472  0000F6                     Can_GetStatus@F8262:
   473                           	opt stack 0
   474  0000F6                     	ds	3
   475                           tblptru	equ	0xFF8
   476                           tblptrh	equ	0xFF7
   477                           tblptrl	equ	0xFF6
   478                           tablat	equ	0xFF5
   479                           postinc0	equ	0xFEE
   480                           wreg	equ	0xFE8
   481                           postdec1	equ	0xFE5
   482                           fsr1l	equ	0xFE1
   483                           
   484                           	psect	bssBANK1
   485  000100                     __pbssBANK1:
   486                           	opt stack 0
   487  000100                     _txBuffer:
   488                           	opt stack 0
   489  000100                     	ds	68
   490  000144                     _rxBuffer:
   491                           	opt stack 0
   492  000144                     	ds	68
   493  000188                     _messageTx:
   494                           	opt stack 0
   495  000188                     	ds	17
   496                           tblptru	equ	0xFF8
   497                           tblptrh	equ	0xFF7
   498                           tblptrl	equ	0xFF6
   499                           tablat	equ	0xFF5
   500                           postinc0	equ	0xFEE
   501                           wreg	equ	0xFE8
   502                           postdec1	equ	0xFE5
   503                           fsr1l	equ	0xFE1
   504                           
   505                           	psect	bssBANK2
   506  000200                     __pbssBANK2:
   507                           	opt stack 0
   508  000200                     _conflictTable:
   509                           	opt stack 0
   510  000200                     	ds	144
   511                           tblptru	equ	0xFF8
   512                           tblptrh	equ	0xFF7
   513                           tblptrl	equ	0xFF6
   514                           tablat	equ	0xFF5
   515                           postinc0	equ	0xFEE
   516                           wreg	equ	0xFE8
   517                           postdec1	equ	0xFE5
   518                           fsr1l	equ	0xFE1
   519                           
   520                           	psect	cstackBANK0
   521  000060                     __pcstackBANK0:
   522                           	opt stack 0
   523  000060                     ?___wmul:
   524                           	opt stack 0
   525  000060                     resetData@i:
   526                           	opt stack 0
   527  000060                     Can_GetMessage@msgPtr:
   528                           	opt stack 0
   529  000060                     Can_PutMessage@msgPtr:
   530                           	opt stack 0
   531  000060                     SPIRW@tx:
   532                           	opt stack 0
   533  000060                     ___wmul@multiplier:
   534                           	opt stack 0
   535                           
   536                           ; 2 bytes @ 0x0
   537  000060                     	ds	2
   538  000062                     ??_Can_PutMessage:
   539  000062                     ??_Can_GetMessage:
   540  000062                     SPIRW@rx:
   541                           	opt stack 0
   542  000062                     ___wmul@multiplicand:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x2
   546  000062                     	ds	2
   547  000064                     Can_GetMessage@i:
   548                           	opt stack 0
   549  000064                     Can_PutMessage@i:
   550                           	opt stack 0
   551  000064                     ___wmul@product:
   552                           	opt stack 0
   553  000064                     SPIRW@size:
   554                           	opt stack 0
   555                           
   556                           ; 4 bytes @ 0x4
   557  000064                     	ds	1
   558  000065                     readID@retVal:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x5
   562  000065                     	ds	1
   563  000066                     ??_readConflictInfo:
   564                           
   565                           ; 1 bytes @ 0x6
   566  000066                     	ds	2
   567  000068                     SPIRW@i:
   568                           	opt stack 0
   569                           
   570                           ; 4 bytes @ 0x8
   571  000068                     	ds	4
   572  00006C                     readConflictInfo@i:
   573                           	opt stack 0
   574  00006C                     Spi_Write@tx:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0xC
   578  00006C                     	ds	2
   579  00006E                     readConflictInfo@j:
   580                           	opt stack 0
   581  00006E                     Spi_Write@size:
   582                           	opt stack 0
   583                           
   584                           ; 4 bytes @ 0xE
   585  00006E                     	ds	4
   586  000072                     Mcp2515_Reset@cmd:
   587                           	opt stack 0
   588  000072                     Mcp2515WriteCanId@ext:
   589                           	opt stack 0
   590                           
   591                           ; 1 bytes @ 0x12
   592  000072                     	ds	1
   593  000073                     Mcp2515_Reset@i:
   594                           	opt stack 0
   595  000073                     Mcp2515WriteCanId@can_id:
   596                           	opt stack 0
   597                           
   598                           ; 4 bytes @ 0x13
   599  000073                     	ds	4
   600  000077                     ??_Mcp2515WriteCanId:
   601                           
   602                           ; 1 bytes @ 0x17
   603  000077                     	ds	3
   604  00007A                     Mcp2515WriteCanId@mcp_addr:
   605                           	opt stack 0
   606                           
   607                           ; 1 bytes @ 0x1A
   608  00007A                     	ds	1
   609  00007B                     Mcp2515WriteCanId@buf:
   610                           	opt stack 0
   611                           
   612                           ; 6 bytes @ 0x1B
   613  00007B                     	ds	6
   614  000081                     Mcp2515WriteCanId@canid:
   615                           	opt stack 0
   616                           
   617                           ; 2 bytes @ 0x21
   618  000081                     	ds	2
   619  000083                     Mcp2515_Init@speedCfg:
   620                           	opt stack 0
   621                           
   622                           ; 2 bytes @ 0x23
   623  000083                     	ds	2
   624  000085                     Mcp2515_Init@filterCfg:
   625                           	opt stack 0
   626                           
   627                           ; 2 bytes @ 0x25
   628  000085                     	ds	2
   629  000087                     ??_Mcp2515_Init:
   630                           
   631                           ; 1 bytes @ 0x27
   632  000087                     	ds	13
   633  000094                     Mcp2515_Init@i:
   634                           	opt stack 0
   635                           
   636                           ; 1 bytes @ 0x34
   637  000094                     	ds	1
   638  000095                     Mcp2515_Init@cmdMask4:
   639                           	opt stack 0
   640                           
   641                           ; 4 bytes @ 0x35
   642  000095                     	ds	4
   643  000099                     Mcp2515_Init@cmdWrite3:
   644                           	opt stack 0
   645                           
   646                           ; 3 bytes @ 0x39
   647  000099                     	ds	3
   648  00009C                     Can_Init@speedCfg:
   649                           	opt stack 0
   650                           
   651                           ; 2 bytes @ 0x3C
   652  00009C                     	ds	2
   653  00009E                     Can_Init@filterCfg:
   654                           	opt stack 0
   655                           
   656                           ; 2 bytes @ 0x3E
   657  00009E                     	ds	2
   658  0000A0                     
   659                           ; 2 bytes @ 0x40
   660  0000A0                     	ds	2
   661  0000A2                     
   662                           ; 3 bytes @ 0x42
   663  0000A2                     	ds	3
   664  0000A5                     tblptru	equ	0xFF8
   665                           tblptrh	equ	0xFF7
   666                           tblptrl	equ	0xFF6
   667                           tablat	equ	0xFF5
   668                           postinc0	equ	0xFEE
   669                           wreg	equ	0xFE8
   670                           postdec1	equ	0xFE5
   671                           fsr1l	equ	0xFE1
   672                           
   673                           ; 1 bytes @ 0x45
   674                           
   675                           	psect	cstackCOMRAM
   676  000001                     __pcstackCOMRAM:
   677                           	opt stack 0
   678  000001                     memcpy@d1:
   679                           	opt stack 0
   680  000001                     i2SPIRW@tx:
   681                           	opt stack 0
   682                           
   683                           ; 2 bytes @ 0x0
   684  000001                     	ds	2
   685  000003                     memcpy@s1:
   686                           	opt stack 0
   687  000003                     i2SPIRW@rx:
   688                           	opt stack 0
   689                           
   690                           ; 2 bytes @ 0x2
   691  000003                     	ds	2
   692  000005                     memcpy@n:
   693                           	opt stack 0
   694  000005                     i2SPIRW@size:
   695                           	opt stack 0
   696                           
   697                           ; 4 bytes @ 0x4
   698  000005                     	ds	2
   699  000007                     memcpy@d:
   700                           	opt stack 0
   701                           
   702                           ; 2 bytes @ 0x6
   703  000007                     	ds	2
   704  000009                     memcpy@s:
   705                           	opt stack 0
   706  000009                     i2SPIRW@i:
   707                           	opt stack 0
   708                           
   709                           ; 4 bytes @ 0x8
   710  000009                     	ds	2
   711  00000B                     memcpy@tmp:
   712                           	opt stack 0
   713                           
   714                           ; 1 bytes @ 0xA
   715  00000B                     	ds	2
   716  00000D                     Spi_ReadWrite@rx_tx:
   717                           	opt stack 0
   718  00000D                     i2Spi_Write@tx:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0xC
   722  00000D                     	ds	2
   723  00000F                     Spi_ReadWrite@size:
   724                           	opt stack 0
   725  00000F                     i2Spi_Write@size:
   726                           	opt stack 0
   727                           
   728                           ; 4 bytes @ 0xE
   729  00000F                     	ds	4
   730  000013                     i2Mcp2515WriteCanId@ext:
   731                           	opt stack 0
   732  000013                     Mcp2515ReadCanId@ext:
   733                           	opt stack 0
   734  000013                     Mcp2515GetNextFreeTXBuf@txbuf_n:
   735                           	opt stack 0
   736  000013                     Can_GetStatus@msg4:
   737                           	opt stack 0
   738                           
   739                           ; 4 bytes @ 0x12
   740  000013                     	ds	1
   741  000014                     i2Mcp2515WriteCanId@can_id:
   742                           	opt stack 0
   743                           
   744                           ; 4 bytes @ 0x13
   745  000014                     	ds	1
   746  000015                     ??_Mcp2515GetNextFreeTXBuf:
   747  000015                     Mcp2515ReadCanId@can_id:
   748                           	opt stack 0
   749                           
   750                           ; 2 bytes @ 0x14
   751  000015                     	ds	1
   752  000016                     Mcp2515GetNextFreeTXBuf@ctrlregs:
   753                           	opt stack 0
   754                           
   755                           ; 3 bytes @ 0x15
   756  000016                     	ds	1
   757  000017                     ??_Mcp2515ReadCanId:
   758  000017                     Can_GetStatus@msg:
   759                           	opt stack 0
   760                           
   761                           ; 3 bytes @ 0x16
   762  000017                     	ds	1
   763  000018                     ??i2_Mcp2515WriteCanId:
   764                           
   765                           ; 1 bytes @ 0x17
   766  000018                     	ds	1
   767  000019                     Mcp2515GetNextFreeTXBuf@buf:
   768                           	opt stack 0
   769                           
   770                           ; 3 bytes @ 0x18
   771  000019                     	ds	1
   772  00001A                     Can_GetStatus@status:
   773                           	opt stack 0
   774                           
   775                           ; 1 bytes @ 0x19
   776  00001A                     	ds	1
   777  00001B                     i2Mcp2515WriteCanId@mcp_addr:
   778                           	opt stack 0
   779                           
   780                           ; 1 bytes @ 0x1A
   781  00001B                     	ds	1
   782  00001C                     Mcp2515GetNextFreeTXBuf@i:
   783                           	opt stack 0
   784  00001C                     i2Mcp2515WriteCanId@buf:
   785                           	opt stack 0
   786                           
   787                           ; 6 bytes @ 0x1B
   788  00001C                     	ds	6
   789  000022                     i2Mcp2515WriteCanId@canid:
   790                           	opt stack 0
   791                           
   792                           ; 2 bytes @ 0x21
   793  000022                     	ds	2
   794  000024                     Mcp2515WriteCanMsg@msg:
   795                           	opt stack 0
   796                           
   797                           ; 2 bytes @ 0x23
   798  000024                     	ds	2
   799  000026                     ??_Mcp2515WriteCanMsg:
   800                           
   801                           ; 1 bytes @ 0x25
   802  000026                     	ds	2
   803  000028                     Mcp2515WriteCanMsg@buf:
   804                           	opt stack 0
   805                           
   806                           ; 10 bytes @ 0x27
   807  000028                     	ds	1
   808  000029                     Mcp2515ReadCanId@mcp_addr:
   809                           	opt stack 0
   810                           
   811                           ; 1 bytes @ 0x28
   812  000029                     	ds	1
   813  00002A                     Mcp2515ReadCanId@msg:
   814                           	opt stack 0
   815                           
   816                           ; 6 bytes @ 0x29
   817  00002A                     	ds	6
   818  000030                     Mcp2515ReadCanMsg@msg:
   819                           	opt stack 0
   820                           
   821                           ; 2 bytes @ 0x2F
   822  000030                     	ds	2
   823  000032                     ??_Mcp2515ReadCanMsg:
   824  000032                     Mcp2515WriteCanMsg@buffer_sidh_addr:
   825                           	opt stack 0
   826                           
   827                           ; 1 bytes @ 0x31
   828  000032                     	ds	1
   829  000033                     Mcp2515WriteCanMsg@dlc:
   830                           	opt stack 0
   831                           
   832                           ; 1 bytes @ 0x32
   833  000033                     	ds	1
   834  000034                     Mcp2515WriteCanMsg@mcp_addr:
   835                           	opt stack 0
   836  000034                     Mcp2515ReadCanMsg@cmd:
   837                           	opt stack 0
   838                           
   839                           ; 10 bytes @ 0x33
   840  000034                     	ds	1
   841  000035                     Mcp2515WriteCanMsg@i:
   842                           	opt stack 0
   843                           
   844                           ; 1 bytes @ 0x34
   845  000035                     	ds	1
   846  000036                     Can_SendMessage@msg:
   847                           	opt stack 0
   848                           
   849                           ; 2 bytes @ 0x35
   850  000036                     	ds	2
   851  000038                     Can_SendMessage@buf:
   852                           	opt stack 0
   853                           
   854                           ; 4 bytes @ 0x37
   855  000038                     	ds	4
   856  00003C                     Can_SendMessage@res:
   857                           	opt stack 0
   858                           
   859                           ; 1 bytes @ 0x3B
   860  00003C                     	ds	1
   861  00003D                     Can_SendMessage@txbuf_n:
   862                           	opt stack 0
   863                           
   864                           ; 1 bytes @ 0x3C
   865  00003D                     	ds	1
   866  00003E                     Mcp2515ReadCanMsg@mcp_addr:
   867                           	opt stack 0
   868                           
   869                           ; 1 bytes @ 0x3D
   870  00003E                     	ds	1
   871  00003F                     Can_ReadMessage@msg:
   872                           	opt stack 0
   873                           
   874                           ; 2 bytes @ 0x3E
   875  00003F                     	ds	2
   876  000041                     Can_ReadMessage@buf:
   877                           	opt stack 0
   878                           
   879                           ; 4 bytes @ 0x40
   880  000041                     	ds	4
   881  000045                     Can_ReadInBuffer@error:
   882                           	opt stack 0
   883                           
   884                           ; 1 bytes @ 0x44
   885  000045                     	ds	1
   886  000046                     Can_ReadInBuffer@rdStatus:
   887                           	opt stack 0
   888                           
   889                           ; 1 bytes @ 0x45
   890  000046                     	ds	1
   891  000047                     Can_ReadInBuffer@i:
   892                           	opt stack 0
   893                           
   894                           ; 1 bytes @ 0x46
   895  000047                     	ds	1
   896  000048                     ??_Can_Isr:
   897                           
   898                           ; 1 bytes @ 0x47
   899  000048                     	ds	1
   900  000049                     Can_Isr@retCode:
   901                           	opt stack 0
   902                           
   903                           ; 1 bytes @ 0x48
   904  000049                     	ds	1
   905  00004A                     ??_high_isr:
   906                           
   907                           ; 1 bytes @ 0x49
   908  00004A                     	ds	14
   909                           tblptru	equ	0xFF8
   910                           tblptrh	equ	0xFF7
   911                           tblptrl	equ	0xFF6
   912                           tablat	equ	0xFF5
   913                           postinc0	equ	0xFEE
   914                           wreg	equ	0xFE8
   915                           postdec1	equ	0xFE5
   916                           fsr1l	equ	0xFE1
   917                           
   918 ;;
   919 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   920 ;;
   921 ;; *************** function _main *****************
   922 ;; Defined at:
   923 ;;		line 112 in file "main.c"
   924 ;; Parameters:    Size  Location     Type
   925 ;;  argc            2   64[BANK0 ] int 
   926 ;;  argv            3   66[BANK0 ] PTR PTR unsigned char 
   927 ;; Auto vars:     Size  Location     Type
   928 ;;		None
   929 ;; Return value:  Size  Location     Type
   930 ;;                  2   64[BANK0 ] int 
   931 ;; Registers used:
   932 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   933 ;; Tracked objects:
   934 ;;		On entry : 0/0
   935 ;;		On exit  : 0/0
   936 ;;		Unchanged: 0/0
   937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   938 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   941 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   942 ;;Total ram usage:        5 bytes
   943 ;; Hardware stack levels required when called:   14
   944 ;; This function calls:
   945 ;;		_init
   946 ;; This function is called by:
   947 ;;		Startup code after reset
   948 ;; This function uses a non-reentrant model
   949 ;;
   950                           
   951                           	psect	text0
   952  00290C                     __ptext0:
   953                           	opt stack 0
   954  00290C                     _main:
   955                           	opt stack 17
   956                           
   957                           ;main.c: 113: init();
   958                           
   959                           ;incstack = 0
   960  00290C  EC46  F012         	call	_init	;wreg free
   961  002910                     l65:
   962  002910  D7FF               	goto	l65
   963  002912                     __end_of_main:
   964                           	opt stack 0
   965                           tblptru	equ	0xFF8
   966                           tblptrh	equ	0xFF7
   967                           tblptrl	equ	0xFF6
   968                           tablat	equ	0xFF5
   969                           postinc0	equ	0xFEE
   970                           wreg	equ	0xFE8
   971                           postdec1	equ	0xFE5
   972                           fsr1l	equ	0xFE1
   973                           
   974 ;; *************** function _init *****************
   975 ;; Defined at:
   976 ;;		line 44 in file "main.c"
   977 ;; Parameters:    Size  Location     Type
   978 ;;		None
   979 ;; Auto vars:     Size  Location     Type
   980 ;;		None
   981 ;; Return value:  Size  Location     Type
   982 ;;                  1    wreg      void 
   983 ;; Registers used:
   984 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   985 ;; Tracked objects:
   986 ;;		On entry : 0/0
   987 ;;		On exit  : 0/0
   988 ;;		Unchanged: 0/0
   989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   993 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   994 ;;Total ram usage:        0 bytes
   995 ;; Hardware stack levels used:    1
   996 ;; Hardware stack levels required when called:   13
   997 ;; This function calls:
   998 ;;		_Can_Init
   999 ;;		_readConflictInfo
  1000 ;;		_readID
  1001 ;; This function is called by:
  1002 ;;		_main
  1003 ;; This function uses a non-reentrant model
  1004 ;;
  1005                           
  1006                           	psect	text1
  1007  00248C                     __ptext1:
  1008                           	opt stack 0
  1009  00248C                     _init:
  1010                           	opt stack 17
  1011                           
  1012                           ;main.c: 45: Can_Init( &canSpeed125k , &filter);
  1013                           
  1014                           ;incstack = 0
  1015  00248C  0E39               	movlw	low _canSpeed125k
  1016  00248E  0100               	movlb	0	; () banked
  1017  002490  6F9C               	movwf	Can_Init@speedCfg& (0+255),b
  1018  002492  0E10               	movlw	high _canSpeed125k
  1019  002494  0100               	movlb	0	; () banked
  1020  002496  6F9D               	movwf	(Can_Init@speedCfg+1)& (0+255),b
  1021  002498  0EB0               	movlw	low _filter
  1022  00249A  0100               	movlb	0	; () banked
  1023  00249C  6F9E               	movwf	Can_Init@filterCfg& (0+255),b
  1024  00249E  0E00               	movlw	high _filter
  1025  0024A0  0100               	movlb	0	; () banked
  1026  0024A2  6F9F               	movwf	(Can_Init@filterCfg+1)& (0+255),b
  1027  0024A4  ECF8  F013         	call	_Can_Init	;wreg free
  1028                           
  1029                           ;main.c: 46: PEIE = 1;
  1030  0024A8  8CF2               	bsf	intcon,6,c	;volatile
  1031                           
  1032                           ;main.c: 47: GIE = 1;
  1033  0024AA  8EF2               	bsf	intcon,7,c	;volatile
  1034                           
  1035                           ;main.c: 48: id = readID();
  1036  0024AC  EC46  F013         	call	_readID	;wreg free
  1037  0024B0  0100               	movlb	0	; () banked
  1038  0024B2  6FAF               	movwf	_id& (0+255),b
  1039                           
  1040                           ; BSR set to: 0
  1041                           ;main.c: 49: filter.mask0 = 0X00F;
  1042  0024B4  0E0F               	movlw	15
  1043  0024B6  0100               	movlb	0	; () banked
  1044  0024B8  6FB0               	movwf	_filter& (0+255),b
  1045  0024BA  0E00               	movlw	0
  1046  0024BC  6FB1               	movwf	(_filter+1)& (0+255),b
  1047  0024BE  0E00               	movlw	0
  1048  0024C0  6FB2               	movwf	(_filter+2)& (0+255),b
  1049  0024C2  0E00               	movlw	0
  1050  0024C4  6FB3               	movwf	(_filter+3)& (0+255),b
  1051                           
  1052                           ; BSR set to: 0
  1053                           ;main.c: 50: filter.filter0 = id;
  1054  0024C6  0100               	movlb	0	; () banked
  1055  0024C8  51AF               	movf	_id& (0+255),w,b
  1056  0024CA  0100               	movlb	0	; () banked
  1057  0024CC  6FB8               	movwf	(_filter+8)& (0+255),b
  1058  0024CE  6BB9               	clrf	(_filter+9)& (0+255),b
  1059  0024D0  6BBA               	clrf	(_filter+10)& (0+255),b
  1060  0024D2  6BBB               	clrf	(_filter+11)& (0+255),b
  1061                           
  1062                           ; BSR set to: 0
  1063                           ;main.c: 51: Can_Init( &canSpeed125k , &filter);
  1064  0024D4  0E39               	movlw	low _canSpeed125k
  1065  0024D6  0100               	movlb	0	; () banked
  1066  0024D8  6F9C               	movwf	Can_Init@speedCfg& (0+255),b
  1067  0024DA  0E10               	movlw	high _canSpeed125k
  1068  0024DC  0100               	movlb	0	; () banked
  1069  0024DE  6F9D               	movwf	(Can_Init@speedCfg+1)& (0+255),b
  1070  0024E0  0EB0               	movlw	low _filter
  1071  0024E2  0100               	movlb	0	; () banked
  1072  0024E4  6F9E               	movwf	Can_Init@filterCfg& (0+255),b
  1073  0024E6  0E00               	movlw	high _filter
  1074  0024E8  0100               	movlb	0	; () banked
  1075  0024EA  6F9F               	movwf	(Can_Init@filterCfg+1)& (0+255),b
  1076  0024EC  ECF8  F013         	call	_Can_Init	;wreg free
  1077                           
  1078                           ;main.c: 52: readConflictInfo();
  1079  0024F0  EC17  F00B         	call	_readConflictInfo	;wreg free
  1080  0024F4  0012               	return		;funcret
  1081  0024F6                     __end_of_init:
  1082                           	opt stack 0
  1083                           tblptru	equ	0xFF8
  1084                           tblptrh	equ	0xFF7
  1085                           tblptrl	equ	0xFF6
  1086                           tablat	equ	0xFF5
  1087                           intcon	equ	0xFF2
  1088                           postinc0	equ	0xFEE
  1089                           wreg	equ	0xFE8
  1090                           postdec1	equ	0xFE5
  1091                           fsr1l	equ	0xFE1
  1092                           
  1093 ;; *************** function _readID *****************
  1094 ;; Defined at:
  1095 ;;		line 55 in file "main.c"
  1096 ;; Parameters:    Size  Location     Type
  1097 ;;		None
  1098 ;; Auto vars:     Size  Location     Type
  1099 ;;  retVal          1    5[BANK0 ] unsigned char 
  1100 ;; Return value:  Size  Location     Type
  1101 ;;                  1    wreg      unsigned char 
  1102 ;; Registers used:
  1103 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1104 ;; Tracked objects:
  1105 ;;		On entry : 0/0
  1106 ;;		On exit  : 0/0
  1107 ;;		Unchanged: 0/0
  1108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1110 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1112 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1113 ;;Total ram usage:        1 bytes
  1114 ;; Hardware stack levels used:    1
  1115 ;; Hardware stack levels required when called:    9
  1116 ;; This function calls:
  1117 ;;		_Can_GetMessage
  1118 ;;		_Can_PutMessage
  1119 ;;		_resetData
  1120 ;; This function is called by:
  1121 ;;		_init
  1122 ;; This function uses a non-reentrant model
  1123 ;;
  1124                           
  1125                           	psect	text2
  1126  00268C                     __ptext2:
  1127                           	opt stack 0
  1128  00268C                     _readID:
  1129                           	opt stack 20
  1130                           
  1131                           ;main.c: 56: uint8_t retVal = 0;
  1132                           
  1133                           ;incstack = 0
  1134  00268C  0E00               	movlw	0
  1135  00268E  0100               	movlb	0	; () banked
  1136  002690  6F65               	movwf	readID@retVal& (0+255),b
  1137                           
  1138                           ;main.c: 59: message.identifier = ((10<<7) | 0xF) ;
  1139  002692  0E0F               	movlw	15
  1140  002694  0100               	movlb	0	; () banked
  1141  002696  6FD2               	movwf	(_message+1)& (0+255),b
  1142  002698  0E05               	movlw	5
  1143  00269A  6FD3               	movwf	(_message+2)& (0+255),b
  1144  00269C  0E00               	movlw	0
  1145  00269E  6FD4               	movwf	(_message+3)& (0+255),b
  1146  0026A0  0E00               	movlw	0
  1147  0026A2  6FD5               	movwf	(_message+4)& (0+255),b
  1148                           
  1149                           ; BSR set to: 0
  1150                           ;main.c: 60: resetData();
  1151  0026A4  ECD9  F013         	call	_resetData	;wreg free
  1152                           
  1153                           ;main.c: 61: message.rtr = 1;
  1154  0026A8  0E01               	movlw	1
  1155  0026AA  0100               	movlb	0	; () banked
  1156  0026AC  6FDF               	movwf	(_message+14)& (0+255),b
  1157                           
  1158                           ; BSR set to: 0
  1159                           ;main.c: 64: Can_PutMessage(&message);
  1160  0026AE  0ED1               	movlw	low _message
  1161  0026B0  0100               	movlb	0	; () banked
  1162  0026B2  6F60               	movwf	Can_PutMessage@msgPtr& (0+255),b
  1163  0026B4  0E00               	movlw	high _message
  1164  0026B6  0100               	movlb	0	; () banked
  1165  0026B8  6F61               	movwf	(Can_PutMessage@msgPtr+1)& (0+255),b
  1166  0026BA  EC77  F00D         	call	_Can_PutMessage	;wreg free
  1167  0026BE                     l2175:
  1168  0026BE  0ED1               	movlw	low _message
  1169  0026C0  0100               	movlb	0	; () banked
  1170  0026C2  6F60               	movwf	Can_GetMessage@msgPtr& (0+255),b
  1171  0026C4  0E00               	movlw	high _message
  1172  0026C6  0100               	movlb	0	; () banked
  1173  0026C8  6F61               	movwf	(Can_GetMessage@msgPtr+1)& (0+255),b
  1174  0026CA  EC4A  F00E         	call	_Can_GetMessage	;wreg free
  1175  0026CE  0900               	iorlw	0
  1176  0026D0  A4D8               	btfss	status,2,c
  1177  0026D2  D7F5               	goto	l2175
  1178                           
  1179                           ;main.c: 69: retVal = message.dta[0];
  1180  0026D4  C0D7  F065         	movff	_message+6,readID@retVal
  1181                           
  1182                           ;main.c: 71: resetData();
  1183  0026D8  ECD9  F013         	call	_resetData	;wreg free
  1184                           
  1185                           ;main.c: 73: return retVal;
  1186  0026DC  0100               	movlb	0	; () banked
  1187  0026DE  5165               	movf	readID@retVal& (0+255),w,b
  1188  0026E0  0012               	return	
  1189  0026E2                     __end_of_readID:
  1190                           	opt stack 0
  1191                           tblptru	equ	0xFF8
  1192                           tblptrh	equ	0xFF7
  1193                           tblptrl	equ	0xFF6
  1194                           tablat	equ	0xFF5
  1195                           intcon	equ	0xFF2
  1196                           postinc0	equ	0xFEE
  1197                           wreg	equ	0xFE8
  1198                           postdec1	equ	0xFE5
  1199                           fsr1l	equ	0xFE1
  1200                           status	equ	0xFD8
  1201                           
  1202 ;; *************** function _readConflictInfo *****************
  1203 ;; Defined at:
  1204 ;;		line 76 in file "main.c"
  1205 ;; Parameters:    Size  Location     Type
  1206 ;;		None
  1207 ;; Auto vars:     Size  Location     Type
  1208 ;;  j               2   14[BANK0 ] int 
  1209 ;;  i               2   12[BANK0 ] int 
  1210 ;; Return value:  Size  Location     Type
  1211 ;;                  1    wreg      void 
  1212 ;; Registers used:
  1213 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1214 ;; Tracked objects:
  1215 ;;		On entry : 0/0
  1216 ;;		On exit  : 0/0
  1217 ;;		Unchanged: 0/0
  1218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1220 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1221 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1222 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1223 ;;Total ram usage:       10 bytes
  1224 ;; Hardware stack levels used:    1
  1225 ;; Hardware stack levels required when called:    9
  1226 ;; This function calls:
  1227 ;;		_Can_GetMessage
  1228 ;;		_Can_PutMessage
  1229 ;;		___wmul
  1230 ;;		_resetData
  1231 ;; This function is called by:
  1232 ;;		_init
  1233 ;; This function uses a non-reentrant model
  1234 ;;
  1235                           
  1236                           	psect	text3
  1237  00162E                     __ptext3:
  1238                           	opt stack 0
  1239  00162E                     _readConflictInfo:
  1240                           	opt stack 20
  1241                           
  1242                           ;main.c: 79: resetData();
  1243                           
  1244                           ; BSR set to: 0
  1245                           ;incstack = 0
  1246  00162E  ECD9  F013         	call	_resetData	;wreg free
  1247                           
  1248                           ;main.c: 80: messageTx.rtr = 1;
  1249  001632  0E01               	movlw	1
  1250  001634  0101               	movlb	1	; () banked
  1251  001636  6F96               	movwf	(_messageTx+14)& (0+255),b
  1252                           
  1253                           ; BSR set to: 1
  1254                           ;main.c: 83: int i;
  1255                           ;main.c: 84: int j;
  1256                           ;main.c: 85: for (i = 0 ; i < 12 ; i++){
  1257  001638  0E00               	movlw	0
  1258  00163A  0100               	movlb	0	; () banked
  1259  00163C  6F6D               	movwf	(readConflictInfo@i+1)& (0+255),b
  1260  00163E  0E00               	movlw	0
  1261  001640  6F6C               	movwf	readConflictInfo@i& (0+255),b
  1262                           
  1263                           ; BSR set to: 0
  1264  001642  0100               	movlb	0	; () banked
  1265  001644  BF6D               	btfsc	(readConflictInfo@i+1)& (0+255),7,b
  1266  001646  D00A               	goto	l2193
  1267  001648  0100               	movlb	0	; () banked
  1268  00164A  516D               	movf	(readConflictInfo@i+1)& (0+255),w,b
  1269  00164C  E106               	bnz	u1100
  1270  00164E  0E0C               	movlw	12
  1271  001650  0100               	movlb	0	; () banked
  1272  001652  5D6C               	subwf	readConflictInfo@i& (0+255),w,b
  1273  001654  B0D8               	btfsc	status,0,c
  1274  001656  0012               	return	
  1275  001658  D001               	goto	l2193
  1276  00165A                     u1100:
  1277                           
  1278                           ; BSR set to: 0
  1279  00165A  0012               	return	
  1280  00165C                     l2193:
  1281                           
  1282                           ; BSR set to: 0
  1283                           ;main.c: 87: messageTx.identifier = ((8<<7) | (i << 4) | id);
  1284  00165C  0E00               	movlw	0
  1285  00165E  0100               	movlb	0	; () banked
  1286  001660  6F66               	movwf	??_readConflictInfo& (0+255),b
  1287  001662  0E04               	movlw	4
  1288  001664  0100               	movlb	0	; () banked
  1289  001666  6F67               	movwf	(??_readConflictInfo+1)& (0+255),b
  1290  001668  C06C  F068         	movff	readConflictInfo@i,??_readConflictInfo+2
  1291  00166C  C06D  F069         	movff	readConflictInfo@i+1,??_readConflictInfo+3
  1292  001670  0100               	movlb	0	; () banked
  1293  001672  3B68               	swapf	(??_readConflictInfo+2)& (0+255),f,b
  1294  001674  3B69               	swapf	(??_readConflictInfo+3)& (0+255),f,b
  1295  001676  0EF0               	movlw	240
  1296  001678  1769               	andwf	(??_readConflictInfo+3)& (0+255),f,b
  1297  00167A  5168               	movf	(??_readConflictInfo+2)& (0+255),w,b
  1298  00167C  0B0F               	andlw	15
  1299  00167E  1369               	iorwf	(??_readConflictInfo+3)& (0+255),f,b
  1300  001680  0EF0               	movlw	240
  1301  001682  1768               	andwf	(??_readConflictInfo+2)& (0+255),f,b
  1302  001684  0100               	movlb	0	; () banked
  1303  001686  51AF               	movf	_id& (0+255),w,b
  1304  001688  0100               	movlb	0	; () banked
  1305  00168A  1368               	iorwf	(??_readConflictInfo+2)& (0+255),f,b
  1306  00168C  0E00               	movlw	0
  1307  00168E  1369               	iorwf	(??_readConflictInfo+3)& (0+255),f,b
  1308  001690  0100               	movlb	0	; () banked
  1309  001692  5166               	movf	??_readConflictInfo& (0+255),w,b
  1310  001694  0100               	movlb	0	; () banked
  1311  001696  1368               	iorwf	(??_readConflictInfo+2)& (0+255),f,b
  1312  001698  0100               	movlb	0	; () banked
  1313  00169A  5167               	movf	(??_readConflictInfo+1)& (0+255),w,b
  1314  00169C  0100               	movlb	0	; () banked
  1315  00169E  1369               	iorwf	(??_readConflictInfo+3)& (0+255),f,b
  1316  0016A0  C068  F189         	movff	??_readConflictInfo+2,_messageTx+1
  1317  0016A4  C069  F18A         	movff	??_readConflictInfo+3,_messageTx+2
  1318  0016A8  0101               	movlb	1	; () banked
  1319  0016AA  0E00               	movlw	0
  1320  0016AC  BF8A               	btfsc	(_messageTx+2)& (0+255),7,b
  1321  0016AE  0EFF               	movlw	-1
  1322  0016B0  6F8B               	movwf	(_messageTx+3)& (0+255),b
  1323  0016B2  6F8C               	movwf	(_messageTx+4)& (0+255),b
  1324                           
  1325                           ; BSR set to: 1
  1326                           ;main.c: 90: Can_PutMessage(&messageTx);
  1327  0016B4  0E88               	movlw	low _messageTx
  1328  0016B6  0100               	movlb	0	; () banked
  1329  0016B8  6F60               	movwf	Can_PutMessage@msgPtr& (0+255),b
  1330  0016BA  0E01               	movlw	high _messageTx
  1331  0016BC  0100               	movlb	0	; () banked
  1332  0016BE  6F61               	movwf	(Can_PutMessage@msgPtr+1)& (0+255),b
  1333  0016C0  EC77  F00D         	call	_Can_PutMessage	;wreg free
  1334  0016C4                     l2197:
  1335  0016C4  0ED1               	movlw	low _message
  1336  0016C6  0100               	movlb	0	; () banked
  1337  0016C8  6F60               	movwf	Can_GetMessage@msgPtr& (0+255),b
  1338  0016CA  0E00               	movlw	high _message
  1339  0016CC  0100               	movlb	0	; () banked
  1340  0016CE  6F61               	movwf	(Can_GetMessage@msgPtr+1)& (0+255),b
  1341  0016D0  EC4A  F00E         	call	_Can_GetMessage	;wreg free
  1342  0016D4  0900               	iorlw	0
  1343  0016D6  A4D8               	btfss	status,2,c
  1344  0016D8  D7F5               	goto	l2197
  1345                           
  1346                           ;main.c: 95: for ( j = 0 ; j < 3 ; j ++){
  1347  0016DA  0E00               	movlw	0
  1348  0016DC  0100               	movlb	0	; () banked
  1349  0016DE  6F6F               	movwf	(readConflictInfo@j+1)& (0+255),b
  1350  0016E0  0E00               	movlw	0
  1351  0016E2  6F6E               	movwf	readConflictInfo@j& (0+255),b
  1352                           
  1353                           ; BSR set to: 0
  1354  0016E4  0100               	movlb	0	; () banked
  1355  0016E6  BF6F               	btfsc	(readConflictInfo@j+1)& (0+255),7,b
  1356  0016E8  D00A               	goto	l2205
  1357  0016EA  0100               	movlb	0	; () banked
  1358  0016EC  516F               	movf	(readConflictInfo@j+1)& (0+255),w,b
  1359  0016EE  E106               	bnz	u1120
  1360  0016F0  0E03               	movlw	3
  1361  0016F2  0100               	movlb	0	; () banked
  1362  0016F4  5D6E               	subwf	readConflictInfo@j& (0+255),w,b
  1363  0016F6  B0D8               	btfsc	status,0,c
  1364  0016F8  D117               	goto	l2211
  1365  0016FA  D001               	goto	l2205
  1366  0016FC                     u1120:
  1367                           
  1368                           ; BSR set to: 0
  1369  0016FC  D115               	goto	l2211
  1370  0016FE                     l2205:
  1371                           
  1372                           ; BSR set to: 0
  1373                           ;main.c: 96: conflictTable[i][(4*j) + 0] = (message.dta[j] & 0x03);
  1374  0016FE  C06C  F060         	movff	readConflictInfo@i,___wmul@multiplier
  1375  001702  C06D  F061         	movff	readConflictInfo@i+1,___wmul@multiplier+1
  1376  001706  0E00               	movlw	0
  1377  001708  0100               	movlb	0	; () banked
  1378  00170A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1379  00170C  0E0C               	movlw	12
  1380  00170E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1381  001710  EC14  F014         	call	___wmul	;wreg free
  1382  001714  0E00               	movlw	low _conflictTable
  1383  001716  0100               	movlb	0	; () banked
  1384  001718  6F66               	movwf	??_readConflictInfo& (0+255),b
  1385  00171A  0E02               	movlw	high _conflictTable
  1386  00171C  0100               	movlb	0	; () banked
  1387  00171E  6F67               	movwf	(??_readConflictInfo+1)& (0+255),b
  1388  001720  0100               	movlb	0	; () banked
  1389  001722  5160               	movf	?___wmul& (0+255),w,b
  1390  001724  0100               	movlb	0	; () banked
  1391  001726  2766               	addwf	??_readConflictInfo& (0+255),f,b
  1392  001728  0100               	movlb	0	; () banked
  1393  00172A  5161               	movf	(?___wmul+1)& (0+255),w,b
  1394  00172C  0100               	movlb	0	; () banked
  1395  00172E  2367               	addwfc	(??_readConflictInfo+1)& (0+255),f,b
  1396  001730  90D8               	bcf	status,0,c
  1397  001732  0100               	movlb	0	; () banked
  1398  001734  356E               	rlcf	readConflictInfo@j& (0+255),w,b
  1399  001736  6ED9               	movwf	fsr2l,c
  1400  001738  0100               	movlb	0	; () banked
  1401  00173A  356F               	rlcf	(readConflictInfo@j+1)& (0+255),w,b
  1402  00173C  6EDA               	movwf	fsr2h,c
  1403  00173E  90D8               	bcf	status,0,c
  1404  001740  36D9               	rlcf	fsr2l,f,c
  1405  001742  36DA               	rlcf	fsr2h,f,c
  1406  001744  0100               	movlb	0	; () banked
  1407  001746  5166               	movf	??_readConflictInfo& (0+255),w,b
  1408  001748  26D9               	addwf	fsr2l,f,c
  1409  00174A  0100               	movlb	0	; () banked
  1410  00174C  5167               	movf	(??_readConflictInfo+1)& (0+255),w,b
  1411  00174E  22DA               	addwfc	fsr2h,f,c
  1412  001750  0ED7               	movlw	low (_message+6)
  1413  001752  0100               	movlb	0	; () banked
  1414  001754  256E               	addwf	readConflictInfo@j& (0+255),w,b
  1415  001756  6EE1               	movwf	fsr1l,c
  1416  001758  0E00               	movlw	high (_message+6)
  1417  00175A  0100               	movlb	0	; () banked
  1418  00175C  216F               	addwfc	(readConflictInfo@j+1)& (0+255),w,b
  1419  00175E  6EE2               	movwf	fsr1h,c
  1420  001760  50E7               	movf	indf1,w,c
  1421  001762  0B03               	andlw	3
  1422  001764  6EDF               	movwf	indf2,c
  1423                           
  1424                           ;main.c: 97: conflictTable[i][(4*j) + 1] = (message.dta[j] & 0x0c) >> 2;
  1425  001766  C06C  F060         	movff	readConflictInfo@i,___wmul@multiplier
  1426  00176A  C06D  F061         	movff	readConflictInfo@i+1,___wmul@multiplier+1
  1427  00176E  0E00               	movlw	0
  1428  001770  0100               	movlb	0	; () banked
  1429  001772  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1430  001774  0E0C               	movlw	12
  1431  001776  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1432  001778  EC14  F014         	call	___wmul	;wreg free
  1433  00177C  C06E  F066         	movff	readConflictInfo@j,??_readConflictInfo
  1434  001780  C06F  F067         	movff	readConflictInfo@j+1,??_readConflictInfo+1
  1435  001784  0100               	movlb	0	; () banked
  1436  001786  90D8               	bcf	status,0,c
  1437  001788  3766               	rlcf	??_readConflictInfo& (0+255),f,b
  1438  00178A  3767               	rlcf	(??_readConflictInfo+1)& (0+255),f,b
  1439  00178C  0100               	movlb	0	; () banked
  1440  00178E  90D8               	bcf	status,0,c
  1441  001790  3766               	rlcf	??_readConflictInfo& (0+255),f,b
  1442  001792  3767               	rlcf	(??_readConflictInfo+1)& (0+255),f,b
  1443  001794  0E01               	movlw	1
  1444  001796  0100               	movlb	0	; () banked
  1445  001798  2766               	addwf	??_readConflictInfo& (0+255),f,b
  1446  00179A  0E00               	movlw	0
  1447  00179C  2367               	addwfc	(??_readConflictInfo+1)& (0+255),f,b
  1448  00179E  0E00               	movlw	low _conflictTable
  1449  0017A0  0100               	movlb	0	; () banked
  1450  0017A2  6F68               	movwf	(??_readConflictInfo+2)& (0+255),b
  1451  0017A4  0E02               	movlw	high _conflictTable
  1452  0017A6  0100               	movlb	0	; () banked
  1453  0017A8  6F69               	movwf	(??_readConflictInfo+3)& (0+255),b
  1454  0017AA  0100               	movlb	0	; () banked
  1455  0017AC  5166               	movf	??_readConflictInfo& (0+255),w,b
  1456  0017AE  0100               	movlb	0	; () banked
  1457  0017B0  2768               	addwf	(??_readConflictInfo+2)& (0+255),f,b
  1458  0017B2  0100               	movlb	0	; () banked
  1459  0017B4  5167               	movf	(??_readConflictInfo+1)& (0+255),w,b
  1460  0017B6  0100               	movlb	0	; () banked
  1461  0017B8  2369               	addwfc	(??_readConflictInfo+3)& (0+255),f,b
  1462  0017BA  0100               	movlb	0	; () banked
  1463  0017BC  5160               	movf	?___wmul& (0+255),w,b
  1464  0017BE  0100               	movlb	0	; () banked
  1465  0017C0  2568               	addwf	(??_readConflictInfo+2)& (0+255),w,b
  1466  0017C2  6ED9               	movwf	fsr2l,c
  1467  0017C4  0100               	movlb	0	; () banked
  1468  0017C6  5161               	movf	(?___wmul+1)& (0+255),w,b
  1469  0017C8  0100               	movlb	0	; () banked
  1470  0017CA  2169               	addwfc	(??_readConflictInfo+3)& (0+255),w,b
  1471  0017CC  6EDA               	movwf	fsr2h,c
  1472  0017CE  0ED7               	movlw	low (_message+6)
  1473  0017D0  0100               	movlb	0	; () banked
  1474  0017D2  256E               	addwf	readConflictInfo@j& (0+255),w,b
  1475  0017D4  6EE1               	movwf	fsr1l,c
  1476  0017D6  0E00               	movlw	high (_message+6)
  1477  0017D8  0100               	movlb	0	; () banked
  1478  0017DA  216F               	addwfc	(readConflictInfo@j+1)& (0+255),w,b
  1479  0017DC  6EE2               	movwf	fsr1h,c
  1480  0017DE  50E7               	movf	indf1,w,c
  1481  0017E0  0100               	movlb	0	; () banked
  1482  0017E2  6F6A               	movwf	(??_readConflictInfo+4)& (0+255),b
  1483  0017E4  0100               	movlb	0	; () banked
  1484  0017E6  90D8               	bcf	status,0,c
  1485  0017E8  336A               	rrcf	(??_readConflictInfo+4)& (0+255),f,b
  1486  0017EA  0100               	movlb	0	; () banked
  1487  0017EC  90D8               	bcf	status,0,c
  1488  0017EE  316A               	rrcf	(??_readConflictInfo+4)& (0+255),w,b
  1489  0017F0  0B03               	andlw	3
  1490  0017F2  6EDF               	movwf	indf2,c
  1491                           
  1492                           ;main.c: 98: conflictTable[i][(4*j) + 2] = (message.dta[j] & 0x30) >> 4;
  1493  0017F4  C06C  F060         	movff	readConflictInfo@i,___wmul@multiplier
  1494  0017F8  C06D  F061         	movff	readConflictInfo@i+1,___wmul@multiplier+1
  1495  0017FC  0E00               	movlw	0
  1496  0017FE  0100               	movlb	0	; () banked
  1497  001800  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1498  001802  0E0C               	movlw	12
  1499  001804  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1500  001806  EC14  F014         	call	___wmul	;wreg free
  1501  00180A  C06E  F066         	movff	readConflictInfo@j,??_readConflictInfo
  1502  00180E  C06F  F067         	movff	readConflictInfo@j+1,??_readConflictInfo+1
  1503  001812  0100               	movlb	0	; () banked
  1504  001814  90D8               	bcf	status,0,c
  1505  001816  3766               	rlcf	??_readConflictInfo& (0+255),f,b
  1506  001818  3767               	rlcf	(??_readConflictInfo+1)& (0+255),f,b
  1507  00181A  0100               	movlb	0	; () banked
  1508  00181C  90D8               	bcf	status,0,c
  1509  00181E  3766               	rlcf	??_readConflictInfo& (0+255),f,b
  1510  001820  3767               	rlcf	(??_readConflictInfo+1)& (0+255),f,b
  1511  001822  0E02               	movlw	2
  1512  001824  0100               	movlb	0	; () banked
  1513  001826  2766               	addwf	??_readConflictInfo& (0+255),f,b
  1514  001828  0E00               	movlw	0
  1515  00182A  2367               	addwfc	(??_readConflictInfo+1)& (0+255),f,b
  1516  00182C  0E00               	movlw	low _conflictTable
  1517  00182E  0100               	movlb	0	; () banked
  1518  001830  6F68               	movwf	(??_readConflictInfo+2)& (0+255),b
  1519  001832  0E02               	movlw	high _conflictTable
  1520  001834  0100               	movlb	0	; () banked
  1521  001836  6F69               	movwf	(??_readConflictInfo+3)& (0+255),b
  1522  001838  0100               	movlb	0	; () banked
  1523  00183A  5166               	movf	??_readConflictInfo& (0+255),w,b
  1524  00183C  0100               	movlb	0	; () banked
  1525  00183E  2768               	addwf	(??_readConflictInfo+2)& (0+255),f,b
  1526  001840  0100               	movlb	0	; () banked
  1527  001842  5167               	movf	(??_readConflictInfo+1)& (0+255),w,b
  1528  001844  0100               	movlb	0	; () banked
  1529  001846  2369               	addwfc	(??_readConflictInfo+3)& (0+255),f,b
  1530  001848  0100               	movlb	0	; () banked
  1531  00184A  5160               	movf	?___wmul& (0+255),w,b
  1532  00184C  0100               	movlb	0	; () banked
  1533  00184E  2568               	addwf	(??_readConflictInfo+2)& (0+255),w,b
  1534  001850  6ED9               	movwf	fsr2l,c
  1535  001852  0100               	movlb	0	; () banked
  1536  001854  5161               	movf	(?___wmul+1)& (0+255),w,b
  1537  001856  0100               	movlb	0	; () banked
  1538  001858  2169               	addwfc	(??_readConflictInfo+3)& (0+255),w,b
  1539  00185A  6EDA               	movwf	fsr2h,c
  1540  00185C  0ED7               	movlw	low (_message+6)
  1541  00185E  0100               	movlb	0	; () banked
  1542  001860  256E               	addwf	readConflictInfo@j& (0+255),w,b
  1543  001862  6EE1               	movwf	fsr1l,c
  1544  001864  0E00               	movlw	high (_message+6)
  1545  001866  0100               	movlb	0	; () banked
  1546  001868  216F               	addwfc	(readConflictInfo@j+1)& (0+255),w,b
  1547  00186A  6EE2               	movwf	fsr1h,c
  1548  00186C  50E7               	movf	indf1,w,c
  1549  00186E  0100               	movlb	0	; () banked
  1550  001870  6F6A               	movwf	(??_readConflictInfo+4)& (0+255),b
  1551  001872  0100               	movlb	0	; () banked
  1552  001874  396A               	swapf	(??_readConflictInfo+4)& (0+255),w,b
  1553  001876  0B0F               	andlw	15
  1554  001878  0B03               	andlw	3
  1555  00187A  6EDF               	movwf	indf2,c
  1556                           
  1557                           ;main.c: 99: conflictTable[i][(4*j) + 3] = (message.dta[j] & 0xc0) >> 6;
  1558  00187C  C06C  F060         	movff	readConflictInfo@i,___wmul@multiplier
  1559  001880  C06D  F061         	movff	readConflictInfo@i+1,___wmul@multiplier+1
  1560  001884  0E00               	movlw	0
  1561  001886  0100               	movlb	0	; () banked
  1562  001888  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1563  00188A  0E0C               	movlw	12
  1564  00188C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1565  00188E  EC14  F014         	call	___wmul	;wreg free
  1566  001892  C06E  F066         	movff	readConflictInfo@j,??_readConflictInfo
  1567  001896  C06F  F067         	movff	readConflictInfo@j+1,??_readConflictInfo+1
  1568  00189A  0100               	movlb	0	; () banked
  1569  00189C  90D8               	bcf	status,0,c
  1570  00189E  3766               	rlcf	??_readConflictInfo& (0+255),f,b
  1571  0018A0  3767               	rlcf	(??_readConflictInfo+1)& (0+255),f,b
  1572  0018A2  0100               	movlb	0	; () banked
  1573  0018A4  90D8               	bcf	status,0,c
  1574  0018A6  3766               	rlcf	??_readConflictInfo& (0+255),f,b
  1575  0018A8  3767               	rlcf	(??_readConflictInfo+1)& (0+255),f,b
  1576  0018AA  0E03               	movlw	3
  1577  0018AC  0100               	movlb	0	; () banked
  1578  0018AE  2766               	addwf	??_readConflictInfo& (0+255),f,b
  1579  0018B0  0E00               	movlw	0
  1580  0018B2  2367               	addwfc	(??_readConflictInfo+1)& (0+255),f,b
  1581  0018B4  0E00               	movlw	low _conflictTable
  1582  0018B6  0100               	movlb	0	; () banked
  1583  0018B8  6F68               	movwf	(??_readConflictInfo+2)& (0+255),b
  1584  0018BA  0E02               	movlw	high _conflictTable
  1585  0018BC  0100               	movlb	0	; () banked
  1586  0018BE  6F69               	movwf	(??_readConflictInfo+3)& (0+255),b
  1587  0018C0  0100               	movlb	0	; () banked
  1588  0018C2  5166               	movf	??_readConflictInfo& (0+255),w,b
  1589  0018C4  0100               	movlb	0	; () banked
  1590  0018C6  2768               	addwf	(??_readConflictInfo+2)& (0+255),f,b
  1591  0018C8  0100               	movlb	0	; () banked
  1592  0018CA  5167               	movf	(??_readConflictInfo+1)& (0+255),w,b
  1593  0018CC  0100               	movlb	0	; () banked
  1594  0018CE  2369               	addwfc	(??_readConflictInfo+3)& (0+255),f,b
  1595  0018D0  0100               	movlb	0	; () banked
  1596  0018D2  5160               	movf	?___wmul& (0+255),w,b
  1597  0018D4  0100               	movlb	0	; () banked
  1598  0018D6  2568               	addwf	(??_readConflictInfo+2)& (0+255),w,b
  1599  0018D8  6ED9               	movwf	fsr2l,c
  1600  0018DA  0100               	movlb	0	; () banked
  1601  0018DC  5161               	movf	(?___wmul+1)& (0+255),w,b
  1602  0018DE  0100               	movlb	0	; () banked
  1603  0018E0  2169               	addwfc	(??_readConflictInfo+3)& (0+255),w,b
  1604  0018E2  6EDA               	movwf	fsr2h,c
  1605  0018E4  0ED7               	movlw	low (_message+6)
  1606  0018E6  0100               	movlb	0	; () banked
  1607  0018E8  256E               	addwf	readConflictInfo@j& (0+255),w,b
  1608  0018EA  6EE1               	movwf	fsr1l,c
  1609  0018EC  0E00               	movlw	high (_message+6)
  1610  0018EE  0100               	movlb	0	; () banked
  1611  0018F0  216F               	addwfc	(readConflictInfo@j+1)& (0+255),w,b
  1612  0018F2  6EE2               	movwf	fsr1h,c
  1613  0018F4  50E7               	movf	indf1,w,c
  1614  0018F6  0100               	movlb	0	; () banked
  1615  0018F8  6F6A               	movwf	(??_readConflictInfo+4)& (0+255),b
  1616  0018FA  0E06               	movlw	6
  1617  0018FC  0100               	movlb	0	; () banked
  1618  0018FE  6F6B               	movwf	(??_readConflictInfo+5)& (0+255),b
  1619  001900                     u1135:
  1620  001900  0100               	movlb	0	; () banked
  1621  001902  90D8               	bcf	status,0,c
  1622  001904  336A               	rrcf	(??_readConflictInfo+4)& (0+255),f,b
  1623  001906  0100               	movlb	0	; () banked
  1624  001908  2F6B               	decfsz	(??_readConflictInfo+5)& (0+255),f,b
  1625  00190A  D7FA               	goto	u1135
  1626  00190C  0100               	movlb	0	; () banked
  1627  00190E  516A               	movf	(??_readConflictInfo+4)& (0+255),w,b
  1628  001910  0B03               	andlw	3
  1629  001912  6EDF               	movwf	indf2,c
  1630                           
  1631                           ; BSR set to: 0
  1632  001914  0100               	movlb	0	; () banked
  1633  001916  4B6E               	infsnz	readConflictInfo@j& (0+255),f,b
  1634  001918  2B6F               	incf	(readConflictInfo@j+1)& (0+255),f,b
  1635                           
  1636                           ; BSR set to: 0
  1637  00191A  0100               	movlb	0	; () banked
  1638  00191C  BF6F               	btfsc	(readConflictInfo@j+1)& (0+255),7,b
  1639  00191E  D6EF               	goto	l2205
  1640  001920  0100               	movlb	0	; () banked
  1641  001922  516F               	movf	(readConflictInfo@j+1)& (0+255),w,b
  1642  001924  E101               	bnz	l2211
  1643  001926  D6E4               	goto	L1
  1644  001928                     l2211:
  1645                           
  1646                           ; BSR set to: 0
  1647                           ;main.c: 100: }
  1648                           ;main.c: 102: resetData();
  1649  001928  ECD9  F013         	call	_resetData	;wreg free
  1650  00192C  0100               	movlb	0	; () banked
  1651  00192E  4B6C               	infsnz	readConflictInfo@i& (0+255),f,b
  1652  001930  2B6D               	incf	(readConflictInfo@i+1)& (0+255),f,b
  1653                           
  1654                           ; BSR set to: 0
  1655  001932  0100               	movlb	0	; () banked
  1656  001934  BF6D               	btfsc	(readConflictInfo@i+1)& (0+255),7,b
  1657  001936  D692               	goto	l2193
  1658  001938  0100               	movlb	0	; () banked
  1659  00193A  516D               	movf	(readConflictInfo@i+1)& (0+255),w,b
  1660  00193C  E101               	bnz	l55
  1661  00193E  D687               	goto	L2
  1662  001940                     l55:
  1663                           
  1664                           ; BSR set to: 0
  1665  001940  0012               	return		;funcret
  1666  001942                     __end_of_readConflictInfo:
  1667                           	opt stack 0
  1668                           tblptru	equ	0xFF8
  1669                           tblptrh	equ	0xFF7
  1670                           tblptrl	equ	0xFF6
  1671                           tablat	equ	0xFF5
  1672                           intcon	equ	0xFF2
  1673                           postinc0	equ	0xFEE
  1674                           wreg	equ	0xFE8
  1675                           indf1	equ	0xFE7
  1676                           postdec1	equ	0xFE5
  1677                           fsr1h	equ	0xFE2
  1678                           fsr1l	equ	0xFE1
  1679                           indf2	equ	0xFDF
  1680                           fsr2h	equ	0xFDA
  1681                           fsr2l	equ	0xFD9
  1682                           status	equ	0xFD8
  1683                           
  1684 ;; *************** function _resetData *****************
  1685 ;; Defined at:
  1686 ;;		line 105 in file "main.c"
  1687 ;; Parameters:    Size  Location     Type
  1688 ;;		None
  1689 ;; Auto vars:     Size  Location     Type
  1690 ;;  i               2    0[BANK0 ] int 
  1691 ;; Return value:  Size  Location     Type
  1692 ;;                  1    wreg      void 
  1693 ;; Registers used:
  1694 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1695 ;; Tracked objects:
  1696 ;;		On entry : 0/0
  1697 ;;		On exit  : 0/0
  1698 ;;		Unchanged: 0/0
  1699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1701 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1703 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1704 ;;Total ram usage:        2 bytes
  1705 ;; Hardware stack levels used:    1
  1706 ;; Hardware stack levels required when called:    8
  1707 ;; This function calls:
  1708 ;;		Nothing
  1709 ;; This function is called by:
  1710 ;;		_readID
  1711 ;;		_readConflictInfo
  1712 ;; This function uses a non-reentrant model
  1713 ;;
  1714                           
  1715                           	psect	text4
  1716  0027B2                     __ptext4:
  1717                           	opt stack 0
  1718  0027B2                     _resetData:
  1719                           	opt stack 20
  1720                           
  1721                           ;main.c: 106: int i;
  1722                           ;main.c: 107: for (i = 0 ; i < 4 ; i++){
  1723                           
  1724                           ; BSR set to: 0
  1725                           ;incstack = 0
  1726  0027B2  0E00               	movlw	0
  1727  0027B4  0100               	movlb	0	; () banked
  1728  0027B6  6F61               	movwf	(resetData@i+1)& (0+255),b
  1729  0027B8  0E00               	movlw	0
  1730  0027BA  6F60               	movwf	resetData@i& (0+255),b
  1731  0027BC                     l1907:
  1732                           
  1733                           ; BSR set to: 0
  1734  0027BC  0100               	movlb	0	; () banked
  1735  0027BE  BF61               	btfsc	(resetData@i+1)& (0+255),7,b
  1736  0027C0  D008               	goto	l1911
  1737  0027C2  0100               	movlb	0	; () banked
  1738  0027C4  5161               	movf	(resetData@i+1)& (0+255),w,b
  1739  0027C6  E113               	bnz	l60
  1740  0027C8  0E04               	movlw	4
  1741  0027CA  0100               	movlb	0	; () banked
  1742  0027CC  5D60               	subwf	resetData@i& (0+255),w,b
  1743  0027CE  B0D8               	btfsc	status,0,c
  1744  0027D0  0012               	return	
  1745  0027D2                     l1911:
  1746                           
  1747                           ; BSR set to: 0
  1748                           ;main.c: 108: message.dta[i] = 0;
  1749  0027D2  0ED7               	movlw	low (_message+6)
  1750  0027D4  0100               	movlb	0	; () banked
  1751  0027D6  2560               	addwf	resetData@i& (0+255),w,b
  1752  0027D8  6ED9               	movwf	fsr2l,c
  1753  0027DA  0E00               	movlw	high (_message+6)
  1754  0027DC  0100               	movlb	0	; () banked
  1755  0027DE  2161               	addwfc	(resetData@i+1)& (0+255),w,b
  1756  0027E0  6EDA               	movwf	fsr2h,c
  1757  0027E2  0E00               	movlw	0
  1758  0027E4  6EDF               	movwf	indf2,c
  1759                           
  1760                           ; BSR set to: 0
  1761  0027E6  0100               	movlb	0	; () banked
  1762  0027E8  4B60               	infsnz	resetData@i& (0+255),f,b
  1763  0027EA  2B61               	incf	(resetData@i+1)& (0+255),f,b
  1764  0027EC  D7E7               	goto	l1907
  1765  0027EE                     l60:
  1766                           
  1767                           ; BSR set to: 0
  1768  0027EE  0012               	return		;funcret
  1769  0027F0                     __end_of_resetData:
  1770                           	opt stack 0
  1771                           tblptru	equ	0xFF8
  1772                           tblptrh	equ	0xFF7
  1773                           tblptrl	equ	0xFF6
  1774                           tablat	equ	0xFF5
  1775                           intcon	equ	0xFF2
  1776                           postinc0	equ	0xFEE
  1777                           wreg	equ	0xFE8
  1778                           indf1	equ	0xFE7
  1779                           postdec1	equ	0xFE5
  1780                           fsr1h	equ	0xFE2
  1781                           fsr1l	equ	0xFE1
  1782                           indf2	equ	0xFDF
  1783                           fsr2h	equ	0xFDA
  1784                           fsr2l	equ	0xFD9
  1785                           status	equ	0xFD8
  1786                           
  1787 ;; *************** function ___wmul *****************
  1788 ;; Defined at:
  1789 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  1790 ;; Parameters:    Size  Location     Type
  1791 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1792 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1793 ;; Auto vars:     Size  Location     Type
  1794 ;;  product         2    4[BANK0 ] unsigned int 
  1795 ;; Return value:  Size  Location     Type
  1796 ;;                  2    0[BANK0 ] unsigned int 
  1797 ;; Registers used:
  1798 ;;		wreg, status,2, status,0, prodl, prodh
  1799 ;; Tracked objects:
  1800 ;;		On entry : 0/0
  1801 ;;		On exit  : 0/0
  1802 ;;		Unchanged: 0/0
  1803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1804 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1805 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1807 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1808 ;;Total ram usage:        6 bytes
  1809 ;; Hardware stack levels used:    1
  1810 ;; Hardware stack levels required when called:    8
  1811 ;; This function calls:
  1812 ;;		Nothing
  1813 ;; This function is called by:
  1814 ;;		_readConflictInfo
  1815 ;; This function uses a non-reentrant model
  1816 ;;
  1817                           
  1818                           	psect	text5
  1819  002828                     __ptext5:
  1820                           	opt stack 0
  1821  002828                     ___wmul:
  1822                           	opt stack 20
  1823                           
  1824                           ; BSR set to: 0
  1825                           ;incstack = 0
  1826  002828  0100               	movlb	0	; () banked
  1827  00282A  5160               	movf	___wmul@multiplier& (0+255),w,b
  1828  00282C  0100               	movlb	0	; () banked
  1829  00282E  0362               	mulwf	___wmul@multiplicand& (0+255),b
  1830  002830  CFF3 F064          	movff	prodl,___wmul@product
  1831  002834  CFF4 F065          	movff	prodh,___wmul@product+1
  1832  002838  0100               	movlb	0	; () banked
  1833  00283A  5160               	movf	___wmul@multiplier& (0+255),w,b
  1834  00283C  0100               	movlb	0	; () banked
  1835  00283E  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1836  002840  50F3               	movf	prodl,w,c
  1837  002842  0100               	movlb	0	; () banked
  1838  002844  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  1839  002846  0100               	movlb	0	; () banked
  1840  002848  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1841  00284A  0100               	movlb	0	; () banked
  1842  00284C  0362               	mulwf	___wmul@multiplicand& (0+255),b
  1843  00284E  50F3               	movf	prodl,w,c
  1844  002850  0100               	movlb	0	; () banked
  1845  002852  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  1846                           
  1847                           ; BSR set to: 0
  1848  002854  C064  F060         	movff	___wmul@product,?___wmul
  1849  002858  C065  F061         	movff	___wmul@product+1,?___wmul+1
  1850  00285C  0012               	return	
  1851  00285E                     __end_of___wmul:
  1852                           	opt stack 0
  1853                           tblptru	equ	0xFF8
  1854                           tblptrh	equ	0xFF7
  1855                           tblptrl	equ	0xFF6
  1856                           tablat	equ	0xFF5
  1857                           prodh	equ	0xFF4
  1858                           prodl	equ	0xFF3
  1859                           intcon	equ	0xFF2
  1860                           postinc0	equ	0xFEE
  1861                           wreg	equ	0xFE8
  1862                           indf1	equ	0xFE7
  1863                           postdec1	equ	0xFE5
  1864                           fsr1h	equ	0xFE2
  1865                           fsr1l	equ	0xFE1
  1866                           indf2	equ	0xFDF
  1867                           fsr2h	equ	0xFDA
  1868                           fsr2l	equ	0xFD9
  1869                           status	equ	0xFD8
  1870                           
  1871 ;; *************** function _Can_PutMessage *****************
  1872 ;; Defined at:
  1873 ;;		line 200 in file "can.c"
  1874 ;; Parameters:    Size  Location     Type
  1875 ;;  msgPtr          2    0[BANK0 ] PTR struct CANMESSAGE
  1876 ;;		 -> messageTx(17), message(17), 
  1877 ;; Auto vars:     Size  Location     Type
  1878 ;;  i               1    4[BANK0 ] unsigned char 
  1879 ;; Return value:  Size  Location     Type
  1880 ;;                  1    wreg      unsigned char 
  1881 ;; Registers used:
  1882 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1883 ;; Tracked objects:
  1884 ;;		On entry : 0/0
  1885 ;;		On exit  : 0/0
  1886 ;;		Unchanged: 0/0
  1887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1888 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1889 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1890 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1891 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1892 ;;Total ram usage:        5 bytes
  1893 ;; Hardware stack levels used:    1
  1894 ;; Hardware stack levels required when called:    8
  1895 ;; This function calls:
  1896 ;;		Nothing
  1897 ;; This function is called by:
  1898 ;;		_readID
  1899 ;;		_readConflictInfo
  1900 ;; This function uses a non-reentrant model
  1901 ;;
  1902                           
  1903                           	psect	text6
  1904  001AEE                     __ptext6:
  1905                           	opt stack 0
  1906  001AEE                     _Can_PutMessage:
  1907                           	opt stack 20
  1908                           
  1909                           ;can.c: 202: uint8_t i;
  1910                           ;can.c: 204: if((txBufferCount) < 4)
  1911                           
  1912                           ; BSR set to: 0
  1913                           ;incstack = 0
  1914  001AEE  0E04               	movlw	4
  1915  001AF0  0100               	movlb	0	; () banked
  1916  001AF2  61AB               	cpfslt	_txBufferCount& (0+255),b
  1917  001AF4  0012               	return	
  1918                           
  1919                           ; BSR set to: 0
  1920                           ;can.c: 205: {
  1921                           ;can.c: 206: txBuffer[txBufferPtrIn].dlc = msgPtr->dlc;
  1922  001AF6  0100               	movlb	0	; () banked
  1923  001AF8  EE20 F005          	lfsr	2,5
  1924  001AFC  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  1925  001AFE  26D9               	addwf	fsr2l,f,c
  1926  001B00  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  1927  001B02  22DA               	addwfc	fsr2h,f,c
  1928  001B04  0100               	movlb	0	; () banked
  1929  001B06  51AC               	movf	_txBufferPtrIn& (0+255),w,b
  1930  001B08  0D11               	mullw	17
  1931  001B0A  0E05               	movlw	5
  1932  001B0C  26F3               	addwf	prodl,f,c
  1933  001B0E  0E00               	movlw	0
  1934  001B10  22F4               	addwfc	prodh,f,c
  1935  001B12  0E00               	movlw	low _txBuffer
  1936  001B14  24F3               	addwf	prodl,w,c
  1937  001B16  6EE1               	movwf	fsr1l,c
  1938  001B18  0E01               	movlw	high _txBuffer
  1939  001B1A  20F4               	addwfc	prodh,w,c
  1940  001B1C  6EE2               	movwf	fsr1h,c
  1941  001B1E  CFDF FFE7          	movff	indf2,indf1
  1942                           
  1943                           ;can.c: 207: txBuffer[txBufferPtrIn].extended_identifier = msgPtr->extended_identifier;
  1944  001B22  C060  FFD9         	movff	Can_PutMessage@msgPtr,fsr2l
  1945  001B26  C061  FFDA         	movff	Can_PutMessage@msgPtr+1,fsr2h
  1946  001B2A  0100               	movlb	0	; () banked
  1947  001B2C  51AC               	movf	_txBufferPtrIn& (0+255),w,b
  1948  001B2E  0D11               	mullw	17
  1949  001B30  0E00               	movlw	low _txBuffer
  1950  001B32  24F3               	addwf	prodl,w,c
  1951  001B34  6EE1               	movwf	fsr1l,c
  1952  001B36  0E01               	movlw	high _txBuffer
  1953  001B38  20F4               	addwfc	prodh,w,c
  1954  001B3A  6EE2               	movwf	fsr1h,c
  1955  001B3C  CFDF FFE7          	movff	indf2,indf1
  1956                           
  1957                           ;can.c: 208: txBuffer[txBufferPtrIn].filhit = msgPtr->filhit;
  1958  001B40  0100               	movlb	0	; () banked
  1959  001B42  EE20 F00F          	lfsr	2,15
  1960  001B46  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  1961  001B48  26D9               	addwf	fsr2l,f,c
  1962  001B4A  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  1963  001B4C  22DA               	addwfc	fsr2h,f,c
  1964  001B4E  0100               	movlb	0	; () banked
  1965  001B50  51AC               	movf	_txBufferPtrIn& (0+255),w,b
  1966  001B52  0D11               	mullw	17
  1967  001B54  0E0F               	movlw	15
  1968  001B56  26F3               	addwf	prodl,f,c
  1969  001B58  0E00               	movlw	0
  1970  001B5A  22F4               	addwfc	prodh,f,c
  1971  001B5C  0E00               	movlw	low _txBuffer
  1972  001B5E  24F3               	addwf	prodl,w,c
  1973  001B60  6EE1               	movwf	fsr1l,c
  1974  001B62  0E01               	movlw	high _txBuffer
  1975  001B64  20F4               	addwfc	prodh,w,c
  1976  001B66  6EE2               	movwf	fsr1h,c
  1977  001B68  CFDF FFE7          	movff	indf2,indf1
  1978                           
  1979                           ;can.c: 209: txBuffer[txBufferPtrIn].identifier = msgPtr->identifier;
  1980  001B6C  0100               	movlb	0	; () banked
  1981  001B6E  EE20 F001          	lfsr	2,1
  1982  001B72  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  1983  001B74  26D9               	addwf	fsr2l,f,c
  1984  001B76  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  1985  001B78  22DA               	addwfc	fsr2h,f,c
  1986  001B7A  0100               	movlb	0	; () banked
  1987  001B7C  51AC               	movf	_txBufferPtrIn& (0+255),w,b
  1988  001B7E  0D11               	mullw	17
  1989  001B80  0E01               	movlw	1
  1990  001B82  26F3               	addwf	prodl,f,c
  1991  001B84  0E00               	movlw	0
  1992  001B86  22F4               	addwfc	prodh,f,c
  1993  001B88  0E00               	movlw	low _txBuffer
  1994  001B8A  24F3               	addwf	prodl,w,c
  1995  001B8C  6EE1               	movwf	fsr1l,c
  1996  001B8E  0E01               	movlw	high _txBuffer
  1997  001B90  20F4               	addwfc	prodh,w,c
  1998  001B92  6EE2               	movwf	fsr1h,c
  1999  001B94  CFDE FFE6          	movff	postinc2,postinc1
  2000  001B98  CFDE FFE6          	movff	postinc2,postinc1
  2001  001B9C  CFDE FFE6          	movff	postinc2,postinc1
  2002  001BA0  CFDE FFE6          	movff	postinc2,postinc1
  2003                           
  2004                           ;can.c: 210: txBuffer[txBufferPtrIn].rtr = msgPtr->rtr;
  2005  001BA4  0100               	movlb	0	; () banked
  2006  001BA6  EE20 F00E          	lfsr	2,14
  2007  001BAA  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  2008  001BAC  26D9               	addwf	fsr2l,f,c
  2009  001BAE  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  2010  001BB0  22DA               	addwfc	fsr2h,f,c
  2011  001BB2  0100               	movlb	0	; () banked
  2012  001BB4  51AC               	movf	_txBufferPtrIn& (0+255),w,b
  2013  001BB6  0D11               	mullw	17
  2014  001BB8  0E0E               	movlw	14
  2015  001BBA  26F3               	addwf	prodl,f,c
  2016  001BBC  0E00               	movlw	0
  2017  001BBE  22F4               	addwfc	prodh,f,c
  2018  001BC0  0E00               	movlw	low _txBuffer
  2019  001BC2  24F3               	addwf	prodl,w,c
  2020  001BC4  6EE1               	movwf	fsr1l,c
  2021  001BC6  0E01               	movlw	high _txBuffer
  2022  001BC8  20F4               	addwfc	prodh,w,c
  2023  001BCA  6EE2               	movwf	fsr1h,c
  2024  001BCC  CFDF FFE7          	movff	indf2,indf1
  2025                           
  2026                           ;can.c: 211: txBuffer[txBufferPtrIn].txPrio = msgPtr->txPrio;
  2027  001BD0  0100               	movlb	0	; () banked
  2028  001BD2  EE20 F010          	lfsr	2,16
  2029  001BD6  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  2030  001BD8  26D9               	addwf	fsr2l,f,c
  2031  001BDA  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  2032  001BDC  22DA               	addwfc	fsr2h,f,c
  2033  001BDE  0100               	movlb	0	; () banked
  2034  001BE0  51AC               	movf	_txBufferPtrIn& (0+255),w,b
  2035  001BE2  0D11               	mullw	17
  2036  001BE4  0E10               	movlw	16
  2037  001BE6  26F3               	addwf	prodl,f,c
  2038  001BE8  0E00               	movlw	0
  2039  001BEA  22F4               	addwfc	prodh,f,c
  2040  001BEC  0E00               	movlw	low _txBuffer
  2041  001BEE  24F3               	addwf	prodl,w,c
  2042  001BF0  6EE1               	movwf	fsr1l,c
  2043  001BF2  0E01               	movlw	high _txBuffer
  2044  001BF4  20F4               	addwfc	prodh,w,c
  2045  001BF6  6EE2               	movwf	fsr1h,c
  2046  001BF8  CFDF FFE7          	movff	indf2,indf1
  2047                           
  2048                           ; BSR set to: 0
  2049                           ;can.c: 212: for(i=0;i< msgPtr->dlc;i++)
  2050  001BFC  0E00               	movlw	0
  2051  001BFE  0100               	movlb	0	; () banked
  2052  001C00  6F64               	movwf	Can_PutMessage@i& (0+255),b
  2053  001C02  D031               	goto	l1927
  2054  001C04                     l1923:
  2055                           
  2056                           ; BSR set to: 0
  2057                           ;can.c: 213: {
  2058                           ;can.c: 214: txBuffer[txBufferPtrIn].dta[i] = msgPtr->dta[i];
  2059  001C04  0100               	movlb	0	; () banked
  2060  001C06  5164               	movf	Can_PutMessage@i& (0+255),w,b
  2061  001C08  0D01               	mullw	1
  2062  001C0A  0E06               	movlw	6
  2063  001C0C  26F3               	addwf	prodl,f,c
  2064  001C0E  0E00               	movlw	0
  2065  001C10  22F4               	addwfc	prodh,f,c
  2066  001C12  50F3               	movf	prodl,w,c
  2067  001C14  0100               	movlb	0	; () banked
  2068  001C16  2560               	addwf	Can_PutMessage@msgPtr& (0+255),w,b
  2069  001C18  6ED9               	movwf	fsr2l,c
  2070  001C1A  50F4               	movf	prodh,w,c
  2071  001C1C  0100               	movlb	0	; () banked
  2072  001C1E  2161               	addwfc	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  2073  001C20  6EDA               	movwf	fsr2h,c
  2074  001C22  0100               	movlb	0	; () banked
  2075  001C24  5164               	movf	Can_PutMessage@i& (0+255),w,b
  2076  001C26  0D01               	mullw	1
  2077  001C28  0E06               	movlw	6
  2078  001C2A  26F3               	addwf	prodl,f,c
  2079  001C2C  0E00               	movlw	0
  2080  001C2E  22F4               	addwfc	prodh,f,c
  2081  001C30  0E00               	movlw	low _txBuffer
  2082  001C32  0100               	movlb	0	; () banked
  2083  001C34  6F62               	movwf	??_Can_PutMessage& (0+255),b
  2084  001C36  0E01               	movlw	high _txBuffer
  2085  001C38  0100               	movlb	0	; () banked
  2086  001C3A  6F63               	movwf	(??_Can_PutMessage+1)& (0+255),b
  2087  001C3C  50F3               	movf	prodl,w,c
  2088  001C3E  0100               	movlb	0	; () banked
  2089  001C40  2762               	addwf	??_Can_PutMessage& (0+255),f,b
  2090  001C42  50F4               	movf	prodh,w,c
  2091  001C44  0100               	movlb	0	; () banked
  2092  001C46  2363               	addwfc	(??_Can_PutMessage+1)& (0+255),f,b
  2093  001C48  0100               	movlb	0	; () banked
  2094  001C4A  51AC               	movf	_txBufferPtrIn& (0+255),w,b
  2095  001C4C  0D11               	mullw	17
  2096  001C4E  50F3               	movf	prodl,w,c
  2097  001C50  0100               	movlb	0	; () banked
  2098  001C52  2562               	addwf	??_Can_PutMessage& (0+255),w,b
  2099  001C54  6EE1               	movwf	fsr1l,c
  2100  001C56  50F4               	movf	prodh,w,c
  2101  001C58  0100               	movlb	0	; () banked
  2102  001C5A  2163               	addwfc	(??_Can_PutMessage+1)& (0+255),w,b
  2103  001C5C  6EE2               	movwf	fsr1h,c
  2104  001C5E  CFDF FFE7          	movff	indf2,indf1
  2105                           
  2106                           ; BSR set to: 0
  2107  001C62  0100               	movlb	0	; () banked
  2108  001C64  2B64               	incf	Can_PutMessage@i& (0+255),f,b
  2109  001C66                     l1927:
  2110                           
  2111                           ; BSR set to: 0
  2112  001C66  0100               	movlb	0	; () banked
  2113  001C68  EE20 F005          	lfsr	2,5
  2114  001C6C  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  2115  001C6E  26D9               	addwf	fsr2l,f,c
  2116  001C70  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  2117  001C72  22DA               	addwfc	fsr2h,f,c
  2118  001C74  50DE               	movf	postinc2,w,c
  2119  001C76  0100               	movlb	0	; () banked
  2120  001C78  5D64               	subwf	Can_PutMessage@i& (0+255),w,b
  2121  001C7A  A0D8               	btfss	status,0,c
  2122  001C7C  D7C3               	goto	l1923
  2123                           
  2124                           ; BSR set to: 0
  2125                           ;can.c: 215: }
  2126                           ;can.c: 216: INT3IE = 0;
  2127  001C7E  9AF0               	bcf	intcon3,5,c	;volatile
  2128                           
  2129                           ; BSR set to: 0
  2130                           ;can.c: 217: txBufferCount++;
  2131  001C80  0100               	movlb	0	; () banked
  2132  001C82  2BAB               	incf	_txBufferCount& (0+255),f,b
  2133                           
  2134                           ; BSR set to: 0
  2135                           ;can.c: 218: txBufferPtrIn = (txBufferPtrIn + 1) % 4;
  2136  001C84  0100               	movlb	0	; () banked
  2137  001C86  29AC               	incf	_txBufferPtrIn& (0+255),w,b
  2138  001C88  0B03               	andlw	3
  2139  001C8A  0100               	movlb	0	; () banked
  2140  001C8C  6FAC               	movwf	_txBufferPtrIn& (0+255),b
  2141                           
  2142                           ; BSR set to: 0
  2143                           ;can.c: 219: INT3IE = 1;
  2144  001C8E  8AF0               	bsf	intcon3,5,c	;volatile
  2145                           
  2146                           ; BSR set to: 0
  2147                           ;can.c: 220: INT3IF = 1;
  2148  001C90  84F0               	bsf	intcon3,2,c	;volatile
  2149                           
  2150                           ; BSR set to: 0
  2151                           ;can.c: 223: else
  2152                           ;can.c: 224: {
  2153                           ;can.c: 225: return 1;
  2154                           ;	Return value of _Can_PutMessage is never used
  2155                           
  2156                           ; BSR set to: 0
  2157                           ;can.c: 222: }
  2158                           
  2159                           ; BSR set to: 0
  2160                           ;can.c: 221: return 0;
  2161                           ;	Return value of _Can_PutMessage is never used
  2162  001C92  0012               	return	
  2163  001C94                     __end_of_Can_PutMessage:
  2164                           	opt stack 0
  2165                           tblptru	equ	0xFF8
  2166                           tblptrh	equ	0xFF7
  2167                           tblptrl	equ	0xFF6
  2168                           tablat	equ	0xFF5
  2169                           prodh	equ	0xFF4
  2170                           prodl	equ	0xFF3
  2171                           intcon	equ	0xFF2
  2172                           intcon3	equ	0xFF0
  2173                           postinc0	equ	0xFEE
  2174                           wreg	equ	0xFE8
  2175                           indf1	equ	0xFE7
  2176                           postinc1	equ	0xFE6
  2177                           postdec1	equ	0xFE5
  2178                           fsr1h	equ	0xFE2
  2179                           fsr1l	equ	0xFE1
  2180                           indf2	equ	0xFDF
  2181                           postinc2	equ	0xFDE
  2182                           fsr2h	equ	0xFDA
  2183                           fsr2l	equ	0xFD9
  2184                           status	equ	0xFD8
  2185                           
  2186 ;; *************** function _Can_GetMessage *****************
  2187 ;; Defined at:
  2188 ;;		line 169 in file "can.c"
  2189 ;; Parameters:    Size  Location     Type
  2190 ;;  msgPtr          2    0[BANK0 ] PTR struct CANMESSAGE
  2191 ;;		 -> message(17), 
  2192 ;; Auto vars:     Size  Location     Type
  2193 ;;  i               1    4[BANK0 ] unsigned char 
  2194 ;; Return value:  Size  Location     Type
  2195 ;;                  1    wreg      unsigned char 
  2196 ;; Registers used:
  2197 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2198 ;; Tracked objects:
  2199 ;;		On entry : 0/0
  2200 ;;		On exit  : 0/0
  2201 ;;		Unchanged: 0/0
  2202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2203 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2204 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2205 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2206 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2207 ;;Total ram usage:        5 bytes
  2208 ;; Hardware stack levels used:    1
  2209 ;; Hardware stack levels required when called:    8
  2210 ;; This function calls:
  2211 ;;		Nothing
  2212 ;; This function is called by:
  2213 ;;		_readID
  2214 ;;		_readConflictInfo
  2215 ;; This function uses a non-reentrant model
  2216 ;;
  2217                           
  2218                           	psect	text7
  2219  001C94                     __ptext7:
  2220                           	opt stack 0
  2221  001C94                     _Can_GetMessage:
  2222                           	opt stack 20
  2223                           
  2224                           ;can.c: 171: uint8_t i;
  2225                           ;can.c: 172: if(rxBufferCount > 0)
  2226                           
  2227                           ; BSR set to: 0
  2228                           ;incstack = 0
  2229  001C94  5059               	movf	_rxBufferCount,w,c
  2230  001C96  B4D8               	btfsc	status,2,c
  2231  001C98  D0B8               	goto	l1961
  2232                           
  2233                           ;can.c: 173: {
  2234                           ;can.c: 174: msgPtr->dlc = rxBuffer[rxBufferPtrOut].dlc;
  2235  001C9A  0100               	movlb	0	; () banked
  2236  001C9C  51AD               	movf	_rxBufferPtrOut& (0+255),w,b
  2237  001C9E  0D11               	mullw	17
  2238  001CA0  0E05               	movlw	5
  2239  001CA2  26F3               	addwf	prodl,f,c
  2240  001CA4  0E00               	movlw	0
  2241  001CA6  22F4               	addwfc	prodh,f,c
  2242  001CA8  0E44               	movlw	low _rxBuffer
  2243  001CAA  24F3               	addwf	prodl,w,c
  2244  001CAC  6ED9               	movwf	fsr2l,c
  2245  001CAE  0E01               	movlw	high _rxBuffer
  2246  001CB0  20F4               	addwfc	prodh,w,c
  2247  001CB2  6EDA               	movwf	fsr2h,c
  2248  001CB4  0100               	movlb	0	; () banked
  2249  001CB6  EE10 F005          	lfsr	1,5
  2250  001CBA  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  2251  001CBC  26E1               	addwf	fsr1l,f,c
  2252  001CBE  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  2253  001CC0  22E2               	addwfc	fsr1h,f,c
  2254  001CC2  CFDF FFE7          	movff	indf2,indf1
  2255                           
  2256                           ;can.c: 175: msgPtr->extended_identifier = rxBuffer[rxBufferPtrOut].extended_identifier;
  2257  001CC6  0100               	movlb	0	; () banked
  2258  001CC8  51AD               	movf	_rxBufferPtrOut& (0+255),w,b
  2259  001CCA  0D11               	mullw	17
  2260  001CCC  0E44               	movlw	low _rxBuffer
  2261  001CCE  24F3               	addwf	prodl,w,c
  2262  001CD0  6ED9               	movwf	fsr2l,c
  2263  001CD2  0E01               	movlw	high _rxBuffer
  2264  001CD4  20F4               	addwfc	prodh,w,c
  2265  001CD6  6EDA               	movwf	fsr2h,c
  2266  001CD8  C060  FFE1         	movff	Can_GetMessage@msgPtr,fsr1l
  2267  001CDC  C061  FFE2         	movff	Can_GetMessage@msgPtr+1,fsr1h
  2268  001CE0  CFDF FFE7          	movff	indf2,indf1
  2269                           
  2270                           ;can.c: 176: msgPtr->filhit = rxBuffer[rxBufferPtrOut].filhit;
  2271  001CE4  0100               	movlb	0	; () banked
  2272  001CE6  51AD               	movf	_rxBufferPtrOut& (0+255),w,b
  2273  001CE8  0D11               	mullw	17
  2274  001CEA  0E0F               	movlw	15
  2275  001CEC  26F3               	addwf	prodl,f,c
  2276  001CEE  0E00               	movlw	0
  2277  001CF0  22F4               	addwfc	prodh,f,c
  2278  001CF2  0E44               	movlw	low _rxBuffer
  2279  001CF4  24F3               	addwf	prodl,w,c
  2280  001CF6  6ED9               	movwf	fsr2l,c
  2281  001CF8  0E01               	movlw	high _rxBuffer
  2282  001CFA  20F4               	addwfc	prodh,w,c
  2283  001CFC  6EDA               	movwf	fsr2h,c
  2284  001CFE  0100               	movlb	0	; () banked
  2285  001D00  EE10 F00F          	lfsr	1,15
  2286  001D04  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  2287  001D06  26E1               	addwf	fsr1l,f,c
  2288  001D08  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  2289  001D0A  22E2               	addwfc	fsr1h,f,c
  2290  001D0C  CFDF FFE7          	movff	indf2,indf1
  2291                           
  2292                           ;can.c: 177: msgPtr->identifier = rxBuffer[rxBufferPtrOut].identifier;
  2293  001D10  0100               	movlb	0	; () banked
  2294  001D12  51AD               	movf	_rxBufferPtrOut& (0+255),w,b
  2295  001D14  0D11               	mullw	17
  2296  001D16  0E01               	movlw	1
  2297  001D18  26F3               	addwf	prodl,f,c
  2298  001D1A  0E00               	movlw	0
  2299  001D1C  22F4               	addwfc	prodh,f,c
  2300  001D1E  0E44               	movlw	low _rxBuffer
  2301  001D20  24F3               	addwf	prodl,w,c
  2302  001D22  6ED9               	movwf	fsr2l,c
  2303  001D24  0E01               	movlw	high _rxBuffer
  2304  001D26  20F4               	addwfc	prodh,w,c
  2305  001D28  6EDA               	movwf	fsr2h,c
  2306  001D2A  0100               	movlb	0	; () banked
  2307  001D2C  EE10 F001          	lfsr	1,1
  2308  001D30  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  2309  001D32  26E1               	addwf	fsr1l,f,c
  2310  001D34  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  2311  001D36  22E2               	addwfc	fsr1h,f,c
  2312  001D38  CFDE FFE6          	movff	postinc2,postinc1
  2313  001D3C  CFDE FFE6          	movff	postinc2,postinc1
  2314  001D40  CFDE FFE6          	movff	postinc2,postinc1
  2315  001D44  CFDE FFE6          	movff	postinc2,postinc1
  2316                           
  2317                           ;can.c: 178: msgPtr->rtr = rxBuffer[rxBufferPtrOut].rtr;
  2318  001D48  0100               	movlb	0	; () banked
  2319  001D4A  51AD               	movf	_rxBufferPtrOut& (0+255),w,b
  2320  001D4C  0D11               	mullw	17
  2321  001D4E  0E0E               	movlw	14
  2322  001D50  26F3               	addwf	prodl,f,c
  2323  001D52  0E00               	movlw	0
  2324  001D54  22F4               	addwfc	prodh,f,c
  2325  001D56  0E44               	movlw	low _rxBuffer
  2326  001D58  24F3               	addwf	prodl,w,c
  2327  001D5A  6ED9               	movwf	fsr2l,c
  2328  001D5C  0E01               	movlw	high _rxBuffer
  2329  001D5E  20F4               	addwfc	prodh,w,c
  2330  001D60  6EDA               	movwf	fsr2h,c
  2331  001D62  0100               	movlb	0	; () banked
  2332  001D64  EE10 F00E          	lfsr	1,14
  2333  001D68  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  2334  001D6A  26E1               	addwf	fsr1l,f,c
  2335  001D6C  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  2336  001D6E  22E2               	addwfc	fsr1h,f,c
  2337  001D70  CFDF FFE7          	movff	indf2,indf1
  2338                           
  2339                           ; BSR set to: 0
  2340                           ;can.c: 179: for(i=0;i< msgPtr->dlc;i++)
  2341  001D74  0E00               	movlw	0
  2342  001D76  0100               	movlb	0	; () banked
  2343  001D78  6F64               	movwf	Can_GetMessage@i& (0+255),b
  2344  001D7A  D031               	goto	l1951
  2345  001D7C                     l1947:
  2346                           
  2347                           ; BSR set to: 0
  2348                           ;can.c: 180: {
  2349                           ;can.c: 181: msgPtr->dta[i] = rxBuffer[rxBufferPtrOut].dta[i];
  2350  001D7C  0100               	movlb	0	; () banked
  2351  001D7E  5164               	movf	Can_GetMessage@i& (0+255),w,b
  2352  001D80  0D01               	mullw	1
  2353  001D82  0E06               	movlw	6
  2354  001D84  26F3               	addwf	prodl,f,c
  2355  001D86  0E00               	movlw	0
  2356  001D88  22F4               	addwfc	prodh,f,c
  2357  001D8A  0E44               	movlw	low _rxBuffer
  2358  001D8C  0100               	movlb	0	; () banked
  2359  001D8E  6F62               	movwf	??_Can_GetMessage& (0+255),b
  2360  001D90  0E01               	movlw	high _rxBuffer
  2361  001D92  0100               	movlb	0	; () banked
  2362  001D94  6F63               	movwf	(??_Can_GetMessage+1)& (0+255),b
  2363  001D96  50F3               	movf	prodl,w,c
  2364  001D98  0100               	movlb	0	; () banked
  2365  001D9A  2762               	addwf	??_Can_GetMessage& (0+255),f,b
  2366  001D9C  50F4               	movf	prodh,w,c
  2367  001D9E  0100               	movlb	0	; () banked
  2368  001DA0  2363               	addwfc	(??_Can_GetMessage+1)& (0+255),f,b
  2369  001DA2  0100               	movlb	0	; () banked
  2370  001DA4  51AD               	movf	_rxBufferPtrOut& (0+255),w,b
  2371  001DA6  0D11               	mullw	17
  2372  001DA8  50F3               	movf	prodl,w,c
  2373  001DAA  0100               	movlb	0	; () banked
  2374  001DAC  2562               	addwf	??_Can_GetMessage& (0+255),w,b
  2375  001DAE  6ED9               	movwf	fsr2l,c
  2376  001DB0  50F4               	movf	prodh,w,c
  2377  001DB2  0100               	movlb	0	; () banked
  2378  001DB4  2163               	addwfc	(??_Can_GetMessage+1)& (0+255),w,b
  2379  001DB6  6EDA               	movwf	fsr2h,c
  2380  001DB8  0100               	movlb	0	; () banked
  2381  001DBA  5164               	movf	Can_GetMessage@i& (0+255),w,b
  2382  001DBC  0D01               	mullw	1
  2383  001DBE  0E06               	movlw	6
  2384  001DC0  26F3               	addwf	prodl,f,c
  2385  001DC2  0E00               	movlw	0
  2386  001DC4  22F4               	addwfc	prodh,f,c
  2387  001DC6  50F3               	movf	prodl,w,c
  2388  001DC8  0100               	movlb	0	; () banked
  2389  001DCA  2560               	addwf	Can_GetMessage@msgPtr& (0+255),w,b
  2390  001DCC  6EE1               	movwf	fsr1l,c
  2391  001DCE  50F4               	movf	prodh,w,c
  2392  001DD0  0100               	movlb	0	; () banked
  2393  001DD2  2161               	addwfc	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  2394  001DD4  6EE2               	movwf	fsr1h,c
  2395  001DD6  CFDF FFE7          	movff	indf2,indf1
  2396                           
  2397                           ; BSR set to: 0
  2398  001DDA  0100               	movlb	0	; () banked
  2399  001DDC  2B64               	incf	Can_GetMessage@i& (0+255),f,b
  2400  001DDE                     l1951:
  2401                           
  2402                           ; BSR set to: 0
  2403  001DDE  0100               	movlb	0	; () banked
  2404  001DE0  EE20 F005          	lfsr	2,5
  2405  001DE4  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  2406  001DE6  26D9               	addwf	fsr2l,f,c
  2407  001DE8  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  2408  001DEA  22DA               	addwfc	fsr2h,f,c
  2409  001DEC  50DE               	movf	postinc2,w,c
  2410  001DEE  0100               	movlb	0	; () banked
  2411  001DF0  5D64               	subwf	Can_GetMessage@i& (0+255),w,b
  2412  001DF2  A0D8               	btfss	status,0,c
  2413  001DF4  D7C3               	goto	l1947
  2414                           
  2415                           ; BSR set to: 0
  2416                           ;can.c: 182: }
  2417                           ;can.c: 183: INT3IE = 0;
  2418  001DF6  9AF0               	bcf	intcon3,5,c	;volatile
  2419                           
  2420                           ; BSR set to: 0
  2421                           ;can.c: 184: rxBufferPtrOut = (rxBufferPtrOut + 1) % 4;
  2422  001DF8  0100               	movlb	0	; () banked
  2423  001DFA  29AD               	incf	_rxBufferPtrOut& (0+255),w,b
  2424  001DFC  0B03               	andlw	3
  2425  001DFE  0100               	movlb	0	; () banked
  2426  001E00  6FAD               	movwf	_rxBufferPtrOut& (0+255),b
  2427                           
  2428                           ; BSR set to: 0
  2429                           ;can.c: 185: rxBufferCount--;
  2430  001E02  0659               	decf	_rxBufferCount,f,c
  2431                           
  2432                           ; BSR set to: 0
  2433                           ;can.c: 186: INT3IE = 1;
  2434  001E04  8AF0               	bsf	intcon3,5,c	;volatile
  2435                           
  2436                           ;can.c: 187: return 0;
  2437  001E06  0E00               	movlw	0
  2438                           
  2439                           ; BSR set to: 0
  2440  001E08  0012               	return	
  2441  001E0A                     l1961:
  2442                           
  2443                           ;can.c: 188: }
  2444                           ;can.c: 189: return 1;
  2445  001E0A  0E01               	movlw	1
  2446  001E0C  0012               	return	
  2447  001E0E                     __end_of_Can_GetMessage:
  2448                           	opt stack 0
  2449                           tblptru	equ	0xFF8
  2450                           tblptrh	equ	0xFF7
  2451                           tblptrl	equ	0xFF6
  2452                           tablat	equ	0xFF5
  2453                           prodh	equ	0xFF4
  2454                           prodl	equ	0xFF3
  2455                           intcon	equ	0xFF2
  2456                           intcon3	equ	0xFF0
  2457                           postinc0	equ	0xFEE
  2458                           wreg	equ	0xFE8
  2459                           indf1	equ	0xFE7
  2460                           postinc1	equ	0xFE6
  2461                           postdec1	equ	0xFE5
  2462                           fsr1h	equ	0xFE2
  2463                           fsr1l	equ	0xFE1
  2464                           indf2	equ	0xFDF
  2465                           postinc2	equ	0xFDE
  2466                           fsr2h	equ	0xFDA
  2467                           fsr2l	equ	0xFD9
  2468                           status	equ	0xFD8
  2469                           
  2470 ;; *************** function _Can_Init *****************
  2471 ;; Defined at:
  2472 ;;		line 237 in file "can.c"
  2473 ;; Parameters:    Size  Location     Type
  2474 ;;  speedCfg        2   60[BANK0 ] PTR const struct CANSPEE
  2475 ;;		 -> canSpeed125k(7), 
  2476 ;;  filterCfg       2   62[BANK0 ] PTR struct CANFILTER
  2477 ;;		 -> filter(33), 
  2478 ;; Auto vars:     Size  Location     Type
  2479 ;;		None
  2480 ;; Return value:  Size  Location     Type
  2481 ;;                  1    wreg      void 
  2482 ;; Registers used:
  2483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2484 ;; Tracked objects:
  2485 ;;		On entry : 0/0
  2486 ;;		On exit  : 0/0
  2487 ;;		Unchanged: 0/0
  2488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2489 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2492 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2493 ;;Total ram usage:        4 bytes
  2494 ;; Hardware stack levels used:    1
  2495 ;; Hardware stack levels required when called:   12
  2496 ;; This function calls:
  2497 ;;		_Mcp2515_Init
  2498 ;; This function is called by:
  2499 ;;		_init
  2500 ;; This function uses a non-reentrant model
  2501 ;;
  2502                           
  2503                           	psect	text8
  2504  0027F0                     __ptext8:
  2505                           	opt stack 0
  2506  0027F0                     _Can_Init:
  2507                           	opt stack 17
  2508                           
  2509                           ;can.c: 240: TRISF6 = 0;
  2510                           
  2511                           ;incstack = 0
  2512  0027F0  9C97               	bcf	3991,6,c	;volatile
  2513                           
  2514                           ;can.c: 241: TRISF7 = 0;
  2515  0027F2  9E97               	bcf	3991,7,c	;volatile
  2516                           
  2517                           ;can.c: 242: LATF6 = 1;
  2518  0027F4  8C8E               	bsf	3982,6,c	;volatile
  2519                           
  2520                           ;can.c: 243: LATF7 = 0;
  2521  0027F6  9E8E               	bcf	3982,7,c	;volatile
  2522                           
  2523                           ;can.c: 244: TRISC4 = 1;
  2524  0027F8  8894               	bsf	3988,4,c	;volatile
  2525                           
  2526                           ;can.c: 245: TRISC5 = 0;
  2527  0027FA  9A94               	bcf	3988,5,c	;volatile
  2528                           
  2529                           ;can.c: 246: TRISC3 = 0;
  2530  0027FC  9694               	bcf	3988,3,c	;volatile
  2531                           
  2532                           ;can.c: 247: TRISD1 = 0;
  2533  0027FE  9295               	bcf	3989,1,c	;volatile
  2534                           
  2535                           ;can.c: 251: CKE1 = 0;
  2536  002800  9CC7               	bcf	4039,6,c	;volatile
  2537                           
  2538                           ;can.c: 252: CKP1 = 1;
  2539  002802  88C6               	bsf	4038,4,c	;volatile
  2540                           
  2541                           ;can.c: 253: SSPCON1 = 0b00111010;
  2542  002804  0E3A               	movlw	58
  2543  002806  6EC6               	movwf	4038,c	;volatile
  2544                           
  2545                           ;can.c: 254: SSPEN1 = 1;
  2546  002808  8AC6               	bsf	4038,5,c	;volatile
  2547                           
  2548                           ;can.c: 258: Mcp2515_Init(speedCfg,filterCfg);
  2549  00280A  C09C  F083         	movff	Can_Init@speedCfg,Mcp2515_Init@speedCfg
  2550  00280E  C09D  F084         	movff	Can_Init@speedCfg+1,Mcp2515_Init@speedCfg+1
  2551  002812  C09E  F085         	movff	Can_Init@filterCfg,Mcp2515_Init@filterCfg
  2552  002816  C09F  F086         	movff	Can_Init@filterCfg+1,Mcp2515_Init@filterCfg+1
  2553  00281A  EC21  F008         	call	_Mcp2515_Init	;wreg free
  2554                           
  2555                           ;can.c: 259: INT3IE = 1;
  2556  00281E  8AF0               	bsf	intcon3,5,c	;volatile
  2557                           
  2558                           ;can.c: 260: INTEDG3 = 0;
  2559  002820  96F1               	bcf	intcon2,3,c	;volatile
  2560                           
  2561                           ;can.c: 264: PEIE = 1;
  2562  002822  8CF2               	bsf	intcon,6,c	;volatile
  2563                           
  2564                           ;can.c: 265: GIE = 1;
  2565  002824  8EF2               	bsf	intcon,7,c	;volatile
  2566  002826  0012               	return		;funcret
  2567  002828                     __end_of_Can_Init:
  2568                           	opt stack 0
  2569                           tblptru	equ	0xFF8
  2570                           tblptrh	equ	0xFF7
  2571                           tblptrl	equ	0xFF6
  2572                           tablat	equ	0xFF5
  2573                           prodh	equ	0xFF4
  2574                           prodl	equ	0xFF3
  2575                           intcon	equ	0xFF2
  2576                           intcon2	equ	0xFF1
  2577                           intcon3	equ	0xFF0
  2578                           postinc0	equ	0xFEE
  2579                           wreg	equ	0xFE8
  2580                           indf1	equ	0xFE7
  2581                           postinc1	equ	0xFE6
  2582                           postdec1	equ	0xFE5
  2583                           fsr1h	equ	0xFE2
  2584                           fsr1l	equ	0xFE1
  2585                           indf2	equ	0xFDF
  2586                           postinc2	equ	0xFDE
  2587                           fsr2h	equ	0xFDA
  2588                           fsr2l	equ	0xFD9
  2589                           status	equ	0xFD8
  2590                           
  2591 ;; *************** function _Mcp2515_Init *****************
  2592 ;; Defined at:
  2593 ;;		line 38 in file "mcp2515.c"
  2594 ;; Parameters:    Size  Location     Type
  2595 ;;  speedCfg        2   35[BANK0 ] PTR const struct CANSPEE
  2596 ;;		 -> canSpeed125k(7), 
  2597 ;;  filterCfg       2   37[BANK0 ] PTR struct CANFILTER
  2598 ;;		 -> filter(33), 
  2599 ;; Auto vars:     Size  Location     Type
  2600 ;;  cmdMask4        4   53[BANK0 ] unsigned char [4]
  2601 ;;  cmdWrite3       3   57[BANK0 ] unsigned char [3]
  2602 ;;  i               1   52[BANK0 ] unsigned char 
  2603 ;; Return value:  Size  Location     Type
  2604 ;;                  1    wreg      void 
  2605 ;; Registers used:
  2606 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2607 ;; Tracked objects:
  2608 ;;		On entry : 0/0
  2609 ;;		On exit  : 0/0
  2610 ;;		Unchanged: 0/0
  2611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2612 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2613 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2614 ;;      Temps:          0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2615 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2616 ;;Total ram usage:       25 bytes
  2617 ;; Hardware stack levels used:    1
  2618 ;; Hardware stack levels required when called:   11
  2619 ;; This function calls:
  2620 ;;		_Mcp2515WriteCanId
  2621 ;;		_Mcp2515_Reset
  2622 ;;		_Spi_Write
  2623 ;; This function is called by:
  2624 ;;		_Can_Init
  2625 ;; This function uses a non-reentrant model
  2626 ;;
  2627                           
  2628                           	psect	text9
  2629  001042                     __ptext9:
  2630                           	opt stack 0
  2631  001042                     _Mcp2515_Init:
  2632                           	opt stack 17
  2633                           
  2634                           ;mcp2515.c: 40: uint8_t i;
  2635                           ;mcp2515.c: 41: uint8_t cmdMask4[]={0x05,0x0F,0xE0,0x80};
  2636                           
  2637                           ;incstack = 0
  2638  001042  C0E8  F095         	movff	Mcp2515_Init@F8112,Mcp2515_Init@cmdMask4
  2639  001046  C0E9  F096         	movff	Mcp2515_Init@F8112+1,Mcp2515_Init@cmdMask4+1
  2640  00104A  C0EA  F097         	movff	Mcp2515_Init@F8112+2,Mcp2515_Init@cmdMask4+2
  2641  00104E  C0EB  F098         	movff	Mcp2515_Init@F8112+3,Mcp2515_Init@cmdMask4+3
  2642                           
  2643                           ;mcp2515.c: 42: uint8_t cmdWrite3[]={0x02,0,0};
  2644  001052  C0F3  F099         	movff	Mcp2515_Init@F8114,Mcp2515_Init@cmdWrite3
  2645  001056  C0F4  F09A         	movff	Mcp2515_Init@F8114+1,Mcp2515_Init@cmdWrite3+1
  2646  00105A  C0F5  F09B         	movff	Mcp2515_Init@F8114+2,Mcp2515_Init@cmdWrite3+2
  2647                           
  2648                           ;mcp2515.c: 44: Mcp2515_Reset();
  2649  00105E  ECB0  F012         	call	_Mcp2515_Reset	;wreg free
  2650                           
  2651                           ;mcp2515.c: 48: Spi_Write(cmdMask4,sizeof(cmdMask4));
  2652  001062  0E95               	movlw	low Mcp2515_Init@cmdMask4
  2653  001064  0100               	movlb	0	; () banked
  2654  001066  6F6C               	movwf	Spi_Write@tx& (0+255),b
  2655  001068  0E00               	movlw	high Mcp2515_Init@cmdMask4
  2656  00106A  0100               	movlb	0	; () banked
  2657  00106C  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  2658  00106E  0E04               	movlw	4
  2659  001070  0100               	movlb	0	; () banked
  2660  001072  6F6E               	movwf	Spi_Write@size& (0+255),b
  2661  001074  0E00               	movlw	0
  2662  001076  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  2663  001078  0E00               	movlw	0
  2664  00107A  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  2665  00107C  0E00               	movlw	0
  2666  00107E  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  2667  001080  EC2F  F014         	call	_Spi_Write	;wreg free
  2668                           
  2669                           ;mcp2515.c: 52: cmdWrite3[1] = 0x2A;
  2670  001084  0E2A               	movlw	42
  2671  001086  0100               	movlb	0	; () banked
  2672  001088  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  2673                           
  2674                           ; BSR set to: 0
  2675                           ;mcp2515.c: 53: cmdWrite3[2] = speedCfg->brp | speedCfg->sjw << 6;
  2676  00108A  C083  FFF6         	movff	Mcp2515_Init@speedCfg,tblptrl
  2677  00108E  C084  FFF7         	movff	Mcp2515_Init@speedCfg+1,tblptrh
  2678  001092                     	if	0	;tblptru may be non-zero
  2679  001092                     	endif
  2680  001092                     	if	0	;tblptru may be non-zero
  2681  001092                     	endif
  2682  001092  0008               	tblrd		*
  2683  001094  CFF5 F087          	movff	tablat,??_Mcp2515_Init
  2684  001098  0E01               	movlw	1
  2685  00109A  0100               	movlb	0	; () banked
  2686  00109C  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  2687  00109E  0100               	movlb	0	; () banked
  2688  0010A0  6F88               	movwf	(??_Mcp2515_Init+1)& (0+255),b
  2689  0010A2  0E00               	movlw	0
  2690  0010A4  0100               	movlb	0	; () banked
  2691  0010A6  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  2692  0010A8  0100               	movlb	0	; () banked
  2693  0010AA  6F89               	movwf	(??_Mcp2515_Init+2)& (0+255),b
  2694  0010AC  C088  FFF6         	movff	??_Mcp2515_Init+1,tblptrl
  2695  0010B0  C089  FFF7         	movff	??_Mcp2515_Init+2,tblptrh
  2696  0010B4                     	if	0	;tblptru may be non-zero
  2697  0010B4                     	endif
  2698  0010B4                     	if	0	;tblptru may be non-zero
  2699  0010B4                     	endif
  2700  0010B4  0008               	tblrd		*
  2701  0010B6  CFF5 F08A          	movff	tablat,??_Mcp2515_Init+3
  2702  0010BA  0E06               	movlw	6
  2703  0010BC  0100               	movlb	0	; () banked
  2704  0010BE  6F8B               	movwf	(??_Mcp2515_Init+4)& (0+255),b
  2705  0010C0                     u1025:
  2706  0010C0  0100               	movlb	0	; () banked
  2707  0010C2  90D8               	bcf	status,0,c
  2708  0010C4  378A               	rlcf	(??_Mcp2515_Init+3)& (0+255),f,b
  2709  0010C6  0100               	movlb	0	; () banked
  2710  0010C8  2F8B               	decfsz	(??_Mcp2515_Init+4)& (0+255),f,b
  2711  0010CA  D7FA               	goto	u1025
  2712  0010CC  0100               	movlb	0	; () banked
  2713  0010CE  518A               	movf	(??_Mcp2515_Init+3)& (0+255),w,b
  2714  0010D0  0100               	movlb	0	; () banked
  2715  0010D2  1187               	iorwf	??_Mcp2515_Init& (0+255),w,b
  2716  0010D4  0100               	movlb	0	; () banked
  2717  0010D6  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  2718                           
  2719                           ; BSR set to: 0
  2720                           ;mcp2515.c: 54: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  2721  0010D8  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  2722  0010DA  0100               	movlb	0	; () banked
  2723  0010DC  6F6C               	movwf	Spi_Write@tx& (0+255),b
  2724  0010DE  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  2725  0010E0  0100               	movlb	0	; () banked
  2726  0010E2  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  2727  0010E4  0E03               	movlw	3
  2728  0010E6  0100               	movlb	0	; () banked
  2729  0010E8  6F6E               	movwf	Spi_Write@size& (0+255),b
  2730  0010EA  0E00               	movlw	0
  2731  0010EC  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  2732  0010EE  0E00               	movlw	0
  2733  0010F0  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  2734  0010F2  0E00               	movlw	0
  2735  0010F4  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  2736  0010F6  EC2F  F014         	call	_Spi_Write	;wreg free
  2737                           
  2738                           ;mcp2515.c: 56: cmdWrite3[1] = 0x29;
  2739  0010FA  0E29               	movlw	41
  2740  0010FC  0100               	movlb	0	; () banked
  2741  0010FE  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  2742                           
  2743                           ;mcp2515.c: 57: cmdWrite3[2] = speedCfg->prseg
  2744                           ;mcp2515.c: 58: | speedCfg->phseg1 << 3
  2745                           ;mcp2515.c: 59: | speedCfg->sam << 6
  2746                           ;mcp2515.c: 60: | speedCfg->btlmode << 7;
  2747  001100  0E02               	movlw	2
  2748  001102  0100               	movlb	0	; () banked
  2749  001104  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  2750  001106  0100               	movlb	0	; () banked
  2751  001108  6F87               	movwf	??_Mcp2515_Init& (0+255),b
  2752  00110A  0E00               	movlw	0
  2753  00110C  0100               	movlb	0	; () banked
  2754  00110E  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  2755  001110  0100               	movlb	0	; () banked
  2756  001112  6F88               	movwf	(??_Mcp2515_Init+1)& (0+255),b
  2757  001114  C087  FFF6         	movff	??_Mcp2515_Init,tblptrl
  2758  001118  C088  FFF7         	movff	??_Mcp2515_Init+1,tblptrh
  2759  00111C                     	if	0	;tblptru may be non-zero
  2760  00111C                     	endif
  2761  00111C                     	if	0	;tblptru may be non-zero
  2762  00111C                     	endif
  2763  00111C  0008               	tblrd		*
  2764  00111E  CFF5 F089          	movff	tablat,??_Mcp2515_Init+2
  2765  001122  0E06               	movlw	6
  2766  001124  0100               	movlb	0	; () banked
  2767  001126  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  2768  001128  0100               	movlb	0	; () banked
  2769  00112A  6F8A               	movwf	(??_Mcp2515_Init+3)& (0+255),b
  2770  00112C  0E00               	movlw	0
  2771  00112E  0100               	movlb	0	; () banked
  2772  001130  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  2773  001132  0100               	movlb	0	; () banked
  2774  001134  6F8B               	movwf	(??_Mcp2515_Init+4)& (0+255),b
  2775  001136  C08A  FFF6         	movff	??_Mcp2515_Init+3,tblptrl
  2776  00113A  C08B  FFF7         	movff	??_Mcp2515_Init+4,tblptrh
  2777  00113E                     	if	0	;tblptru may be non-zero
  2778  00113E                     	endif
  2779  00113E                     	if	0	;tblptru may be non-zero
  2780  00113E                     	endif
  2781  00113E  0008               	tblrd		*
  2782  001140  CFF5 F08C          	movff	tablat,??_Mcp2515_Init+5
  2783  001144  0E00               	movlw	0
  2784  001146  B18C               	btfsc	(??_Mcp2515_Init+5)& (0+255),0,b
  2785  001148  0E80               	movlw	128
  2786  00114A  6F8C               	movwf	(??_Mcp2515_Init+5)& (0+255),b
  2787  00114C  0E05               	movlw	5
  2788  00114E  0100               	movlb	0	; () banked
  2789  001150  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  2790  001152  0100               	movlb	0	; () banked
  2791  001154  6F8D               	movwf	(??_Mcp2515_Init+6)& (0+255),b
  2792  001156  0E00               	movlw	0
  2793  001158  0100               	movlb	0	; () banked
  2794  00115A  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  2795  00115C  0100               	movlb	0	; () banked
  2796  00115E  6F8E               	movwf	(??_Mcp2515_Init+7)& (0+255),b
  2797  001160  C08D  FFF6         	movff	??_Mcp2515_Init+6,tblptrl
  2798  001164  C08E  FFF7         	movff	??_Mcp2515_Init+7,tblptrh
  2799  001168                     	if	0	;tblptru may be non-zero
  2800  001168                     	endif
  2801  001168                     	if	0	;tblptru may be non-zero
  2802  001168                     	endif
  2803  001168  0008               	tblrd		*
  2804  00116A  CFF5 F08F          	movff	tablat,??_Mcp2515_Init+8
  2805  00116E  0E06               	movlw	6
  2806  001170  0100               	movlb	0	; () banked
  2807  001172  6F90               	movwf	(??_Mcp2515_Init+9)& (0+255),b
  2808  001174                     u1035:
  2809  001174  0100               	movlb	0	; () banked
  2810  001176  90D8               	bcf	status,0,c
  2811  001178  378F               	rlcf	(??_Mcp2515_Init+8)& (0+255),f,b
  2812  00117A  0100               	movlb	0	; () banked
  2813  00117C  2F90               	decfsz	(??_Mcp2515_Init+9)& (0+255),f,b
  2814  00117E  D7FA               	goto	u1035
  2815  001180  0E03               	movlw	3
  2816  001182  0100               	movlb	0	; () banked
  2817  001184  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  2818  001186  0100               	movlb	0	; () banked
  2819  001188  6F91               	movwf	(??_Mcp2515_Init+10)& (0+255),b
  2820  00118A  0E00               	movlw	0
  2821  00118C  0100               	movlb	0	; () banked
  2822  00118E  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  2823  001190  0100               	movlb	0	; () banked
  2824  001192  6F92               	movwf	(??_Mcp2515_Init+11)& (0+255),b
  2825  001194  C091  FFF6         	movff	??_Mcp2515_Init+10,tblptrl
  2826  001198  C092  FFF7         	movff	??_Mcp2515_Init+11,tblptrh
  2827  00119C                     	if	0	;tblptru may be non-zero
  2828  00119C                     	endif
  2829  00119C                     	if	0	;tblptru may be non-zero
  2830  00119C                     	endif
  2831  00119C  0008               	tblrd		*
  2832  00119E  CFF5 F093          	movff	tablat,??_Mcp2515_Init+12
  2833  0011A2  0100               	movlb	0	; () banked
  2834  0011A4  90D8               	bcf	status,0,c
  2835  0011A6  3793               	rlcf	(??_Mcp2515_Init+12)& (0+255),f,b
  2836  0011A8  0100               	movlb	0	; () banked
  2837  0011AA  90D8               	bcf	status,0,c
  2838  0011AC  3793               	rlcf	(??_Mcp2515_Init+12)& (0+255),f,b
  2839  0011AE  0100               	movlb	0	; () banked
  2840  0011B0  90D8               	bcf	status,0,c
  2841  0011B2  3593               	rlcf	(??_Mcp2515_Init+12)& (0+255),w,b
  2842  0011B4  0100               	movlb	0	; () banked
  2843  0011B6  118F               	iorwf	(??_Mcp2515_Init+8)& (0+255),w,b
  2844  0011B8  0100               	movlb	0	; () banked
  2845  0011BA  118C               	iorwf	(??_Mcp2515_Init+5)& (0+255),w,b
  2846  0011BC  0100               	movlb	0	; () banked
  2847  0011BE  1189               	iorwf	(??_Mcp2515_Init+2)& (0+255),w,b
  2848  0011C0  0100               	movlb	0	; () banked
  2849  0011C2  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;mcp2515.c: 61: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  2853  0011C4  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  2854  0011C6  0100               	movlb	0	; () banked
  2855  0011C8  6F6C               	movwf	Spi_Write@tx& (0+255),b
  2856  0011CA  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  2857  0011CC  0100               	movlb	0	; () banked
  2858  0011CE  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  2859  0011D0  0E03               	movlw	3
  2860  0011D2  0100               	movlb	0	; () banked
  2861  0011D4  6F6E               	movwf	Spi_Write@size& (0+255),b
  2862  0011D6  0E00               	movlw	0
  2863  0011D8  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  2864  0011DA  0E00               	movlw	0
  2865  0011DC  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  2866  0011DE  0E00               	movlw	0
  2867  0011E0  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  2868  0011E2  EC2F  F014         	call	_Spi_Write	;wreg free
  2869                           
  2870                           ;mcp2515.c: 63: cmdWrite3[1] = 0x28;
  2871  0011E6  0E28               	movlw	40
  2872  0011E8  0100               	movlb	0	; () banked
  2873  0011EA  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;mcp2515.c: 64: cmdWrite3[2] = speedCfg->phseg2 | speedCfg->sjw << 6;
  2877  0011EC  0E04               	movlw	4
  2878  0011EE  0100               	movlb	0	; () banked
  2879  0011F0  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  2880  0011F2  0100               	movlb	0	; () banked
  2881  0011F4  6F87               	movwf	??_Mcp2515_Init& (0+255),b
  2882  0011F6  0E00               	movlw	0
  2883  0011F8  0100               	movlb	0	; () banked
  2884  0011FA  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  2885  0011FC  0100               	movlb	0	; () banked
  2886  0011FE  6F88               	movwf	(??_Mcp2515_Init+1)& (0+255),b
  2887  001200  C087  FFF6         	movff	??_Mcp2515_Init,tblptrl
  2888  001204  C088  FFF7         	movff	??_Mcp2515_Init+1,tblptrh
  2889  001208                     	if	0	;tblptru may be non-zero
  2890  001208                     	endif
  2891  001208                     	if	0	;tblptru may be non-zero
  2892  001208                     	endif
  2893  001208  0008               	tblrd		*
  2894  00120A  CFF5 F089          	movff	tablat,??_Mcp2515_Init+2
  2895  00120E  0E01               	movlw	1
  2896  001210  0100               	movlb	0	; () banked
  2897  001212  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  2898  001214  0100               	movlb	0	; () banked
  2899  001216  6F8A               	movwf	(??_Mcp2515_Init+3)& (0+255),b
  2900  001218  0E00               	movlw	0
  2901  00121A  0100               	movlb	0	; () banked
  2902  00121C  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  2903  00121E  0100               	movlb	0	; () banked
  2904  001220  6F8B               	movwf	(??_Mcp2515_Init+4)& (0+255),b
  2905  001222  C08A  FFF6         	movff	??_Mcp2515_Init+3,tblptrl
  2906  001226  C08B  FFF7         	movff	??_Mcp2515_Init+4,tblptrh
  2907  00122A                     	if	0	;tblptru may be non-zero
  2908  00122A                     	endif
  2909  00122A                     	if	0	;tblptru may be non-zero
  2910  00122A                     	endif
  2911  00122A  0008               	tblrd		*
  2912  00122C  CFF5 F08C          	movff	tablat,??_Mcp2515_Init+5
  2913  001230  0E06               	movlw	6
  2914  001232  0100               	movlb	0	; () banked
  2915  001234  6F8D               	movwf	(??_Mcp2515_Init+6)& (0+255),b
  2916  001236                     u1045:
  2917  001236  0100               	movlb	0	; () banked
  2918  001238  90D8               	bcf	status,0,c
  2919  00123A  378C               	rlcf	(??_Mcp2515_Init+5)& (0+255),f,b
  2920  00123C  0100               	movlb	0	; () banked
  2921  00123E  2F8D               	decfsz	(??_Mcp2515_Init+6)& (0+255),f,b
  2922  001240  D7FA               	goto	u1045
  2923  001242  0100               	movlb	0	; () banked
  2924  001244  518C               	movf	(??_Mcp2515_Init+5)& (0+255),w,b
  2925  001246  0100               	movlb	0	; () banked
  2926  001248  1189               	iorwf	(??_Mcp2515_Init+2)& (0+255),w,b
  2927  00124A  0100               	movlb	0	; () banked
  2928  00124C  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  2929                           
  2930                           ; BSR set to: 0
  2931                           ;mcp2515.c: 65: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  2932  00124E  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  2933  001250  0100               	movlb	0	; () banked
  2934  001252  6F6C               	movwf	Spi_Write@tx& (0+255),b
  2935  001254  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  2936  001256  0100               	movlb	0	; () banked
  2937  001258  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  2938  00125A  0E03               	movlw	3
  2939  00125C  0100               	movlb	0	; () banked
  2940  00125E  6F6E               	movwf	Spi_Write@size& (0+255),b
  2941  001260  0E00               	movlw	0
  2942  001262  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  2943  001264  0E00               	movlw	0
  2944  001266  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  2945  001268  0E00               	movlw	0
  2946  00126A  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  2947  00126C  EC2F  F014         	call	_Spi_Write	;wreg free
  2948                           
  2949                           ;mcp2515.c: 69: Mcp2515WriteCanId(0x20,filterCfg->ext,filterCfg->mask0);
  2950  001270  0100               	movlb	0	; () banked
  2951  001272  EE20 F020          	lfsr	2,32
  2952  001276  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2953  001278  26D9               	addwf	fsr2l,f,c
  2954  00127A  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2955  00127C  22DA               	addwfc	fsr2h,f,c
  2956  00127E  50DF               	movf	indf2,w,c
  2957  001280  0100               	movlb	0	; () banked
  2958  001282  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  2959  001284  C085  FFD9         	movff	Mcp2515_Init@filterCfg,fsr2l
  2960  001288  C086  FFDA         	movff	Mcp2515_Init@filterCfg+1,fsr2h
  2961  00128C  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  2962  001290  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  2963  001294  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  2964  001298  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  2965  00129C  0E20               	movlw	32
  2966  00129E  EC22  F010         	call	_Mcp2515WriteCanId
  2967                           
  2968                           ;mcp2515.c: 70: Mcp2515WriteCanId(0x24,filterCfg->ext,filterCfg->mask1);
  2969  0012A2  0100               	movlb	0	; () banked
  2970  0012A4  EE20 F020          	lfsr	2,32
  2971  0012A8  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2972  0012AA  26D9               	addwf	fsr2l,f,c
  2973  0012AC  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2974  0012AE  22DA               	addwfc	fsr2h,f,c
  2975  0012B0  50DF               	movf	indf2,w,c
  2976  0012B2  0100               	movlb	0	; () banked
  2977  0012B4  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  2978  0012B6  0100               	movlb	0	; () banked
  2979  0012B8  EE20 F004          	lfsr	2,4
  2980  0012BC  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2981  0012BE  26D9               	addwf	fsr2l,f,c
  2982  0012C0  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2983  0012C2  22DA               	addwfc	fsr2h,f,c
  2984  0012C4  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  2985  0012C8  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  2986  0012CC  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  2987  0012D0  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  2988  0012D4  0E24               	movlw	36
  2989  0012D6  EC22  F010         	call	_Mcp2515WriteCanId
  2990                           
  2991                           ;mcp2515.c: 71: Mcp2515WriteCanId(0x00,filterCfg->ext,filterCfg->filter0);
  2992  0012DA  0100               	movlb	0	; () banked
  2993  0012DC  EE20 F020          	lfsr	2,32
  2994  0012E0  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2995  0012E2  26D9               	addwf	fsr2l,f,c
  2996  0012E4  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2997  0012E6  22DA               	addwfc	fsr2h,f,c
  2998  0012E8  50DF               	movf	indf2,w,c
  2999  0012EA  0100               	movlb	0	; () banked
  3000  0012EC  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3001  0012EE  0100               	movlb	0	; () banked
  3002  0012F0  EE20 F008          	lfsr	2,8
  3003  0012F4  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3004  0012F6  26D9               	addwf	fsr2l,f,c
  3005  0012F8  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3006  0012FA  22DA               	addwfc	fsr2h,f,c
  3007  0012FC  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3008  001300  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3009  001304  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3010  001308  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3011  00130C  0E00               	movlw	0
  3012  00130E  EC22  F010         	call	_Mcp2515WriteCanId
  3013                           
  3014                           ;mcp2515.c: 72: Mcp2515WriteCanId(0x04,filterCfg->ext,filterCfg->filter1);
  3015  001312  0100               	movlb	0	; () banked
  3016  001314  EE20 F020          	lfsr	2,32
  3017  001318  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3018  00131A  26D9               	addwf	fsr2l,f,c
  3019  00131C  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3020  00131E  22DA               	addwfc	fsr2h,f,c
  3021  001320  50DF               	movf	indf2,w,c
  3022  001322  0100               	movlb	0	; () banked
  3023  001324  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3024  001326  0100               	movlb	0	; () banked
  3025  001328  EE20 F00C          	lfsr	2,12
  3026  00132C  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3027  00132E  26D9               	addwf	fsr2l,f,c
  3028  001330  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3029  001332  22DA               	addwfc	fsr2h,f,c
  3030  001334  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3031  001338  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3032  00133C  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3033  001340  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3034  001344  0E04               	movlw	4
  3035  001346  EC22  F010         	call	_Mcp2515WriteCanId
  3036                           
  3037                           ;mcp2515.c: 73: Mcp2515WriteCanId(0x08,filterCfg->ext,filterCfg->filter2);
  3038  00134A  0100               	movlb	0	; () banked
  3039  00134C  EE20 F020          	lfsr	2,32
  3040  001350  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3041  001352  26D9               	addwf	fsr2l,f,c
  3042  001354  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3043  001356  22DA               	addwfc	fsr2h,f,c
  3044  001358  50DF               	movf	indf2,w,c
  3045  00135A  0100               	movlb	0	; () banked
  3046  00135C  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3047  00135E  0100               	movlb	0	; () banked
  3048  001360  EE20 F010          	lfsr	2,16
  3049  001364  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3050  001366  26D9               	addwf	fsr2l,f,c
  3051  001368  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3052  00136A  22DA               	addwfc	fsr2h,f,c
  3053  00136C  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3054  001370  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3055  001374  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3056  001378  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3057  00137C  0E08               	movlw	8
  3058  00137E  EC22  F010         	call	_Mcp2515WriteCanId
  3059                           
  3060                           ;mcp2515.c: 74: Mcp2515WriteCanId(0x10,filterCfg->ext,filterCfg->filter3);
  3061  001382  0100               	movlb	0	; () banked
  3062  001384  EE20 F020          	lfsr	2,32
  3063  001388  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3064  00138A  26D9               	addwf	fsr2l,f,c
  3065  00138C  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3066  00138E  22DA               	addwfc	fsr2h,f,c
  3067  001390  50DF               	movf	indf2,w,c
  3068  001392  0100               	movlb	0	; () banked
  3069  001394  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3070  001396  0100               	movlb	0	; () banked
  3071  001398  EE20 F014          	lfsr	2,20
  3072  00139C  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3073  00139E  26D9               	addwf	fsr2l,f,c
  3074  0013A0  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3075  0013A2  22DA               	addwfc	fsr2h,f,c
  3076  0013A4  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3077  0013A8  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3078  0013AC  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3079  0013B0  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3080  0013B4  0E10               	movlw	16
  3081  0013B6  EC22  F010         	call	_Mcp2515WriteCanId
  3082                           
  3083                           ;mcp2515.c: 75: Mcp2515WriteCanId(0x14,filterCfg->ext,filterCfg->filter4);
  3084  0013BA  0100               	movlb	0	; () banked
  3085  0013BC  EE20 F020          	lfsr	2,32
  3086  0013C0  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3087  0013C2  26D9               	addwf	fsr2l,f,c
  3088  0013C4  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3089  0013C6  22DA               	addwfc	fsr2h,f,c
  3090  0013C8  50DF               	movf	indf2,w,c
  3091  0013CA  0100               	movlb	0	; () banked
  3092  0013CC  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3093  0013CE  0100               	movlb	0	; () banked
  3094  0013D0  EE20 F018          	lfsr	2,24
  3095  0013D4  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3096  0013D6  26D9               	addwf	fsr2l,f,c
  3097  0013D8  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3098  0013DA  22DA               	addwfc	fsr2h,f,c
  3099  0013DC  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3100  0013E0  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3101  0013E4  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3102  0013E8  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3103  0013EC  0E14               	movlw	20
  3104  0013EE  EC22  F010         	call	_Mcp2515WriteCanId
  3105                           
  3106                           ;mcp2515.c: 76: Mcp2515WriteCanId(0x18,filterCfg->ext,filterCfg->filter5);
  3107  0013F2  0100               	movlb	0	; () banked
  3108  0013F4  EE20 F020          	lfsr	2,32
  3109  0013F8  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3110  0013FA  26D9               	addwf	fsr2l,f,c
  3111  0013FC  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3112  0013FE  22DA               	addwfc	fsr2h,f,c
  3113  001400  50DF               	movf	indf2,w,c
  3114  001402  0100               	movlb	0	; () banked
  3115  001404  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3116  001406  0100               	movlb	0	; () banked
  3117  001408  EE20 F01C          	lfsr	2,28
  3118  00140C  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3119  00140E  26D9               	addwf	fsr2l,f,c
  3120  001410  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3121  001412  22DA               	addwfc	fsr2h,f,c
  3122  001414  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3123  001418  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3124  00141C  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3125  001420  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3126  001424  0E18               	movlw	24
  3127  001426  EC22  F010         	call	_Mcp2515WriteCanId
  3128                           
  3129                           ;mcp2515.c: 80: cmdWrite3[2] = 0;
  3130  00142A  0E00               	movlw	0
  3131  00142C  0100               	movlb	0	; () banked
  3132  00142E  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  3133                           
  3134                           ;mcp2515.c: 81: for (i = 0; i < 14; i++)
  3135  001430  0E00               	movlw	0
  3136  001432  0100               	movlb	0	; () banked
  3137  001434  6F94               	movwf	Mcp2515_Init@i& (0+255),b
  3138  001436                     l2085:
  3139                           
  3140                           ; BSR set to: 0
  3141  001436  0E0D               	movlw	13
  3142  001438  0100               	movlb	0	; () banked
  3143  00143A  6594               	cpfsgt	Mcp2515_Init@i& (0+255),b
  3144  00143C  D001               	goto	l2089
  3145  00143E  D045               	goto	l2103
  3146  001440                     l2089:
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;mcp2515.c: 82: {
  3150                           ;mcp2515.c: 83: cmdWrite3[1] = 0x30 + i;
  3151  001440  0100               	movlb	0	; () banked
  3152  001442  5194               	movf	Mcp2515_Init@i& (0+255),w,b
  3153  001444  0F30               	addlw	48
  3154  001446  0100               	movlb	0	; () banked
  3155  001448  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;mcp2515.c: 84: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  3159  00144A  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  3160  00144C  0100               	movlb	0	; () banked
  3161  00144E  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3162  001450  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  3163  001452  0100               	movlb	0	; () banked
  3164  001454  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3165  001456  0E03               	movlw	3
  3166  001458  0100               	movlb	0	; () banked
  3167  00145A  6F6E               	movwf	Spi_Write@size& (0+255),b
  3168  00145C  0E00               	movlw	0
  3169  00145E  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3170  001460  0E00               	movlw	0
  3171  001462  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3172  001464  0E00               	movlw	0
  3173  001466  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3174  001468  EC2F  F014         	call	_Spi_Write	;wreg free
  3175                           
  3176                           ;mcp2515.c: 85: cmdWrite3[1] = 0x40 + i;
  3177  00146C  0100               	movlb	0	; () banked
  3178  00146E  5194               	movf	Mcp2515_Init@i& (0+255),w,b
  3179  001470  0F40               	addlw	64
  3180  001472  0100               	movlb	0	; () banked
  3181  001474  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  3182                           
  3183                           ;mcp2515.c: 86: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  3184  001476  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  3185  001478  0100               	movlb	0	; () banked
  3186  00147A  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3187  00147C  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  3188  00147E  0100               	movlb	0	; () banked
  3189  001480  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3190  001482  0E03               	movlw	3
  3191  001484  0100               	movlb	0	; () banked
  3192  001486  6F6E               	movwf	Spi_Write@size& (0+255),b
  3193  001488  0E00               	movlw	0
  3194  00148A  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3195  00148C  0E00               	movlw	0
  3196  00148E  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3197  001490  0E00               	movlw	0
  3198  001492  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3199  001494  EC2F  F014         	call	_Spi_Write	;wreg free
  3200                           
  3201                           ;mcp2515.c: 87: cmdWrite3[1] = 0x50 + i;
  3202  001498  0100               	movlb	0	; () banked
  3203  00149A  5194               	movf	Mcp2515_Init@i& (0+255),w,b
  3204  00149C  0F50               	addlw	80
  3205  00149E  0100               	movlb	0	; () banked
  3206  0014A0  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;mcp2515.c: 88: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  3210  0014A2  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  3211  0014A4  0100               	movlb	0	; () banked
  3212  0014A6  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3213  0014A8  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  3214  0014AA  0100               	movlb	0	; () banked
  3215  0014AC  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3216  0014AE  0E03               	movlw	3
  3217  0014B0  0100               	movlb	0	; () banked
  3218  0014B2  6F6E               	movwf	Spi_Write@size& (0+255),b
  3219  0014B4  0E00               	movlw	0
  3220  0014B6  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3221  0014B8  0E00               	movlw	0
  3222  0014BA  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3223  0014BC  0E00               	movlw	0
  3224  0014BE  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3225  0014C0  EC2F  F014         	call	_Spi_Write	;wreg free
  3226  0014C4  0100               	movlb	0	; () banked
  3227  0014C6  2B94               	incf	Mcp2515_Init@i& (0+255),f,b
  3228  0014C8  D7B6               	goto	l2085
  3229  0014CA                     l2103:
  3230                           
  3231                           ; BSR set to: 0
  3232                           ;mcp2515.c: 89: }
  3233                           ;mcp2515.c: 93: cmdWrite3[2] = 0;
  3234  0014CA  0E00               	movlw	0
  3235  0014CC  0100               	movlb	0	; () banked
  3236  0014CE  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  3237                           
  3238                           ;mcp2515.c: 94: cmdWrite3[1] = 0x60;
  3239  0014D0  0E60               	movlw	96
  3240  0014D2  0100               	movlb	0	; () banked
  3241  0014D4  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  3242                           
  3243                           ; BSR set to: 0
  3244                           ;mcp2515.c: 95: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  3245  0014D6  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  3246  0014D8  0100               	movlb	0	; () banked
  3247  0014DA  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3248  0014DC  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  3249  0014DE  0100               	movlb	0	; () banked
  3250  0014E0  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3251  0014E2  0E03               	movlw	3
  3252  0014E4  0100               	movlb	0	; () banked
  3253  0014E6  6F6E               	movwf	Spi_Write@size& (0+255),b
  3254  0014E8  0E00               	movlw	0
  3255  0014EA  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3256  0014EC  0E00               	movlw	0
  3257  0014EE  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3258  0014F0  0E00               	movlw	0
  3259  0014F2  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3260  0014F4  EC2F  F014         	call	_Spi_Write	;wreg free
  3261                           
  3262                           ;mcp2515.c: 96: cmdWrite3[1] = 0x70;
  3263  0014F8  0E70               	movlw	112
  3264  0014FA  0100               	movlb	0	; () banked
  3265  0014FC  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  3266                           
  3267                           ;mcp2515.c: 97: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  3268  0014FE  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  3269  001500  0100               	movlb	0	; () banked
  3270  001502  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3271  001504  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  3272  001506  0100               	movlb	0	; () banked
  3273  001508  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3274  00150A  0E03               	movlw	3
  3275  00150C  0100               	movlb	0	; () banked
  3276  00150E  6F6E               	movwf	Spi_Write@size& (0+255),b
  3277  001510  0E00               	movlw	0
  3278  001512  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3279  001514  0E00               	movlw	0
  3280  001516  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3281  001518  0E00               	movlw	0
  3282  00151A  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3283  00151C  EC2F  F014         	call	_Spi_Write	;wreg free
  3284                           
  3285                           ;mcp2515.c: 101: cmdMask4[1] = 0x60;
  3286  001520  0E60               	movlw	96
  3287  001522  0100               	movlb	0	; () banked
  3288  001524  6F96               	movwf	(Mcp2515_Init@cmdMask4+1)& (0+255),b
  3289                           
  3290                           ; BSR set to: 0
  3291                           ;mcp2515.c: 102: cmdMask4[2] = 0x60 | (1<<2);
  3292  001526  0E64               	movlw	100
  3293  001528  0100               	movlb	0	; () banked
  3294  00152A  6F97               	movwf	(Mcp2515_Init@cmdMask4+2)& (0+255),b
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;mcp2515.c: 103: if(filterCfg->ext == 0)
  3298  00152C  0100               	movlb	0	; () banked
  3299  00152E  EE20 F020          	lfsr	2,32
  3300  001532  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3301  001534  26D9               	addwf	fsr2l,f,c
  3302  001536  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3303  001538  22DA               	addwfc	fsr2h,f,c
  3304  00153A  50DF               	movf	indf2,w,c
  3305  00153C  A4D8               	btfss	status,2,c
  3306  00153E  D002               	goto	l2117
  3307                           
  3308                           ; BSR set to: 0
  3309                           ;mcp2515.c: 104: {
  3310                           ;mcp2515.c: 105: cmdMask4[3] = 0x20 | (1<<2);
  3311  001540  0E24               	movlw	36
  3312  001542  D001               	goto	L3
  3313  001544                     l2117:
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;mcp2515.c: 107: else
  3317                           ;mcp2515.c: 108: {
  3318                           ;mcp2515.c: 109: cmdMask4[3] = 0x40 | (1<<2);
  3319  001544  0E44               	movlw	68
  3320  001546                     L3:
  3321  001546  0100               	movlb	0	; () banked
  3322  001548  6F98               	movwf	(Mcp2515_Init@cmdMask4+3)& (0+255),b
  3323                           
  3324                           ; BSR set to: 0
  3325                           ;mcp2515.c: 110: }
  3326                           ;mcp2515.c: 111: Spi_Write(cmdMask4,sizeof(cmdMask4));
  3327                           
  3328                           ; BSR set to: 0
  3329  00154A  0E95               	movlw	low Mcp2515_Init@cmdMask4
  3330  00154C  0100               	movlb	0	; () banked
  3331  00154E  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3332  001550  0E00               	movlw	high Mcp2515_Init@cmdMask4
  3333  001552  0100               	movlb	0	; () banked
  3334  001554  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3335  001556  0E04               	movlw	4
  3336  001558  0100               	movlb	0	; () banked
  3337  00155A  6F6E               	movwf	Spi_Write@size& (0+255),b
  3338  00155C  0E00               	movlw	0
  3339  00155E  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3340  001560  0E00               	movlw	0
  3341  001562  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3342  001564  0E00               	movlw	0
  3343  001566  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3344  001568  EC2F  F014         	call	_Spi_Write	;wreg free
  3345                           
  3346                           ;mcp2515.c: 115: cmdMask4[1] = 0x70;
  3347  00156C  0E70               	movlw	112
  3348  00156E  0100               	movlb	0	; () banked
  3349  001570  6F96               	movwf	(Mcp2515_Init@cmdMask4+1)& (0+255),b
  3350                           
  3351                           ; BSR set to: 0
  3352                           ;mcp2515.c: 116: cmdMask4[2] = 0x60;
  3353  001572  0E60               	movlw	96
  3354  001574  0100               	movlb	0	; () banked
  3355  001576  6F97               	movwf	(Mcp2515_Init@cmdMask4+2)& (0+255),b
  3356                           
  3357                           ; BSR set to: 0
  3358                           ;mcp2515.c: 117: if(filterCfg->ext == 0)
  3359  001578  0100               	movlb	0	; () banked
  3360  00157A  EE20 F020          	lfsr	2,32
  3361  00157E  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3362  001580  26D9               	addwf	fsr2l,f,c
  3363  001582  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3364  001584  22DA               	addwfc	fsr2h,f,c
  3365  001586  50DF               	movf	indf2,w,c
  3366  001588  A4D8               	btfss	status,2,c
  3367  00158A  D002               	goto	l2129
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;mcp2515.c: 118: {
  3371                           ;mcp2515.c: 119: cmdMask4[3] = 0x20;
  3372  00158C  0E20               	movlw	32
  3373  00158E  D001               	goto	L4
  3374  001590                     l2129:
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;mcp2515.c: 121: else
  3378                           ;mcp2515.c: 122: {
  3379                           ;mcp2515.c: 123: cmdMask4[3] = 0x40;
  3380  001590  0E40               	movlw	64
  3381  001592                     L4:
  3382  001592  0100               	movlb	0	; () banked
  3383  001594  6F98               	movwf	(Mcp2515_Init@cmdMask4+3)& (0+255),b
  3384                           
  3385                           ; BSR set to: 0
  3386                           ;mcp2515.c: 124: }
  3387                           ;mcp2515.c: 125: Spi_Write(cmdMask4,sizeof(cmdMask4));
  3388                           
  3389                           ; BSR set to: 0
  3390  001596  0E95               	movlw	low Mcp2515_Init@cmdMask4
  3391  001598  0100               	movlb	0	; () banked
  3392  00159A  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3393  00159C  0E00               	movlw	high Mcp2515_Init@cmdMask4
  3394  00159E  0100               	movlb	0	; () banked
  3395  0015A0  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3396  0015A2  0E04               	movlw	4
  3397  0015A4  0100               	movlb	0	; () banked
  3398  0015A6  6F6E               	movwf	Spi_Write@size& (0+255),b
  3399  0015A8  0E00               	movlw	0
  3400  0015AA  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3401  0015AC  0E00               	movlw	0
  3402  0015AE  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3403  0015B0  0E00               	movlw	0
  3404  0015B2  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3405  0015B4  EC2F  F014         	call	_Spi_Write	;wreg free
  3406                           
  3407                           ;mcp2515.c: 129: cmdMask4[0] = 0x05;
  3408  0015B8  0E05               	movlw	5
  3409  0015BA  0100               	movlb	0	; () banked
  3410  0015BC  6F95               	movwf	Mcp2515_Init@cmdMask4& (0+255),b
  3411                           
  3412                           ; BSR set to: 0
  3413                           ;mcp2515.c: 130: cmdMask4[1] = 0x2B;
  3414  0015BE  0E2B               	movlw	43
  3415  0015C0  0100               	movlb	0	; () banked
  3416  0015C2  6F96               	movwf	(Mcp2515_Init@cmdMask4+1)& (0+255),b
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;mcp2515.c: 131: cmdMask4[2] = 0x1F;
  3420  0015C4  0E1F               	movlw	31
  3421  0015C6  0100               	movlb	0	; () banked
  3422  0015C8  6F97               	movwf	(Mcp2515_Init@cmdMask4+2)& (0+255),b
  3423                           
  3424                           ; BSR set to: 0
  3425                           ;mcp2515.c: 132: cmdMask4[3] = 0x1F;
  3426  0015CA  0E1F               	movlw	31
  3427  0015CC  0100               	movlb	0	; () banked
  3428  0015CE  6F98               	movwf	(Mcp2515_Init@cmdMask4+3)& (0+255),b
  3429                           
  3430                           ; BSR set to: 0
  3431                           ;mcp2515.c: 133: Spi_Write(cmdMask4,sizeof(cmdMask4));
  3432  0015D0  0E95               	movlw	low Mcp2515_Init@cmdMask4
  3433  0015D2  0100               	movlb	0	; () banked
  3434  0015D4  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3435  0015D6  0E00               	movlw	high Mcp2515_Init@cmdMask4
  3436  0015D8  0100               	movlb	0	; () banked
  3437  0015DA  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3438  0015DC  0E04               	movlw	4
  3439  0015DE  0100               	movlb	0	; () banked
  3440  0015E0  6F6E               	movwf	Spi_Write@size& (0+255),b
  3441  0015E2  0E00               	movlw	0
  3442  0015E4  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3443  0015E6  0E00               	movlw	0
  3444  0015E8  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3445  0015EA  0E00               	movlw	0
  3446  0015EC  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3447  0015EE  EC2F  F014         	call	_Spi_Write	;wreg free
  3448                           
  3449                           ;mcp2515.c: 137: cmdMask4[0] = 0x05;
  3450  0015F2  0E05               	movlw	5
  3451  0015F4  0100               	movlb	0	; () banked
  3452  0015F6  6F95               	movwf	Mcp2515_Init@cmdMask4& (0+255),b
  3453                           
  3454                           ;mcp2515.c: 138: cmdMask4[1] = 0x0F;
  3455  0015F8  0E0F               	movlw	15
  3456  0015FA  0100               	movlb	0	; () banked
  3457  0015FC  6F96               	movwf	(Mcp2515_Init@cmdMask4+1)& (0+255),b
  3458                           
  3459                           ;mcp2515.c: 139: cmdMask4[2] = 0xE0;
  3460  0015FE  0EE0               	movlw	224
  3461  001600  0100               	movlb	0	; () banked
  3462  001602  6F97               	movwf	(Mcp2515_Init@cmdMask4+2)& (0+255),b
  3463                           
  3464                           ;mcp2515.c: 140: cmdMask4[3] = 0x00;
  3465  001604  0E00               	movlw	0
  3466  001606  0100               	movlb	0	; () banked
  3467  001608  6F98               	movwf	(Mcp2515_Init@cmdMask4+3)& (0+255),b
  3468                           
  3469                           ; BSR set to: 0
  3470                           ;mcp2515.c: 141: Spi_Write(cmdMask4,sizeof(cmdMask4));
  3471  00160A  0E95               	movlw	low Mcp2515_Init@cmdMask4
  3472  00160C  0100               	movlb	0	; () banked
  3473  00160E  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3474  001610  0E00               	movlw	high Mcp2515_Init@cmdMask4
  3475  001612  0100               	movlb	0	; () banked
  3476  001614  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3477  001616  0E04               	movlw	4
  3478  001618  0100               	movlb	0	; () banked
  3479  00161A  6F6E               	movwf	Spi_Write@size& (0+255),b
  3480  00161C  0E00               	movlw	0
  3481  00161E  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3482  001620  0E00               	movlw	0
  3483  001622  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3484  001624  0E00               	movlw	0
  3485  001626  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3486  001628  EC2F  F014         	call	_Spi_Write	;wreg free
  3487  00162C  0012               	return		;funcret
  3488  00162E                     __end_of_Mcp2515_Init:
  3489                           	opt stack 0
  3490                           tblptru	equ	0xFF8
  3491                           tblptrh	equ	0xFF7
  3492                           tblptrl	equ	0xFF6
  3493                           tablat	equ	0xFF5
  3494                           prodh	equ	0xFF4
  3495                           prodl	equ	0xFF3
  3496                           intcon	equ	0xFF2
  3497                           intcon2	equ	0xFF1
  3498                           intcon3	equ	0xFF0
  3499                           postinc0	equ	0xFEE
  3500                           wreg	equ	0xFE8
  3501                           indf1	equ	0xFE7
  3502                           postinc1	equ	0xFE6
  3503                           postdec1	equ	0xFE5
  3504                           fsr1h	equ	0xFE2
  3505                           fsr1l	equ	0xFE1
  3506                           indf2	equ	0xFDF
  3507                           postinc2	equ	0xFDE
  3508                           fsr2h	equ	0xFDA
  3509                           fsr2l	equ	0xFD9
  3510                           status	equ	0xFD8
  3511                           
  3512 ;; *************** function _Mcp2515_Reset *****************
  3513 ;; Defined at:
  3514 ;;		line 21 in file "mcp2515.c"
  3515 ;; Parameters:    Size  Location     Type
  3516 ;;		None
  3517 ;; Auto vars:     Size  Location     Type
  3518 ;;  i               4   19[BANK0 ] unsigned long 
  3519 ;;  cmd             1   18[BANK0 ] unsigned char 
  3520 ;; Return value:  Size  Location     Type
  3521 ;;                  1    wreg      void 
  3522 ;; Registers used:
  3523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3524 ;; Tracked objects:
  3525 ;;		On entry : 0/0
  3526 ;;		On exit  : 0/0
  3527 ;;		Unchanged: 0/0
  3528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3530 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3532 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3533 ;;Total ram usage:        5 bytes
  3534 ;; Hardware stack levels used:    1
  3535 ;; Hardware stack levels required when called:   10
  3536 ;; This function calls:
  3537 ;;		_Spi_Write
  3538 ;; This function is called by:
  3539 ;;		_Mcp2515_Init
  3540 ;; This function uses a non-reentrant model
  3541 ;;
  3542                           
  3543                           	psect	text10
  3544  002560                     __ptext10:
  3545                           	opt stack 0
  3546  002560                     _Mcp2515_Reset:
  3547                           	opt stack 17
  3548                           
  3549                           ;mcp2515.c: 23: uint32_t i;
  3550                           ;mcp2515.c: 24: uint8_t cmd = 0xC0;
  3551                           
  3552                           ;incstack = 0
  3553  002560  0EC0               	movlw	192
  3554  002562  0100               	movlb	0	; () banked
  3555  002564  6F72               	movwf	Mcp2515_Reset@cmd& (0+255),b
  3556                           
  3557                           ; BSR set to: 0
  3558                           ;mcp2515.c: 26: Spi_Write(&cmd,sizeof(cmd));
  3559  002566  0E72               	movlw	low Mcp2515_Reset@cmd
  3560  002568  0100               	movlb	0	; () banked
  3561  00256A  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3562  00256C  0E00               	movlw	high Mcp2515_Reset@cmd
  3563  00256E  0100               	movlb	0	; () banked
  3564  002570  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3565  002572  0E01               	movlw	1
  3566  002574  0100               	movlb	0	; () banked
  3567  002576  6F6E               	movwf	Spi_Write@size& (0+255),b
  3568  002578  0E00               	movlw	0
  3569  00257A  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3570  00257C  0E00               	movlw	0
  3571  00257E  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3572  002580  0E00               	movlw	0
  3573  002582  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3574  002584  EC2F  F014         	call	_Spi_Write	;wreg free
  3575                           
  3576                           ;mcp2515.c: 27: for(i=0;i<10000;i++){}
  3577  002588  0E00               	movlw	0
  3578  00258A  0100               	movlb	0	; () banked
  3579  00258C  6F73               	movwf	Mcp2515_Reset@i& (0+255),b
  3580  00258E  0E00               	movlw	0
  3581  002590  6F74               	movwf	(Mcp2515_Reset@i+1)& (0+255),b
  3582  002592  0E00               	movlw	0
  3583  002594  6F75               	movwf	(Mcp2515_Reset@i+2)& (0+255),b
  3584  002596  0E00               	movlw	0
  3585  002598  6F76               	movwf	(Mcp2515_Reset@i+3)& (0+255),b
  3586  00259A                     l1869:
  3587                           
  3588                           ; BSR set to: 0
  3589  00259A  0100               	movlb	0	; () banked
  3590  00259C  5176               	movf	(Mcp2515_Reset@i+3)& (0+255),w,b
  3591  00259E  0100               	movlb	0	; () banked
  3592  0025A0  1175               	iorwf	(Mcp2515_Reset@i+2)& (0+255),w,b
  3593  0025A2  E110               	bnz	l289
  3594  0025A4  0E10               	movlw	16
  3595  0025A6  0100               	movlb	0	; () banked
  3596  0025A8  5D73               	subwf	Mcp2515_Reset@i& (0+255),w,b
  3597  0025AA  0E27               	movlw	39
  3598  0025AC  0100               	movlb	0	; () banked
  3599  0025AE  5974               	subwfb	(Mcp2515_Reset@i+1)& (0+255),w,b
  3600  0025B0  B0D8               	btfsc	status,0,c
  3601  0025B2  0012               	return	
  3602                           
  3603                           ; BSR set to: 0
  3604                           
  3605                           ; BSR set to: 0
  3606                           
  3607                           ; BSR set to: 0
  3608  0025B4  0E01               	movlw	1
  3609  0025B6  0100               	movlb	0	; () banked
  3610  0025B8  2773               	addwf	Mcp2515_Reset@i& (0+255),f,b
  3611  0025BA  0E00               	movlw	0
  3612  0025BC  2374               	addwfc	(Mcp2515_Reset@i+1)& (0+255),f,b
  3613  0025BE  2375               	addwfc	(Mcp2515_Reset@i+2)& (0+255),f,b
  3614  0025C0  2376               	addwfc	(Mcp2515_Reset@i+3)& (0+255),f,b
  3615  0025C2  D7EB               	goto	l1869
  3616  0025C4                     l289:
  3617                           
  3618                           ; BSR set to: 0
  3619  0025C4  0012               	return		;funcret
  3620  0025C6                     __end_of_Mcp2515_Reset:
  3621                           	opt stack 0
  3622                           tblptru	equ	0xFF8
  3623                           tblptrh	equ	0xFF7
  3624                           tblptrl	equ	0xFF6
  3625                           tablat	equ	0xFF5
  3626                           prodh	equ	0xFF4
  3627                           prodl	equ	0xFF3
  3628                           intcon	equ	0xFF2
  3629                           intcon2	equ	0xFF1
  3630                           intcon3	equ	0xFF0
  3631                           postinc0	equ	0xFEE
  3632                           wreg	equ	0xFE8
  3633                           indf1	equ	0xFE7
  3634                           postinc1	equ	0xFE6
  3635                           postdec1	equ	0xFE5
  3636                           fsr1h	equ	0xFE2
  3637                           fsr1l	equ	0xFE1
  3638                           indf2	equ	0xFDF
  3639                           postinc2	equ	0xFDE
  3640                           fsr2h	equ	0xFDA
  3641                           fsr2l	equ	0xFD9
  3642                           status	equ	0xFD8
  3643                           
  3644 ;; *************** function _Mcp2515WriteCanId *****************
  3645 ;; Defined at:
  3646 ;;		line 233 in file "mcp2515.c"
  3647 ;; Parameters:    Size  Location     Type
  3648 ;;  mcp_addr        1    wreg     unsigned char 
  3649 ;;  ext             1   18[BANK0 ] unsigned char 
  3650 ;;  can_id          4   19[BANK0 ] unsigned long 
  3651 ;; Auto vars:     Size  Location     Type
  3652 ;;  mcp_addr        1   26[BANK0 ] unsigned char 
  3653 ;;  buf             6   27[BANK0 ] unsigned char [6]
  3654 ;;  canid           2   33[BANK0 ] unsigned int 
  3655 ;; Return value:  Size  Location     Type
  3656 ;;                  1    wreg      void 
  3657 ;; Registers used:
  3658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3659 ;; Tracked objects:
  3660 ;;		On entry : 0/0
  3661 ;;		On exit  : 0/0
  3662 ;;		Unchanged: 0/0
  3663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3664 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3665 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3666 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3667 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3668 ;;Total ram usage:       17 bytes
  3669 ;; Hardware stack levels used:    1
  3670 ;; Hardware stack levels required when called:   10
  3671 ;; This function calls:
  3672 ;;		_Spi_Write
  3673 ;; This function is called by:
  3674 ;;		_Mcp2515_Init
  3675 ;; This function uses a non-reentrant model
  3676 ;;
  3677                           
  3678                           	psect	text11
  3679  002044                     __ptext11:
  3680                           	opt stack 0
  3681  002044                     _Mcp2515WriteCanId:
  3682                           	opt stack 17
  3683                           
  3684                           ; BSR set to: 0
  3685                           ;incstack = 0
  3686                           ;Mcp2515WriteCanId@mcp_addr stored from wreg
  3687  002044  0100               	movlb	0	; () banked
  3688  002046  6F7A               	movwf	Mcp2515WriteCanId@mcp_addr& (0+255),b
  3689                           
  3690                           ;mcp2515.c: 235: uint16_t canid;
  3691                           ;mcp2515.c: 236: uint8_t buf[6];
  3692                           ;mcp2515.c: 238: canid = (uint16_t)(can_id & 0x0FFFF);
  3693  002048  C073  F081         	movff	Mcp2515WriteCanId@can_id,Mcp2515WriteCanId@canid
  3694  00204C  C074  F082         	movff	Mcp2515WriteCanId@can_id+1,Mcp2515WriteCanId@canid+1
  3695                           
  3696                           ;mcp2515.c: 240: buf[0] = 0x02;
  3697  002050  0E02               	movlw	2
  3698  002052  0100               	movlb	0	; () banked
  3699  002054  6F7B               	movwf	Mcp2515WriteCanId@buf& (0+255),b
  3700                           
  3701                           ; BSR set to: 0
  3702                           ;mcp2515.c: 241: buf[1] = mcp_addr;
  3703  002056  C07A  F07C         	movff	Mcp2515WriteCanId@mcp_addr,Mcp2515WriteCanId@buf+1
  3704                           
  3705                           ; BSR set to: 0
  3706                           ;mcp2515.c: 243: if ( ext == 1)
  3707  00205A  0100               	movlb	0	; () banked
  3708  00205C  0572               	decf	Mcp2515WriteCanId@ext& (0+255),w,b
  3709  00205E  A4D8               	btfss	status,2,c
  3710  002060  D034               	goto	l1897
  3711                           
  3712                           ; BSR set to: 0
  3713                           ;mcp2515.c: 244: {
  3714                           ;mcp2515.c: 245: buf[3+2] = (uint8_t) (canid & 0xFF);
  3715  002062  C081  F080         	movff	Mcp2515WriteCanId@canid,Mcp2515WriteCanId@buf+5
  3716                           
  3717                           ; BSR set to: 0
  3718                           ;mcp2515.c: 246: buf[2+2] = (uint8_t) (canid >> 8);
  3719  002066  0100               	movlb	0	; () banked
  3720  002068  5182               	movf	(Mcp2515WriteCanId@canid+1)& (0+255),w,b
  3721  00206A  0100               	movlb	0	; () banked
  3722  00206C  6F7F               	movwf	(Mcp2515WriteCanId@buf+4)& (0+255),b
  3723                           
  3724                           ; BSR set to: 0
  3725                           ;mcp2515.c: 247: canid = (uint16_t)( can_id / 0x10000L );
  3726  00206E  C075  F081         	movff	Mcp2515WriteCanId@can_id+2,Mcp2515WriteCanId@canid
  3727  002072  C076  F082         	movff	Mcp2515WriteCanId@can_id+3,Mcp2515WriteCanId@canid+1
  3728                           
  3729                           ; BSR set to: 0
  3730                           ;mcp2515.c: 248: buf[1+2] = (uint8_t) (canid & 0x03);
  3731  002076  0100               	movlb	0	; () banked
  3732  002078  5181               	movf	Mcp2515WriteCanId@canid& (0+255),w,b
  3733  00207A  0B03               	andlw	3
  3734  00207C  0100               	movlb	0	; () banked
  3735  00207E  6F7E               	movwf	(Mcp2515WriteCanId@buf+3)& (0+255),b
  3736                           
  3737                           ; BSR set to: 0
  3738                           ;mcp2515.c: 249: buf[1+2] += (uint8_t) ((canid & 0x1C )*8);
  3739  002080  C081  F077         	movff	Mcp2515WriteCanId@canid,??_Mcp2515WriteCanId
  3740  002084  0E1C               	movlw	28
  3741  002086  0100               	movlb	0	; () banked
  3742  002088  1777               	andwf	??_Mcp2515WriteCanId& (0+255),f,b
  3743  00208A  0100               	movlb	0	; () banked
  3744  00208C  90D8               	bcf	status,0,c
  3745  00208E  3777               	rlcf	??_Mcp2515WriteCanId& (0+255),f,b
  3746  002090  0100               	movlb	0	; () banked
  3747  002092  90D8               	bcf	status,0,c
  3748  002094  3777               	rlcf	??_Mcp2515WriteCanId& (0+255),f,b
  3749  002096  0100               	movlb	0	; () banked
  3750  002098  90D8               	bcf	status,0,c
  3751  00209A  3577               	rlcf	??_Mcp2515WriteCanId& (0+255),w,b
  3752  00209C  0100               	movlb	0	; () banked
  3753  00209E  277E               	addwf	(Mcp2515WriteCanId@buf+3)& (0+255),f,b
  3754                           
  3755                           ; BSR set to: 0
  3756                           ;mcp2515.c: 250: buf[1+2] |= 0x08;
  3757  0020A0  0100               	movlb	0	; () banked
  3758  0020A2  877E               	bsf	(Mcp2515WriteCanId@buf+3)& (0+255),3,b
  3759                           
  3760                           ; BSR set to: 0
  3761                           ;mcp2515.c: 251: buf[0+2] = (uint8_t) (canid / 32 );
  3762  0020A4  C081  F077         	movff	Mcp2515WriteCanId@canid,??_Mcp2515WriteCanId
  3763  0020A8  C082  F078         	movff	Mcp2515WriteCanId@canid+1,??_Mcp2515WriteCanId+1
  3764  0020AC  0E05               	movlw	5
  3765  0020AE  0100               	movlb	0	; () banked
  3766  0020B0  6F79               	movwf	(??_Mcp2515WriteCanId+2)& (0+255),b
  3767  0020B2                     u905:
  3768  0020B2  0100               	movlb	0	; () banked
  3769  0020B4  90D8               	bcf	status,0,c
  3770  0020B6  3378               	rrcf	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  3771  0020B8  3377               	rrcf	??_Mcp2515WriteCanId& (0+255),f,b
  3772  0020BA  0100               	movlb	0	; () banked
  3773  0020BC  2F79               	decfsz	(??_Mcp2515WriteCanId+2)& (0+255),f,b
  3774  0020BE  D7F9               	goto	u905
  3775  0020C0  0100               	movlb	0	; () banked
  3776  0020C2  5177               	movf	??_Mcp2515WriteCanId& (0+255),w,b
  3777  0020C4  0100               	movlb	0	; () banked
  3778  0020C6  6F7D               	movwf	(Mcp2515WriteCanId@buf+2)& (0+255),b
  3779                           
  3780                           ;mcp2515.c: 252: }
  3781  0020C8  D02C               	goto	l1903
  3782  0020CA                     l1897:
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;mcp2515.c: 254: else
  3786                           ;mcp2515.c: 255: {
  3787                           ;mcp2515.c: 256: buf[0+2] = (uint8_t) (canid >> 3);
  3788  0020CA  C081  F077         	movff	Mcp2515WriteCanId@canid,??_Mcp2515WriteCanId
  3789  0020CE  C082  F078         	movff	Mcp2515WriteCanId@canid+1,??_Mcp2515WriteCanId+1
  3790  0020D2  0100               	movlb	0	; () banked
  3791  0020D4  90D8               	bcf	status,0,c
  3792  0020D6  3378               	rrcf	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  3793  0020D8  3377               	rrcf	??_Mcp2515WriteCanId& (0+255),f,b
  3794  0020DA  0100               	movlb	0	; () banked
  3795  0020DC  90D8               	bcf	status,0,c
  3796  0020DE  3378               	rrcf	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  3797  0020E0  3377               	rrcf	??_Mcp2515WriteCanId& (0+255),f,b
  3798  0020E2  0100               	movlb	0	; () banked
  3799  0020E4  90D8               	bcf	status,0,c
  3800  0020E6  3378               	rrcf	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  3801  0020E8  3377               	rrcf	??_Mcp2515WriteCanId& (0+255),f,b
  3802  0020EA  0100               	movlb	0	; () banked
  3803  0020EC  5177               	movf	??_Mcp2515WriteCanId& (0+255),w,b
  3804  0020EE  0100               	movlb	0	; () banked
  3805  0020F0  6F7D               	movwf	(Mcp2515WriteCanId@buf+2)& (0+255),b
  3806                           
  3807                           ;mcp2515.c: 257: buf[1+2] = (uint8_t) ((canid & 0x07 )*32);
  3808  0020F2  C081  F077         	movff	Mcp2515WriteCanId@canid,??_Mcp2515WriteCanId
  3809  0020F6  0E07               	movlw	7
  3810  0020F8  0100               	movlb	0	; () banked
  3811  0020FA  1777               	andwf	??_Mcp2515WriteCanId& (0+255),f,b
  3812  0020FC  0E05               	movlw	5
  3813  0020FE  0100               	movlb	0	; () banked
  3814  002100  6F78               	movwf	(??_Mcp2515WriteCanId+1)& (0+255),b
  3815  002102                     u915:
  3816  002102  0100               	movlb	0	; () banked
  3817  002104  90D8               	bcf	status,0,c
  3818  002106  3777               	rlcf	??_Mcp2515WriteCanId& (0+255),f,b
  3819  002108  0100               	movlb	0	; () banked
  3820  00210A  2F78               	decfsz	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  3821  00210C  D7FA               	goto	u915
  3822  00210E  0100               	movlb	0	; () banked
  3823  002110  5177               	movf	??_Mcp2515WriteCanId& (0+255),w,b
  3824  002112  0100               	movlb	0	; () banked
  3825  002114  6F7E               	movwf	(Mcp2515WriteCanId@buf+3)& (0+255),b
  3826                           
  3827                           ; BSR set to: 0
  3828                           ;mcp2515.c: 258: buf[3+2] = 0;
  3829  002116  0E00               	movlw	0
  3830  002118  0100               	movlb	0	; () banked
  3831  00211A  6F80               	movwf	(Mcp2515WriteCanId@buf+5)& (0+255),b
  3832                           
  3833                           ; BSR set to: 0
  3834                           ;mcp2515.c: 259: buf[2+2] = 0;
  3835  00211C  0E00               	movlw	0
  3836  00211E  0100               	movlb	0	; () banked
  3837  002120  6F7F               	movwf	(Mcp2515WriteCanId@buf+4)& (0+255),b
  3838  002122                     l1903:
  3839                           
  3840                           ; BSR set to: 0
  3841                           ;mcp2515.c: 260: }
  3842                           ;mcp2515.c: 261: Spi_Write(buf,6);
  3843  002122  0E7B               	movlw	low Mcp2515WriteCanId@buf
  3844  002124  0100               	movlb	0	; () banked
  3845  002126  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3846  002128  0E00               	movlw	high Mcp2515WriteCanId@buf
  3847  00212A  0100               	movlb	0	; () banked
  3848  00212C  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3849  00212E  0E06               	movlw	6
  3850  002130  0100               	movlb	0	; () banked
  3851  002132  6F6E               	movwf	Spi_Write@size& (0+255),b
  3852  002134  0E00               	movlw	0
  3853  002136  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3854  002138  0E00               	movlw	0
  3855  00213A  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3856  00213C  0E00               	movlw	0
  3857  00213E  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3858  002140  EC2F  F014         	call	_Spi_Write	;wreg free
  3859  002144  0012               	return		;funcret
  3860  002146                     __end_of_Mcp2515WriteCanId:
  3861                           	opt stack 0
  3862                           tblptru	equ	0xFF8
  3863                           tblptrh	equ	0xFF7
  3864                           tblptrl	equ	0xFF6
  3865                           tablat	equ	0xFF5
  3866                           prodh	equ	0xFF4
  3867                           prodl	equ	0xFF3
  3868                           intcon	equ	0xFF2
  3869                           intcon2	equ	0xFF1
  3870                           intcon3	equ	0xFF0
  3871                           postinc0	equ	0xFEE
  3872                           wreg	equ	0xFE8
  3873                           indf1	equ	0xFE7
  3874                           postinc1	equ	0xFE6
  3875                           postdec1	equ	0xFE5
  3876                           fsr1h	equ	0xFE2
  3877                           fsr1l	equ	0xFE1
  3878                           indf2	equ	0xFDF
  3879                           postinc2	equ	0xFDE
  3880                           fsr2h	equ	0xFDA
  3881                           fsr2l	equ	0xFD9
  3882                           status	equ	0xFD8
  3883                           
  3884 ;; *************** function _Spi_Write *****************
  3885 ;; Defined at:
  3886 ;;		line 332 in file "can.c"
  3887 ;; Parameters:    Size  Location     Type
  3888 ;;  tx              2   12[BANK0 ] PTR unsigned char 
  3889 ;;		 -> Mcp2515WriteCanMsg@buf(10), Mcp2515WriteCanId@buf(6), Mcp2515Sleep@cmdMask4(3), Mcp2515_Init@cmdWrite3(3), 
  3890 ;;		 -> Mcp2515_Init@cmdMask4(4), Mcp2515_Reset@cmd(1), Can_SendMessage@buf(4), Can_ReadMessage@buf(4), 
  3891 ;;  size            4   14[BANK0 ] unsigned long 
  3892 ;; Auto vars:     Size  Location     Type
  3893 ;;		None
  3894 ;; Return value:  Size  Location     Type
  3895 ;;                  1    wreg      void 
  3896 ;; Registers used:
  3897 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3898 ;; Tracked objects:
  3899 ;;		On entry : 0/0
  3900 ;;		On exit  : 0/0
  3901 ;;		Unchanged: 0/0
  3902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3903 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3906 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3907 ;;Total ram usage:        6 bytes
  3908 ;; Hardware stack levels used:    1
  3909 ;; Hardware stack levels required when called:    9
  3910 ;; This function calls:
  3911 ;;		_SPIRW
  3912 ;; This function is called by:
  3913 ;;		_Mcp2515_Reset
  3914 ;;		_Mcp2515_Init
  3915 ;;		_Mcp2515WriteCanId
  3916 ;;		_Mcp2515Sleep
  3917 ;; This function uses a non-reentrant model
  3918 ;;
  3919                           
  3920                           	psect	text12
  3921  00285E                     __ptext12:
  3922                           	opt stack 0
  3923  00285E                     _Spi_Write:
  3924                           	opt stack 18
  3925                           
  3926                           ;can.c: 334: SPIRW(tx, 0, size);
  3927                           
  3928                           ;incstack = 0
  3929  00285E  C06C  F060         	movff	Spi_Write@tx,SPIRW@tx
  3930  002862  C06D  F061         	movff	Spi_Write@tx+1,SPIRW@tx+1
  3931  002866  0E00               	movlw	0
  3932  002868  0100               	movlb	0	; () banked
  3933  00286A  6F62               	movwf	SPIRW@rx& (0+255),b
  3934  00286C  0E00               	movlw	0
  3935  00286E  0100               	movlb	0	; () banked
  3936  002870  6F63               	movwf	(SPIRW@rx+1)& (0+255),b
  3937  002872  C06E  F064         	movff	Spi_Write@size,SPIRW@size
  3938  002876  C06F  F065         	movff	Spi_Write@size+1,SPIRW@size+1
  3939  00287A  C070  F066         	movff	Spi_Write@size+2,SPIRW@size+2
  3940  00287E  C071  F067         	movff	Spi_Write@size+3,SPIRW@size+3
  3941  002882  EC7F  F011         	call	_SPIRW	;wreg free
  3942  002886  0012               	return		;funcret
  3943  002888                     __end_of_Spi_Write:
  3944                           	opt stack 0
  3945                           tblptru	equ	0xFF8
  3946                           tblptrh	equ	0xFF7
  3947                           tblptrl	equ	0xFF6
  3948                           tablat	equ	0xFF5
  3949                           prodh	equ	0xFF4
  3950                           prodl	equ	0xFF3
  3951                           intcon	equ	0xFF2
  3952                           intcon2	equ	0xFF1
  3953                           intcon3	equ	0xFF0
  3954                           postinc0	equ	0xFEE
  3955                           wreg	equ	0xFE8
  3956                           indf1	equ	0xFE7
  3957                           postinc1	equ	0xFE6
  3958                           postdec1	equ	0xFE5
  3959                           fsr1h	equ	0xFE2
  3960                           fsr1l	equ	0xFE1
  3961                           indf2	equ	0xFDF
  3962                           postinc2	equ	0xFDE
  3963                           fsr2h	equ	0xFDA
  3964                           fsr2l	equ	0xFD9
  3965                           status	equ	0xFD8
  3966                           
  3967 ;; *************** function _SPIRW *****************
  3968 ;; Defined at:
  3969 ;;		line 293 in file "can.c"
  3970 ;; Parameters:    Size  Location     Type
  3971 ;;  tx              2    0[BANK0 ] PTR const unsigned char 
  3972 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515WriteCanMsg@buf(10), Mcp2515WriteCanId@buf(6), Mcp2515ReadCanMsg@cmd(10),
      + 
  3973 ;;		 -> Mcp2515ReadCanId@msg(6), Mcp2515Sleep@cmdMask4(3), Mcp2515_Init@cmdWrite3(3), Mcp2515_Init@cmdMask4(4), 
  3974 ;;		 -> Mcp2515_Reset@cmd(1), Can_SendMessage@buf(4), Can_ReadMessage@buf(4), Can_GetStatus@msg4(4), 
  3975 ;;		 -> Can_GetStatus@msg(3), 
  3976 ;;  rx              2    2[BANK0 ] PTR unsigned char 
  3977 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515ReadCanMsg@cmd(10), Mcp2515ReadCanId@msg(6), Can_ReadMessage@buf(4), 
  3978 ;;		 -> Can_GetStatus@msg4(4), Can_GetStatus@msg(3), NULL(0), 
  3979 ;;  size            4    4[BANK0 ] unsigned long 
  3980 ;; Auto vars:     Size  Location     Type
  3981 ;;  i               4    8[BANK0 ] unsigned long 
  3982 ;; Return value:  Size  Location     Type
  3983 ;;                  1    wreg      void 
  3984 ;; Registers used:
  3985 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3986 ;; Tracked objects:
  3987 ;;		On entry : 0/0
  3988 ;;		On exit  : 0/0
  3989 ;;		Unchanged: 0/0
  3990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3991 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3992 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3994 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3995 ;;Total ram usage:       12 bytes
  3996 ;; Hardware stack levels used:    1
  3997 ;; Hardware stack levels required when called:    8
  3998 ;; This function calls:
  3999 ;;		Nothing
  4000 ;; This function is called by:
  4001 ;;		_Spi_Write
  4002 ;; This function uses a non-reentrant model
  4003 ;;
  4004                           
  4005                           	psect	text13
  4006  0022FE                     __ptext13:
  4007                           	opt stack 0
  4008  0022FE                     _SPIRW:
  4009                           	opt stack 18
  4010                           
  4011                           ;can.c: 295: uint32_t i;
  4012                           ;can.c: 297: SSPCON1 = 0b00111010;
  4013                           
  4014                           ;incstack = 0
  4015  0022FE  0E3A               	movlw	58
  4016  002300  6EC6               	movwf	4038,c	;volatile
  4017                           
  4018                           ;can.c: 299: LATD1 = 0;
  4019  002302  928C               	bcf	3980,1,c	;volatile
  4020                           
  4021                           ;can.c: 300: for(i=0;i<size;i++)
  4022  002304  0E00               	movlw	0
  4023  002306  0100               	movlb	0	; () banked
  4024  002308  6F68               	movwf	SPIRW@i& (0+255),b
  4025  00230A  0E00               	movlw	0
  4026  00230C  6F69               	movwf	(SPIRW@i+1)& (0+255),b
  4027  00230E  0E00               	movlw	0
  4028  002310  6F6A               	movwf	(SPIRW@i+2)& (0+255),b
  4029  002312  0E00               	movlw	0
  4030  002314  6F6B               	movwf	(SPIRW@i+3)& (0+255),b
  4031  002316  D028               	goto	l1707
  4032  002318                     l1699:
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;can.c: 301: {
  4036                           ;can.c: 302: SSPBUF = tx[i];
  4037  002318  0100               	movlb	0	; () banked
  4038  00231A  5168               	movf	SPIRW@i& (0+255),w,b
  4039  00231C  0100               	movlb	0	; () banked
  4040  00231E  2560               	addwf	SPIRW@tx& (0+255),w,b
  4041  002320  6ED9               	movwf	fsr2l,c
  4042  002322  0100               	movlb	0	; () banked
  4043  002324  5169               	movf	(SPIRW@i+1)& (0+255),w,b
  4044  002326  0100               	movlb	0	; () banked
  4045  002328  2161               	addwfc	(SPIRW@tx+1)& (0+255),w,b
  4046  00232A  6EDA               	movwf	fsr2h,c
  4047  00232C  50DF               	movf	indf2,w,c
  4048  00232E  6EC9               	movwf	4041,c	;volatile
  4049  002330                     l230:
  4050  002330  A69E               	btfss	3998,3,c	;volatile
  4051  002332  D7FE               	goto	l230
  4052                           
  4053                           ;can.c: 304: SSP1IF = 0;
  4054  002334  969E               	bcf	3998,3,c	;volatile
  4055                           
  4056                           ;can.c: 305: if(rx != 0)
  4057  002336  0100               	movlb	0	; () banked
  4058  002338  5162               	movf	SPIRW@rx& (0+255),w,b
  4059  00233A  0100               	movlb	0	; () banked
  4060  00233C  1163               	iorwf	(SPIRW@rx+1)& (0+255),w,b
  4061  00233E  B4D8               	btfsc	status,2,c
  4062  002340  D00C               	goto	l1705
  4063                           
  4064                           ; BSR set to: 0
  4065                           ;can.c: 306: rx[i] = SSPBUF;
  4066  002342  0100               	movlb	0	; () banked
  4067  002344  5168               	movf	SPIRW@i& (0+255),w,b
  4068  002346  0100               	movlb	0	; () banked
  4069  002348  2562               	addwf	SPIRW@rx& (0+255),w,b
  4070  00234A  6ED9               	movwf	fsr2l,c
  4071  00234C  0100               	movlb	0	; () banked
  4072  00234E  5169               	movf	(SPIRW@i+1)& (0+255),w,b
  4073  002350  0100               	movlb	0	; () banked
  4074  002352  2163               	addwfc	(SPIRW@rx+1)& (0+255),w,b
  4075  002354  6EDA               	movwf	fsr2h,c
  4076  002356  CFC9 FFDF          	movff	4041,indf2	;volatile
  4077  00235A                     l1705:
  4078                           
  4079                           ; BSR set to: 0
  4080  00235A  0E01               	movlw	1
  4081  00235C  0100               	movlb	0	; () banked
  4082  00235E  2768               	addwf	SPIRW@i& (0+255),f,b
  4083  002360  0E00               	movlw	0
  4084  002362  2369               	addwfc	(SPIRW@i+1)& (0+255),f,b
  4085  002364  236A               	addwfc	(SPIRW@i+2)& (0+255),f,b
  4086  002366  236B               	addwfc	(SPIRW@i+3)& (0+255),f,b
  4087  002368                     l1707:
  4088                           
  4089                           ; BSR set to: 0
  4090  002368  0100               	movlb	0	; () banked
  4091  00236A  5164               	movf	SPIRW@size& (0+255),w,b
  4092  00236C  0100               	movlb	0	; () banked
  4093  00236E  5D68               	subwf	SPIRW@i& (0+255),w,b
  4094  002370  0100               	movlb	0	; () banked
  4095  002372  5165               	movf	(SPIRW@size+1)& (0+255),w,b
  4096  002374  0100               	movlb	0	; () banked
  4097  002376  5969               	subwfb	(SPIRW@i+1)& (0+255),w,b
  4098  002378  0100               	movlb	0	; () banked
  4099  00237A  5166               	movf	(SPIRW@size+2)& (0+255),w,b
  4100  00237C  0100               	movlb	0	; () banked
  4101  00237E  596A               	subwfb	(SPIRW@i+2)& (0+255),w,b
  4102  002380  0100               	movlb	0	; () banked
  4103  002382  5167               	movf	(SPIRW@size+3)& (0+255),w,b
  4104  002384  0100               	movlb	0	; () banked
  4105  002386  596B               	subwfb	(SPIRW@i+3)& (0+255),w,b
  4106  002388  A0D8               	btfss	status,0,c
  4107  00238A  D7C6               	goto	l1699
  4108                           
  4109                           ; BSR set to: 0
  4110                           ;can.c: 307: }
  4111                           ;can.c: 308: LATD1 = 1;
  4112  00238C  828C               	bsf	3980,1,c	;volatile
  4113                           
  4114                           ; BSR set to: 0
  4115  00238E  0012               	return		;funcret
  4116  002390                     __end_of_SPIRW:
  4117                           	opt stack 0
  4118                           tblptru	equ	0xFF8
  4119                           tblptrh	equ	0xFF7
  4120                           tblptrl	equ	0xFF6
  4121                           tablat	equ	0xFF5
  4122                           prodh	equ	0xFF4
  4123                           prodl	equ	0xFF3
  4124                           intcon	equ	0xFF2
  4125                           intcon2	equ	0xFF1
  4126                           intcon3	equ	0xFF0
  4127                           postinc0	equ	0xFEE
  4128                           wreg	equ	0xFE8
  4129                           indf1	equ	0xFE7
  4130                           postinc1	equ	0xFE6
  4131                           postdec1	equ	0xFE5
  4132                           fsr1h	equ	0xFE2
  4133                           fsr1l	equ	0xFE1
  4134                           indf2	equ	0xFDF
  4135                           postinc2	equ	0xFDE
  4136                           fsr2h	equ	0xFDA
  4137                           fsr2l	equ	0xFD9
  4138                           status	equ	0xFD8
  4139                           
  4140 ;; *************** function _high_isr *****************
  4141 ;; Defined at:
  4142 ;;		line 3 in file "interrupt.c"
  4143 ;; Parameters:    Size  Location     Type
  4144 ;;		None
  4145 ;; Auto vars:     Size  Location     Type
  4146 ;;		None
  4147 ;; Return value:  Size  Location     Type
  4148 ;;                  1    wreg      void 
  4149 ;; Registers used:
  4150 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4151 ;; Tracked objects:
  4152 ;;		On entry : 0/0
  4153 ;;		On exit  : 0/0
  4154 ;;		Unchanged: 0/0
  4155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4158 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4159 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4160 ;;Total ram usage:       14 bytes
  4161 ;; Hardware stack levels used:    1
  4162 ;; Hardware stack levels required when called:    7
  4163 ;; This function calls:
  4164 ;;		_Can_Isr
  4165 ;; This function is called by:
  4166 ;;		Interrupt level 2
  4167 ;; This function uses a non-reentrant model
  4168 ;;
  4169                           
  4170                           	psect	intcode
  4171  000008                     __pintcode:
  4172                           	opt stack 0
  4173  000008                     _high_isr:
  4174                           	opt stack 17
  4175                           
  4176                           ; BSR set to: 0
  4177                           ;incstack = 0
  4178  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4179  00000A  CFFA F04A          	movff	pclath,??_high_isr
  4180  00000E  CFFB F04B          	movff	pclatu,??_high_isr+1
  4181  000012  CFE9 F04C          	movff	fsr0l,??_high_isr+2
  4182  000016  CFEA F04D          	movff	fsr0h,??_high_isr+3
  4183  00001A  CFE1 F04E          	movff	fsr1l,??_high_isr+4
  4184  00001E  CFE2 F04F          	movff	fsr1h,??_high_isr+5
  4185  000022  CFD9 F050          	movff	fsr2l,??_high_isr+6
  4186  000026  CFDA F051          	movff	fsr2h,??_high_isr+7
  4187  00002A  CFF3 F052          	movff	prodl,??_high_isr+8
  4188  00002E  CFF4 F053          	movff	prodh,??_high_isr+9
  4189  000032  CFF6 F054          	movff	tblptrl,??_high_isr+10
  4190  000036  CFF7 F055          	movff	tblptrh,??_high_isr+11
  4191  00003A  CFF8 F056          	movff	tblptru,??_high_isr+12
  4192  00003E  CFF5 F057          	movff	tablat,??_high_isr+13
  4193                           
  4194                           ;interrupt.c: 4: if((INT3IF == 1)&&(INT3IE == 1))
  4195  000042  B4F0               	btfsc	intcon3,2,c	;volatile
  4196  000044  AAF0               	btfss	intcon3,5,c	;volatile
  4197  000046  D005               	goto	i2l276
  4198                           
  4199                           ;interrupt.c: 5: {
  4200                           ;interrupt.c: 6: INT3IF = 0;
  4201  000048  94F0               	bcf	intcon3,2,c	;volatile
  4202                           
  4203                           ;interrupt.c: 7: Can_Isr();
  4204  00004A  EC71  F013         	call	_Can_Isr	;wreg free
  4205                           
  4206                           ;interrupt.c: 8: if(RB3 == 0)
  4207  00004E  A681               	btfss	3969,3,c	;volatile
  4208                           
  4209                           ;interrupt.c: 9: {
  4210                           ;interrupt.c: 10: INT3IF = 1;
  4211  000050  84F0               	bsf	intcon3,2,c	;volatile
  4212  000052                     i2l276:
  4213  000052  C057  FFF5         	movff	??_high_isr+13,tablat
  4214  000056  C056  FFF8         	movff	??_high_isr+12,tblptru
  4215  00005A  C055  FFF7         	movff	??_high_isr+11,tblptrh
  4216  00005E  C054  FFF6         	movff	??_high_isr+10,tblptrl
  4217  000062  C053  FFF4         	movff	??_high_isr+9,prodh
  4218  000066  C052  FFF3         	movff	??_high_isr+8,prodl
  4219  00006A  C051  FFDA         	movff	??_high_isr+7,fsr2h
  4220  00006E  C050  FFD9         	movff	??_high_isr+6,fsr2l
  4221  000072  C04F  FFE2         	movff	??_high_isr+5,fsr1h
  4222  000076  C04E  FFE1         	movff	??_high_isr+4,fsr1l
  4223  00007A  C04D  FFEA         	movff	??_high_isr+3,fsr0h
  4224  00007E  C04C  FFE9         	movff	??_high_isr+2,fsr0l
  4225  000082  C04B  FFFB         	movff	??_high_isr+1,pclatu
  4226  000086  C04A  FFFA         	movff	??_high_isr,pclath
  4227  00008A  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4228  00008C  0011               	retfie		f
  4229  00008E                     __end_of_high_isr:
  4230                           	opt stack 0
  4231                           pclatu	equ	0xFFB
  4232                           pclath	equ	0xFFA
  4233                           tblptru	equ	0xFF8
  4234                           tblptrh	equ	0xFF7
  4235                           tblptrl	equ	0xFF6
  4236                           tablat	equ	0xFF5
  4237                           prodh	equ	0xFF4
  4238                           prodl	equ	0xFF3
  4239                           intcon	equ	0xFF2
  4240                           intcon2	equ	0xFF1
  4241                           intcon3	equ	0xFF0
  4242                           postinc0	equ	0xFEE
  4243                           fsr0h	equ	0xFEA
  4244                           fsr0l	equ	0xFE9
  4245                           wreg	equ	0xFE8
  4246                           indf1	equ	0xFE7
  4247                           postinc1	equ	0xFE6
  4248                           postdec1	equ	0xFE5
  4249                           fsr1h	equ	0xFE2
  4250                           fsr1l	equ	0xFE1
  4251                           indf2	equ	0xFDF
  4252                           postinc2	equ	0xFDE
  4253                           fsr2h	equ	0xFDA
  4254                           fsr2l	equ	0xFD9
  4255                           status	equ	0xFD8
  4256                           
  4257 ;; *************** function _Can_Isr *****************
  4258 ;; Defined at:
  4259 ;;		line 50 in file "can.c"
  4260 ;; Parameters:    Size  Location     Type
  4261 ;;		None
  4262 ;; Auto vars:     Size  Location     Type
  4263 ;;  retCode         1   72[COMRAM] unsigned char 
  4264 ;; Return value:  Size  Location     Type
  4265 ;;                  1    wreg      void 
  4266 ;; Registers used:
  4267 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4268 ;; Tracked objects:
  4269 ;;		On entry : 0/0
  4270 ;;		On exit  : 0/0
  4271 ;;		Unchanged: 0/0
  4272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4274 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4275 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4276 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4277 ;;Total ram usage:        2 bytes
  4278 ;; Hardware stack levels used:    1
  4279 ;; Hardware stack levels required when called:    6
  4280 ;; This function calls:
  4281 ;;		_Can_GetStatus
  4282 ;;		_Can_OutBufferStatus
  4283 ;;		_Can_ReadInBuffer
  4284 ;;		_Can_WriteOutBuffer
  4285 ;; This function is called by:
  4286 ;;		_high_isr
  4287 ;; This function uses a non-reentrant model
  4288 ;;
  4289                           
  4290                           	psect	text15
  4291  0026E2                     __ptext15:
  4292                           	opt stack 0
  4293  0026E2                     _Can_Isr:
  4294                           	opt stack 17
  4295                           
  4296                           ;can.c: 52: static uint8_t nbTxBuf=3;
  4297                           ;can.c: 53: uint8_t retCode;
  4298                           ;can.c: 55: retCode = Can_GetStatus();
  4299                           
  4300                           ;incstack = 0
  4301  0026E2  EC15  F013         	call	_Can_GetStatus	;wreg free
  4302  0026E6  6E49               	movwf	Can_Isr@retCode,c
  4303                           
  4304                           ;can.c: 57: if((retCode & 0x03) != 0)
  4305  0026E8  C049  F048         	movff	Can_Isr@retCode,??_Can_Isr
  4306  0026EC  0E03               	movlw	3
  4307  0026EE  1648               	andwf	??_Can_Isr,f,c
  4308  0026F0  A4D8               	btfss	status,2,c
  4309                           
  4310                           ;can.c: 58: {
  4311                           ;can.c: 59: Can_ReadInBuffer();
  4312  0026F2  EC95  F013         	call	_Can_ReadInBuffer	;wreg free
  4313                           
  4314                           ;can.c: 60: }
  4315                           ;can.c: 62: if((retCode & 0x1C) != 0)
  4316  0026F6  C049  F048         	movff	Can_Isr@retCode,??_Can_Isr
  4317  0026FA  0E1C               	movlw	28
  4318  0026FC  1648               	andwf	??_Can_Isr,f,c
  4319  0026FE  B4D8               	btfsc	status,2,c
  4320  002700  D00B               	goto	i2l2303
  4321                           
  4322                           ;can.c: 63: {
  4323                           ;can.c: 64: if((retCode & 0x10) != 0)
  4324  002702  B849               	btfsc	Can_Isr@retCode,4,c
  4325                           
  4326                           ;can.c: 65: {
  4327                           ;can.c: 66: nbTxBuf++;
  4328  002704  2A5E               	incf	Can_Isr@nbTxBuf,f,c
  4329                           
  4330                           ;can.c: 67: }
  4331                           ;can.c: 68: if((retCode & 0x08) != 0)
  4332  002706  B649               	btfsc	Can_Isr@retCode,3,c
  4333                           
  4334                           ;can.c: 69: {
  4335                           ;can.c: 70: nbTxBuf++;
  4336  002708  2A5E               	incf	Can_Isr@nbTxBuf,f,c
  4337                           
  4338                           ;can.c: 71: }
  4339                           ;can.c: 72: if((retCode & 0x04) != 0)
  4340  00270A  A449               	btfss	Can_Isr@retCode,2,c
  4341  00270C  D005               	goto	i2l2303
  4342                           
  4343                           ;can.c: 73: {
  4344                           ;can.c: 74: nbTxBuf++;
  4345  00270E  2A5E               	incf	Can_Isr@nbTxBuf,f,c
  4346                           
  4347                           ;can.c: 75: }
  4348                           ;can.c: 76: }
  4349                           ;can.c: 78: while((Can_OutBufferStatus() != 0) && (nbTxBuf != 0))
  4350  002710  D003               	goto	i2l2303
  4351  002712                     i2l2299:
  4352                           
  4353                           ;can.c: 79: {
  4354                           ;can.c: 80: Can_WriteOutBuffer();
  4355  002712  EC6A  F014         	call	_Can_WriteOutBuffer	;wreg free
  4356                           
  4357                           ;can.c: 81: nbTxBuf--;
  4358  002716  065E               	decf	Can_Isr@nbTxBuf,f,c
  4359  002718                     i2l2303:
  4360  002718  EC89  F014         	call	_Can_OutBufferStatus	;wreg free
  4361  00271C  0900               	iorlw	0
  4362  00271E  B4D8               	btfsc	status,2,c
  4363  002720  0012               	return	
  4364  002722  505E               	movf	Can_Isr@nbTxBuf,w,c
  4365  002724  B4D8               	btfsc	status,2,c
  4366  002726  0012               	return	
  4367  002728  D7F4               	goto	i2l2299
  4368  00272A                     __end_of_Can_Isr:
  4369                           	opt stack 0
  4370                           pclatu	equ	0xFFB
  4371                           pclath	equ	0xFFA
  4372                           tblptru	equ	0xFF8
  4373                           tblptrh	equ	0xFF7
  4374                           tblptrl	equ	0xFF6
  4375                           tablat	equ	0xFF5
  4376                           prodh	equ	0xFF4
  4377                           prodl	equ	0xFF3
  4378                           intcon	equ	0xFF2
  4379                           intcon2	equ	0xFF1
  4380                           intcon3	equ	0xFF0
  4381                           postinc0	equ	0xFEE
  4382                           fsr0h	equ	0xFEA
  4383                           fsr0l	equ	0xFE9
  4384                           wreg	equ	0xFE8
  4385                           indf1	equ	0xFE7
  4386                           postinc1	equ	0xFE6
  4387                           postdec1	equ	0xFE5
  4388                           fsr1h	equ	0xFE2
  4389                           fsr1l	equ	0xFE1
  4390                           indf2	equ	0xFDF
  4391                           postinc2	equ	0xFDE
  4392                           fsr2h	equ	0xFDA
  4393                           fsr2l	equ	0xFD9
  4394                           status	equ	0xFD8
  4395                           
  4396 ;; *************** function _Can_WriteOutBuffer *****************
  4397 ;; Defined at:
  4398 ;;		line 127 in file "can.c"
  4399 ;; Parameters:    Size  Location     Type
  4400 ;;		None
  4401 ;; Auto vars:     Size  Location     Type
  4402 ;;		None
  4403 ;; Return value:  Size  Location     Type
  4404 ;;                  1    wreg      unsigned char 
  4405 ;; Registers used:
  4406 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4407 ;; Tracked objects:
  4408 ;;		On entry : 0/0
  4409 ;;		On exit  : 0/0
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4416 ;;Total ram usage:        0 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; Hardware stack levels required when called:    5
  4419 ;; This function calls:
  4420 ;;		_Can_SendMessage
  4421 ;; This function is called by:
  4422 ;;		_Can_Isr
  4423 ;; This function uses a non-reentrant model
  4424 ;;
  4425                           
  4426                           	psect	text16
  4427  0028D4                     __ptext16:
  4428                           	opt stack 0
  4429  0028D4                     _Can_WriteOutBuffer:
  4430                           	opt stack 17
  4431                           
  4432                           ;can.c: 129: Can_SendMessage(&txBuffer[txBufferPtrOut]);
  4433                           
  4434                           ;incstack = 0
  4435  0028D4  5058               	movf	_txBufferPtrOut,w,c
  4436  0028D6  0D11               	mullw	17
  4437  0028D8  0E00               	movlw	low _txBuffer
  4438  0028DA  24F3               	addwf	prodl,w,c
  4439  0028DC  6E36               	movwf	Can_SendMessage@msg,c
  4440  0028DE  0E01               	movlw	high _txBuffer
  4441  0028E0  20F4               	addwfc	prodh,w,c
  4442  0028E2  6E37               	movwf	Can_SendMessage@msg+1,c
  4443  0028E4  ECE3  F012         	call	_Can_SendMessage	;wreg free
  4444                           
  4445                           ;can.c: 130: txBufferPtrOut = (txBufferPtrOut + 1) % 4;
  4446  0028E8  2858               	incf	_txBufferPtrOut,w,c
  4447  0028EA  0B03               	andlw	3
  4448  0028EC  6E58               	movwf	_txBufferPtrOut,c
  4449                           
  4450                           ;can.c: 131: txBufferCount--;
  4451  0028EE  0100               	movlb	0	; () banked
  4452  0028F0  07AB               	decf	_txBufferCount& (0+255),f,b
  4453  0028F2  0012               	return	
  4454  0028F4                     __end_of_Can_WriteOutBuffer:
  4455                           	opt stack 0
  4456                           pclatu	equ	0xFFB
  4457                           pclath	equ	0xFFA
  4458                           tblptru	equ	0xFF8
  4459                           tblptrh	equ	0xFF7
  4460                           tblptrl	equ	0xFF6
  4461                           tablat	equ	0xFF5
  4462                           prodh	equ	0xFF4
  4463                           prodl	equ	0xFF3
  4464                           intcon	equ	0xFF2
  4465                           intcon2	equ	0xFF1
  4466                           intcon3	equ	0xFF0
  4467                           postinc0	equ	0xFEE
  4468                           fsr0h	equ	0xFEA
  4469                           fsr0l	equ	0xFE9
  4470                           wreg	equ	0xFE8
  4471                           indf1	equ	0xFE7
  4472                           postinc1	equ	0xFE6
  4473                           postdec1	equ	0xFE5
  4474                           fsr1h	equ	0xFE2
  4475                           fsr1l	equ	0xFE1
  4476                           indf2	equ	0xFDF
  4477                           postinc2	equ	0xFDE
  4478                           fsr2h	equ	0xFDA
  4479                           fsr2l	equ	0xFD9
  4480                           status	equ	0xFD8
  4481                           
  4482 ;; *************** function _Can_SendMessage *****************
  4483 ;; Defined at:
  4484 ;;		line 426 in file "can.c"
  4485 ;; Parameters:    Size  Location     Type
  4486 ;;  msg             2   53[COMRAM] PTR const struct CANMESS
  4487 ;;		 -> txBuffer(68), 
  4488 ;; Auto vars:     Size  Location     Type
  4489 ;;  buf             4   55[COMRAM] unsigned char [4]
  4490 ;;  txbuf_n         1   60[COMRAM] unsigned char 
  4491 ;;  res             1   59[COMRAM] unsigned char 
  4492 ;; Return value:  Size  Location     Type
  4493 ;;                  1    wreg      unsigned char 
  4494 ;; Registers used:
  4495 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4496 ;; Tracked objects:
  4497 ;;		On entry : 0/0
  4498 ;;		On exit  : 0/0
  4499 ;;		Unchanged: 0/0
  4500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4501 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4502 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4504 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4505 ;;Total ram usage:        8 bytes
  4506 ;; Hardware stack levels used:    1
  4507 ;; Hardware stack levels required when called:    4
  4508 ;; This function calls:
  4509 ;;		_Mcp2515GetNextFreeTXBuf
  4510 ;;		_Mcp2515WriteCanMsg
  4511 ;;		i2_Spi_Write
  4512 ;; This function is called by:
  4513 ;;		_Can_WriteOutBuffer
  4514 ;; This function uses a non-reentrant model
  4515 ;;
  4516                           
  4517                           	psect	text17
  4518  0025C6                     __ptext17:
  4519                           	opt stack 0
  4520  0025C6                     _Can_SendMessage:
  4521                           	opt stack 17
  4522  0025C6                     
  4523                           ;can.c: 433: {
  4524                           ;can.c: 434: res = Mcp2515GetNextFreeTXBuf(&txbuf_n);
  4525  0025C6  0E3D               	movlw	low Can_SendMessage@txbuf_n
  4526  0025C8  6E13               	movwf	Mcp2515GetNextFreeTXBuf@txbuf_n,c
  4527  0025CA  0E00               	movlw	high Can_SendMessage@txbuf_n
  4528  0025CC  6E14               	movwf	Mcp2515GetNextFreeTXBuf@txbuf_n+1,c
  4529  0025CE  ECC8  F011         	call	_Mcp2515GetNextFreeTXBuf	;wreg free
  4530  0025D2  6E3C               	movwf	Can_SendMessage@res,c
  4531                           
  4532                           ;can.c: 436: } while (res == (2));
  4533  0025D4  0E02               	movlw	2
  4534  0025D6  183C               	xorwf	Can_SendMessage@res,w,c
  4535  0025D8  B4D8               	btfsc	status,2,c
  4536  0025DA  D7F5               	goto	i2l2029
  4537                           
  4538                           ;can.c: 438: if (res != (2))
  4539  0025DC  0E02               	movlw	2
  4540  0025DE  183C               	xorwf	Can_SendMessage@res,w,c
  4541  0025E0  B4D8               	btfsc	status,2,c
  4542  0025E2  0012               	return	
  4543                           
  4544                           ;can.c: 439: {
  4545                           ;can.c: 440: Mcp2515WriteCanMsg( txbuf_n, msg);
  4546  0025E4  C036  F024         	movff	Can_SendMessage@msg,Mcp2515WriteCanMsg@msg
  4547  0025E8  C037  F025         	movff	Can_SendMessage@msg+1,Mcp2515WriteCanMsg@msg+1
  4548  0025EC  503D               	movf	Can_SendMessage@txbuf_n,w,c
  4549  0025EE  EC07  F00F         	call	_Mcp2515WriteCanMsg
  4550                           
  4551                           ;can.c: 441: buf[0] = 0x02;
  4552  0025F2  0E02               	movlw	2
  4553  0025F4  6E38               	movwf	Can_SendMessage@buf,c
  4554                           
  4555                           ;can.c: 442: buf[1] = txbuf_n-1;
  4556  0025F6  043D               	decf	Can_SendMessage@txbuf_n,w,c
  4557  0025F8  6E39               	movwf	Can_SendMessage@buf+1,c
  4558                           
  4559                           ;can.c: 443: buf[2] = 0x08 | msg->txPrio;
  4560  0025FA  EE20 F010          	lfsr	2,16
  4561  0025FE  5036               	movf	Can_SendMessage@msg,w,c
  4562  002600  26D9               	addwf	fsr2l,f,c
  4563  002602  5037               	movf	Can_SendMessage@msg+1,w,c
  4564  002604  22DA               	addwfc	fsr2h,f,c
  4565  002606  50DF               	movf	indf2,w,c
  4566  002608  0908               	iorlw	8
  4567  00260A  6E3A               	movwf	Can_SendMessage@buf+2,c
  4568                           
  4569                           ;can.c: 444: Spi_Write(buf,3);
  4570  00260C  0E38               	movlw	low Can_SendMessage@buf
  4571  00260E  6E0D               	movwf	i2Spi_Write@tx,c
  4572  002610  0E00               	movlw	high Can_SendMessage@buf
  4573  002612  6E0E               	movwf	i2Spi_Write@tx+1,c
  4574  002614  0E03               	movlw	3
  4575  002616  6E0F               	movwf	i2Spi_Write@size,c
  4576  002618  0E00               	movlw	0
  4577  00261A  6E10               	movwf	i2Spi_Write@size+1,c
  4578  00261C  0E00               	movlw	0
  4579  00261E  6E11               	movwf	i2Spi_Write@size+2,c
  4580  002620  0E00               	movlw	0
  4581  002622  6E12               	movwf	i2Spi_Write@size+3,c
  4582  002624  EC44  F014         	call	i2_Spi_Write	;wreg free
  4583                           
  4584                           ;can.c: 447: else
  4585                           ;can.c: 448: {
  4586                           ;can.c: 449: return (2);
  4587                           ;	Return value of _Can_SendMessage is never used
  4588                           
  4589                           ;can.c: 446: }
  4590                           
  4591                           ;can.c: 445: return (0);
  4592                           ;	Return value of _Can_SendMessage is never used
  4593  002628  0012               	return	
  4594  00262A                     __end_of_Can_SendMessage:
  4595                           	opt stack 0
  4596                           pclatu	equ	0xFFB
  4597                           pclath	equ	0xFFA
  4598                           tblptru	equ	0xFF8
  4599                           tblptrh	equ	0xFF7
  4600                           tblptrl	equ	0xFF6
  4601                           tablat	equ	0xFF5
  4602                           prodh	equ	0xFF4
  4603                           prodl	equ	0xFF3
  4604                           intcon	equ	0xFF2
  4605                           intcon2	equ	0xFF1
  4606                           intcon3	equ	0xFF0
  4607                           postinc0	equ	0xFEE
  4608                           fsr0h	equ	0xFEA
  4609                           fsr0l	equ	0xFE9
  4610                           wreg	equ	0xFE8
  4611                           indf1	equ	0xFE7
  4612                           postinc1	equ	0xFE6
  4613                           postdec1	equ	0xFE5
  4614                           fsr1h	equ	0xFE2
  4615                           fsr1l	equ	0xFE1
  4616                           indf2	equ	0xFDF
  4617                           postinc2	equ	0xFDE
  4618                           fsr2h	equ	0xFDA
  4619                           fsr2l	equ	0xFD9
  4620                           status	equ	0xFD8
  4621                           
  4622 ;; *************** function _Mcp2515WriteCanMsg *****************
  4623 ;; Defined at:
  4624 ;;		line 272 in file "mcp2515.c"
  4625 ;; Parameters:    Size  Location     Type
  4626 ;;  buffer_sidh_    1    wreg     const unsigned char 
  4627 ;;  msg             2   35[COMRAM] PTR const struct CANMESS
  4628 ;;		 -> txBuffer(68), 
  4629 ;; Auto vars:     Size  Location     Type
  4630 ;;  buffer_sidh_    1   49[COMRAM] const unsigned char 
  4631 ;;  buf            10   39[COMRAM] unsigned char [10]
  4632 ;;  i               1   52[COMRAM] unsigned char 
  4633 ;;  mcp_addr        1   51[COMRAM] unsigned char 
  4634 ;;  dlc             1   50[COMRAM] unsigned char 
  4635 ;; Return value:  Size  Location     Type
  4636 ;;                  1    wreg      void 
  4637 ;; Registers used:
  4638 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4639 ;; Tracked objects:
  4640 ;;		On entry : 0/0
  4641 ;;		On exit  : 0/0
  4642 ;;		Unchanged: 0/0
  4643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4644 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4645 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4646 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4647 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4648 ;;Total ram usage:       18 bytes
  4649 ;; Hardware stack levels used:    1
  4650 ;; Hardware stack levels required when called:    3
  4651 ;; This function calls:
  4652 ;;		i2_Mcp2515WriteCanId
  4653 ;;		i2_Spi_Write
  4654 ;; This function is called by:
  4655 ;;		_Can_SendMessage
  4656 ;; This function uses a non-reentrant model
  4657 ;;
  4658                           
  4659                           	psect	text18
  4660  001E0E                     __ptext18:
  4661                           	opt stack 0
  4662  001E0E                     _Mcp2515WriteCanMsg:
  4663                           	opt stack 17
  4664                           
  4665                           ;incstack = 0
  4666                           ;Mcp2515WriteCanMsg@buffer_sidh_addr stored from wreg
  4667  001E0E  6E32               	movwf	Mcp2515WriteCanMsg@buffer_sidh_addr,c
  4668                           
  4669                           ;mcp2515.c: 275: uint8_t mcp_addr, i, dlc;
  4670                           ;mcp2515.c: 276: uint8_t buf[10];
  4671                           ;mcp2515.c: 277: mcp_addr = buffer_sidh_addr;
  4672  001E10  C032  F034         	movff	Mcp2515WriteCanMsg@buffer_sidh_addr,Mcp2515WriteCanMsg@mcp_addr
  4673                           
  4674                           ;mcp2515.c: 279: buf[0] = 0x02;
  4675  001E14  0E02               	movlw	2
  4676  001E16  6E28               	movwf	Mcp2515WriteCanMsg@buf,c
  4677                           
  4678                           ;mcp2515.c: 280: buf[1] = mcp_addr+5;
  4679  001E18  5034               	movf	Mcp2515WriteCanMsg@mcp_addr,w,c
  4680  001E1A  0F05               	addlw	5
  4681  001E1C  6E29               	movwf	Mcp2515WriteCanMsg@buf+1,c
  4682                           
  4683                           ;mcp2515.c: 282: for(i=0;i<msg->dlc;i++)
  4684  001E1E  0E00               	movlw	0
  4685  001E20  6E35               	movwf	Mcp2515WriteCanMsg@i,c
  4686  001E22  D01C               	goto	i2l1845
  4687  001E24                     i2l1841:
  4688                           
  4689                           ;mcp2515.c: 283: {
  4690                           ;mcp2515.c: 284: buf[i+2] = msg->dta[i];
  4691  001E24  5035               	movf	Mcp2515WriteCanMsg@i,w,c
  4692  001E26  0D01               	mullw	1
  4693  001E28  0E06               	movlw	6
  4694  001E2A  26F3               	addwf	prodl,f,c
  4695  001E2C  0E00               	movlw	0
  4696  001E2E  22F4               	addwfc	prodh,f,c
  4697  001E30  50F3               	movf	prodl,w,c
  4698  001E32  2424               	addwf	Mcp2515WriteCanMsg@msg,w,c
  4699  001E34  6ED9               	movwf	fsr2l,c
  4700  001E36  50F4               	movf	prodh,w,c
  4701  001E38  2025               	addwfc	Mcp2515WriteCanMsg@msg+1,w,c
  4702  001E3A  6EDA               	movwf	fsr2h,c
  4703  001E3C  5035               	movf	Mcp2515WriteCanMsg@i,w,c
  4704  001E3E  6E26               	movwf	??_Mcp2515WriteCanMsg& (0+255),c
  4705  001E40  6A27               	clrf	(??_Mcp2515WriteCanMsg+1)& (0+255),c
  4706  001E42  0E02               	movlw	2
  4707  001E44  2626               	addwf	??_Mcp2515WriteCanMsg,f,c
  4708  001E46  0E00               	movlw	0
  4709  001E48  2227               	addwfc	??_Mcp2515WriteCanMsg+1,f,c
  4710  001E4A  0E28               	movlw	low Mcp2515WriteCanMsg@buf
  4711  001E4C  2426               	addwf	??_Mcp2515WriteCanMsg,w,c
  4712  001E4E  6EE1               	movwf	fsr1l,c
  4713  001E50  0E00               	movlw	high Mcp2515WriteCanMsg@buf
  4714  001E52  2027               	addwfc	??_Mcp2515WriteCanMsg+1,w,c
  4715  001E54  6EE2               	movwf	fsr1h,c
  4716  001E56  CFDF FFE7          	movff	indf2,indf1
  4717  001E5A  2A35               	incf	Mcp2515WriteCanMsg@i,f,c
  4718  001E5C                     i2l1845:
  4719  001E5C  EE20 F005          	lfsr	2,5
  4720  001E60  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  4721  001E62  26D9               	addwf	fsr2l,f,c
  4722  001E64  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  4723  001E66  22DA               	addwfc	fsr2h,f,c
  4724  001E68  50DE               	movf	postinc2,w,c
  4725  001E6A  5C35               	subwf	Mcp2515WriteCanMsg@i,w,c
  4726  001E6C  A0D8               	btfss	status,0,c
  4727  001E6E  D7DA               	goto	i2l1841
  4728                           
  4729                           ;mcp2515.c: 285: }
  4730                           ;mcp2515.c: 286: Spi_Write(buf,msg->dlc + 2);
  4731  001E70  0E28               	movlw	low Mcp2515WriteCanMsg@buf
  4732  001E72  6E0D               	movwf	i2Spi_Write@tx,c
  4733  001E74  0E00               	movlw	high Mcp2515WriteCanMsg@buf
  4734  001E76  6E0E               	movwf	i2Spi_Write@tx+1,c
  4735  001E78  EE20 F005          	lfsr	2,5
  4736  001E7C  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  4737  001E7E  26D9               	addwf	fsr2l,f,c
  4738  001E80  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  4739  001E82  22DA               	addwfc	fsr2h,f,c
  4740  001E84  50DF               	movf	indf2,w,c
  4741  001E86  6E26               	movwf	??_Mcp2515WriteCanMsg& (0+255),c
  4742  001E88  6A27               	clrf	(??_Mcp2515WriteCanMsg+1)& (0+255),c
  4743  001E8A  0E02               	movlw	2
  4744  001E8C  2626               	addwf	??_Mcp2515WriteCanMsg,f,c
  4745  001E8E  0E00               	movlw	0
  4746  001E90  2227               	addwfc	??_Mcp2515WriteCanMsg+1,f,c
  4747  001E92  C026  F00F         	movff	??_Mcp2515WriteCanMsg,i2Spi_Write@size
  4748  001E96  C027  F010         	movff	??_Mcp2515WriteCanMsg+1,i2Spi_Write@size+1
  4749  001E9A  0E00               	movlw	0
  4750  001E9C  BE10               	btfsc	i2Spi_Write@size+1,7,c
  4751  001E9E  0EFF               	movlw	-1
  4752  001EA0  6E11               	movwf	i2Spi_Write@size+2,c
  4753  001EA2  6E12               	movwf	i2Spi_Write@size+3,c
  4754  001EA4  EC44  F014         	call	i2_Spi_Write	;wreg free
  4755                           
  4756                           ;mcp2515.c: 288: Mcp2515WriteCanId( mcp_addr,
  4757                           ;mcp2515.c: 289: msg->extended_identifier,
  4758                           ;mcp2515.c: 290: msg->identifier );
  4759  001EA8  C024  FFD9         	movff	Mcp2515WriteCanMsg@msg,fsr2l
  4760  001EAC  C025  FFDA         	movff	Mcp2515WriteCanMsg@msg+1,fsr2h
  4761  001EB0  50DF               	movf	indf2,w,c
  4762  001EB2  6E13               	movwf	i2Mcp2515WriteCanId@ext,c
  4763  001EB4  EE20 F001          	lfsr	2,1
  4764  001EB8  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  4765  001EBA  26D9               	addwf	fsr2l,f,c
  4766  001EBC  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  4767  001EBE  22DA               	addwfc	fsr2h,f,c
  4768  001EC0  CFDE F014          	movff	postinc2,i2Mcp2515WriteCanId@can_id
  4769  001EC4  CFDE F015          	movff	postinc2,i2Mcp2515WriteCanId@can_id+1
  4770  001EC8  CFDE F016          	movff	postinc2,i2Mcp2515WriteCanId@can_id+2
  4771  001ECC  CFDE F017          	movff	postinc2,i2Mcp2515WriteCanId@can_id+3
  4772  001ED0  5034               	movf	Mcp2515WriteCanMsg@mcp_addr,w,c
  4773  001ED2  EC20  F011         	call	i2_Mcp2515WriteCanId
  4774                           
  4775                           ;mcp2515.c: 291: dlc = msg->dlc;
  4776  001ED6  EE20 F005          	lfsr	2,5
  4777  001EDA  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  4778  001EDC  26D9               	addwf	fsr2l,f,c
  4779  001EDE  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  4780  001EE0  22DA               	addwfc	fsr2h,f,c
  4781  001EE2  50DF               	movf	indf2,w,c
  4782  001EE4  6E33               	movwf	Mcp2515WriteCanMsg@dlc,c
  4783                           
  4784                           ;mcp2515.c: 293: if ( msg->rtr == 1)
  4785  001EE6  EE20 F00E          	lfsr	2,14
  4786  001EEA  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  4787  001EEC  26D9               	addwf	fsr2l,f,c
  4788  001EEE  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  4789  001EF0  22DA               	addwfc	fsr2h,f,c
  4790  001EF2  04DE               	decf	postinc2,w,c
  4791  001EF4  A4D8               	btfss	status,2,c
  4792  001EF6  D009               	goto	i2l1855
  4793                           
  4794                           ;mcp2515.c: 294: {
  4795                           ;mcp2515.c: 295: dlc = msg->dlc | 0x40;
  4796  001EF8  EE20 F005          	lfsr	2,5
  4797  001EFC  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  4798  001EFE  26D9               	addwf	fsr2l,f,c
  4799  001F00  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  4800  001F02  22DA               	addwfc	fsr2h,f,c
  4801  001F04  50DF               	movf	indf2,w,c
  4802  001F06  0940               	iorlw	64
  4803  001F08  6E33               	movwf	Mcp2515WriteCanMsg@dlc,c
  4804  001F0A                     i2l1855:
  4805                           
  4806                           ;mcp2515.c: 296: }
  4807                           ;mcp2515.c: 297: buf[0] = 0x02;
  4808  001F0A  0E02               	movlw	2
  4809  001F0C  6E28               	movwf	Mcp2515WriteCanMsg@buf,c
  4810                           
  4811                           ;mcp2515.c: 298: buf[1] = mcp_addr+4;
  4812  001F0E  5034               	movf	Mcp2515WriteCanMsg@mcp_addr,w,c
  4813  001F10  0F04               	addlw	4
  4814  001F12  6E29               	movwf	Mcp2515WriteCanMsg@buf+1,c
  4815                           
  4816                           ;mcp2515.c: 299: buf[2] = dlc;
  4817  001F14  C033  F02A         	movff	Mcp2515WriteCanMsg@dlc,Mcp2515WriteCanMsg@buf+2
  4818                           
  4819                           ;mcp2515.c: 300: Spi_Write(buf,3);
  4820  001F18  0E28               	movlw	low Mcp2515WriteCanMsg@buf
  4821  001F1A  6E0D               	movwf	i2Spi_Write@tx,c
  4822  001F1C  0E00               	movlw	high Mcp2515WriteCanMsg@buf
  4823  001F1E  6E0E               	movwf	i2Spi_Write@tx+1,c
  4824  001F20  0E03               	movlw	3
  4825  001F22  6E0F               	movwf	i2Spi_Write@size,c
  4826  001F24  0E00               	movlw	0
  4827  001F26  6E10               	movwf	i2Spi_Write@size+1,c
  4828  001F28  0E00               	movlw	0
  4829  001F2A  6E11               	movwf	i2Spi_Write@size+2,c
  4830  001F2C  0E00               	movlw	0
  4831  001F2E  6E12               	movwf	i2Spi_Write@size+3,c
  4832  001F30  EC44  F014         	call	i2_Spi_Write	;wreg free
  4833  001F34  0012               	return		;funcret
  4834  001F36                     __end_of_Mcp2515WriteCanMsg:
  4835                           	opt stack 0
  4836                           pclatu	equ	0xFFB
  4837                           pclath	equ	0xFFA
  4838                           tblptru	equ	0xFF8
  4839                           tblptrh	equ	0xFF7
  4840                           tblptrl	equ	0xFF6
  4841                           tablat	equ	0xFF5
  4842                           prodh	equ	0xFF4
  4843                           prodl	equ	0xFF3
  4844                           intcon	equ	0xFF2
  4845                           intcon2	equ	0xFF1
  4846                           intcon3	equ	0xFF0
  4847                           postinc0	equ	0xFEE
  4848                           fsr0h	equ	0xFEA
  4849                           fsr0l	equ	0xFE9
  4850                           wreg	equ	0xFE8
  4851                           indf1	equ	0xFE7
  4852                           postinc1	equ	0xFE6
  4853                           postdec1	equ	0xFE5
  4854                           fsr1h	equ	0xFE2
  4855                           fsr1l	equ	0xFE1
  4856                           indf2	equ	0xFDF
  4857                           postinc2	equ	0xFDE
  4858                           fsr2h	equ	0xFDA
  4859                           fsr2l	equ	0xFD9
  4860                           status	equ	0xFD8
  4861                           
  4862 ;; *************** function i2_Mcp2515WriteCanId *****************
  4863 ;; Defined at:
  4864 ;;		line 233 in file "mcp2515.c"
  4865 ;; Parameters:    Size  Location     Type
  4866 ;;  mcp_addr        1    wreg     unsigned char 
  4867 ;;  ext             1   18[COMRAM] unsigned char 
  4868 ;;  can_id          4   19[COMRAM] unsigned long 
  4869 ;; Auto vars:     Size  Location     Type
  4870 ;;  mcp_addr        1   26[COMRAM] unsigned char 
  4871 ;;  Mcp2515Write    6   27[COMRAM] unsigned char [6]
  4872 ;;  Mcp2515Write    2   33[COMRAM] unsigned int 
  4873 ;; Return value:  Size  Location     Type
  4874 ;;                  1    wreg      void 
  4875 ;; Registers used:
  4876 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4877 ;; Tracked objects:
  4878 ;;		On entry : 0/0
  4879 ;;		On exit  : 0/0
  4880 ;;		Unchanged: 0/0
  4881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4882 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4883 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4884 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4885 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4886 ;;Total ram usage:       17 bytes
  4887 ;; Hardware stack levels used:    1
  4888 ;; Hardware stack levels required when called:    2
  4889 ;; This function calls:
  4890 ;;		i2_Spi_Write
  4891 ;; This function is called by:
  4892 ;;		_Mcp2515WriteCanMsg
  4893 ;; This function uses a non-reentrant model
  4894 ;;
  4895                           
  4896                           	psect	text19
  4897  002240                     __ptext19:
  4898                           	opt stack 0
  4899  002240                     i2_Mcp2515WriteCanId:
  4900                           	opt stack 17
  4901                           
  4902                           ;incstack = 0
  4903                           ;i2Mcp2515WriteCanId@mcp_addr stored from wreg
  4904  002240  6E1B               	movwf	i2Mcp2515WriteCanId@mcp_addr,c
  4905                           
  4906                           ;mcp2515.c: 235: uint16_t canid;
  4907                           ;mcp2515.c: 236: uint8_t buf[6];
  4908                           ;mcp2515.c: 238: canid = (uint16_t)(can_id & 0x0FFFF);
  4909  002242  C014  F022         	movff	i2Mcp2515WriteCanId@can_id,i2Mcp2515WriteCanId@canid
  4910  002246  C015  F023         	movff	i2Mcp2515WriteCanId@can_id+1,i2Mcp2515WriteCanId@canid+1
  4911                           
  4912                           ;mcp2515.c: 240: buf[0] = 0x02;
  4913  00224A  0E02               	movlw	2
  4914  00224C  6E1C               	movwf	i2Mcp2515WriteCanId@buf,c
  4915                           
  4916                           ;mcp2515.c: 241: buf[1] = mcp_addr;
  4917  00224E  C01B  F01D         	movff	i2Mcp2515WriteCanId@mcp_addr,i2Mcp2515WriteCanId@buf+1
  4918                           
  4919                           ;mcp2515.c: 243: if ( ext == 1)
  4920  002252  0413               	decf	i2Mcp2515WriteCanId@ext,w,c
  4921  002254  A4D8               	btfss	status,2,c
  4922  002256  D025               	goto	i2l1767
  4923                           
  4924                           ;mcp2515.c: 244: {
  4925                           ;mcp2515.c: 245: buf[3+2] = (uint8_t) (canid & 0xFF);
  4926  002258  C022  F021         	movff	i2Mcp2515WriteCanId@canid,i2Mcp2515WriteCanId@buf+5
  4927                           
  4928                           ;mcp2515.c: 246: buf[2+2] = (uint8_t) (canid >> 8);
  4929  00225C  5023               	movf	i2Mcp2515WriteCanId@canid+1,w,c
  4930  00225E  6E20               	movwf	i2Mcp2515WriteCanId@buf+4,c
  4931                           
  4932                           ;mcp2515.c: 247: canid = (uint16_t)( can_id / 0x10000L );
  4933  002260  C016  F022         	movff	i2Mcp2515WriteCanId@can_id+2,i2Mcp2515WriteCanId@canid
  4934  002264  C017  F023         	movff	i2Mcp2515WriteCanId@can_id+3,i2Mcp2515WriteCanId@canid+1
  4935                           
  4936                           ;mcp2515.c: 248: buf[1+2] = (uint8_t) (canid & 0x03);
  4937  002268  5022               	movf	i2Mcp2515WriteCanId@canid,w,c
  4938  00226A  0B03               	andlw	3
  4939  00226C  6E1F               	movwf	i2Mcp2515WriteCanId@buf+3,c
  4940                           
  4941                           ;mcp2515.c: 249: buf[1+2] += (uint8_t) ((canid & 0x1C )*8);
  4942  00226E  C022  F018         	movff	i2Mcp2515WriteCanId@canid,??i2_Mcp2515WriteCanId
  4943  002272  0E1C               	movlw	28
  4944  002274  1618               	andwf	??i2_Mcp2515WriteCanId,f,c
  4945  002276  90D8               	bcf	status,0,c
  4946  002278  3618               	rlcf	??i2_Mcp2515WriteCanId,f,c
  4947  00227A  90D8               	bcf	status,0,c
  4948  00227C  3618               	rlcf	??i2_Mcp2515WriteCanId,f,c
  4949  00227E  90D8               	bcf	status,0,c
  4950  002280  3418               	rlcf	??i2_Mcp2515WriteCanId,w,c
  4951  002282  261F               	addwf	i2Mcp2515WriteCanId@buf+3,f,c
  4952                           
  4953                           ;mcp2515.c: 250: buf[1+2] |= 0x08;
  4954  002284  861F               	bsf	i2Mcp2515WriteCanId@buf+3,3,c
  4955                           
  4956                           ;mcp2515.c: 251: buf[0+2] = (uint8_t) (canid / 32 );
  4957  002286  C022  F018         	movff	i2Mcp2515WriteCanId@canid,??i2_Mcp2515WriteCanId
  4958  00228A  C023  F019         	movff	i2Mcp2515WriteCanId@canid+1,??i2_Mcp2515WriteCanId+1
  4959  00228E  0E05               	movlw	5
  4960  002290  6E1A               	movwf	(??i2_Mcp2515WriteCanId+2)& (0+255),c
  4961  002292                     i2u79_45:
  4962  002292  90D8               	bcf	status,0,c
  4963  002294  3219               	rrcf	??i2_Mcp2515WriteCanId+1,f,c
  4964  002296  3218               	rrcf	??i2_Mcp2515WriteCanId,f,c
  4965  002298  2E1A               	decfsz	(??i2_Mcp2515WriteCanId+2)& (0+255),f,c
  4966  00229A  D7FB               	goto	i2u79_45
  4967  00229C  5018               	movf	??i2_Mcp2515WriteCanId,w,c
  4968  00229E  6E1E               	movwf	i2Mcp2515WriteCanId@buf+2,c
  4969                           
  4970                           ;mcp2515.c: 252: }
  4971  0022A0  D01F               	goto	i2l1773
  4972  0022A2                     i2l1767:
  4973                           
  4974                           ;mcp2515.c: 254: else
  4975                           ;mcp2515.c: 255: {
  4976                           ;mcp2515.c: 256: buf[0+2] = (uint8_t) (canid >> 3);
  4977  0022A2  C022  F018         	movff	i2Mcp2515WriteCanId@canid,??i2_Mcp2515WriteCanId
  4978  0022A6  C023  F019         	movff	i2Mcp2515WriteCanId@canid+1,??i2_Mcp2515WriteCanId+1
  4979  0022AA  90D8               	bcf	status,0,c
  4980  0022AC  3219               	rrcf	??i2_Mcp2515WriteCanId+1,f,c
  4981  0022AE  3218               	rrcf	??i2_Mcp2515WriteCanId,f,c
  4982  0022B0  90D8               	bcf	status,0,c
  4983  0022B2  3219               	rrcf	??i2_Mcp2515WriteCanId+1,f,c
  4984  0022B4  3218               	rrcf	??i2_Mcp2515WriteCanId,f,c
  4985  0022B6  90D8               	bcf	status,0,c
  4986  0022B8  3219               	rrcf	??i2_Mcp2515WriteCanId+1,f,c
  4987  0022BA  3218               	rrcf	??i2_Mcp2515WriteCanId,f,c
  4988  0022BC  5018               	movf	??i2_Mcp2515WriteCanId,w,c
  4989  0022BE  6E1E               	movwf	i2Mcp2515WriteCanId@buf+2,c
  4990                           
  4991                           ;mcp2515.c: 257: buf[1+2] = (uint8_t) ((canid & 0x07 )*32);
  4992  0022C0  C022  F018         	movff	i2Mcp2515WriteCanId@canid,??i2_Mcp2515WriteCanId
  4993  0022C4  0E07               	movlw	7
  4994  0022C6  1618               	andwf	??i2_Mcp2515WriteCanId,f,c
  4995  0022C8  0E05               	movlw	5
  4996  0022CA  6E19               	movwf	(??i2_Mcp2515WriteCanId+1)& (0+255),c
  4997  0022CC                     i2u80_45:
  4998  0022CC  90D8               	bcf	status,0,c
  4999  0022CE  3618               	rlcf	??i2_Mcp2515WriteCanId,f,c
  5000  0022D0  2E19               	decfsz	(??i2_Mcp2515WriteCanId+1)& (0+255),f,c
  5001  0022D2  D7FC               	goto	i2u80_45
  5002  0022D4  5018               	movf	??i2_Mcp2515WriteCanId,w,c
  5003  0022D6  6E1F               	movwf	i2Mcp2515WriteCanId@buf+3,c
  5004                           
  5005                           ;mcp2515.c: 258: buf[3+2] = 0;
  5006  0022D8  0E00               	movlw	0
  5007  0022DA  6E21               	movwf	i2Mcp2515WriteCanId@buf+5,c
  5008                           
  5009                           ;mcp2515.c: 259: buf[2+2] = 0;
  5010  0022DC  0E00               	movlw	0
  5011  0022DE  6E20               	movwf	i2Mcp2515WriteCanId@buf+4,c
  5012  0022E0                     i2l1773:
  5013                           
  5014                           ;mcp2515.c: 260: }
  5015                           ;mcp2515.c: 261: Spi_Write(buf,6);
  5016  0022E0  0E1C               	movlw	low i2Mcp2515WriteCanId@buf
  5017  0022E2  6E0D               	movwf	i2Spi_Write@tx,c
  5018  0022E4  0E00               	movlw	high i2Mcp2515WriteCanId@buf
  5019  0022E6  6E0E               	movwf	i2Spi_Write@tx+1,c
  5020  0022E8  0E06               	movlw	6
  5021  0022EA  6E0F               	movwf	i2Spi_Write@size,c
  5022  0022EC  0E00               	movlw	0
  5023  0022EE  6E10               	movwf	i2Spi_Write@size+1,c
  5024  0022F0  0E00               	movlw	0
  5025  0022F2  6E11               	movwf	i2Spi_Write@size+2,c
  5026  0022F4  0E00               	movlw	0
  5027  0022F6  6E12               	movwf	i2Spi_Write@size+3,c
  5028  0022F8  EC44  F014         	call	i2_Spi_Write	;wreg free
  5029  0022FC  0012               	return		;funcret
  5030  0022FE                     __end_ofi2_Mcp2515WriteCanId:
  5031                           	opt stack 0
  5032                           pclatu	equ	0xFFB
  5033                           pclath	equ	0xFFA
  5034                           tblptru	equ	0xFF8
  5035                           tblptrh	equ	0xFF7
  5036                           tblptrl	equ	0xFF6
  5037                           tablat	equ	0xFF5
  5038                           prodh	equ	0xFF4
  5039                           prodl	equ	0xFF3
  5040                           intcon	equ	0xFF2
  5041                           intcon2	equ	0xFF1
  5042                           intcon3	equ	0xFF0
  5043                           postinc0	equ	0xFEE
  5044                           fsr0h	equ	0xFEA
  5045                           fsr0l	equ	0xFE9
  5046                           wreg	equ	0xFE8
  5047                           indf1	equ	0xFE7
  5048                           postinc1	equ	0xFE6
  5049                           postdec1	equ	0xFE5
  5050                           fsr1h	equ	0xFE2
  5051                           fsr1l	equ	0xFE1
  5052                           indf2	equ	0xFDF
  5053                           postinc2	equ	0xFDE
  5054                           fsr2h	equ	0xFDA
  5055                           fsr2l	equ	0xFD9
  5056                           status	equ	0xFD8
  5057                           
  5058 ;; *************** function _Mcp2515GetNextFreeTXBuf *****************
  5059 ;; Defined at:
  5060 ;;		line 311 in file "mcp2515.c"
  5061 ;; Parameters:    Size  Location     Type
  5062 ;;  txbuf_n         2   18[COMRAM] PTR unsigned char 
  5063 ;;		 -> Can_SendMessage@txbuf_n(1), 
  5064 ;; Auto vars:     Size  Location     Type
  5065 ;;  buf             3   24[COMRAM] unsigned char [3]
  5066 ;;  ctrlregs        3   21[COMRAM] unsigned char [3]
  5067 ;;  i               1   27[COMRAM] unsigned char 
  5068 ;; Return value:  Size  Location     Type
  5069 ;;                  1    wreg      unsigned char 
  5070 ;; Registers used:
  5071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5072 ;; Tracked objects:
  5073 ;;		On entry : 0/0
  5074 ;;		On exit  : 0/0
  5075 ;;		Unchanged: 0/0
  5076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5077 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5078 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5079 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5080 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5081 ;;Total ram usage:       10 bytes
  5082 ;; Hardware stack levels used:    1
  5083 ;; Hardware stack levels required when called:    2
  5084 ;; This function calls:
  5085 ;;		_Spi_ReadWrite
  5086 ;; This function is called by:
  5087 ;;		_Can_SendMessage
  5088 ;; This function uses a non-reentrant model
  5089 ;;
  5090                           
  5091                           	psect	text20
  5092  002390                     __ptext20:
  5093                           	opt stack 0
  5094  002390                     _Mcp2515GetNextFreeTXBuf:
  5095                           	opt stack 18
  5096                           
  5097                           ;mcp2515.c: 313: uint8_t i;
  5098                           ;mcp2515.c: 314: uint8_t ctrlregs[(3)] = {0x30,0x40,0x50};
  5099                           
  5100                           ;incstack = 0
  5101  002390  C0F0  F016         	movff	Mcp2515GetNextFreeTXBuf@F8153,Mcp2515GetNextFreeTXBuf@ctrlregs
  5102  002394  C0F1  F017         	movff	Mcp2515GetNextFreeTXBuf@F8153+1,Mcp2515GetNextFreeTXBuf@ctrlregs+1
  5103  002398  C0F2  F018         	movff	Mcp2515GetNextFreeTXBuf@F8153+2,Mcp2515GetNextFreeTXBuf@ctrlregs+2
  5104                           
  5105                           ;mcp2515.c: 315: uint8_t buf[3];
  5106                           ;mcp2515.c: 316: *txbuf_n = 0x00;
  5107  00239C  C013  FFD9         	movff	Mcp2515GetNextFreeTXBuf@txbuf_n,fsr2l
  5108  0023A0  C014  FFDA         	movff	Mcp2515GetNextFreeTXBuf@txbuf_n+1,fsr2h
  5109  0023A4  0E00               	movlw	0
  5110  0023A6  6EDF               	movwf	indf2,c
  5111                           
  5112                           ;mcp2515.c: 319: for (i=0; i<(3); i++)
  5113  0023A8  0E00               	movlw	0
  5114  0023AA  6E1C               	movwf	Mcp2515GetNextFreeTXBuf@i,c
  5115  0023AC                     i2l1807:
  5116  0023AC  0E02               	movlw	2
  5117  0023AE  641C               	cpfsgt	Mcp2515GetNextFreeTXBuf@i,c
  5118  0023B0  D001               	goto	i2l1811
  5119  0023B2  D030               	goto	i2l1829
  5120  0023B4                     i2l1811:
  5121                           
  5122                           ;mcp2515.c: 320: {
  5123                           ;mcp2515.c: 321: buf[0] = 0x03;
  5124  0023B4  0E03               	movlw	3
  5125  0023B6  6E19               	movwf	Mcp2515GetNextFreeTXBuf@buf,c
  5126                           
  5127                           ;mcp2515.c: 322: buf[1] = ctrlregs[i];
  5128  0023B8  501C               	movf	Mcp2515GetNextFreeTXBuf@i,w,c
  5129  0023BA  0D01               	mullw	1
  5130  0023BC  0E16               	movlw	low Mcp2515GetNextFreeTXBuf@ctrlregs
  5131  0023BE  24F3               	addwf	prodl,w,c
  5132  0023C0  6ED9               	movwf	fsr2l,c
  5133  0023C2  0E00               	movlw	high Mcp2515GetNextFreeTXBuf@ctrlregs
  5134  0023C4  20F4               	addwfc	prodh,w,c
  5135  0023C6  6EDA               	movwf	fsr2h,c
  5136  0023C8  50DF               	movf	indf2,w,c
  5137  0023CA  6E1A               	movwf	Mcp2515GetNextFreeTXBuf@buf+1,c
  5138                           
  5139                           ;mcp2515.c: 323: Spi_ReadWrite(buf,3);
  5140  0023CC  0E19               	movlw	low Mcp2515GetNextFreeTXBuf@buf
  5141  0023CE  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  5142  0023D0  0E00               	movlw	high Mcp2515GetNextFreeTXBuf@buf
  5143  0023D2  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  5144  0023D4  0E03               	movlw	3
  5145  0023D6  6E0F               	movwf	Spi_ReadWrite@size,c
  5146  0023D8  0E00               	movlw	0
  5147  0023DA  6E10               	movwf	Spi_ReadWrite@size+1,c
  5148  0023DC  0E00               	movlw	0
  5149  0023DE  6E11               	movwf	Spi_ReadWrite@size+2,c
  5150  0023E0  0E00               	movlw	0
  5151  0023E2  6E12               	movwf	Spi_ReadWrite@size+3,c
  5152  0023E4  EC57  F014         	call	_Spi_ReadWrite	;wreg free
  5153                           
  5154                           ;mcp2515.c: 325: if ( (buf[2] & 0x08) == 0 )
  5155  0023E8  B61B               	btfsc	Mcp2515GetNextFreeTXBuf@buf+2,3,c
  5156  0023EA  D012               	goto	i2l1825
  5157                           
  5158                           ;mcp2515.c: 326: {
  5159                           ;mcp2515.c: 327: *txbuf_n = ctrlregs[i]+1;
  5160  0023EC  501C               	movf	Mcp2515GetNextFreeTXBuf@i,w,c
  5161  0023EE  0D01               	mullw	1
  5162  0023F0  0E16               	movlw	low Mcp2515GetNextFreeTXBuf@ctrlregs
  5163  0023F2  24F3               	addwf	prodl,w,c
  5164  0023F4  6ED9               	movwf	fsr2l,c
  5165  0023F6  0E00               	movlw	high Mcp2515GetNextFreeTXBuf@ctrlregs
  5166  0023F8  20F4               	addwfc	prodh,w,c
  5167  0023FA  6EDA               	movwf	fsr2h,c
  5168  0023FC  50DF               	movf	indf2,w,c
  5169  0023FE  6E15               	movwf	??_Mcp2515GetNextFreeTXBuf& (0+255),c
  5170  002400  2815               	incf	??_Mcp2515GetNextFreeTXBuf,w,c
  5171  002402  C013  FFD9         	movff	Mcp2515GetNextFreeTXBuf@txbuf_n,fsr2l
  5172  002406  C014  FFDA         	movff	Mcp2515GetNextFreeTXBuf@txbuf_n+1,fsr2h
  5173  00240A  6EDF               	movwf	indf2,c
  5174                           
  5175                           ;mcp2515.c: 328: return (0);
  5176  00240C  0E00               	movlw	0
  5177  00240E  0012               	return	
  5178  002410                     i2l1825:
  5179  002410  2A1C               	incf	Mcp2515GetNextFreeTXBuf@i,f,c
  5180  002412  D7CC               	goto	i2l1807
  5181  002414                     i2l1829:
  5182                           
  5183                           ;mcp2515.c: 329: }
  5184                           ;mcp2515.c: 330: }
  5185                           ;mcp2515.c: 331: return (2);
  5186  002414  0E02               	movlw	2
  5187  002416  0012               	return	
  5188  002418                     __end_of_Mcp2515GetNextFreeTXBuf:
  5189                           	opt stack 0
  5190                           pclatu	equ	0xFFB
  5191                           pclath	equ	0xFFA
  5192                           tblptru	equ	0xFF8
  5193                           tblptrh	equ	0xFF7
  5194                           tblptrl	equ	0xFF6
  5195                           tablat	equ	0xFF5
  5196                           prodh	equ	0xFF4
  5197                           prodl	equ	0xFF3
  5198                           intcon	equ	0xFF2
  5199                           intcon2	equ	0xFF1
  5200                           intcon3	equ	0xFF0
  5201                           postinc0	equ	0xFEE
  5202                           fsr0h	equ	0xFEA
  5203                           fsr0l	equ	0xFE9
  5204                           wreg	equ	0xFE8
  5205                           indf1	equ	0xFE7
  5206                           postinc1	equ	0xFE6
  5207                           postdec1	equ	0xFE5
  5208                           fsr1h	equ	0xFE2
  5209                           fsr1l	equ	0xFE1
  5210                           indf2	equ	0xFDF
  5211                           postinc2	equ	0xFDE
  5212                           fsr2h	equ	0xFDA
  5213                           fsr2l	equ	0xFD9
  5214                           status	equ	0xFD8
  5215                           
  5216 ;; *************** function _Can_ReadInBuffer *****************
  5217 ;; Defined at:
  5218 ;;		line 94 in file "can.c"
  5219 ;; Parameters:    Size  Location     Type
  5220 ;;		None
  5221 ;; Auto vars:     Size  Location     Type
  5222 ;;  i               1   70[COMRAM] unsigned char 
  5223 ;;  rdStatus        1   69[COMRAM] unsigned char 
  5224 ;;  error           1   68[COMRAM] unsigned char 
  5225 ;; Return value:  Size  Location     Type
  5226 ;;                  1    wreg      unsigned char 
  5227 ;; Registers used:
  5228 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5229 ;; Tracked objects:
  5230 ;;		On entry : 0/0
  5231 ;;		On exit  : 0/0
  5232 ;;		Unchanged: 0/0
  5233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5235 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5237 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5238 ;;Total ram usage:        3 bytes
  5239 ;; Hardware stack levels used:    1
  5240 ;; Hardware stack levels required when called:    5
  5241 ;; This function calls:
  5242 ;;		_Can_ReadMessage
  5243 ;; This function is called by:
  5244 ;;		_Can_Isr
  5245 ;; This function uses a non-reentrant model
  5246 ;;
  5247                           
  5248                           	psect	text21
  5249  00272A                     __ptext21:
  5250                           	opt stack 0
  5251  00272A                     _Can_ReadInBuffer:
  5252                           	opt stack 17
  5253                           
  5254                           ;can.c: 96: uint8_t i;
  5255                           ;can.c: 97: uint8_t error=0;
  5256                           
  5257                           ;incstack = 0
  5258  00272A  0E00               	movlw	0
  5259  00272C  6E45               	movwf	Can_ReadInBuffer@error,c
  5260                           
  5261                           ;can.c: 98: uint8_t rdStatus;
  5262                           ;can.c: 100: for(i=0;i<2;i++)
  5263  00272E  0E00               	movlw	0
  5264  002730  6E47               	movwf	Can_ReadInBuffer@i,c
  5265  002732                     i2l2233:
  5266  002732  0E01               	movlw	1
  5267  002734  6447               	cpfsgt	Can_ReadInBuffer@i,c
  5268  002736  D001               	goto	i2l2237
  5269  002738  0012               	return	
  5270  00273A                     i2l2237:
  5271                           
  5272                           ;can.c: 101: {
  5273                           ;can.c: 102: rdStatus = Can_ReadMessage(&rxBuffer[rxBufferPtrIn]);
  5274  00273A  505A               	movf	_rxBufferPtrIn,w,c
  5275  00273C  0D11               	mullw	17
  5276  00273E  0E44               	movlw	low _rxBuffer
  5277  002740  24F3               	addwf	prodl,w,c
  5278  002742  6E3F               	movwf	Can_ReadMessage@msg,c
  5279  002744  0E01               	movlw	high _rxBuffer
  5280  002746  20F4               	addwfc	prodh,w,c
  5281  002748  6E40               	movwf	Can_ReadMessage@msg+1,c
  5282  00274A  ECA3  F010         	call	_Can_ReadMessage	;wreg free
  5283  00274E  6E46               	movwf	Can_ReadInBuffer@rdStatus,c
  5284                           
  5285                           ;can.c: 103: if((rxBufferCount) < 4)
  5286  002750  0E04               	movlw	4
  5287  002752  6059               	cpfslt	_rxBufferCount,c
  5288  002754  D008               	goto	i2l2247
  5289                           
  5290                           ;can.c: 104: {
  5291                           ;can.c: 105: if(rdStatus == (0))
  5292  002756  5046               	movf	Can_ReadInBuffer@rdStatus,w,c
  5293  002758  A4D8               	btfss	status,2,c
  5294  00275A  D007               	goto	i2l2249
  5295                           
  5296                           ;can.c: 106: {
  5297                           ;can.c: 107: rxBufferCount++;
  5298  00275C  2A59               	incf	_rxBufferCount,f,c
  5299                           
  5300                           ;can.c: 108: rxBufferPtrIn = (rxBufferPtrIn + 1) % 4;
  5301  00275E  285A               	incf	_rxBufferPtrIn,w,c
  5302  002760  0B03               	andlw	3
  5303  002762  6E5A               	movwf	_rxBufferPtrIn,c
  5304                           
  5305                           ;can.c: 109: }
  5306                           ;can.c: 110: }
  5307  002764  D002               	goto	i2l2249
  5308  002766                     i2l2247:
  5309                           
  5310                           ;can.c: 111: else
  5311                           ;can.c: 112: {
  5312                           ;can.c: 113: error = 1;
  5313  002766  0E01               	movlw	1
  5314  002768  6E45               	movwf	Can_ReadInBuffer@error,c
  5315  00276A                     i2l2249:
  5316  00276A  2A47               	incf	Can_ReadInBuffer@i,f,c
  5317  00276C  D7E2               	goto	i2l2233
  5318  00276E                     __end_of_Can_ReadInBuffer:
  5319                           	opt stack 0
  5320                           pclatu	equ	0xFFB
  5321                           pclath	equ	0xFFA
  5322                           tblptru	equ	0xFF8
  5323                           tblptrh	equ	0xFF7
  5324                           tblptrl	equ	0xFF6
  5325                           tablat	equ	0xFF5
  5326                           prodh	equ	0xFF4
  5327                           prodl	equ	0xFF3
  5328                           intcon	equ	0xFF2
  5329                           intcon2	equ	0xFF1
  5330                           intcon3	equ	0xFF0
  5331                           postinc0	equ	0xFEE
  5332                           fsr0h	equ	0xFEA
  5333                           fsr0l	equ	0xFE9
  5334                           wreg	equ	0xFE8
  5335                           indf1	equ	0xFE7
  5336                           postinc1	equ	0xFE6
  5337                           postdec1	equ	0xFE5
  5338                           fsr1h	equ	0xFE2
  5339                           fsr1l	equ	0xFE1
  5340                           indf2	equ	0xFDF
  5341                           postinc2	equ	0xFDE
  5342                           fsr2h	equ	0xFDA
  5343                           fsr2l	equ	0xFD9
  5344                           status	equ	0xFD8
  5345                           
  5346 ;; *************** function _Can_ReadMessage *****************
  5347 ;; Defined at:
  5348 ;;		line 372 in file "can.c"
  5349 ;; Parameters:    Size  Location     Type
  5350 ;;  msg             2   62[COMRAM] PTR struct CANMESSAGE
  5351 ;;		 -> rxBuffer(68), 
  5352 ;; Auto vars:     Size  Location     Type
  5353 ;;  buf             4   64[COMRAM] unsigned char [4]
  5354 ;; Return value:  Size  Location     Type
  5355 ;;                  1    wreg      unsigned char 
  5356 ;; Registers used:
  5357 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5358 ;; Tracked objects:
  5359 ;;		On entry : 0/0
  5360 ;;		On exit  : 0/0
  5361 ;;		Unchanged: 0/0
  5362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5363 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5364 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5366 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5367 ;;Total ram usage:        6 bytes
  5368 ;; Hardware stack levels used:    1
  5369 ;; Hardware stack levels required when called:    4
  5370 ;; This function calls:
  5371 ;;		_Mcp2515ReadCanMsg
  5372 ;;		_Spi_ReadWrite
  5373 ;;		i2_Spi_Write
  5374 ;; This function is called by:
  5375 ;;		_Can_ReadInBuffer
  5376 ;; This function uses a non-reentrant model
  5377 ;;
  5378                           
  5379                           	psect	text22
  5380  002146                     __ptext22:
  5381                           	opt stack 0
  5382  002146                     _Can_ReadMessage:
  5383                           	opt stack 17
  5384                           
  5385                           ;can.c: 374: uint8_t buf[4];
  5386                           ;can.c: 376: buf[0] = 0xA0;
  5387                           
  5388                           ;incstack = 0
  5389  002146  0EA0               	movlw	160
  5390  002148  6E41               	movwf	Can_ReadMessage@buf,c
  5391                           
  5392                           ;can.c: 377: Spi_ReadWrite(buf,2);
  5393  00214A  0E41               	movlw	low Can_ReadMessage@buf
  5394  00214C  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  5395  00214E  0E00               	movlw	high Can_ReadMessage@buf
  5396  002150  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  5397  002152  0E02               	movlw	2
  5398  002154  6E0F               	movwf	Spi_ReadWrite@size,c
  5399  002156  0E00               	movlw	0
  5400  002158  6E10               	movwf	Spi_ReadWrite@size+1,c
  5401  00215A  0E00               	movlw	0
  5402  00215C  6E11               	movwf	Spi_ReadWrite@size+2,c
  5403  00215E  0E00               	movlw	0
  5404  002160  6E12               	movwf	Spi_ReadWrite@size+3,c
  5405  002162  EC57  F014         	call	_Spi_ReadWrite	;wreg free
  5406                           
  5407                           ;can.c: 379: if ( buf[1] & (1<<0) )
  5408  002166  A042               	btfss	Can_ReadMessage@buf+1,0,c
  5409  002168  D034               	goto	i2l251
  5410                           
  5411                           ;can.c: 380: {
  5412                           ;can.c: 381: Mcp2515ReadCanMsg( (0x61), msg);
  5413  00216A  C03F  F030         	movff	Can_ReadMessage@msg,Mcp2515ReadCanMsg@msg
  5414  00216E  C040  F031         	movff	Can_ReadMessage@msg+1,Mcp2515ReadCanMsg@msg+1
  5415  002172  0E61               	movlw	97
  5416  002174  EC9B  F00F         	call	_Mcp2515ReadCanMsg
  5417                           
  5418                           ;can.c: 382: buf[0] = 0x05;
  5419  002178  0E05               	movlw	5
  5420  00217A  6E41               	movwf	Can_ReadMessage@buf,c
  5421                           
  5422                           ;can.c: 383: buf[1] = 0x2C;
  5423  00217C  0E2C               	movlw	44
  5424  00217E  6E42               	movwf	Can_ReadMessage@buf+1,c
  5425                           
  5426                           ;can.c: 384: buf[2] = 0x01;
  5427  002180  0E01               	movlw	1
  5428  002182  6E43               	movwf	Can_ReadMessage@buf+2,c
  5429                           
  5430                           ;can.c: 385: buf[3] = 0;
  5431  002184  0E00               	movlw	0
  5432  002186  6E44               	movwf	Can_ReadMessage@buf+3,c
  5433                           
  5434                           ;can.c: 386: Spi_Write(buf,4);
  5435  002188  0E41               	movlw	low Can_ReadMessage@buf
  5436  00218A  6E0D               	movwf	i2Spi_Write@tx,c
  5437  00218C  0E00               	movlw	high Can_ReadMessage@buf
  5438  00218E  6E0E               	movwf	i2Spi_Write@tx+1,c
  5439  002190  0E04               	movlw	4
  5440  002192  6E0F               	movwf	i2Spi_Write@size,c
  5441  002194  0E00               	movlw	0
  5442  002196  6E10               	movwf	i2Spi_Write@size+1,c
  5443  002198  0E00               	movlw	0
  5444  00219A  6E11               	movwf	i2Spi_Write@size+2,c
  5445  00219C  0E00               	movlw	0
  5446  00219E  6E12               	movwf	i2Spi_Write@size+3,c
  5447  0021A0  EC44  F014         	call	i2_Spi_Write	;wreg free
  5448                           
  5449                           ;can.c: 387: buf[0] = 0x05;
  5450  0021A4  0E05               	movlw	5
  5451  0021A6  6E41               	movwf	Can_ReadMessage@buf,c
  5452                           
  5453                           ;can.c: 388: buf[1] = 0x2B;
  5454  0021A8  0E2B               	movlw	43
  5455  0021AA  6E42               	movwf	Can_ReadMessage@buf+1,c
  5456                           
  5457                           ;can.c: 389: buf[2] = 0x01;
  5458  0021AC  0E01               	movlw	1
  5459  0021AE  6E43               	movwf	Can_ReadMessage@buf+2,c
  5460                           
  5461                           ;can.c: 390: buf[3] = 0xFF;
  5462  0021B0  6844               	setf	Can_ReadMessage@buf+3,c
  5463                           
  5464                           ;can.c: 391: Spi_Write(buf,4);
  5465  0021B2  0E41               	movlw	low Can_ReadMessage@buf
  5466  0021B4  6E0D               	movwf	i2Spi_Write@tx,c
  5467  0021B6  0E00               	movlw	high Can_ReadMessage@buf
  5468  0021B8  6E0E               	movwf	i2Spi_Write@tx+1,c
  5469  0021BA  0E04               	movlw	4
  5470  0021BC  6E0F               	movwf	i2Spi_Write@size,c
  5471  0021BE  0E00               	movlw	0
  5472  0021C0  6E10               	movwf	i2Spi_Write@size+1,c
  5473  0021C2  0E00               	movlw	0
  5474  0021C4  6E11               	movwf	i2Spi_Write@size+2,c
  5475  0021C6  0E00               	movlw	0
  5476  0021C8  6E12               	movwf	i2Spi_Write@size+3,c
  5477  0021CA  EC44  F014         	call	i2_Spi_Write	;wreg free
  5478  0021CE                     i2l1993:
  5479                           
  5480                           ;can.c: 392: return (0);
  5481  0021CE  0E00               	movlw	0
  5482  0021D0  0012               	return	
  5483  0021D2                     i2l251:
  5484                           
  5485                           ;can.c: 395: else if ( buf[1] & (1<<1) )
  5486  0021D2  A242               	btfss	Can_ReadMessage@buf+1,1,c
  5487  0021D4  D033               	goto	i2l2025
  5488                           
  5489                           ;can.c: 396: {
  5490                           ;can.c: 398: Mcp2515ReadCanMsg( (0x71), msg);
  5491  0021D6  C03F  F030         	movff	Can_ReadMessage@msg,Mcp2515ReadCanMsg@msg
  5492  0021DA  C040  F031         	movff	Can_ReadMessage@msg+1,Mcp2515ReadCanMsg@msg+1
  5493  0021DE  0E71               	movlw	113
  5494  0021E0  EC9B  F00F         	call	_Mcp2515ReadCanMsg
  5495                           
  5496                           ;can.c: 399: buf[0] = 0x05;
  5497  0021E4  0E05               	movlw	5
  5498  0021E6  6E41               	movwf	Can_ReadMessage@buf,c
  5499                           
  5500                           ;can.c: 400: buf[1] = 0x2C;
  5501  0021E8  0E2C               	movlw	44
  5502  0021EA  6E42               	movwf	Can_ReadMessage@buf+1,c
  5503                           
  5504                           ;can.c: 401: buf[2] = 0x02;
  5505  0021EC  0E02               	movlw	2
  5506  0021EE  6E43               	movwf	Can_ReadMessage@buf+2,c
  5507                           
  5508                           ;can.c: 402: buf[3] = 0;
  5509  0021F0  0E00               	movlw	0
  5510  0021F2  6E44               	movwf	Can_ReadMessage@buf+3,c
  5511                           
  5512                           ;can.c: 403: Spi_Write(buf,4);
  5513  0021F4  0E41               	movlw	low Can_ReadMessage@buf
  5514  0021F6  6E0D               	movwf	i2Spi_Write@tx,c
  5515  0021F8  0E00               	movlw	high Can_ReadMessage@buf
  5516  0021FA  6E0E               	movwf	i2Spi_Write@tx+1,c
  5517  0021FC  0E04               	movlw	4
  5518  0021FE  6E0F               	movwf	i2Spi_Write@size,c
  5519  002200  0E00               	movlw	0
  5520  002202  6E10               	movwf	i2Spi_Write@size+1,c
  5521  002204  0E00               	movlw	0
  5522  002206  6E11               	movwf	i2Spi_Write@size+2,c
  5523  002208  0E00               	movlw	0
  5524  00220A  6E12               	movwf	i2Spi_Write@size+3,c
  5525  00220C  EC44  F014         	call	i2_Spi_Write	;wreg free
  5526                           
  5527                           ;can.c: 404: buf[0] = 0x05;
  5528  002210  0E05               	movlw	5
  5529  002212  6E41               	movwf	Can_ReadMessage@buf,c
  5530                           
  5531                           ;can.c: 405: buf[1] = 0x2B;
  5532  002214  0E2B               	movlw	43
  5533  002216  6E42               	movwf	Can_ReadMessage@buf+1,c
  5534                           
  5535                           ;can.c: 406: buf[2] = 0x02;
  5536  002218  0E02               	movlw	2
  5537  00221A  6E43               	movwf	Can_ReadMessage@buf+2,c
  5538                           
  5539                           ;can.c: 407: buf[3] = 0xFF;
  5540  00221C  6844               	setf	Can_ReadMessage@buf+3,c
  5541                           
  5542                           ;can.c: 408: Spi_Write(buf,4);
  5543  00221E  0E41               	movlw	low Can_ReadMessage@buf
  5544  002220  6E0D               	movwf	i2Spi_Write@tx,c
  5545  002222  0E00               	movlw	high Can_ReadMessage@buf
  5546  002224  6E0E               	movwf	i2Spi_Write@tx+1,c
  5547  002226  0E04               	movlw	4
  5548  002228  6E0F               	movwf	i2Spi_Write@size,c
  5549  00222A  0E00               	movlw	0
  5550  00222C  6E10               	movwf	i2Spi_Write@size+1,c
  5551  00222E  0E00               	movlw	0
  5552  002230  6E11               	movwf	i2Spi_Write@size+2,c
  5553  002232  0E00               	movlw	0
  5554  002234  6E12               	movwf	i2Spi_Write@size+3,c
  5555  002236  EC44  F014         	call	i2_Spi_Write	;wreg free
  5556  00223A  D7C9               	goto	i2l1993
  5557  00223C                     i2l2025:
  5558                           
  5559                           ;can.c: 410: }
  5560                           ;can.c: 412: return (4);
  5561  00223C  0E04               	movlw	4
  5562  00223E  0012               	return	
  5563  002240                     __end_of_Can_ReadMessage:
  5564                           	opt stack 0
  5565                           pclatu	equ	0xFFB
  5566                           pclath	equ	0xFFA
  5567                           tblptru	equ	0xFF8
  5568                           tblptrh	equ	0xFF7
  5569                           tblptrl	equ	0xFF6
  5570                           tablat	equ	0xFF5
  5571                           prodh	equ	0xFF4
  5572                           prodl	equ	0xFF3
  5573                           intcon	equ	0xFF2
  5574                           intcon2	equ	0xFF1
  5575                           intcon3	equ	0xFF0
  5576                           postinc0	equ	0xFEE
  5577                           fsr0h	equ	0xFEA
  5578                           fsr0l	equ	0xFE9
  5579                           wreg	equ	0xFE8
  5580                           indf1	equ	0xFE7
  5581                           postinc1	equ	0xFE6
  5582                           postdec1	equ	0xFE5
  5583                           fsr1h	equ	0xFE2
  5584                           fsr1l	equ	0xFE1
  5585                           indf2	equ	0xFDF
  5586                           postinc2	equ	0xFDE
  5587                           fsr2h	equ	0xFDA
  5588                           fsr2l	equ	0xFD9
  5589                           status	equ	0xFD8
  5590                           
  5591 ;; *************** function i2_Spi_Write *****************
  5592 ;; Defined at:
  5593 ;;		line 332 in file "can.c"
  5594 ;; Parameters:    Size  Location     Type
  5595 ;;  tx              2   12[COMRAM] PTR unsigned char 
  5596 ;;		 -> Mcp2515WriteCanMsg@buf(10), Mcp2515WriteCanId@buf(6), Mcp2515Sleep@cmdMask4(3), Mcp2515_Init@cmdWrite3(3), 
  5597 ;;		 -> Mcp2515_Init@cmdMask4(4), Mcp2515_Reset@cmd(1), Can_SendMessage@buf(4), Can_ReadMessage@buf(4), 
  5598 ;;  size            4   14[COMRAM] unsigned long 
  5599 ;; Auto vars:     Size  Location     Type
  5600 ;;		None
  5601 ;; Return value:  Size  Location     Type
  5602 ;;                  1    wreg      void 
  5603 ;; Registers used:
  5604 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5605 ;; Tracked objects:
  5606 ;;		On entry : 0/0
  5607 ;;		On exit  : 0/0
  5608 ;;		Unchanged: 0/0
  5609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5610 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5613 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5614 ;;Total ram usage:        6 bytes
  5615 ;; Hardware stack levels used:    1
  5616 ;; Hardware stack levels required when called:    1
  5617 ;; This function calls:
  5618 ;;		i2_SPIRW
  5619 ;; This function is called by:
  5620 ;;		_Can_ReadMessage
  5621 ;;		_Can_SendMessage
  5622 ;;		_Mcp2515WriteCanMsg
  5623 ;;		i2_Mcp2515WriteCanId
  5624 ;; This function uses a non-reentrant model
  5625 ;;
  5626                           
  5627                           	psect	text23
  5628  002888                     __ptext23:
  5629                           	opt stack 0
  5630  002888                     i2_Spi_Write:
  5631                           	opt stack 19
  5632                           
  5633                           ;can.c: 334: SPIRW(tx, 0, size);
  5634                           
  5635                           ;incstack = 0
  5636  002888  C00D  F001         	movff	i2Spi_Write@tx,i2SPIRW@tx
  5637  00288C  C00E  F002         	movff	i2Spi_Write@tx+1,i2SPIRW@tx+1
  5638  002890  0E00               	movlw	0
  5639  002892  6E03               	movwf	i2SPIRW@rx,c
  5640  002894  0E00               	movlw	0
  5641  002896  6E04               	movwf	i2SPIRW@rx+1,c
  5642  002898  C00F  F005         	movff	i2Spi_Write@size,i2SPIRW@size
  5643  00289C  C010  F006         	movff	i2Spi_Write@size+1,i2SPIRW@size+1
  5644  0028A0  C011  F007         	movff	i2Spi_Write@size+2,i2SPIRW@size+2
  5645  0028A4  C012  F008         	movff	i2Spi_Write@size+3,i2SPIRW@size+3
  5646  0028A8  EC7B  F012         	call	i2_SPIRW	;wreg free
  5647  0028AC  0012               	return		;funcret
  5648  0028AE                     __end_ofi2_Spi_Write:
  5649                           	opt stack 0
  5650                           pclatu	equ	0xFFB
  5651                           pclath	equ	0xFFA
  5652                           tblptru	equ	0xFF8
  5653                           tblptrh	equ	0xFF7
  5654                           tblptrl	equ	0xFF6
  5655                           tablat	equ	0xFF5
  5656                           prodh	equ	0xFF4
  5657                           prodl	equ	0xFF3
  5658                           intcon	equ	0xFF2
  5659                           intcon2	equ	0xFF1
  5660                           intcon3	equ	0xFF0
  5661                           postinc0	equ	0xFEE
  5662                           fsr0h	equ	0xFEA
  5663                           fsr0l	equ	0xFE9
  5664                           wreg	equ	0xFE8
  5665                           indf1	equ	0xFE7
  5666                           postinc1	equ	0xFE6
  5667                           postdec1	equ	0xFE5
  5668                           fsr1h	equ	0xFE2
  5669                           fsr1l	equ	0xFE1
  5670                           indf2	equ	0xFDF
  5671                           postinc2	equ	0xFDE
  5672                           fsr2h	equ	0xFDA
  5673                           fsr2l	equ	0xFD9
  5674                           status	equ	0xFD8
  5675                           
  5676 ;; *************** function _Mcp2515ReadCanMsg *****************
  5677 ;; Defined at:
  5678 ;;		line 194 in file "mcp2515.c"
  5679 ;; Parameters:    Size  Location     Type
  5680 ;;  mcp_addr        1    wreg     const unsigned char 
  5681 ;;  msg             2   47[COMRAM] PTR struct CANMESSAGE
  5682 ;;		 -> rxBuffer(68), 
  5683 ;; Auto vars:     Size  Location     Type
  5684 ;;  mcp_addr        1   61[COMRAM] const unsigned char 
  5685 ;;  cmd            10   51[COMRAM] unsigned char [10]
  5686 ;; Return value:  Size  Location     Type
  5687 ;;                  1    wreg      void 
  5688 ;; Registers used:
  5689 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5690 ;; Tracked objects:
  5691 ;;		On entry : 0/0
  5692 ;;		On exit  : 0/0
  5693 ;;		Unchanged: 0/0
  5694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5695 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5696 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5697 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5698 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5699 ;;Total ram usage:       15 bytes
  5700 ;; Hardware stack levels used:    1
  5701 ;; Hardware stack levels required when called:    3
  5702 ;; This function calls:
  5703 ;;		_Mcp2515ReadCanId
  5704 ;;		_Spi_ReadWrite
  5705 ;;		_memcpy
  5706 ;; This function is called by:
  5707 ;;		_Can_ReadMessage
  5708 ;; This function uses a non-reentrant model
  5709 ;;
  5710                           
  5711                           	psect	text24
  5712  001F36                     __ptext24:
  5713                           	opt stack 0
  5714  001F36                     _Mcp2515ReadCanMsg:
  5715                           	opt stack 17
  5716                           
  5717                           ;incstack = 0
  5718                           ;Mcp2515ReadCanMsg@mcp_addr stored from wreg
  5719  001F36  6E3E               	movwf	Mcp2515ReadCanMsg@mcp_addr,c
  5720                           
  5721                           ;mcp2515.c: 197: uint8_t cmd[10];
  5722                           ;mcp2515.c: 202: Mcp2515ReadCanId( mcp_addr, &(msg->extended_identifier),
  5723                           ;mcp2515.c: 203: &(msg->identifier) );
  5724  001F38  C030  F013         	movff	Mcp2515ReadCanMsg@msg,Mcp2515ReadCanId@ext
  5725  001F3C  C031  F014         	movff	Mcp2515ReadCanMsg@msg+1,Mcp2515ReadCanId@ext+1
  5726  001F40  0E01               	movlw	1
  5727  001F42  2430               	addwf	Mcp2515ReadCanMsg@msg,w,c
  5728  001F44  6E15               	movwf	Mcp2515ReadCanId@can_id,c
  5729  001F46  0E00               	movlw	0
  5730  001F48  2031               	addwfc	Mcp2515ReadCanMsg@msg+1,w,c
  5731  001F4A  6E16               	movwf	Mcp2515ReadCanId@can_id+1,c
  5732  001F4C  503E               	movf	Mcp2515ReadCanMsg@mcp_addr,w,c
  5733  001F4E  ECA1  F00C         	call	_Mcp2515ReadCanId
  5734                           
  5735                           ;mcp2515.c: 205: cmd[0] = 0x03;
  5736  001F52  0E03               	movlw	3
  5737  001F54  6E34               	movwf	Mcp2515ReadCanMsg@cmd,c
  5738                           
  5739                           ;mcp2515.c: 206: cmd[1] = mcp_addr-1;
  5740  001F56  043E               	decf	Mcp2515ReadCanMsg@mcp_addr,w,c
  5741  001F58  6E35               	movwf	Mcp2515ReadCanMsg@cmd+1,c
  5742                           
  5743                           ;mcp2515.c: 207: Spi_ReadWrite(cmd,3);
  5744  001F5A  0E34               	movlw	low Mcp2515ReadCanMsg@cmd
  5745  001F5C  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  5746  001F5E  0E00               	movlw	high Mcp2515ReadCanMsg@cmd
  5747  001F60  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  5748  001F62  0E03               	movlw	3
  5749  001F64  6E0F               	movwf	Spi_ReadWrite@size,c
  5750  001F66  0E00               	movlw	0
  5751  001F68  6E10               	movwf	Spi_ReadWrite@size+1,c
  5752  001F6A  0E00               	movlw	0
  5753  001F6C  6E11               	movwf	Spi_ReadWrite@size+2,c
  5754  001F6E  0E00               	movlw	0
  5755  001F70  6E12               	movwf	Spi_ReadWrite@size+3,c
  5756  001F72  EC57  F014         	call	_Spi_ReadWrite	;wreg free
  5757                           
  5758                           ;mcp2515.c: 208: msg->rtr = 0;
  5759  001F76  EE20 F00E          	lfsr	2,14
  5760  001F7A  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  5761  001F7C  26D9               	addwf	fsr2l,f,c
  5762  001F7E  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  5763  001F80  22DA               	addwfc	fsr2h,f,c
  5764  001F82  0E00               	movlw	0
  5765  001F84  6EDF               	movwf	indf2,c
  5766                           
  5767                           ;mcp2515.c: 209: if (cmd[2] & 0x08)
  5768  001F86  A636               	btfss	Mcp2515ReadCanMsg@cmd+2,3,c
  5769  001F88  D008               	goto	i2l1789
  5770                           
  5771                           ;mcp2515.c: 210: {
  5772                           ;mcp2515.c: 211: msg->rtr = 1;
  5773  001F8A  EE20 F00E          	lfsr	2,14
  5774  001F8E  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  5775  001F90  26D9               	addwf	fsr2l,f,c
  5776  001F92  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  5777  001F94  22DA               	addwfc	fsr2h,f,c
  5778  001F96  0E01               	movlw	1
  5779  001F98  6EDF               	movwf	indf2,c
  5780  001F9A                     i2l1789:
  5781                           
  5782                           ;mcp2515.c: 212: }
  5783                           ;mcp2515.c: 214: cmd[0] = 0x03;
  5784  001F9A  0E03               	movlw	3
  5785  001F9C  6E34               	movwf	Mcp2515ReadCanMsg@cmd,c
  5786                           
  5787                           ;mcp2515.c: 215: cmd[1] = mcp_addr+4;
  5788  001F9E  503E               	movf	Mcp2515ReadCanMsg@mcp_addr,w,c
  5789  001FA0  0F04               	addlw	4
  5790  001FA2  6E35               	movwf	Mcp2515ReadCanMsg@cmd+1,c
  5791                           
  5792                           ;mcp2515.c: 216: Spi_ReadWrite(cmd,3);
  5793  001FA4  0E34               	movlw	low Mcp2515ReadCanMsg@cmd
  5794  001FA6  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  5795  001FA8  0E00               	movlw	high Mcp2515ReadCanMsg@cmd
  5796  001FAA  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  5797  001FAC  0E03               	movlw	3
  5798  001FAE  6E0F               	movwf	Spi_ReadWrite@size,c
  5799  001FB0  0E00               	movlw	0
  5800  001FB2  6E10               	movwf	Spi_ReadWrite@size+1,c
  5801  001FB4  0E00               	movlw	0
  5802  001FB6  6E11               	movwf	Spi_ReadWrite@size+2,c
  5803  001FB8  0E00               	movlw	0
  5804  001FBA  6E12               	movwf	Spi_ReadWrite@size+3,c
  5805  001FBC  EC57  F014         	call	_Spi_ReadWrite	;wreg free
  5806                           
  5807                           ;mcp2515.c: 217: msg->dlc = cmd[2] & 0x0F;
  5808  001FC0  EE20 F005          	lfsr	2,5
  5809  001FC4  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  5810  001FC6  26D9               	addwf	fsr2l,f,c
  5811  001FC8  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  5812  001FCA  22DA               	addwfc	fsr2h,f,c
  5813  001FCC  5036               	movf	Mcp2515ReadCanMsg@cmd+2,w,c
  5814  001FCE  0B0F               	andlw	15
  5815  001FD0  6EDF               	movwf	indf2,c
  5816                           
  5817                           ;mcp2515.c: 219: cmd[0] = 0x03;
  5818  001FD2  0E03               	movlw	3
  5819  001FD4  6E34               	movwf	Mcp2515ReadCanMsg@cmd,c
  5820                           
  5821                           ;mcp2515.c: 220: cmd[1] = mcp_addr+5;
  5822  001FD6  503E               	movf	Mcp2515ReadCanMsg@mcp_addr,w,c
  5823  001FD8  0F05               	addlw	5
  5824  001FDA  6E35               	movwf	Mcp2515ReadCanMsg@cmd+1,c
  5825                           
  5826                           ;mcp2515.c: 221: Spi_ReadWrite(cmd,msg->dlc + 2);
  5827  001FDC  0E34               	movlw	low Mcp2515ReadCanMsg@cmd
  5828  001FDE  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  5829  001FE0  0E00               	movlw	high Mcp2515ReadCanMsg@cmd
  5830  001FE2  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  5831  001FE4  EE20 F005          	lfsr	2,5
  5832  001FE8  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  5833  001FEA  26D9               	addwf	fsr2l,f,c
  5834  001FEC  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  5835  001FEE  22DA               	addwfc	fsr2h,f,c
  5836  001FF0  50DF               	movf	indf2,w,c
  5837  001FF2  6E32               	movwf	??_Mcp2515ReadCanMsg& (0+255),c
  5838  001FF4  6A33               	clrf	(??_Mcp2515ReadCanMsg+1)& (0+255),c
  5839  001FF6  0E02               	movlw	2
  5840  001FF8  2632               	addwf	??_Mcp2515ReadCanMsg,f,c
  5841  001FFA  0E00               	movlw	0
  5842  001FFC  2233               	addwfc	??_Mcp2515ReadCanMsg+1,f,c
  5843  001FFE  C032  F00F         	movff	??_Mcp2515ReadCanMsg,Spi_ReadWrite@size
  5844  002002  C033  F010         	movff	??_Mcp2515ReadCanMsg+1,Spi_ReadWrite@size+1
  5845  002006  0E00               	movlw	0
  5846  002008  BE10               	btfsc	Spi_ReadWrite@size+1,7,c
  5847  00200A  0EFF               	movlw	-1
  5848  00200C  6E11               	movwf	Spi_ReadWrite@size+2,c
  5849  00200E  6E12               	movwf	Spi_ReadWrite@size+3,c
  5850  002010  EC57  F014         	call	_Spi_ReadWrite	;wreg free
  5851                           
  5852                           ;mcp2515.c: 222: memcpy((void *)msg->dta,(const void *)&cmd[2],msg->dlc);
  5853  002014  0E06               	movlw	6
  5854  002016  2430               	addwf	Mcp2515ReadCanMsg@msg,w,c
  5855  002018  6E01               	movwf	memcpy@d1,c
  5856  00201A  0E00               	movlw	0
  5857  00201C  2031               	addwfc	Mcp2515ReadCanMsg@msg+1,w,c
  5858  00201E  6E02               	movwf	memcpy@d1+1,c
  5859  002020  0E36               	movlw	low (Mcp2515ReadCanMsg@cmd+2)
  5860  002022  6E03               	movwf	memcpy@s1,c
  5861  002024  0E00               	movlw	high (Mcp2515ReadCanMsg@cmd+2)
  5862  002026  6E04               	movwf	memcpy@s1+1,c
  5863  002028  EE20 F005          	lfsr	2,5
  5864  00202C  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  5865  00202E  26D9               	addwf	fsr2l,f,c
  5866  002030  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  5867  002032  22DA               	addwfc	fsr2h,f,c
  5868  002034  50DF               	movf	indf2,w,c
  5869  002036  6E32               	movwf	??_Mcp2515ReadCanMsg& (0+255),c
  5870  002038  5032               	movf	??_Mcp2515ReadCanMsg,w,c
  5871  00203A  6E05               	movwf	memcpy@n,c
  5872  00203C  6A06               	clrf	memcpy@n+1,c
  5873  00203E  ECB7  F013         	call	_memcpy	;wreg free
  5874  002042  0012               	return		;funcret
  5875  002044                     __end_of_Mcp2515ReadCanMsg:
  5876                           	opt stack 0
  5877                           pclatu	equ	0xFFB
  5878                           pclath	equ	0xFFA
  5879                           tblptru	equ	0xFF8
  5880                           tblptrh	equ	0xFF7
  5881                           tblptrl	equ	0xFF6
  5882                           tablat	equ	0xFF5
  5883                           prodh	equ	0xFF4
  5884                           prodl	equ	0xFF3
  5885                           intcon	equ	0xFF2
  5886                           intcon2	equ	0xFF1
  5887                           intcon3	equ	0xFF0
  5888                           postinc0	equ	0xFEE
  5889                           fsr0h	equ	0xFEA
  5890                           fsr0l	equ	0xFE9
  5891                           wreg	equ	0xFE8
  5892                           indf1	equ	0xFE7
  5893                           postinc1	equ	0xFE6
  5894                           postdec1	equ	0xFE5
  5895                           fsr1h	equ	0xFE2
  5896                           fsr1l	equ	0xFE1
  5897                           indf2	equ	0xFDF
  5898                           postinc2	equ	0xFDE
  5899                           fsr2h	equ	0xFDA
  5900                           fsr2l	equ	0xFD9
  5901                           status	equ	0xFD8
  5902                           
  5903 ;; *************** function _memcpy *****************
  5904 ;; Defined at:
  5905 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\memcpy.c"
  5906 ;; Parameters:    Size  Location     Type
  5907 ;;  d1              2    0[COMRAM] PTR void 
  5908 ;;		 -> rxBuffer(68), 
  5909 ;;  s1              2    2[COMRAM] PTR const void 
  5910 ;;		 -> Mcp2515ReadCanMsg@cmd(10), 
  5911 ;;  n               2    4[COMRAM] unsigned int 
  5912 ;; Auto vars:     Size  Location     Type
  5913 ;;  s               2    8[COMRAM] PTR const unsigned char 
  5914 ;;		 -> Mcp2515ReadCanMsg@cmd(10), 
  5915 ;;  d               2    6[COMRAM] PTR unsigned char 
  5916 ;;		 -> rxBuffer(68), 
  5917 ;;  tmp             1   10[COMRAM] unsigned char 
  5918 ;; Return value:  Size  Location     Type
  5919 ;;                  2    0[COMRAM] PTR void 
  5920 ;; Registers used:
  5921 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5922 ;; Tracked objects:
  5923 ;;		On entry : 0/0
  5924 ;;		On exit  : 0/0
  5925 ;;		Unchanged: 0/0
  5926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5927 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5928 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5930 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5931 ;;Total ram usage:       11 bytes
  5932 ;; Hardware stack levels used:    1
  5933 ;; This function calls:
  5934 ;;		Nothing
  5935 ;; This function is called by:
  5936 ;;		_Mcp2515ReadCanMsg
  5937 ;; This function uses a non-reentrant model
  5938 ;;
  5939                           
  5940                           	psect	text25
  5941  00276E                     __ptext25:
  5942                           	opt stack 0
  5943  00276E                     _memcpy:
  5944                           	opt stack 19
  5945                           
  5946                           ;incstack = 0
  5947  00276E  C003  F009         	movff	memcpy@s1,memcpy@s
  5948  002772  C004  F00A         	movff	memcpy@s1+1,memcpy@s+1
  5949  002776  C001  F007         	movff	memcpy@d1,memcpy@d
  5950  00277A  C002  F008         	movff	memcpy@d1+1,memcpy@d+1
  5951  00277E  D010               	goto	i2l1743
  5952  002780                     i2l1735:
  5953  002780  C009  FFD9         	movff	memcpy@s,fsr2l
  5954  002784  C00A  FFDA         	movff	memcpy@s+1,fsr2h
  5955  002788  50DF               	movf	indf2,w,c
  5956  00278A  6E0B               	movwf	memcpy@tmp,c
  5957  00278C  4A09               	infsnz	memcpy@s,f,c
  5958  00278E  2A0A               	incf	memcpy@s+1,f,c
  5959  002790  C007  FFD9         	movff	memcpy@d,fsr2l
  5960  002794  C008  FFDA         	movff	memcpy@d+1,fsr2h
  5961  002798  C00B  FFDF         	movff	memcpy@tmp,indf2
  5962  00279C  4A07               	infsnz	memcpy@d,f,c
  5963  00279E  2A08               	incf	memcpy@d+1,f,c
  5964  0027A0                     i2l1743:
  5965  0027A0  0605               	decf	memcpy@n,f,c
  5966  0027A2  A0D8               	btfss	status,0,c
  5967  0027A4  0606               	decf	memcpy@n+1,f,c
  5968  0027A6  2805               	incf	memcpy@n,w,c
  5969  0027A8  E1EB               	bnz	i2l1735
  5970  0027AA  2806               	incf	memcpy@n+1,w,c
  5971  0027AC  B4D8               	btfsc	status,2,c
  5972  0027AE  0012               	return	
  5973  0027B0  D7E7               	goto	i2l1735
  5974  0027B2                     __end_of_memcpy:
  5975                           	opt stack 0
  5976                           pclatu	equ	0xFFB
  5977                           pclath	equ	0xFFA
  5978                           tblptru	equ	0xFF8
  5979                           tblptrh	equ	0xFF7
  5980                           tblptrl	equ	0xFF6
  5981                           tablat	equ	0xFF5
  5982                           prodh	equ	0xFF4
  5983                           prodl	equ	0xFF3
  5984                           intcon	equ	0xFF2
  5985                           intcon2	equ	0xFF1
  5986                           intcon3	equ	0xFF0
  5987                           postinc0	equ	0xFEE
  5988                           fsr0h	equ	0xFEA
  5989                           fsr0l	equ	0xFE9
  5990                           wreg	equ	0xFE8
  5991                           indf1	equ	0xFE7
  5992                           postinc1	equ	0xFE6
  5993                           postdec1	equ	0xFE5
  5994                           fsr1h	equ	0xFE2
  5995                           fsr1l	equ	0xFE1
  5996                           indf2	equ	0xFDF
  5997                           postinc2	equ	0xFDE
  5998                           fsr2h	equ	0xFDA
  5999                           fsr2l	equ	0xFD9
  6000                           status	equ	0xFD8
  6001                           
  6002 ;; *************** function _Mcp2515ReadCanId *****************
  6003 ;; Defined at:
  6004 ;;		line 164 in file "mcp2515.c"
  6005 ;; Parameters:    Size  Location     Type
  6006 ;;  mcp_addr        1    wreg     const unsigned char 
  6007 ;;  ext             2   18[COMRAM] PTR unsigned char 
  6008 ;;		 -> rxBuffer(68), 
  6009 ;;  can_id          2   20[COMRAM] PTR unsigned long 
  6010 ;;		 -> rxBuffer(68), 
  6011 ;; Auto vars:     Size  Location     Type
  6012 ;;  mcp_addr        1   40[COMRAM] const unsigned char 
  6013 ;;  msg             6   41[COMRAM] unsigned char [6]
  6014 ;; Return value:  Size  Location     Type
  6015 ;;                  1    wreg      void 
  6016 ;; Registers used:
  6017 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6018 ;; Tracked objects:
  6019 ;;		On entry : 0/0
  6020 ;;		On exit  : 0/0
  6021 ;;		Unchanged: 0/0
  6022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6023 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6024 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6025 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6026 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6027 ;;Total ram usage:       29 bytes
  6028 ;; Hardware stack levels used:    1
  6029 ;; Hardware stack levels required when called:    2
  6030 ;; This function calls:
  6031 ;;		_Spi_ReadWrite
  6032 ;; This function is called by:
  6033 ;;		_Mcp2515ReadCanMsg
  6034 ;; This function uses a non-reentrant model
  6035 ;;
  6036                           
  6037                           	psect	text26
  6038  001942                     __ptext26:
  6039                           	opt stack 0
  6040  001942                     _Mcp2515ReadCanId:
  6041                           	opt stack 17
  6042                           
  6043                           ;incstack = 0
  6044                           ;Mcp2515ReadCanId@mcp_addr stored from wreg
  6045  001942  6E29               	movwf	Mcp2515ReadCanId@mcp_addr,c
  6046                           
  6047                           ;mcp2515.c: 167: uint8_t msg[]={0x03,0,0,0,0,0};
  6048  001944  EE20  F0E2         	lfsr	2,Mcp2515ReadCanId@F8123
  6049  001948  EE10  F02A         	lfsr	1,Mcp2515ReadCanId@msg
  6050  00194C  0E05               	movlw	5
  6051  00194E                     i2u72_41:
  6052  00194E  CFDB FFE3          	movff	plusw2,plusw1
  6053  001952  06E8               	decf	wreg,f,c
  6054  001954  E2FC               	bc	i2u72_41
  6055                           
  6056                           ;mcp2515.c: 169: msg[1] = mcp_addr;
  6057  001956  C029  F02B         	movff	Mcp2515ReadCanId@mcp_addr,Mcp2515ReadCanId@msg+1
  6058                           
  6059                           ;mcp2515.c: 170: *ext = 0;
  6060  00195A  C013  FFD9         	movff	Mcp2515ReadCanId@ext,fsr2l
  6061  00195E  C014  FFDA         	movff	Mcp2515ReadCanId@ext+1,fsr2h
  6062  001962  0E00               	movlw	0
  6063  001964  6EDF               	movwf	indf2,c
  6064                           
  6065                           ;mcp2515.c: 171: *can_id = 0;
  6066  001966  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  6067  00196A  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  6068  00196E  6ADE               	clrf	postinc2,c
  6069  001970  6ADE               	clrf	postinc2,c
  6070  001972  6ADE               	clrf	postinc2,c
  6071  001974  6ADD               	clrf	postdec2,c
  6072                           
  6073                           ;mcp2515.c: 172: Spi_ReadWrite(msg,sizeof(msg));
  6074  001976  0E2A               	movlw	low Mcp2515ReadCanId@msg
  6075  001978  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  6076  00197A  0E00               	movlw	high Mcp2515ReadCanId@msg
  6077  00197C  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  6078  00197E  0E06               	movlw	6
  6079  001980  6E0F               	movwf	Spi_ReadWrite@size,c
  6080  001982  0E00               	movlw	0
  6081  001984  6E10               	movwf	Spi_ReadWrite@size+1,c
  6082  001986  0E00               	movlw	0
  6083  001988  6E11               	movwf	Spi_ReadWrite@size+2,c
  6084  00198A  0E00               	movlw	0
  6085  00198C  6E12               	movwf	Spi_ReadWrite@size+3,c
  6086  00198E  EC57  F014         	call	_Spi_ReadWrite	;wreg free
  6087                           
  6088                           ;mcp2515.c: 174: *can_id = (msg[0+2]<<3) + (msg[1+2]>>5);
  6089  001992  C02D  F017         	movff	Mcp2515ReadCanId@msg+3,??_Mcp2515ReadCanId
  6090  001996  0E05               	movlw	5
  6091  001998  6E18               	movwf	(??_Mcp2515ReadCanId+1)& (0+255),c
  6092  00199A                     i2u73_45:
  6093  00199A  90D8               	bcf	status,0,c
  6094  00199C  3217               	rrcf	??_Mcp2515ReadCanId,f,c
  6095  00199E  2E18               	decfsz	(??_Mcp2515ReadCanId+1)& (0+255),f,c
  6096  0019A0  D7FC               	goto	i2u73_45
  6097  0019A2  502C               	movf	Mcp2515ReadCanId@msg+2,w,c
  6098  0019A4  6E19               	movwf	(??_Mcp2515ReadCanId+2)& (0+255),c
  6099  0019A6  6A1A               	clrf	(??_Mcp2515ReadCanId+3)& (0+255),c
  6100  0019A8  90D8               	bcf	status,0,c
  6101  0019AA  3619               	rlcf	??_Mcp2515ReadCanId+2,f,c
  6102  0019AC  361A               	rlcf	??_Mcp2515ReadCanId+3,f,c
  6103  0019AE  90D8               	bcf	status,0,c
  6104  0019B0  3619               	rlcf	??_Mcp2515ReadCanId+2,f,c
  6105  0019B2  361A               	rlcf	??_Mcp2515ReadCanId+3,f,c
  6106  0019B4  90D8               	bcf	status,0,c
  6107  0019B6  3619               	rlcf	??_Mcp2515ReadCanId+2,f,c
  6108  0019B8  361A               	rlcf	??_Mcp2515ReadCanId+3,f,c
  6109  0019BA  5017               	movf	??_Mcp2515ReadCanId,w,c
  6110  0019BC  2419               	addwf	??_Mcp2515ReadCanId+2,w,c
  6111  0019BE  6E1B               	movwf	(??_Mcp2515ReadCanId+4)& (0+255),c
  6112  0019C0  0E00               	movlw	0
  6113  0019C2  201A               	addwfc	??_Mcp2515ReadCanId+3,w,c
  6114  0019C4  6E1C               	movwf	(??_Mcp2515ReadCanId+5)& (0+255),c
  6115  0019C6  6A1D               	clrf	(??_Mcp2515ReadCanId+6)& (0+255),c
  6116  0019C8  BE1C               	btfsc	(??_Mcp2515ReadCanId+5)& (0+255),7,c
  6117  0019CA  061D               	decf	(??_Mcp2515ReadCanId+6)& (0+255),f,c
  6118  0019CC  501D               	movf	(??_Mcp2515ReadCanId+6)& (0+255),w,c
  6119  0019CE  6E1E               	movwf	(??_Mcp2515ReadCanId+7)& (0+255),c
  6120  0019D0  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  6121  0019D4  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  6122  0019D8  C01B  FFDE         	movff	??_Mcp2515ReadCanId+4,postinc2
  6123  0019DC  C01C  FFDE         	movff	??_Mcp2515ReadCanId+5,postinc2
  6124  0019E0  C01D  FFDE         	movff	??_Mcp2515ReadCanId+6,postinc2
  6125  0019E4  C01E  FFDE         	movff	??_Mcp2515ReadCanId+7,postinc2
  6126                           
  6127                           ;mcp2515.c: 176: if ( (msg[1+2] & 0x08) == 0x08 )
  6128  0019E8  A62D               	btfss	Mcp2515ReadCanId@msg+3,3,c
  6129  0019EA  0012               	return	
  6130                           
  6131                           ;mcp2515.c: 177: {
  6132                           ;mcp2515.c: 179: *can_id = (*can_id<<2) + (msg[1+2] & 0x03);
  6133  0019EC  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  6134  0019F0  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  6135  0019F4  CFDE F017          	movff	postinc2,??_Mcp2515ReadCanId
  6136  0019F8  CFDE F018          	movff	postinc2,??_Mcp2515ReadCanId+1
  6137  0019FC  CFDE F019          	movff	postinc2,??_Mcp2515ReadCanId+2
  6138  001A00  CFDE F01A          	movff	postinc2,??_Mcp2515ReadCanId+3
  6139  001A04  0E02               	movlw	2
  6140  001A06                     i2u75_45:
  6141  001A06  90D8               	bcf	status,0,c
  6142  001A08  3617               	rlcf	??_Mcp2515ReadCanId,f,c
  6143  001A0A  3618               	rlcf	??_Mcp2515ReadCanId+1,f,c
  6144  001A0C  3619               	rlcf	??_Mcp2515ReadCanId+2,f,c
  6145  001A0E  361A               	rlcf	??_Mcp2515ReadCanId+3,f,c
  6146  001A10  2EE8               	decfsz	wreg,f,c
  6147  001A12  D7F9               	goto	i2u75_45
  6148  001A14  C02D  F01B         	movff	Mcp2515ReadCanId@msg+3,??_Mcp2515ReadCanId+4
  6149  001A18  0E03               	movlw	3
  6150  001A1A  161B               	andwf	??_Mcp2515ReadCanId+4,f,c
  6151  001A1C  501B               	movf	??_Mcp2515ReadCanId+4,w,c
  6152  001A1E  2417               	addwf	??_Mcp2515ReadCanId,w,c
  6153  001A20  6E1C               	movwf	(??_Mcp2515ReadCanId+5)& (0+255),c
  6154  001A22  0E00               	movlw	0
  6155  001A24  2018               	addwfc	??_Mcp2515ReadCanId+1,w,c
  6156  001A26  6E1D               	movwf	(??_Mcp2515ReadCanId+6)& (0+255),c
  6157  001A28  0E00               	movlw	0
  6158  001A2A  2019               	addwfc	??_Mcp2515ReadCanId+2,w,c
  6159  001A2C  6E1E               	movwf	(??_Mcp2515ReadCanId+7)& (0+255),c
  6160  001A2E  0E00               	movlw	0
  6161  001A30  201A               	addwfc	??_Mcp2515ReadCanId+3,w,c
  6162  001A32  6E1F               	movwf	(??_Mcp2515ReadCanId+8)& (0+255),c
  6163  001A34  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  6164  001A38  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  6165  001A3C  C01C  FFDE         	movff	??_Mcp2515ReadCanId+5,postinc2
  6166  001A40  C01D  FFDE         	movff	??_Mcp2515ReadCanId+6,postinc2
  6167  001A44  C01E  FFDE         	movff	??_Mcp2515ReadCanId+7,postinc2
  6168  001A48  C01F  FFDE         	movff	??_Mcp2515ReadCanId+8,postinc2
  6169                           
  6170                           ;mcp2515.c: 180: *can_id <<= 16;
  6171  001A4C  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  6172  001A50  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  6173  001A54  0E10               	movlw	16
  6174  001A56                     i2u76_45:
  6175  001A56  90D8               	bcf	status,0,c
  6176  001A58  36DE               	rlcf	postinc2,f,c
  6177  001A5A  36DE               	rlcf	postinc2,f,c
  6178  001A5C  36DE               	rlcf	postinc2,f,c
  6179  001A5E  36DD               	rlcf	postdec2,f,c
  6180  001A60  06D9               	decf	fsr2l,f,c
  6181  001A62  06D9               	decf	fsr2l,f,c
  6182  001A64  2EE8               	decfsz	wreg,f,c
  6183  001A66  D7F7               	goto	i2u76_45
  6184                           
  6185                           ;mcp2515.c: 181: *can_id = *can_id +(msg[2+2]<<8) + msg[3+2];
  6186  001A68  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  6187  001A6C  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  6188  001A70  CFDE F017          	movff	postinc2,??_Mcp2515ReadCanId
  6189  001A74  CFDE F018          	movff	postinc2,??_Mcp2515ReadCanId+1
  6190  001A78  CFDE F019          	movff	postinc2,??_Mcp2515ReadCanId+2
  6191  001A7C  CFDE F01A          	movff	postinc2,??_Mcp2515ReadCanId+3
  6192  001A80  502E               	movf	Mcp2515ReadCanId@msg+4,w,c
  6193  001A82  6E1C               	movwf	(??_Mcp2515ReadCanId+5)& (0+255),c
  6194  001A84  6A1B               	clrf	(??_Mcp2515ReadCanId+4)& (0+255),c
  6195  001A86  C01B  F01D         	movff	??_Mcp2515ReadCanId+4,??_Mcp2515ReadCanId+6
  6196  001A8A  C01C  F01E         	movff	??_Mcp2515ReadCanId+5,??_Mcp2515ReadCanId+7
  6197  001A8E  0E00               	movlw	0
  6198  001A90  BE1E               	btfsc	(??_Mcp2515ReadCanId+7)& (0+255),7,c
  6199  001A92  0EFF               	movlw	255
  6200  001A94  6E1F               	movwf	(??_Mcp2515ReadCanId+8)& (0+255),c
  6201  001A96  6E20               	movwf	(??_Mcp2515ReadCanId+9)& (0+255),c
  6202  001A98  502F               	movf	Mcp2515ReadCanId@msg+5,w,c
  6203  001A9A  241D               	addwf	??_Mcp2515ReadCanId+6,w,c
  6204  001A9C  6E21               	movwf	(??_Mcp2515ReadCanId+10)& (0+255),c
  6205  001A9E  0E00               	movlw	0
  6206  001AA0  201E               	addwfc	??_Mcp2515ReadCanId+7,w,c
  6207  001AA2  6E22               	movwf	(??_Mcp2515ReadCanId+11)& (0+255),c
  6208  001AA4  0E00               	movlw	0
  6209  001AA6  201F               	addwfc	??_Mcp2515ReadCanId+8,w,c
  6210  001AA8  6E23               	movwf	(??_Mcp2515ReadCanId+12)& (0+255),c
  6211  001AAA  0E00               	movlw	0
  6212  001AAC  2020               	addwfc	??_Mcp2515ReadCanId+9,w,c
  6213  001AAE  6E24               	movwf	(??_Mcp2515ReadCanId+13)& (0+255),c
  6214  001AB0  5017               	movf	??_Mcp2515ReadCanId,w,c
  6215  001AB2  2421               	addwf	??_Mcp2515ReadCanId+10,w,c
  6216  001AB4  6E25               	movwf	(??_Mcp2515ReadCanId+14)& (0+255),c
  6217  001AB6  5018               	movf	??_Mcp2515ReadCanId+1,w,c
  6218  001AB8  2022               	addwfc	??_Mcp2515ReadCanId+11,w,c
  6219  001ABA  6E26               	movwf	(??_Mcp2515ReadCanId+15)& (0+255),c
  6220  001ABC  5019               	movf	??_Mcp2515ReadCanId+2,w,c
  6221  001ABE  2023               	addwfc	??_Mcp2515ReadCanId+12,w,c
  6222  001AC0  6E27               	movwf	(??_Mcp2515ReadCanId+16)& (0+255),c
  6223  001AC2  501A               	movf	??_Mcp2515ReadCanId+3,w,c
  6224  001AC4  2024               	addwfc	??_Mcp2515ReadCanId+13,w,c
  6225  001AC6  6E28               	movwf	(??_Mcp2515ReadCanId+17)& (0+255),c
  6226  001AC8  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  6227  001ACC  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  6228  001AD0  C025  FFDE         	movff	??_Mcp2515ReadCanId+14,postinc2
  6229  001AD4  C026  FFDE         	movff	??_Mcp2515ReadCanId+15,postinc2
  6230  001AD8  C027  FFDE         	movff	??_Mcp2515ReadCanId+16,postinc2
  6231  001ADC  C028  FFDE         	movff	??_Mcp2515ReadCanId+17,postinc2
  6232                           
  6233                           ;mcp2515.c: 182: *ext = 1;
  6234  001AE0  C013  FFD9         	movff	Mcp2515ReadCanId@ext,fsr2l
  6235  001AE4  C014  FFDA         	movff	Mcp2515ReadCanId@ext+1,fsr2h
  6236  001AE8  0E01               	movlw	1
  6237  001AEA  6EDF               	movwf	indf2,c
  6238  001AEC  0012               	return	
  6239  001AEE                     __end_of_Mcp2515ReadCanId:
  6240                           	opt stack 0
  6241                           pclatu	equ	0xFFB
  6242                           pclath	equ	0xFFA
  6243                           tblptru	equ	0xFF8
  6244                           tblptrh	equ	0xFF7
  6245                           tblptrl	equ	0xFF6
  6246                           tablat	equ	0xFF5
  6247                           prodh	equ	0xFF4
  6248                           prodl	equ	0xFF3
  6249                           intcon	equ	0xFF2
  6250                           intcon2	equ	0xFF1
  6251                           intcon3	equ	0xFF0
  6252                           postinc0	equ	0xFEE
  6253                           fsr0h	equ	0xFEA
  6254                           fsr0l	equ	0xFE9
  6255                           wreg	equ	0xFE8
  6256                           indf1	equ	0xFE7
  6257                           postinc1	equ	0xFE6
  6258                           postdec1	equ	0xFE5
  6259                           plusw1	equ	0xFE3
  6260                           fsr1h	equ	0xFE2
  6261                           fsr1l	equ	0xFE1
  6262                           indf2	equ	0xFDF
  6263                           postinc2	equ	0xFDE
  6264                           postdec2	equ	0xFDD
  6265                           plusw2	equ	0xFDB
  6266                           fsr2h	equ	0xFDA
  6267                           fsr2l	equ	0xFD9
  6268                           status	equ	0xFD8
  6269                           
  6270 ;; *************** function _Can_OutBufferStatus *****************
  6271 ;; Defined at:
  6272 ;;		line 156 in file "can.c"
  6273 ;; Parameters:    Size  Location     Type
  6274 ;;		None
  6275 ;; Auto vars:     Size  Location     Type
  6276 ;;		None
  6277 ;; Return value:  Size  Location     Type
  6278 ;;                  1    wreg      unsigned char 
  6279 ;; Registers used:
  6280 ;;		wreg, status,2
  6281 ;; Tracked objects:
  6282 ;;		On entry : 0/0
  6283 ;;		On exit  : 0/0
  6284 ;;		Unchanged: 0/0
  6285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6289 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6290 ;;Total ram usage:        0 bytes
  6291 ;; Hardware stack levels used:    1
  6292 ;; This function calls:
  6293 ;;		Nothing
  6294 ;; This function is called by:
  6295 ;;		_Can_Isr
  6296 ;; This function uses a non-reentrant model
  6297 ;;
  6298                           
  6299                           	psect	text27
  6300  002912                     __ptext27:
  6301                           	opt stack 0
  6302  002912                     _Can_OutBufferStatus:
  6303                           	opt stack 22
  6304                           
  6305                           ;can.c: 158: return txBufferCount;
  6306                           
  6307                           ;incstack = 0
  6308  002912  0100               	movlb	0	; () banked
  6309  002914  51AB               	movf	_txBufferCount& (0+255),w,b
  6310  002916  0012               	return	
  6311  002918                     __end_of_Can_OutBufferStatus:
  6312                           	opt stack 0
  6313                           pclatu	equ	0xFFB
  6314                           pclath	equ	0xFFA
  6315                           tblptru	equ	0xFF8
  6316                           tblptrh	equ	0xFF7
  6317                           tblptrl	equ	0xFF6
  6318                           tablat	equ	0xFF5
  6319                           prodh	equ	0xFF4
  6320                           prodl	equ	0xFF3
  6321                           intcon	equ	0xFF2
  6322                           intcon2	equ	0xFF1
  6323                           intcon3	equ	0xFF0
  6324                           postinc0	equ	0xFEE
  6325                           fsr0h	equ	0xFEA
  6326                           fsr0l	equ	0xFE9
  6327                           wreg	equ	0xFE8
  6328                           indf1	equ	0xFE7
  6329                           postinc1	equ	0xFE6
  6330                           postdec1	equ	0xFE5
  6331                           plusw1	equ	0xFE3
  6332                           fsr1h	equ	0xFE2
  6333                           fsr1l	equ	0xFE1
  6334                           indf2	equ	0xFDF
  6335                           postinc2	equ	0xFDE
  6336                           postdec2	equ	0xFDD
  6337                           plusw2	equ	0xFDB
  6338                           fsr2h	equ	0xFDA
  6339                           fsr2l	equ	0xFD9
  6340                           status	equ	0xFD8
  6341                           
  6342 ;; *************** function _Can_GetStatus *****************
  6343 ;; Defined at:
  6344 ;;		line 349 in file "can.c"
  6345 ;; Parameters:    Size  Location     Type
  6346 ;;		None
  6347 ;; Auto vars:     Size  Location     Type
  6348 ;;  msg4            4   18[COMRAM] unsigned char [4]
  6349 ;;  msg             3   22[COMRAM] unsigned char [3]
  6350 ;;  status          1   25[COMRAM] unsigned char 
  6351 ;; Return value:  Size  Location     Type
  6352 ;;                  1    wreg      unsigned char 
  6353 ;; Registers used:
  6354 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6355 ;; Tracked objects:
  6356 ;;		On entry : 0/0
  6357 ;;		On exit  : 0/0
  6358 ;;		Unchanged: 0/0
  6359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6361 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6363 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6364 ;;Total ram usage:        8 bytes
  6365 ;; Hardware stack levels used:    1
  6366 ;; Hardware stack levels required when called:    2
  6367 ;; This function calls:
  6368 ;;		_Spi_ReadWrite
  6369 ;; This function is called by:
  6370 ;;		_Can_Isr
  6371 ;; This function uses a non-reentrant model
  6372 ;;
  6373                           
  6374                           	psect	text28
  6375  00262A                     __ptext28:
  6376                           	opt stack 0
  6377  00262A                     _Can_GetStatus:
  6378                           	opt stack 20
  6379                           
  6380                           ;can.c: 351: uint8_t status;
  6381                           ;can.c: 352: uint8_t msg[]={0x03,0x2C,0};
  6382                           
  6383                           ; BSR set to: 0
  6384                           ;incstack = 0
  6385  00262A  C0F6  F017         	movff	Can_GetStatus@F8262,Can_GetStatus@msg
  6386  00262E  C0F7  F018         	movff	Can_GetStatus@F8262+1,Can_GetStatus@msg+1
  6387  002632  C0F8  F019         	movff	Can_GetStatus@F8262+2,Can_GetStatus@msg+2
  6388                           
  6389                           ;can.c: 353: uint8_t msg4[]={0x05,0x2C,0x1C,0};
  6390  002636  C0EC  F013         	movff	Can_GetStatus@F8264,Can_GetStatus@msg4
  6391  00263A  C0ED  F014         	movff	Can_GetStatus@F8264+1,Can_GetStatus@msg4+1
  6392  00263E  C0EE  F015         	movff	Can_GetStatus@F8264+2,Can_GetStatus@msg4+2
  6393  002642  C0EF  F016         	movff	Can_GetStatus@F8264+3,Can_GetStatus@msg4+3
  6394                           
  6395                           ;can.c: 355: Spi_ReadWrite(msg,sizeof(msg));
  6396  002646  0E17               	movlw	low Can_GetStatus@msg
  6397  002648  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  6398  00264A  0E00               	movlw	high Can_GetStatus@msg
  6399  00264C  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  6400  00264E  0E03               	movlw	3
  6401  002650  6E0F               	movwf	Spi_ReadWrite@size,c
  6402  002652  0E00               	movlw	0
  6403  002654  6E10               	movwf	Spi_ReadWrite@size+1,c
  6404  002656  0E00               	movlw	0
  6405  002658  6E11               	movwf	Spi_ReadWrite@size+2,c
  6406  00265A  0E00               	movlw	0
  6407  00265C  6E12               	movwf	Spi_ReadWrite@size+3,c
  6408  00265E  EC57  F014         	call	_Spi_ReadWrite	;wreg free
  6409                           
  6410                           ;can.c: 356: status = msg[2];
  6411  002662  C019  F01A         	movff	Can_GetStatus@msg+2,Can_GetStatus@status
  6412                           
  6413                           ;can.c: 357: msg4[2] = status & 0x1C;
  6414  002666  501A               	movf	Can_GetStatus@status,w,c
  6415  002668  0B1C               	andlw	28
  6416  00266A  6E15               	movwf	Can_GetStatus@msg4+2,c
  6417                           
  6418                           ;can.c: 358: Spi_ReadWrite(msg4,sizeof(msg4));
  6419  00266C  0E13               	movlw	low Can_GetStatus@msg4
  6420  00266E  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  6421  002670  0E00               	movlw	high Can_GetStatus@msg4
  6422  002672  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  6423  002674  0E04               	movlw	4
  6424  002676  6E0F               	movwf	Spi_ReadWrite@size,c
  6425  002678  0E00               	movlw	0
  6426  00267A  6E10               	movwf	Spi_ReadWrite@size+1,c
  6427  00267C  0E00               	movlw	0
  6428  00267E  6E11               	movwf	Spi_ReadWrite@size+2,c
  6429  002680  0E00               	movlw	0
  6430  002682  6E12               	movwf	Spi_ReadWrite@size+3,c
  6431  002684  EC57  F014         	call	_Spi_ReadWrite	;wreg free
  6432                           
  6433                           ;can.c: 359: return status;
  6434  002688  501A               	movf	Can_GetStatus@status,w,c
  6435  00268A  0012               	return	
  6436  00268C                     __end_of_Can_GetStatus:
  6437                           	opt stack 0
  6438                           pclatu	equ	0xFFB
  6439                           pclath	equ	0xFFA
  6440                           tblptru	equ	0xFF8
  6441                           tblptrh	equ	0xFF7
  6442                           tblptrl	equ	0xFF6
  6443                           tablat	equ	0xFF5
  6444                           prodh	equ	0xFF4
  6445                           prodl	equ	0xFF3
  6446                           intcon	equ	0xFF2
  6447                           intcon2	equ	0xFF1
  6448                           intcon3	equ	0xFF0
  6449                           postinc0	equ	0xFEE
  6450                           fsr0h	equ	0xFEA
  6451                           fsr0l	equ	0xFE9
  6452                           wreg	equ	0xFE8
  6453                           indf1	equ	0xFE7
  6454                           postinc1	equ	0xFE6
  6455                           postdec1	equ	0xFE5
  6456                           plusw1	equ	0xFE3
  6457                           fsr1h	equ	0xFE2
  6458                           fsr1l	equ	0xFE1
  6459                           indf2	equ	0xFDF
  6460                           postinc2	equ	0xFDE
  6461                           postdec2	equ	0xFDD
  6462                           plusw2	equ	0xFDB
  6463                           fsr2h	equ	0xFDA
  6464                           fsr2l	equ	0xFD9
  6465                           status	equ	0xFD8
  6466                           
  6467 ;; *************** function _Spi_ReadWrite *****************
  6468 ;; Defined at:
  6469 ;;		line 319 in file "can.c"
  6470 ;; Parameters:    Size  Location     Type
  6471 ;;  rx_tx           2   12[COMRAM] PTR unsigned char 
  6472 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515ReadCanMsg@cmd(10), Mcp2515ReadCanId@msg(6), Can_ReadMessage@buf(4), 
  6473 ;;		 -> Can_GetStatus@msg4(4), Can_GetStatus@msg(3), 
  6474 ;;  size            4   14[COMRAM] unsigned long 
  6475 ;; Auto vars:     Size  Location     Type
  6476 ;;		None
  6477 ;; Return value:  Size  Location     Type
  6478 ;;                  1    wreg      void 
  6479 ;; Registers used:
  6480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6481 ;; Tracked objects:
  6482 ;;		On entry : 0/0
  6483 ;;		On exit  : 0/0
  6484 ;;		Unchanged: 0/0
  6485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6486 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6489 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6490 ;;Total ram usage:        6 bytes
  6491 ;; Hardware stack levels used:    1
  6492 ;; Hardware stack levels required when called:    1
  6493 ;; This function calls:
  6494 ;;		i2_SPIRW
  6495 ;; This function is called by:
  6496 ;;		_Can_GetStatus
  6497 ;;		_Can_ReadMessage
  6498 ;;		_Mcp2515ReadCanId
  6499 ;;		_Mcp2515ReadCanMsg
  6500 ;;		_Mcp2515GetNextFreeTXBuf
  6501 ;; This function uses a non-reentrant model
  6502 ;;
  6503                           
  6504                           	psect	text29
  6505  0028AE                     __ptext29:
  6506                           	opt stack 0
  6507  0028AE                     _Spi_ReadWrite:
  6508                           	opt stack 18
  6509                           
  6510                           ;can.c: 321: SPIRW(rx_tx, rx_tx, size);
  6511                           
  6512                           ;incstack = 0
  6513  0028AE  C00D  F001         	movff	Spi_ReadWrite@rx_tx,i2SPIRW@tx
  6514  0028B2  C00E  F002         	movff	Spi_ReadWrite@rx_tx+1,i2SPIRW@tx+1
  6515  0028B6  C00D  F003         	movff	Spi_ReadWrite@rx_tx,i2SPIRW@rx
  6516  0028BA  C00E  F004         	movff	Spi_ReadWrite@rx_tx+1,i2SPIRW@rx+1
  6517  0028BE  C00F  F005         	movff	Spi_ReadWrite@size,i2SPIRW@size
  6518  0028C2  C010  F006         	movff	Spi_ReadWrite@size+1,i2SPIRW@size+1
  6519  0028C6  C011  F007         	movff	Spi_ReadWrite@size+2,i2SPIRW@size+2
  6520  0028CA  C012  F008         	movff	Spi_ReadWrite@size+3,i2SPIRW@size+3
  6521  0028CE  EC7B  F012         	call	i2_SPIRW	;wreg free
  6522  0028D2  0012               	return		;funcret
  6523  0028D4                     __end_of_Spi_ReadWrite:
  6524                           	opt stack 0
  6525                           pclatu	equ	0xFFB
  6526                           pclath	equ	0xFFA
  6527                           tblptru	equ	0xFF8
  6528                           tblptrh	equ	0xFF7
  6529                           tblptrl	equ	0xFF6
  6530                           tablat	equ	0xFF5
  6531                           prodh	equ	0xFF4
  6532                           prodl	equ	0xFF3
  6533                           intcon	equ	0xFF2
  6534                           intcon2	equ	0xFF1
  6535                           intcon3	equ	0xFF0
  6536                           postinc0	equ	0xFEE
  6537                           fsr0h	equ	0xFEA
  6538                           fsr0l	equ	0xFE9
  6539                           wreg	equ	0xFE8
  6540                           indf1	equ	0xFE7
  6541                           postinc1	equ	0xFE6
  6542                           postdec1	equ	0xFE5
  6543                           plusw1	equ	0xFE3
  6544                           fsr1h	equ	0xFE2
  6545                           fsr1l	equ	0xFE1
  6546                           indf2	equ	0xFDF
  6547                           postinc2	equ	0xFDE
  6548                           postdec2	equ	0xFDD
  6549                           plusw2	equ	0xFDB
  6550                           fsr2h	equ	0xFDA
  6551                           fsr2l	equ	0xFD9
  6552                           status	equ	0xFD8
  6553                           
  6554 ;; *************** function i2_SPIRW *****************
  6555 ;; Defined at:
  6556 ;;		line 293 in file "can.c"
  6557 ;; Parameters:    Size  Location     Type
  6558 ;;  tx              2    0[COMRAM] PTR const unsigned char 
  6559 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515WriteCanMsg@buf(10), Mcp2515WriteCanId@buf(6), Mcp2515ReadCanMsg@cmd(10),
      + 
  6560 ;;		 -> Mcp2515ReadCanId@msg(6), Mcp2515Sleep@cmdMask4(3), Mcp2515_Init@cmdWrite3(3), Mcp2515_Init@cmdMask4(4), 
  6561 ;;		 -> Mcp2515_Reset@cmd(1), Can_SendMessage@buf(4), Can_ReadMessage@buf(4), Can_GetStatus@msg4(4), 
  6562 ;;		 -> Can_GetStatus@msg(3), 
  6563 ;;  rx              2    2[COMRAM] PTR unsigned char 
  6564 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515ReadCanMsg@cmd(10), Mcp2515ReadCanId@msg(6), Can_ReadMessage@buf(4), 
  6565 ;;		 -> Can_GetStatus@msg4(4), Can_GetStatus@msg(3), NULL(0), 
  6566 ;;  size            4    4[COMRAM] unsigned long 
  6567 ;; Auto vars:     Size  Location     Type
  6568 ;;  SPIRW           4    8[COMRAM] unsigned long 
  6569 ;; Return value:  Size  Location     Type
  6570 ;;                  1    wreg      void 
  6571 ;; Registers used:
  6572 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6573 ;; Tracked objects:
  6574 ;;		On entry : 0/0
  6575 ;;		On exit  : 0/0
  6576 ;;		Unchanged: 0/0
  6577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6578 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6579 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6581 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6582 ;;Total ram usage:       12 bytes
  6583 ;; Hardware stack levels used:    1
  6584 ;; This function calls:
  6585 ;;		Nothing
  6586 ;; This function is called by:
  6587 ;;		_Spi_ReadWrite
  6588 ;;		i2_Spi_Write
  6589 ;; This function uses a non-reentrant model
  6590 ;;
  6591                           
  6592                           	psect	text30
  6593  0024F6                     __ptext30:
  6594                           	opt stack 0
  6595  0024F6                     i2_SPIRW:
  6596                           	opt stack 19
  6597                           
  6598                           ;can.c: 295: uint32_t i;
  6599                           ;can.c: 297: SSPCON1 = 0b00111010;
  6600                           
  6601                           ;incstack = 0
  6602  0024F6  0E3A               	movlw	58
  6603  0024F8  6EC6               	movwf	4038,c	;volatile
  6604                           
  6605                           ;can.c: 299: LATD1 = 0;
  6606  0024FA  928C               	bcf	3980,1,c	;volatile
  6607                           
  6608                           ;can.c: 300: for(i=0;i<size;i++)
  6609  0024FC  0E00               	movlw	0
  6610  0024FE  6E09               	movwf	i2SPIRW@i,c
  6611  002500  0E00               	movlw	0
  6612  002502  6E0A               	movwf	i2SPIRW@i+1,c
  6613  002504  0E00               	movlw	0
  6614  002506  6E0B               	movwf	i2SPIRW@i+2,c
  6615  002508  0E00               	movlw	0
  6616  00250A  6E0C               	movwf	i2SPIRW@i+3,c
  6617  00250C  D01D               	goto	i2l1693
  6618  00250E                     i2l1685:
  6619                           
  6620                           ;can.c: 301: {
  6621                           ;can.c: 302: SSPBUF = tx[i];
  6622  00250E  5009               	movf	i2SPIRW@i,w,c
  6623  002510  2401               	addwf	i2SPIRW@tx,w,c
  6624  002512  6ED9               	movwf	fsr2l,c
  6625  002514  500A               	movf	i2SPIRW@i+1,w,c
  6626  002516  2002               	addwfc	i2SPIRW@tx+1,w,c
  6627  002518  6EDA               	movwf	fsr2h,c
  6628  00251A  50DF               	movf	indf2,w,c
  6629  00251C  6EC9               	movwf	4041,c	;volatile
  6630  00251E                     i2l230:
  6631  00251E  A69E               	btfss	3998,3,c	;volatile
  6632  002520  D7FE               	goto	i2l230
  6633                           
  6634                           ;can.c: 304: SSP1IF = 0;
  6635  002522  969E               	bcf	3998,3,c	;volatile
  6636                           
  6637                           ;can.c: 305: if(rx != 0)
  6638  002524  5003               	movf	i2SPIRW@rx,w,c
  6639  002526  1004               	iorwf	i2SPIRW@rx+1,w,c
  6640  002528  B4D8               	btfsc	status,2,c
  6641  00252A  D008               	goto	i2l1691
  6642                           
  6643                           ;can.c: 306: rx[i] = SSPBUF;
  6644  00252C  5009               	movf	i2SPIRW@i,w,c
  6645  00252E  2403               	addwf	i2SPIRW@rx,w,c
  6646  002530  6ED9               	movwf	fsr2l,c
  6647  002532  500A               	movf	i2SPIRW@i+1,w,c
  6648  002534  2004               	addwfc	i2SPIRW@rx+1,w,c
  6649  002536  6EDA               	movwf	fsr2h,c
  6650  002538  CFC9 FFDF          	movff	4041,indf2	;volatile
  6651  00253C                     i2l1691:
  6652  00253C  0E01               	movlw	1
  6653  00253E  2609               	addwf	i2SPIRW@i,f,c
  6654  002540  0E00               	movlw	0
  6655  002542  220A               	addwfc	i2SPIRW@i+1,f,c
  6656  002544  220B               	addwfc	i2SPIRW@i+2,f,c
  6657  002546  220C               	addwfc	i2SPIRW@i+3,f,c
  6658  002548                     i2l1693:
  6659  002548  5005               	movf	i2SPIRW@size,w,c
  6660  00254A  5C09               	subwf	i2SPIRW@i,w,c
  6661  00254C  5006               	movf	i2SPIRW@size+1,w,c
  6662  00254E  580A               	subwfb	i2SPIRW@i+1,w,c
  6663  002550  5007               	movf	i2SPIRW@size+2,w,c
  6664  002552  580B               	subwfb	i2SPIRW@i+2,w,c
  6665  002554  5008               	movf	i2SPIRW@size+3,w,c
  6666  002556  580C               	subwfb	i2SPIRW@i+3,w,c
  6667  002558  A0D8               	btfss	status,0,c
  6668  00255A  D7D9               	goto	i2l1685
  6669                           
  6670                           ;can.c: 307: }
  6671                           ;can.c: 308: LATD1 = 1;
  6672  00255C  828C               	bsf	3980,1,c	;volatile
  6673  00255E  0012               	return		;funcret
  6674  002560                     __end_ofi2_SPIRW:
  6675                           	opt stack 0
  6676                           pclatu	equ	0xFFB
  6677                           pclath	equ	0xFFA
  6678                           tblptru	equ	0xFF8
  6679                           tblptrh	equ	0xFF7
  6680                           tblptrl	equ	0xFF6
  6681                           tablat	equ	0xFF5
  6682                           prodh	equ	0xFF4
  6683                           prodl	equ	0xFF3
  6684                           intcon	equ	0xFF2
  6685                           intcon2	equ	0xFF1
  6686                           intcon3	equ	0xFF0
  6687                           postinc0	equ	0xFEE
  6688                           fsr0h	equ	0xFEA
  6689                           fsr0l	equ	0xFE9
  6690                           wreg	equ	0xFE8
  6691                           indf1	equ	0xFE7
  6692                           postinc1	equ	0xFE6
  6693                           postdec1	equ	0xFE5
  6694                           plusw1	equ	0xFE3
  6695                           fsr1h	equ	0xFE2
  6696                           fsr1l	equ	0xFE1
  6697                           indf2	equ	0xFDF
  6698                           postinc2	equ	0xFDE
  6699                           postdec2	equ	0xFDD
  6700                           plusw2	equ	0xFDB
  6701                           fsr2h	equ	0xFDA
  6702                           fsr2l	equ	0xFD9
  6703                           status	equ	0xFD8
  6704                           pclatu	equ	0xFFB
  6705                           pclath	equ	0xFFA
  6706                           tblptru	equ	0xFF8
  6707                           tblptrh	equ	0xFF7
  6708                           tblptrl	equ	0xFF6
  6709                           tablat	equ	0xFF5
  6710                           prodh	equ	0xFF4
  6711                           prodl	equ	0xFF3
  6712                           intcon	equ	0xFF2
  6713                           intcon2	equ	0xFF1
  6714                           intcon3	equ	0xFF0
  6715                           postinc0	equ	0xFEE
  6716                           fsr0h	equ	0xFEA
  6717                           fsr0l	equ	0xFE9
  6718                           wreg	equ	0xFE8
  6719                           indf1	equ	0xFE7
  6720                           postinc1	equ	0xFE6
  6721                           postdec1	equ	0xFE5
  6722                           plusw1	equ	0xFE3
  6723                           fsr1h	equ	0xFE2
  6724                           fsr1l	equ	0xFE1
  6725                           indf2	equ	0xFDF
  6726                           postinc2	equ	0xFDE
  6727                           postdec2	equ	0xFDD
  6728                           plusw2	equ	0xFDB
  6729                           fsr2h	equ	0xFDA
  6730                           fsr2l	equ	0xFD9
  6731                           status	equ	0xFD8
  6732                           
  6733                           	psect	rparam
  6734  0000                     pclatu	equ	0xFFB
  6735                           pclath	equ	0xFFA
  6736                           tblptru	equ	0xFF8
  6737                           tblptrh	equ	0xFF7
  6738                           tblptrl	equ	0xFF6
  6739                           tablat	equ	0xFF5
  6740                           prodh	equ	0xFF4
  6741                           prodl	equ	0xFF3
  6742                           intcon	equ	0xFF2
  6743                           intcon2	equ	0xFF1
  6744                           intcon3	equ	0xFF0
  6745                           postinc0	equ	0xFEE
  6746                           fsr0h	equ	0xFEA
  6747                           fsr0l	equ	0xFE9
  6748                           wreg	equ	0xFE8
  6749                           indf1	equ	0xFE7
  6750                           postinc1	equ	0xFE6
  6751                           postdec1	equ	0xFE5
  6752                           plusw1	equ	0xFE3
  6753                           fsr1h	equ	0xFE2
  6754                           fsr1l	equ	0xFE1
  6755                           indf2	equ	0xFDF
  6756                           postinc2	equ	0xFDE
  6757                           postdec2	equ	0xFDD
  6758                           plusw2	equ	0xFDB
  6759                           fsr2h	equ	0xFDA
  6760                           fsr2l	equ	0xFD9
  6761                           status	equ	0xFD8
  6762                           
  6763                           	psect	temp
  6764  00005F                     btemp:
  6765                           	opt stack 0
  6766  00005F                     	ds	1
  6767  0000                     int$flags	set	btemp
  6768                           pclatu	equ	0xFFB
  6769                           pclath	equ	0xFFA
  6770                           tblptru	equ	0xFF8
  6771                           tblptrh	equ	0xFF7
  6772                           tblptrl	equ	0xFF6
  6773                           tablat	equ	0xFF5
  6774                           prodh	equ	0xFF4
  6775                           prodl	equ	0xFF3
  6776                           intcon	equ	0xFF2
  6777                           intcon2	equ	0xFF1
  6778                           intcon3	equ	0xFF0
  6779                           postinc0	equ	0xFEE
  6780                           fsr0h	equ	0xFEA
  6781                           fsr0l	equ	0xFE9
  6782                           wreg	equ	0xFE8
  6783                           indf1	equ	0xFE7
  6784                           postinc1	equ	0xFE6
  6785                           postdec1	equ	0xFE5
  6786                           plusw1	equ	0xFE3
  6787                           fsr1h	equ	0xFE2
  6788                           fsr1l	equ	0xFE1
  6789                           indf2	equ	0xFDF
  6790                           postinc2	equ	0xFDE
  6791                           postdec2	equ	0xFDD
  6792                           plusw2	equ	0xFDB
  6793                           fsr2h	equ	0xFDA
  6794                           fsr2l	equ	0xFD9
  6795                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    63
    Data        24
    BSS         364
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     87      94
    BANK0           160     69     153
    BANK1           256      0     153
    BANK2           256      0     144
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           22      0       0

Pointer List with Targets:

    memcpy@d1	PTR void  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    memcpy@s1	PTR const void  size(2) Largest target is 10
		 -> Mcp2515ReadCanMsg@cmd(COMRAM[10]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 10
		 -> Mcp2515ReadCanMsg@cmd(COMRAM[10]), 

    Mcp2515GetNextFreeTXBuf@txbuf_n	PTR unsigned char  size(2) Largest target is 1
		 -> Can_SendMessage@txbuf_n(COMRAM[1]), 

    Mcp2515WriteCanMsg@msg	PTR const struct CANMESSAGE size(2) Largest target is 68
		 -> txBuffer(BANK1[68]), 

    sp__memcpy	PTR void  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Mcp2515ReadCanMsg@msg	PTR struct CANMESSAGE size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Mcp2515ReadCanId@can_id	PTR unsigned long  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Mcp2515ReadCanId@ext	PTR unsigned char  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Mcp2515_Init@filterCfg	PTR struct CANFILTER size(2) Largest target is 33
		 -> filter(BANK0[33]), 

    Mcp2515_Init@speedCfg	PTR const struct CANSPEED size(2) Largest target is 7
		 -> canSpeed125k(CODE[7]), 

    Can_SendMessage@msg	PTR const struct CANMESSAGE size(2) Largest target is 68
		 -> txBuffer(BANK1[68]), 

    Can_ReadMessage@msg	PTR struct CANMESSAGE size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Spi_Write@tx	PTR unsigned char  size(2) Largest target is 10
		 -> Mcp2515WriteCanMsg@buf(COMRAM[10]), Mcp2515WriteCanId@buf(BANK0[6]), Mcp2515Sleep@cmdMask4(COMRAM[3]), Mcp2515_Init@cmdWrite3(BANK0[3]), 
		 -> Mcp2515_Init@cmdMask4(BANK0[4]), Mcp2515_Reset@cmd(BANK0[1]), Can_SendMessage@buf(COMRAM[4]), Can_ReadMessage@buf(COMRAM[4]), 

    Spi_ReadWrite@rx_tx	PTR unsigned char  size(2) Largest target is 10
		 -> Mcp2515GetNextFreeTXBuf@buf(COMRAM[3]), Mcp2515ReadCanMsg@cmd(COMRAM[10]), Mcp2515ReadCanId@msg(COMRAM[6]), Can_ReadMessage@buf(COMRAM[4]), 
		 -> Can_GetStatus@msg4(COMRAM[4]), Can_GetStatus@msg(COMRAM[3]), 

    SPIRW@rx	PTR unsigned char  size(2) Largest target is 10
		 -> Mcp2515GetNextFreeTXBuf@buf(COMRAM[3]), Mcp2515ReadCanMsg@cmd(COMRAM[10]), Mcp2515ReadCanId@msg(COMRAM[6]), Can_ReadMessage@buf(COMRAM[4]), 
		 -> Can_GetStatus@msg4(COMRAM[4]), Can_GetStatus@msg(COMRAM[3]), NULL(NULL[0]), 

    SPIRW@tx	PTR const unsigned char  size(2) Largest target is 10
		 -> Mcp2515GetNextFreeTXBuf@buf(COMRAM[3]), Mcp2515WriteCanMsg@buf(COMRAM[10]), Mcp2515WriteCanId@buf(BANK0[6]), Mcp2515ReadCanMsg@cmd(COMRAM[10]), 
		 -> Mcp2515ReadCanId@msg(COMRAM[6]), Mcp2515Sleep@cmdMask4(COMRAM[3]), Mcp2515_Init@cmdWrite3(BANK0[3]), Mcp2515_Init@cmdMask4(BANK0[4]), 
		 -> Mcp2515_Reset@cmd(BANK0[1]), Can_SendMessage@buf(COMRAM[4]), Can_ReadMessage@buf(COMRAM[4]), Can_GetStatus@msg4(COMRAM[4]), 
		 -> Can_GetStatus@msg(COMRAM[3]), 

    Can_Init@filterCfg	PTR struct CANFILTER size(2) Largest target is 33
		 -> filter(BANK0[33]), 

    Can_Init@speedCfg	PTR const struct CANSPEED size(2) Largest target is 7
		 -> canSpeed125k(CODE[7]), 

    Can_PutMessage@msgPtr	PTR struct CANMESSAGE size(2) Largest target is 17
		 -> messageTx(BANK1[17]), message(BANK0[17]), 

    Can_GetMessage@msgPtr	PTR struct CANMESSAGE size(2) Largest target is 17
		 -> message(BANK0[17]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_Can_Isr
    _Can_Isr->_Can_ReadInBuffer
    _Can_WriteOutBuffer->_Can_SendMessage
    _Can_SendMessage->_Mcp2515WriteCanMsg
    _Mcp2515WriteCanMsg->i2_Mcp2515WriteCanId
    i2_Mcp2515WriteCanId->i2_Spi_Write
    _Mcp2515GetNextFreeTXBuf->_Spi_ReadWrite
    _Can_ReadInBuffer->_Can_ReadMessage
    _Can_ReadMessage->_Mcp2515ReadCanMsg
    i2_Spi_Write->i2_SPIRW
    _Mcp2515ReadCanMsg->_Mcp2515ReadCanId
    _Mcp2515ReadCanId->_Spi_ReadWrite
    _Can_GetStatus->_Spi_ReadWrite
    _Spi_ReadWrite->i2_SPIRW

Critical Paths under _main in BANK0

    _init->_Can_Init
    _readID->_Can_GetMessage
    _readID->_Can_PutMessage
    _readConflictInfo->___wmul
    _Can_Init->_Mcp2515_Init
    _Mcp2515_Init->_Mcp2515WriteCanId
    _Mcp2515_Reset->_Spi_Write
    _Mcp2515WriteCanId->_Spi_Write
    _Spi_Write->_SPIRW

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5   18043
                                             64 BANK0      5     0      5
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0   18043
                           _Can_Init
                   _readConflictInfo
                             _readID
 ---------------------------------------------------------------------------------
 (2) _readID                                               1     1      0     862
                                              5 BANK0      1     1      0
                     _Can_GetMessage
                     _Can_PutMessage
                          _resetData
 ---------------------------------------------------------------------------------
 (2) _readConflictInfo                                    10    10      0    1983
                                              6 BANK0     10    10      0
                     _Can_GetMessage
                     _Can_PutMessage
                             ___wmul
                          _resetData
 ---------------------------------------------------------------------------------
 (3) _resetData                                            2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     767
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _Can_PutMessage                                       5     3      2     396
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (3) _Can_GetMessage                                       5     3      2     374
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _Can_Init                                             4     0      4   15198
                                             60 BANK0      4     0      4
                       _Mcp2515_Init
 ---------------------------------------------------------------------------------
 (3) _Mcp2515_Init                                        25    21      4   14850
                                             35 BANK0     25    21      4
                  _Mcp2515WriteCanId
                      _Mcp2515_Reset
                          _Spi_Write
 ---------------------------------------------------------------------------------
 (4) _Mcp2515_Reset                                        5     5      0    3781
                                             18 BANK0      5     5      0
                          _Spi_Write
 ---------------------------------------------------------------------------------
 (4) _Mcp2515WriteCanId                                   17    12      5    5581
                                             18 BANK0     17    12      5
                          _Spi_Write
 ---------------------------------------------------------------------------------
 (4) _Spi_Write                                            6     0      6    3710
                                             12 BANK0      6     0      6
                              _SPIRW
 ---------------------------------------------------------------------------------
 (5) _SPIRW                                               12     4      8     534
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _high_isr                                            14    14      0   15316
                                             73 COMRAM    14    14      0
                            _Can_Isr
 ---------------------------------------------------------------------------------
 (8) _Can_Isr                                              2     2      0   15316
                                             71 COMRAM     2     2      0
                      _Can_GetStatus
                _Can_OutBufferStatus
                   _Can_ReadInBuffer
                 _Can_WriteOutBuffer
 ---------------------------------------------------------------------------------
 (9) _Can_WriteOutBuffer                                   0     0      0    5689
                    _Can_SendMessage
 ---------------------------------------------------------------------------------
 (10) _Can_SendMessage                                     8     6      2    5689
                                             53 COMRAM     8     6      2
            _Mcp2515GetNextFreeTXBuf
                 _Mcp2515WriteCanMsg
                        i2_Spi_Write
 ---------------------------------------------------------------------------------
 (11) _Mcp2515WriteCanMsg                                 18    16      2    2682
                                             35 COMRAM    18    16      2
                i2_Mcp2515WriteCanId
                        i2_Spi_Write
 ---------------------------------------------------------------------------------
 (12) i2_Mcp2515WriteCanId                                17    12      5    1333
                                             18 COMRAM    17    12      5
                        i2_Spi_Write
 ---------------------------------------------------------------------------------
 (11) _Mcp2515GetNextFreeTXBuf                            10     8      2    1927
                                             18 COMRAM    10     8      2
                      _Spi_ReadWrite
 ---------------------------------------------------------------------------------
 (9) _Can_ReadInBuffer                                     3     3      0    7772
                                             68 COMRAM     3     3      0
                    _Can_ReadMessage
 ---------------------------------------------------------------------------------
 (10) _Can_ReadMessage                                     6     4      2    7695
                                             62 COMRAM     6     4      2
                  _Mcp2515ReadCanMsg
                      _Spi_ReadWrite
                        i2_Spi_Write
 ---------------------------------------------------------------------------------
 (11) i2_Spi_Write                                         6     0      6     772
                                             12 COMRAM     6     0      6
                            i2_SPIRW
 ---------------------------------------------------------------------------------
 (11) _Mcp2515ReadCanMsg                                  15    13      2    4754
                                             47 COMRAM    15    13      2
                   _Mcp2515ReadCanId
                      _Spi_ReadWrite
                             _memcpy
 ---------------------------------------------------------------------------------
 (12) _memcpy                                             11     5      6     371
                                              0 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (12) _Mcp2515ReadCanId                                   29    25      4    2157
                                             18 COMRAM    29    25      4
                      _Spi_ReadWrite
 ---------------------------------------------------------------------------------
 (9) _Can_OutBufferStatus                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _Can_GetStatus                                        8     8      0    1744
                                             18 COMRAM     8     8      0
                      _Spi_ReadWrite
 ---------------------------------------------------------------------------------
 (12) _Spi_ReadWrite                                       6     0      6    1594
                                             12 COMRAM     6     0      6
                            i2_SPIRW
 ---------------------------------------------------------------------------------
 (12) i2_SPIRW                                            12     4      8     312
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _Can_Init
       _Mcp2515_Init
         _Mcp2515WriteCanId
           _Spi_Write
             _SPIRW
         _Mcp2515_Reset
           _Spi_Write
             _SPIRW
         _Spi_Write
           _SPIRW
     _readConflictInfo
       _Can_GetMessage
       _Can_PutMessage
       ___wmul
       _resetData
     _readID
       _Can_GetMessage
       _Can_PutMessage
       _resetData

 _high_isr (ROOT)
   _Can_Isr
     _Can_GetStatus
       _Spi_ReadWrite
         i2_SPIRW
     _Can_OutBufferStatus
     _Can_ReadInBuffer
       _Can_ReadMessage
         _Mcp2515ReadCanMsg
           _Mcp2515ReadCanId
             _Spi_ReadWrite
               i2_SPIRW
           _Spi_ReadWrite
             i2_SPIRW
           _memcpy
         _Spi_ReadWrite
           i2_SPIRW
         i2_Spi_Write
           i2_SPIRW
     _Can_WriteOutBuffer
       _Can_SendMessage
         _Mcp2515GetNextFreeTXBuf
           _Spi_ReadWrite
             i2_SPIRW
         _Mcp2515WriteCanMsg
           i2_Mcp2515WriteCanId
             i2_Spi_Write
               i2_SPIRW
           i2_Spi_Write
             i2_SPIRW
         i2_Spi_Write
           i2_SPIRW

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F15      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      90       9       56.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      99       7       59.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     45      99       5       95.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     57      5E       1      100.0%
BITBANK15           16      0       0      35        0.0%
BANK15              16      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     220      12        0.0%
DATA                 0      0     220       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue May 22 10:22:07 2018

                       i2_Spi_Write 2888                                  l60 27EE  
                                l55 1940                                  l65 2910  
                                _id 00AF                 ___wmul@multiplicand 0062  
                       __CFG_BORV$2 000000                       i2Spi_Write@tx 000D  
                      __CFG_CP0$OFF 000000                        __CFG_CP1$OFF 000000  
                      __CFG_CP2$OFF 000000                        __CFG_CP3$OFF 000000  
                      __CFG_CP4$OFF 000000                        __CFG_CP5$OFF 000000  
                      __CFG_CP6$OFF 000000                        __CFG_CP7$OFF 000000  
                               l230 2330                                 l289 25C4  
                               _GIE 007F97                        __CFG_CPB$OFF 000000  
                               _RB3 007C0B                        __CFG_CPD$OFF 000000  
                               u905 20B2                                 u915 2102  
                               fsr2 000FD9                                 prod 000FF3  
                               wreg 000FE8                                l2103 14CA  
                              l2211 1928                                l2117 1544  
                              l2205 16FE                                l2129 1590  
                              l2085 1436                                l2175 26BE  
                              l1705 235A                                l2089 1440  
                              l2193 165C                                l1707 2368  
                              l2197 16C4                                l1903 2122  
                              l1911 27D2                                l1923 1C04  
                              l1907 27BC                                l1951 1DDE  
                              l1927 1C66                                l1961 1E0A  
                              l1699 2318                                l1947 1D7C  
                              l1869 259A                                l1897 20CA  
                              _CKE1 007E3E                                _CKP1 007E34  
                              u1100 165A                                u1120 16FC  
                              u1025 10C0                                u1035 1174  
                              u1045 1236                                u1135 1900  
                     __CFG_DEBUG$ON 000000                                _PEIE 007F96  
                      __CFG_WDTPS$1 000000                                _TXIF 007CF4  
             Mcp2515ReadCanId@F8123 00E2                     __end_ofi2_SPIRW 2560  
              Mcp2515ReadCanMsg@cmd 0034                Mcp2515ReadCanMsg@msg 0030  
                              _main 290C                                _init 248C  
                              fsr0h 000FEA                                fsr1h 000FE2  
                              fsr2h 000FDA                                fsr0l 000FE9  
                              indf1 000FE7                                indf2 000FDF  
                              fsr1l 000FE1                                fsr2l 000FD9  
                              btemp 005F                     __end_of_Can_Isr 272A  
                              prodh 000FF4                                prodl 000FF3  
                              start 008E                       __CFG_IESO$OFF 000000  
          __end_of_Mcp2515ReadCanId 1AEE                       __CFG_MCLRE$ON 000000  
             __size_of_Mcp2515_Init 05EC                        ___param_bank 000000  
                   i2Spi_Write@size 000F            __size_of_Can_ReadMessage 00FA  
                Can_ReadMessage@buf 0041                  Can_ReadMessage@msg 003F  
         Mcp2515WriteCanId@mcp_addr 007A                               ?_main 00A0  
                             ?_init 0001                               _BRGH1 007D62  
                             _CREN1 007D5C                               _LATD1 007C61  
                             _LATG0 007C78                               _LATF6 007C76  
                             _LATF7 007C77                               i2l230 251E  
                             i2l251 21D2                               i2l276 0052  
                     _Can_GetStatus 262A                               _PLLEN 007CDE  
                             _SPEN1 007D5F                               _SPIRW 22FE  
                             _SSPIF 007CF3                               _TXEN1 007D65  
                             _SYNC1 007D64                               _TXREG 000FAD  
                     __CFG_WRT0$OFF 000000                       __CFG_WRT1$OFF 000000  
                     __CFG_WRT2$OFF 000000                       __CFG_WRT3$OFF 000000  
                     __CFG_WRT4$OFF 000000                      __CFG_EBRT0$OFF 000000  
                     __CFG_WRT5$OFF 000000                      __CFG_EBRT1$OFF 000000  
                     __CFG_WRT6$OFF 000000                      __CFG_EBRT2$OFF 000000  
                     __CFG_WRT7$OFF 000000                      __CFG_EBRT3$OFF 000000  
                    __CFG_EBRT4$OFF 000000                      __CFG_FCMEN$OFF 000000  
                    __CFG_EBRT5$OFF 000000                      __CFG_EBRT6$OFF 000000  
                    __CFG_EBRT7$OFF 000000                       __CFG_WRTB$OFF 000000  
                     __CFG_WRTC$OFF 000000                       __CFG_WRTD$OFF 000000  
                    __CFG_EBRTB$OFF 000000                               _nbTx0 00AA  
                             _nbTx1 00A9                               _nbTx2 00A8  
                    __CFG_BOREN$OFF 000000                               pclath 000FFA  
                             tablat 000FF5                    __end_of_Can_Init 2828  
                      _Mcp2515_Init 1042             __size_of_Can_PutMessage 01A6  
                             plusw1 000FE3                               plusw2 000FDB  
                             status 000FD8            __end_of_readConflictInfo 1942  
          ?_Mcp2515GetNextFreeTXBuf 0013                     __initialization 2418  
            __size_of_Mcp2515_Reset 0066              Mcp2515ReadCanId@can_id 0015  
                      __end_of_main 2912                        __end_of_init 24F6  
          __end_of_Can_ReadInBuffer 276E            __size_of_Can_SendMessage 0064  
             Can_ReadInBuffer@error 0045                        _canSpeed100k 101D  
                      _canSpeed125k 1039                        _canSpeed250k 1016  
                      _canSpeed500k 100F                        _canSpeed800k 1008  
                            ??_main 00A5                              ??_init 00A0  
          Can_ReadInBuffer@rdStatus 0046                      ?_Can_GetStatus 0001  
             __end_of_Spi_ReadWrite 28D4                       __activetblptr 000001  
                    __CFG_PLLCFG$ON 000000                              ?_SPIRW 0060  
                    __CFG_RETEN$OFF 000000                           ??i2_SPIRW 0009  
                    _Can_GetMessage 1C94                              SPIRW@i 0068  
                            _BRG161 007B2B                           ??_Can_Isr 0048  
                            _INT3IE 007F85                              _INT3IF 007F82  
                   __CFG_BBSIZ$BB1K 000000                              i2l2025 223C  
                            i2l2029 25C6                              i2l2303 2718  
                            i2l2233 2732                              i2l2237 273A  
                            i2l2247 2766                              i2l2249 276A  
                            i2l1811 23B4                      __CFG_WDTEN$OFF 000000  
                            i2l1735 2780                              i2l1743 27A0  
                            i2l1807 23AC                              i2l1825 2410  
                            i2l1841 1E24                              i2l1691 253C  
                            i2l2299 2712                              i2l1685 250E  
                            i2l1693 2548                              i2l1829 2414  
                            i2l1773 22E0                              i2l1845 1E5C  
                            i2l1767 22A2                              i2l1855 1F0A  
                            i2l1789 1F9A                              i2l1993 21CE  
                            _OSCCON 000FD3              Mcp2515WriteCanId@canid 0081  
                            _SPBRG1 000FAF                              _SSP1IF 007CF3  
                            _TRISC3 007CA3                              _TRISD1 007CA9  
                            _TRISC4 007CA4                              _TRISC5 007CA5  
                            _SSPEN1 007E35                              _TRISG0 007CC0  
                            _TRISF6 007CBE                              _TRISF7 007CBF  
                            _SSPBUF 000FC9                      __CFG_PWRTEN$ON 000000  
                    __CFG_XINST$OFF 000000                    __end_of_high_isr 008E  
                            ___wmul 2828     Mcp2515GetNextFreeTXBuf@ctrlregs 0016  
                    __CFG_STVREN$ON 000000                              _filter 00B0  
                            _readID 268C                              _memcpy 276E  
                            clear_0 2450                              clear_1 245C  
                            clear_2 2468                   ??_Can_ReadMessage 0041  
                __size_of_Spi_Write 002A                   Can_GetStatus@msg4 0013  
                      __pdataCOMRAM 005E              __end_of_Can_GetMessage 1E0E  
                Can_SendMessage@buf 0038                  Can_SendMessage@msg 0036  
                Can_SendMessage@res 003C                        __mediumconst 0000  
                            tblptrh 000FF7                              tblptrl 000FF6  
                            tblptru 000FF8                       _Mcp2515_Reset 2560  
                    _rxBufferPtrOut 00AD                     __CFG_BORPWR$LOW 000000  
   __end_of_Mcp2515GetNextFreeTXBuf 2418                          __accesstop 0060  
           __end_of__initialization 247A                       ___rparam_used 000001  
      __size_ofi2_Mcp2515WriteCanId 00BE                        readID@retVal 0065  
                     __end_of_SPIRW 2390           Mcp2515ReadCanMsg@mcp_addr 003E  
                    __pcstackCOMRAM 0001                        __pidataBANK0 28F4  
                      ?i2_Spi_Write 000D                     ??_Can_GetStatus 0013  
                         ?_Can_Init 009C                       _canSpeed1000k 1001  
                 ??_Can_SendMessage 0038                             ??_SPIRW 0068  
                    ?_Mcp2515_Reset 0001                Mcp2515WriteCanId@buf 007B  
                   ?_Can_GetMessage 0060                Mcp2515WriteCanId@ext 0072  
        __end_of_Mcp2515WriteCanMsg 1F36         __size_of_Can_WriteOutBuffer 0020  
      __size_of_Can_OutBufferStatus 0006                          __pbssBANK0 00A5  
                        __pbssBANK1 0100                          __pbssBANK2 0200  
                    _Can_PutMessage 1AEE                   __end_of_Spi_Write 2888  
                 ?_Mcp2515ReadCanId 0013                  __CFG_CCP2MX$PORTBE 000000  
                   Can_PutMessage@i 0064                  ??_Mcp2515ReadCanId 0017  
                           ?___wmul 0060                             SPIRW@rx 0062  
                           SPIRW@tx 0060                             ?_readID 0001  
                           ?_memcpy 0001                  __size_of_resetData 003E  
                        ??_Can_Init 00A0                             _INTEDG3 007F8B  
                 Spi_ReadWrite@size 000F             Mcp2515WriteCanId@can_id 0073  
                           i2_SPIRW 24F6                             i2u72_41 194E  
                           i2u80_45 22CC                             i2u73_45 199A  
                           _SPBRGH1 000FD4                             i2u75_45 1A06  
                           i2u76_45 1A56                             i2u79_45 2292  
                           _SSPCON1 000FC6              __end_of_Can_PutMessage 1C94  
                         SPIRW@size 0064                           ?_high_isr 0001  
                           _Can_Isr 26E2                Can_GetMessage@msgPtr 0060  
                        _bottomLeft 00AE                   ?_readConflictInfo 0001  
                           __Hparam 0000                             __Lparam 0000  
                ??_readConflictInfo 0066                     __size_of___wmul 0036  
                 ?_Can_ReadInBuffer 0001                        __psmallconst 1000  
                       Spi_Write@tx 006C                     __size_of_readID 0056  
                           __pcinit 2418                     __size_of_memcpy 0044  
                           __ramtop 1000                  ??_Can_ReadInBuffer 0045  
                           __ptext0 290C                             __ptext1 248C  
                           __ptext2 268C                             __ptext3 162E  
                           __ptext4 27B2                             __ptext5 2828  
                           __ptext6 1AEE                             __ptext7 1C94  
                           __ptext8 27F0                             __ptext9 1042  
                   ??_Mcp2515_Reset 0072    __size_of_Mcp2515GetNextFreeTXBuf 0088  
                Can_GetStatus@F8262 00F6                  Can_GetStatus@F8264 00EC  
                           _message 00D1                   __CFG_MSSPMSK$MSK7 000000  
                           _topLeft 005B                     ?_Can_PutMessage 0060  
                        ??_high_isr 004A                  __CFG_INTOSCSEL$LOW 000000  
             Mcp2515_Init@cmdWrite3 0099                end_of_initialization 247A  
                         i2SPIRW@rx 0003                           i2SPIRW@tx 0001  
                 __end_of_resetData 27F0                             memcpy@d 0007  
                           memcpy@n 0005                             memcpy@s 0009  
               __end_of_canSpeed10k 1039                 __end_of_canSpeed20k 1032  
               __end_of_canSpeed50k 102B                     _Can_ReadMessage 2146  
             Mcp2515_Init@filterCfg 0085                             postdec1 000FE5  
                           postdec2 000FDD                      Mcp2515_Reset@i 0073  
                           postinc0 000FEE                             postinc1 000FE6  
                           postinc2 000FDE                __size_ofi2_Spi_Write 0026  
                  __CFG_FOSC$INTIO2 000000                 i2_Mcp2515WriteCanId 2240  
                    _txBufferPtrOut 0058                 Mcp2515ReadCanId@ext 0013  
               Mcp2515ReadCanId@msg 002A                ?i2_Mcp2515WriteCanId 0013  
            __size_of_Spi_ReadWrite 0026        Mcp2515GetNextFreeTXBuf@F8153 00F0  
                   _Can_SendMessage 25C6                 _Can_OutBufferStatus 2912  
       i2Mcp2515WriteCanId@mcp_addr 001B                      __end_of___wmul 285E  
                     __pidataCOMRAM 2918                    ??_Can_GetMessage 0062  
                    __end_of_readID 26E2                      __end_of_memcpy 27B2  
               start_initialization 2418                   __size_of_Can_Init 0038  
          Mcp2515ReadCanId@mcp_addr 0029            i2Mcp2515WriteCanId@canid 0022  
                       _canSpeed10k 1032                         _canSpeed20k 102B  
                       _canSpeed50k 1024                ?_Can_OutBufferStatus 0001  
           __end_of_Can_ReadMessage 2240               ??i2_Mcp2515WriteCanId 0018  
                _Mcp2515WriteCanMsg 1E0E          Mcp2515GetNextFreeTXBuf@buf 0019  
          Mcp2515GetNextFreeTXBuf@i 001C                           _Spi_Write 285E  
                          ??___wmul 0064                 ?_Mcp2515WriteCanMsg 0024  
             Mcp2515WriteCanMsg@dlc 0033               Mcp2515WriteCanMsg@buf 0028  
             Mcp2515WriteCanMsg@msg 0024                         __pdataBANK0 00E2  
                          ??_readID 0065                    Can_GetStatus@msg 0017  
                          ??_memcpy 0007                       _rxBufferCount 0059  
                     _rxBufferPtrIn 005A             _Mcp2515GetNextFreeTXBuf 2390  
             __end_of_Can_GetStatus 268C                       _Spi_ReadWrite 28AE  
         __size_of_Mcp2515ReadCanId 01AC                         __pbssCOMRAM 0058  
        __end_of_Can_WriteOutBuffer 28F4                       __pcstackBANK0 0060  
                          ?i2_SPIRW 0001               ??_Can_OutBufferStatus 0001  
              ??_Mcp2515WriteCanMsg 0026                            ?_Can_Isr 0001  
                     ?_Mcp2515_Init 0083                       Spi_Write@size 006E  
                 __size_of_high_isr 0086                 Mcp2515WriteCanMsg@i 0035  
           __end_of_Can_SendMessage 262A                   _Mcp2515ReadCanMsg 1F36  
                ?_Mcp2515ReadCanMsg 0030                           __pintcode 0008  
                        ?_Spi_Write 006C                 ??_Mcp2515ReadCanMsg 0032  
                    ?_Spi_ReadWrite 000D           __size_of_readConflictInfo 0314  
                       __smallconst 1000                    ??_Can_PutMessage 0062  
                    __size_of_SPIRW 0092                   Mcp2515_Init@F8112 00E8  
                 Mcp2515_Init@F8114 00F3                          resetData@i 0060  
            Can_SendMessage@txbuf_n 003D           __size_of_Can_ReadInBuffer 0044  
        Mcp2515WriteCanMsg@mcp_addr 0034                      ??_Mcp2515_Init 0087  
         __end_of_Mcp2515ReadCanMsg 2044                           _messageTx 0188  
              Mcp2515_Init@cmdMask4 0095                    ?_Can_ReadMessage 003F  
                    ___wmul@product 0064                            i2SPIRW@i 0009  
                         _resetData 27B2                  Spi_ReadWrite@rx_tx 000D  
                     Mcp2515_Init@i 0094           i2Mcp2515WriteCanId@can_id 0014  
                 Mcp2515Sleep@F8117 00A5           ??_Mcp2515GetNextFreeTXBuf 0015  
                     _txBufferCount 00AB                            _Can_Init 27F0  
                 ___wmul@multiplier 0060                       _txBufferPtrIn 00AC  
                  __CFG_SOSCSEL$LOW 000000                Mcp2515_Init@speedCfg 0083  
                   Can_GetMessage@i 0064               __end_of_Mcp2515_Reset 25C6  
Mcp2515WriteCanMsg@buffer_sidh_addr 0032                    __size_ofi2_SPIRW 006A  
                       _bottomRight 005D                           copy_data0 242C  
                       i2SPIRW@size 0005                    __size_of_Can_Isr 0048  
                  ?_Can_SendMessage 0036                          ?_resetData 0001  
                 _Mcp2515WriteCanId 2044                            __Hrparam 0000  
                         memcpy@tmp 000B                            __Lrparam 0000  
              Can_PutMessage@msgPtr 0060                        __Lsmallconst 1000  
                ?_Mcp2515WriteCanId 0072                       ??i2_Spi_Write 0013  
                       ??_Spi_Write 0072                     ??_Spi_ReadWrite 0013  
               ??_Mcp2515WriteCanId 0077               __end_of_canSpeed1000k 1008  
    Mcp2515GetNextFreeTXBuf@txbuf_n 0013                    _Mcp2515ReadCanId 1942  
                          __ptext10 2560                            __ptext11 2044  
                          __ptext20 2390                            __ptext12 285E  
                          __ptext21 272A                            __ptext13 22FE  
                          __ptext30 24F6                            __ptext22 2146  
                          __ptext23 2888                            __ptext15 26E2  
                          __ptext24 1F36                            __ptext16 28D4  
                          __ptext25 276E                            __ptext17 25C6  
                          __ptext26 1942                            __ptext18 1E0E  
                          __ptext27 2912                            __ptext19 2240  
                          __ptext28 262A                            __ptext29 28AE  
                          _high_isr 0008          __size_of_Mcp2515ReadCanMsg 010E  
                 Can_Init@filterCfg 009E                       __size_of_main 0006  
                     __size_of_init 006A           __end_of_Mcp2515WriteCanId 2146  
               __CFG_RTCOSC$SOSCREF 000000                            _rxBuffer 0144  
                          _txBuffer 0100                            int$flags 005F  
                          _topRight 005C                   readConflictInfo@i 006C  
                 readConflictInfo@j 006E                            main@argc 00A0  
                          main@argv 00A2                __end_of_Mcp2515_Init 162E  
                  Mcp2515_Reset@cmd 0072                 __end_ofi2_Spi_Write 28AE  
                  _readConflictInfo 162E              i2Mcp2515WriteCanId@buf 001C  
            i2Mcp2515WriteCanId@ext 0013                            memcpy@d1 0001  
                          memcpy@s1 0003                    _Can_ReadInBuffer 272A  
               Can_GetStatus@status 001A         __end_ofi2_Mcp2515WriteCanId 22FE  
              __end_of_canSpeed100k 1024                __end_of_canSpeed125k 1040  
              __end_of_canSpeed250k 101D                __end_of_canSpeed500k 1016  
                          intlevel2 0000                __end_of_canSpeed800k 100F  
                _Can_WriteOutBuffer 28D4                         ??_resetData 0060  
               ?_Can_WriteOutBuffer 0001                       _conflictTable 0200  
                 Can_ReadInBuffer@i 0047                    Can_Init@speedCfg 009C  
       __end_of_Can_OutBufferStatus 2918                ??_Can_WriteOutBuffer 003E  
           __size_of_Can_GetMessage 017A         __size_of_Mcp2515WriteCanMsg 0128  
        __size_of_Mcp2515WriteCanId 0102                      Can_Isr@nbTxBuf 005E  
            __size_of_Can_GetStatus 0062                      Can_Isr@retCode 0049  
