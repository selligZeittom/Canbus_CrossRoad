

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Thu May 17 16:10:47 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F87K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    46                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    47  0000                     
    48                           ; Version 1.42
    49                           ; Generated 13/04/2017 GMT
    50                           ; 
    51                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC18F87K22 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     
    83                           	psect	idataCOMRAM
    84  002578                     __pidataCOMRAM:
    85                           	opt stack 0
    86                           
    87                           ;initializer for Can_Isr@nbTxBuf
    88  002578  03                 	db	3
    89                           
    90                           	psect	idataBANK0
    91  002552                     __pidataBANK0:
    92                           	opt stack 0
    93                           
    94                           ;initializer for Mcp2515ReadCanId@F8123
    95  002552  03                 	db	3
    96  002553  00                 	db	0
    97  002554  00                 	db	0
    98  002555  00                 	db	0
    99  002556  00                 	db	0
   100  002557  00                 	db	0
   101                           
   102                           ;initializer for Mcp2515_Init@F8112
   103  002558  05                 	db	5
   104  002559  0F                 	db	15
   105  00255A  E0                 	db	224
   106  00255B  80                 	db	128
   107                           
   108                           ;initializer for Can_GetStatus@F8264
   109  00255C  05                 	db	5
   110  00255D  2C                 	db	44
   111  00255E  1C                 	db	28
   112  00255F  00                 	db	0
   113                           
   114                           ;initializer for Mcp2515GetNextFreeTXBuf@F8153
   115  002560  30                 	db	48
   116  002561  40                 	db	64
   117  002562  50                 	db	80
   118                           
   119                           ;initializer for Mcp2515_Init@F8114
   120  002563  02                 	db	2
   121  002564  00                 	db	0
   122  002565  00                 	db	0
   123                           
   124                           ;initializer for Can_GetStatus@F8262
   125  002566  03                 	db	3
   126  002567  2C                 	db	44
   127  002568  00                 	db	0
   128                           
   129                           	psect	smallconst
   130  001000                     __psmallconst:
   131                           	opt stack 0
   132  001000  00                 	db	0
   133  001001                     _canSpeed1000k:
   134                           	opt stack 0
   135  001001  00                 	db	0
   136  001002  01                 	db	1
   137  001003  00                 	db	0
   138  001004  03                 	db	3
   139  001005  01                 	db	1
   140  001006  01                 	db	1
   141  001007  01                 	db	1
   142  001008                     __end_of_canSpeed1000k:
   143                           	opt stack 0
   144  001008                     _canSpeed800k:
   145                           	opt stack 0
   146  001008  00                 	db	0
   147  001009  01                 	db	1
   148  00100A  02                 	db	2
   149  00100B  03                 	db	3
   150  00100C  01                 	db	1
   151  00100D  01                 	db	1
   152  00100E  01                 	db	1
   153  00100F                     __end_of_canSpeed800k:
   154                           	opt stack 0
   155  00100F                     _canSpeed500k:
   156                           	opt stack 0
   157  00100F  01                 	db	1
   158  001010  01                 	db	1
   159  001011  00                 	db	0
   160  001012  03                 	db	3
   161  001013  01                 	db	1
   162  001014  01                 	db	1
   163  001015  01                 	db	1
   164  001016                     __end_of_canSpeed500k:
   165                           	opt stack 0
   166  001016                     _canSpeed250k:
   167                           	opt stack 0
   168  001016  03                 	db	3
   169  001017  01                 	db	1
   170  001018  00                 	db	0
   171  001019  03                 	db	3
   172  00101A  01                 	db	1
   173  00101B  01                 	db	1
   174  00101C  01                 	db	1
   175  00101D                     __end_of_canSpeed250k:
   176                           	opt stack 0
   177  00101D                     _canSpeed100k:
   178                           	opt stack 0
   179  00101D  07                 	db	7
   180  00101E  01                 	db	1
   181  00101F  02                 	db	2
   182  001020  03                 	db	3
   183  001021  01                 	db	1
   184  001022  01                 	db	1
   185  001023  01                 	db	1
   186  001024                     __end_of_canSpeed100k:
   187                           	opt stack 0
   188  001024                     _canSpeed50k:
   189                           	opt stack 0
   190  001024  0F                 	db	15
   191  001025  01                 	db	1
   192  001026  02                 	db	2
   193  001027  03                 	db	3
   194  001028  01                 	db	1
   195  001029  01                 	db	1
   196  00102A  01                 	db	1
   197  00102B                     __end_of_canSpeed50k:
   198                           	opt stack 0
   199  00102B                     _canSpeed20k:
   200                           	opt stack 0
   201  00102B  13                 	db	19
   202  00102C  01                 	db	1
   203  00102D  06                 	db	6
   204  00102E  06                 	db	6
   205  00102F  04                 	db	4
   206  001030  01                 	db	1
   207  001031  01                 	db	1
   208  001032                     __end_of_canSpeed20k:
   209                           	opt stack 0
   210  001032                     _canSpeed10k:
   211                           	opt stack 0
   212  001032  1F                 	db	31
   213  001033  01                 	db	1
   214  001034  07                 	db	7
   215  001035  07                 	db	7
   216  001036  07                 	db	7
   217  001037  01                 	db	1
   218  001038  01                 	db	1
   219  001039                     __end_of_canSpeed10k:
   220                           	opt stack 0
   221  001039                     _canSpeed125k:
   222                           	opt stack 0
   223  001039  07                 	db	7
   224  00103A  01                 	db	1
   225  00103B  00                 	db	0
   226  00103C  03                 	db	3
   227  00103D  01                 	db	1
   228  00103E  01                 	db	1
   229  00103F  01                 	db	1
   230  001040                     __end_of_canSpeed125k:
   231                           	opt stack 0
   232  0000                     _SPBRG1	set	4015
   233  0000                     _SPBRGH1	set	4052
   234  0000                     _OSCCON	set	4051
   235  0000                     _TXREG	set	4013
   236  0000                     _SSPBUF	set	4041
   237  0000                     _SSPCON1	set	4038
   238  0000                     _TXEN1	set	32101
   239  0000                     _CREN1	set	32092
   240  0000                     _SPEN1	set	32095
   241  0000                     _SYNC1	set	32100
   242  0000                     _BRG161	set	31531
   243  0000                     _BRGH1	set	32098
   244  0000                     _LATG0	set	31864
   245  0000                     _TRISG0	set	31936
   246  0000                     _PLLEN	set	31966
   247  0000                     _TXIF	set	31988
   248  0000                     _RB3	set	31755
   249  0000                     _SSP1IF	set	31987
   250  0000                     _SSPIF	set	31987
   251  0000                     _LATD1	set	31841
   252  0000                     _INTEDG3	set	32651
   253  0000                     _SSPEN1	set	32309
   254  0000                     _CKP1	set	32308
   255  0000                     _CKE1	set	32318
   256  0000                     _TRISD1	set	31913
   257  0000                     _TRISC3	set	31907
   258  0000                     _TRISC5	set	31909
   259  0000                     _TRISC4	set	31908
   260  0000                     _LATF7	set	31863
   261  0000                     _LATF6	set	31862
   262  0000                     _TRISF7	set	31935
   263  0000                     _TRISF6	set	31934
   264  0000                     _INT3IF	set	32642
   265  0000                     _INT3IE	set	32645
   266                           
   267                           ; #config settings
   268  001040  00                 	db	0	; dummy byte at the end
   269  0000                     
   270                           	psect	cinit
   271  00216E                     __pcinit:
   272                           	opt stack 0
   273  00216E                     start_initialization:
   274                           	opt stack 0
   275  00216E                     __initialization:
   276                           	opt stack 0
   277                           
   278                           ; Initialize objects allocated to BANK0 (23 bytes)
   279                           ; load TBLPTR registers with __pidataBANK0
   280  00216E  0E52               	movlw	low __pidataBANK0
   281  002170  6EF6               	movwf	tblptrl,c
   282  002172  0E25               	movlw	high __pidataBANK0
   283  002174  6EF7               	movwf	tblptrh,c
   284  002176  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   285  002178  6EF8               	movwf	tblptru,c
   286  00217A  EE00  F0DE         	lfsr	0,__pdataBANK0
   287  00217E  EE10 F017          	lfsr	1,23
   288  002182                     copy_data0:
   289  002182  0009               	tblrd		*+
   290  002184  CFF5 FFEE          	movff	tablat,postinc0
   291  002188  50E5               	movf	postdec1,w,c
   292  00218A  50E1               	movf	fsr1l,w,c
   293  00218C  E1FA               	bnz	copy_data0
   294                           
   295                           ; Initialize objects allocated to COMRAM (1 bytes)
   296                           ; load TBLPTR registers with __pidataCOMRAM
   297  00218E  0E78               	movlw	low __pidataCOMRAM
   298  002190  6EF6               	movwf	tblptrl,c
   299  002192  0E25               	movlw	high __pidataCOMRAM
   300  002194  6EF7               	movwf	tblptrh,c
   301  002196  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   302  002198  6EF8               	movwf	tblptru,c
   303  00219A  0009               	tblrd		*+	;fetch initializer
   304  00219C  CFF5 F05E          	movff	tablat,__pdataCOMRAM
   305                           
   306                           ; Clear objects allocated to BANK1 (136 bytes)
   307  0021A0  EE01  F000         	lfsr	0,__pbssBANK1
   308  0021A4  0E88               	movlw	136
   309  0021A6                     clear_0:
   310  0021A6  6AEE               	clrf	postinc0,c
   311  0021A8  06E8               	decf	wreg,f,c
   312  0021AA  E1FD               	bnz	clear_0
   313                           
   314                           ; Clear objects allocated to BANK0 (57 bytes)
   315  0021AC  EE00  F0A5         	lfsr	0,__pbssBANK0
   316  0021B0  0E39               	movlw	57
   317  0021B2                     clear_1:
   318  0021B2  6AEE               	clrf	postinc0,c
   319  0021B4  06E8               	decf	wreg,f,c
   320  0021B6  E1FD               	bnz	clear_1
   321                           
   322                           ; Clear objects allocated to COMRAM (6 bytes)
   323  0021B8  6A5D               	clrf	(__pbssCOMRAM+5)& (0+255),c
   324  0021BA  6A5C               	clrf	(__pbssCOMRAM+4)& (0+255),c
   325  0021BC  6A5B               	clrf	(__pbssCOMRAM+3)& (0+255),c
   326  0021BE  6A5A               	clrf	(__pbssCOMRAM+2)& (0+255),c
   327  0021C0  6A59               	clrf	(__pbssCOMRAM+1)& (0+255),c
   328  0021C2  6A58               	clrf	__pbssCOMRAM& (0+255),c
   329  0021C4                     end_of_initialization:
   330                           	opt stack 0
   331  0021C4                     __end_of__initialization:
   332                           	opt stack 0
   333  0021C4  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   334  0021C6  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   335  0021C8  0E00               	movlw	low (__Lsmallconst shr (0+16))
   336  0021CA  6EF8               	movwf	tblptru,c
   337  0021CC  0E10               	movlw	high __Lsmallconst
   338  0021CE  6EF7               	movwf	tblptrh,c
   339  0021D0  0100               	movlb	0
   340  0021D2  EFB5  F012         	goto	_main	;jump to C main() function
   341                           tblptru	equ	0xFF8
   342                           tblptrh	equ	0xFF7
   343                           tblptrl	equ	0xFF6
   344                           tablat	equ	0xFF5
   345                           postinc0	equ	0xFEE
   346                           wreg	equ	0xFE8
   347                           postdec1	equ	0xFE5
   348                           fsr1l	equ	0xFE1
   349                           
   350                           	psect	bssCOMRAM
   351  000058                     __pbssCOMRAM:
   352                           	opt stack 0
   353  000058                     _nbTx2:
   354                           	opt stack 0
   355  000058                     	ds	1
   356  000059                     _nbTx1:
   357                           	opt stack 0
   358  000059                     	ds	1
   359  00005A                     _nbTx0:
   360                           	opt stack 0
   361  00005A                     	ds	1
   362  00005B                     _txBufferPtrOut:
   363                           	opt stack 0
   364  00005B                     	ds	1
   365  00005C                     _rxBufferCount:
   366                           	opt stack 0
   367  00005C                     	ds	1
   368  00005D                     _rxBufferPtrIn:
   369                           	opt stack 0
   370  00005D                     	ds	1
   371                           tblptru	equ	0xFF8
   372                           tblptrh	equ	0xFF7
   373                           tblptrl	equ	0xFF6
   374                           tablat	equ	0xFF5
   375                           postinc0	equ	0xFEE
   376                           wreg	equ	0xFE8
   377                           postdec1	equ	0xFE5
   378                           fsr1l	equ	0xFE1
   379                           
   380                           	psect	dataCOMRAM
   381  00005E                     __pdataCOMRAM:
   382                           	opt stack 0
   383  00005E                     Can_Isr@nbTxBuf:
   384                           	opt stack 0
   385  00005E                     	ds	1
   386                           tblptru	equ	0xFF8
   387                           tblptrh	equ	0xFF7
   388                           tblptrl	equ	0xFF6
   389                           tablat	equ	0xFF5
   390                           postinc0	equ	0xFEE
   391                           wreg	equ	0xFE8
   392                           postdec1	equ	0xFE5
   393                           fsr1l	equ	0xFE1
   394                           
   395                           	psect	bssBANK0
   396  0000A5                     __pbssBANK0:
   397                           	opt stack 0
   398  0000A5                     Mcp2515Sleep@F8117:
   399                           	opt stack 0
   400  0000A5                     	ds	3
   401  0000A8                     _txBufferCount:
   402                           	opt stack 0
   403  0000A8                     	ds	1
   404  0000A9                     _txBufferPtrIn:
   405                           	opt stack 0
   406  0000A9                     	ds	1
   407  0000AA                     _rxBufferPtrOut:
   408                           	opt stack 0
   409  0000AA                     	ds	1
   410  0000AB                     _id:
   411                           	opt stack 0
   412  0000AB                     	ds	1
   413  0000AC                     _filter:
   414                           	opt stack 0
   415  0000AC                     	ds	33
   416  0000CD                     _message:
   417                           	opt stack 0
   418  0000CD                     	ds	17
   419                           tblptru	equ	0xFF8
   420                           tblptrh	equ	0xFF7
   421                           tblptrl	equ	0xFF6
   422                           tablat	equ	0xFF5
   423                           postinc0	equ	0xFEE
   424                           wreg	equ	0xFE8
   425                           postdec1	equ	0xFE5
   426                           fsr1l	equ	0xFE1
   427                           
   428                           	psect	dataBANK0
   429  0000DE                     __pdataBANK0:
   430                           	opt stack 0
   431  0000DE                     Mcp2515ReadCanId@F8123:
   432                           	opt stack 0
   433  0000DE                     	ds	6
   434  0000E4                     Mcp2515_Init@F8112:
   435                           	opt stack 0
   436  0000E4                     	ds	4
   437  0000E8                     Can_GetStatus@F8264:
   438                           	opt stack 0
   439  0000E8                     	ds	4
   440  0000EC                     Mcp2515GetNextFreeTXBuf@F8153:
   441                           	opt stack 0
   442  0000EC                     	ds	3
   443  0000EF                     Mcp2515_Init@F8114:
   444                           	opt stack 0
   445  0000EF                     	ds	3
   446  0000F2                     Can_GetStatus@F8262:
   447                           	opt stack 0
   448  0000F2                     	ds	3
   449                           tblptru	equ	0xFF8
   450                           tblptrh	equ	0xFF7
   451                           tblptrl	equ	0xFF6
   452                           tablat	equ	0xFF5
   453                           postinc0	equ	0xFEE
   454                           wreg	equ	0xFE8
   455                           postdec1	equ	0xFE5
   456                           fsr1l	equ	0xFE1
   457                           
   458                           	psect	bssBANK1
   459  000100                     __pbssBANK1:
   460                           	opt stack 0
   461  000100                     _txBuffer:
   462                           	opt stack 0
   463  000100                     	ds	68
   464  000144                     _rxBuffer:
   465                           	opt stack 0
   466  000144                     	ds	68
   467                           tblptru	equ	0xFF8
   468                           tblptrh	equ	0xFF7
   469                           tblptrl	equ	0xFF6
   470                           tablat	equ	0xFF5
   471                           postinc0	equ	0xFEE
   472                           wreg	equ	0xFE8
   473                           postdec1	equ	0xFE5
   474                           fsr1l	equ	0xFE1
   475                           
   476                           	psect	cstackBANK0
   477  000060                     __pcstackBANK0:
   478                           	opt stack 0
   479  000060                     Can_GetMessage@msgPtr:
   480                           	opt stack 0
   481  000060                     Can_PutMessage@msgPtr:
   482                           	opt stack 0
   483  000060                     SPIRW@tx:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x0
   487  000060                     	ds	2
   488  000062                     ??_Can_PutMessage:
   489  000062                     ??_Can_GetMessage:
   490  000062                     SPIRW@rx:
   491                           	opt stack 0
   492                           
   493                           ; 2 bytes @ 0x2
   494  000062                     	ds	2
   495  000064                     Can_GetMessage@i:
   496                           	opt stack 0
   497  000064                     Can_PutMessage@i:
   498                           	opt stack 0
   499  000064                     SPIRW@size:
   500                           	opt stack 0
   501                           
   502                           ; 4 bytes @ 0x4
   503  000064                     	ds	1
   504  000065                     readID@retVal:
   505                           	opt stack 0
   506                           
   507                           ; 1 bytes @ 0x5
   508  000065                     	ds	3
   509  000068                     SPIRW@i:
   510                           	opt stack 0
   511                           
   512                           ; 4 bytes @ 0x8
   513  000068                     	ds	4
   514  00006C                     Spi_Write@tx:
   515                           	opt stack 0
   516                           
   517                           ; 2 bytes @ 0xC
   518  00006C                     	ds	2
   519  00006E                     Spi_Write@size:
   520                           	opt stack 0
   521                           
   522                           ; 4 bytes @ 0xE
   523  00006E                     	ds	4
   524  000072                     Mcp2515_Reset@cmd:
   525                           	opt stack 0
   526  000072                     Mcp2515WriteCanId@ext:
   527                           	opt stack 0
   528                           
   529                           ; 1 bytes @ 0x12
   530  000072                     	ds	1
   531  000073                     Mcp2515_Reset@i:
   532                           	opt stack 0
   533  000073                     Mcp2515WriteCanId@can_id:
   534                           	opt stack 0
   535                           
   536                           ; 4 bytes @ 0x13
   537  000073                     	ds	4
   538  000077                     ??_Mcp2515WriteCanId:
   539                           
   540                           ; 1 bytes @ 0x17
   541  000077                     	ds	3
   542  00007A                     Mcp2515WriteCanId@mcp_addr:
   543                           	opt stack 0
   544                           
   545                           ; 1 bytes @ 0x1A
   546  00007A                     	ds	1
   547  00007B                     Mcp2515WriteCanId@buf:
   548                           	opt stack 0
   549                           
   550                           ; 6 bytes @ 0x1B
   551  00007B                     	ds	6
   552  000081                     Mcp2515WriteCanId@canid:
   553                           	opt stack 0
   554                           
   555                           ; 2 bytes @ 0x21
   556  000081                     	ds	2
   557  000083                     Mcp2515_Init@speedCfg:
   558                           	opt stack 0
   559                           
   560                           ; 2 bytes @ 0x23
   561  000083                     	ds	2
   562  000085                     Mcp2515_Init@filterCfg:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0x25
   566  000085                     	ds	2
   567  000087                     ??_Mcp2515_Init:
   568                           
   569                           ; 1 bytes @ 0x27
   570  000087                     	ds	13
   571  000094                     Mcp2515_Init@i:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x34
   575  000094                     	ds	1
   576  000095                     Mcp2515_Init@cmdMask4:
   577                           	opt stack 0
   578                           
   579                           ; 4 bytes @ 0x35
   580  000095                     	ds	4
   581  000099                     Mcp2515_Init@cmdWrite3:
   582                           	opt stack 0
   583                           
   584                           ; 3 bytes @ 0x39
   585  000099                     	ds	3
   586  00009C                     Can_Init@speedCfg:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x3C
   590  00009C                     	ds	2
   591  00009E                     Can_Init@filterCfg:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0x3E
   595  00009E                     	ds	2
   596  0000A0                     
   597                           ; 2 bytes @ 0x40
   598  0000A0                     	ds	2
   599  0000A2                     
   600                           ; 3 bytes @ 0x42
   601  0000A2                     	ds	3
   602  0000A5                     tblptru	equ	0xFF8
   603                           tblptrh	equ	0xFF7
   604                           tblptrl	equ	0xFF6
   605                           tablat	equ	0xFF5
   606                           postinc0	equ	0xFEE
   607                           wreg	equ	0xFE8
   608                           postdec1	equ	0xFE5
   609                           fsr1l	equ	0xFE1
   610                           
   611                           ; 1 bytes @ 0x45
   612                           
   613                           	psect	cstackCOMRAM
   614  000001                     __pcstackCOMRAM:
   615                           	opt stack 0
   616  000001                     memcpy@d1:
   617                           	opt stack 0
   618  000001                     i2SPIRW@tx:
   619                           	opt stack 0
   620                           
   621                           ; 2 bytes @ 0x0
   622  000001                     	ds	2
   623  000003                     memcpy@s1:
   624                           	opt stack 0
   625  000003                     i2SPIRW@rx:
   626                           	opt stack 0
   627                           
   628                           ; 2 bytes @ 0x2
   629  000003                     	ds	2
   630  000005                     memcpy@n:
   631                           	opt stack 0
   632  000005                     i2SPIRW@size:
   633                           	opt stack 0
   634                           
   635                           ; 4 bytes @ 0x4
   636  000005                     	ds	2
   637  000007                     memcpy@d:
   638                           	opt stack 0
   639                           
   640                           ; 2 bytes @ 0x6
   641  000007                     	ds	2
   642  000009                     memcpy@s:
   643                           	opt stack 0
   644  000009                     i2SPIRW@i:
   645                           	opt stack 0
   646                           
   647                           ; 4 bytes @ 0x8
   648  000009                     	ds	2
   649  00000B                     memcpy@tmp:
   650                           	opt stack 0
   651                           
   652                           ; 1 bytes @ 0xA
   653  00000B                     	ds	2
   654  00000D                     Spi_ReadWrite@rx_tx:
   655                           	opt stack 0
   656  00000D                     i2Spi_Write@tx:
   657                           	opt stack 0
   658                           
   659                           ; 2 bytes @ 0xC
   660  00000D                     	ds	2
   661  00000F                     Spi_ReadWrite@size:
   662                           	opt stack 0
   663  00000F                     i2Spi_Write@size:
   664                           	opt stack 0
   665                           
   666                           ; 4 bytes @ 0xE
   667  00000F                     	ds	4
   668  000013                     i2Mcp2515WriteCanId@ext:
   669                           	opt stack 0
   670  000013                     Mcp2515ReadCanId@ext:
   671                           	opt stack 0
   672  000013                     Mcp2515GetNextFreeTXBuf@txbuf_n:
   673                           	opt stack 0
   674  000013                     Can_GetStatus@msg4:
   675                           	opt stack 0
   676                           
   677                           ; 4 bytes @ 0x12
   678  000013                     	ds	1
   679  000014                     i2Mcp2515WriteCanId@can_id:
   680                           	opt stack 0
   681                           
   682                           ; 4 bytes @ 0x13
   683  000014                     	ds	1
   684  000015                     ??_Mcp2515GetNextFreeTXBuf:
   685  000015                     Mcp2515ReadCanId@can_id:
   686                           	opt stack 0
   687                           
   688                           ; 2 bytes @ 0x14
   689  000015                     	ds	1
   690  000016                     Mcp2515GetNextFreeTXBuf@ctrlregs:
   691                           	opt stack 0
   692                           
   693                           ; 3 bytes @ 0x15
   694  000016                     	ds	1
   695  000017                     ??_Mcp2515ReadCanId:
   696  000017                     Can_GetStatus@msg:
   697                           	opt stack 0
   698                           
   699                           ; 3 bytes @ 0x16
   700  000017                     	ds	1
   701  000018                     ??i2_Mcp2515WriteCanId:
   702                           
   703                           ; 1 bytes @ 0x17
   704  000018                     	ds	1
   705  000019                     Mcp2515GetNextFreeTXBuf@buf:
   706                           	opt stack 0
   707                           
   708                           ; 3 bytes @ 0x18
   709  000019                     	ds	1
   710  00001A                     Can_GetStatus@status:
   711                           	opt stack 0
   712                           
   713                           ; 1 bytes @ 0x19
   714  00001A                     	ds	1
   715  00001B                     i2Mcp2515WriteCanId@mcp_addr:
   716                           	opt stack 0
   717                           
   718                           ; 1 bytes @ 0x1A
   719  00001B                     	ds	1
   720  00001C                     Mcp2515GetNextFreeTXBuf@i:
   721                           	opt stack 0
   722  00001C                     i2Mcp2515WriteCanId@buf:
   723                           	opt stack 0
   724                           
   725                           ; 6 bytes @ 0x1B
   726  00001C                     	ds	6
   727  000022                     i2Mcp2515WriteCanId@canid:
   728                           	opt stack 0
   729                           
   730                           ; 2 bytes @ 0x21
   731  000022                     	ds	2
   732  000024                     Mcp2515WriteCanMsg@msg:
   733                           	opt stack 0
   734                           
   735                           ; 2 bytes @ 0x23
   736  000024                     	ds	2
   737  000026                     ??_Mcp2515WriteCanMsg:
   738                           
   739                           ; 1 bytes @ 0x25
   740  000026                     	ds	2
   741  000028                     Mcp2515WriteCanMsg@buf:
   742                           	opt stack 0
   743                           
   744                           ; 10 bytes @ 0x27
   745  000028                     	ds	1
   746  000029                     Mcp2515ReadCanId@mcp_addr:
   747                           	opt stack 0
   748                           
   749                           ; 1 bytes @ 0x28
   750  000029                     	ds	1
   751  00002A                     Mcp2515ReadCanId@msg:
   752                           	opt stack 0
   753                           
   754                           ; 6 bytes @ 0x29
   755  00002A                     	ds	6
   756  000030                     Mcp2515ReadCanMsg@msg:
   757                           	opt stack 0
   758                           
   759                           ; 2 bytes @ 0x2F
   760  000030                     	ds	2
   761  000032                     ??_Mcp2515ReadCanMsg:
   762  000032                     Mcp2515WriteCanMsg@buffer_sidh_addr:
   763                           	opt stack 0
   764                           
   765                           ; 1 bytes @ 0x31
   766  000032                     	ds	1
   767  000033                     Mcp2515WriteCanMsg@dlc:
   768                           	opt stack 0
   769                           
   770                           ; 1 bytes @ 0x32
   771  000033                     	ds	1
   772  000034                     Mcp2515WriteCanMsg@mcp_addr:
   773                           	opt stack 0
   774  000034                     Mcp2515ReadCanMsg@cmd:
   775                           	opt stack 0
   776                           
   777                           ; 10 bytes @ 0x33
   778  000034                     	ds	1
   779  000035                     Mcp2515WriteCanMsg@i:
   780                           	opt stack 0
   781                           
   782                           ; 1 bytes @ 0x34
   783  000035                     	ds	1
   784  000036                     Can_SendMessage@msg:
   785                           	opt stack 0
   786                           
   787                           ; 2 bytes @ 0x35
   788  000036                     	ds	2
   789  000038                     Can_SendMessage@buf:
   790                           	opt stack 0
   791                           
   792                           ; 4 bytes @ 0x37
   793  000038                     	ds	4
   794  00003C                     Can_SendMessage@res:
   795                           	opt stack 0
   796                           
   797                           ; 1 bytes @ 0x3B
   798  00003C                     	ds	1
   799  00003D                     Can_SendMessage@txbuf_n:
   800                           	opt stack 0
   801                           
   802                           ; 1 bytes @ 0x3C
   803  00003D                     	ds	1
   804  00003E                     Mcp2515ReadCanMsg@mcp_addr:
   805                           	opt stack 0
   806                           
   807                           ; 1 bytes @ 0x3D
   808  00003E                     	ds	1
   809  00003F                     Can_ReadMessage@msg:
   810                           	opt stack 0
   811                           
   812                           ; 2 bytes @ 0x3E
   813  00003F                     	ds	2
   814  000041                     Can_ReadMessage@buf:
   815                           	opt stack 0
   816                           
   817                           ; 4 bytes @ 0x40
   818  000041                     	ds	4
   819  000045                     Can_ReadInBuffer@error:
   820                           	opt stack 0
   821                           
   822                           ; 1 bytes @ 0x44
   823  000045                     	ds	1
   824  000046                     Can_ReadInBuffer@rdStatus:
   825                           	opt stack 0
   826                           
   827                           ; 1 bytes @ 0x45
   828  000046                     	ds	1
   829  000047                     Can_ReadInBuffer@i:
   830                           	opt stack 0
   831                           
   832                           ; 1 bytes @ 0x46
   833  000047                     	ds	1
   834  000048                     ??_Can_Isr:
   835                           
   836                           ; 1 bytes @ 0x47
   837  000048                     	ds	1
   838  000049                     Can_Isr@retCode:
   839                           	opt stack 0
   840                           
   841                           ; 1 bytes @ 0x48
   842  000049                     	ds	1
   843  00004A                     ??_high_isr:
   844                           
   845                           ; 1 bytes @ 0x49
   846  00004A                     	ds	14
   847                           tblptru	equ	0xFF8
   848                           tblptrh	equ	0xFF7
   849                           tblptrl	equ	0xFF6
   850                           tablat	equ	0xFF5
   851                           postinc0	equ	0xFEE
   852                           wreg	equ	0xFE8
   853                           postdec1	equ	0xFE5
   854                           fsr1l	equ	0xFE1
   855                           
   856 ;;
   857 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   858 ;;
   859 ;; *************** function _main *****************
   860 ;; Defined at:
   861 ;;		line 57 in file "main.c"
   862 ;; Parameters:    Size  Location     Type
   863 ;;  argc            2   64[BANK0 ] int 
   864 ;;  argv            3   66[BANK0 ] PTR PTR unsigned char 
   865 ;; Auto vars:     Size  Location     Type
   866 ;;		None
   867 ;; Return value:  Size  Location     Type
   868 ;;                  2   64[BANK0 ] int 
   869 ;; Registers used:
   870 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   871 ;; Tracked objects:
   872 ;;		On entry : 0/0
   873 ;;		On exit  : 0/0
   874 ;;		Unchanged: 0/0
   875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   876 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   879 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   880 ;;Total ram usage:        5 bytes
   881 ;; Hardware stack levels required when called:   14
   882 ;; This function calls:
   883 ;;		_init
   884 ;; This function is called by:
   885 ;;		Startup code after reset
   886 ;; This function uses a non-reentrant model
   887 ;;
   888                           
   889                           	psect	text0
   890  00256A                     __ptext0:
   891                           	opt stack 0
   892  00256A                     _main:
   893                           	opt stack 17
   894                           
   895                           ;main.c: 58: init();
   896                           
   897                           ;incstack = 0
   898  00256A  EC50  F011         	call	_init	;wreg free
   899                           
   900                           ;main.c: 59: return (0);
   901                           ;	Return value of _main is never used
   902  00256E  EF47  F000         	goto	start
   903  002572                     __end_of_main:
   904                           	opt stack 0
   905                           tblptru	equ	0xFF8
   906                           tblptrh	equ	0xFF7
   907                           tblptrl	equ	0xFF6
   908                           tablat	equ	0xFF5
   909                           postinc0	equ	0xFEE
   910                           wreg	equ	0xFE8
   911                           postdec1	equ	0xFE5
   912                           fsr1l	equ	0xFE1
   913                           
   914 ;; *************** function _init *****************
   915 ;; Defined at:
   916 ;;		line 30 in file "main.c"
   917 ;; Parameters:    Size  Location     Type
   918 ;;		None
   919 ;; Auto vars:     Size  Location     Type
   920 ;;		None
   921 ;; Return value:  Size  Location     Type
   922 ;;                  1    wreg      void 
   923 ;; Registers used:
   924 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   925 ;; Tracked objects:
   926 ;;		On entry : 0/0
   927 ;;		On exit  : 0/0
   928 ;;		Unchanged: 0/0
   929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   934 ;;Total ram usage:        0 bytes
   935 ;; Hardware stack levels used:    1
   936 ;; Hardware stack levels required when called:   13
   937 ;; This function calls:
   938 ;;		_Can_Init
   939 ;;		_readID
   940 ;; This function is called by:
   941 ;;		_main
   942 ;; This function uses a non-reentrant model
   943 ;;
   944                           
   945                           	psect	text1
   946  0022A0                     __ptext1:
   947                           	opt stack 0
   948  0022A0                     _init:
   949                           	opt stack 17
   950                           
   951                           ;main.c: 31: Can_Init( &canSpeed125k , &filter);
   952                           
   953                           ;incstack = 0
   954  0022A0  0E39               	movlw	low _canSpeed125k
   955  0022A2  0100               	movlb	0	; () banked
   956  0022A4  6F9C               	movwf	Can_Init@speedCfg& (0+255),b
   957  0022A6  0E10               	movlw	high _canSpeed125k
   958  0022A8  0100               	movlb	0	; () banked
   959  0022AA  6F9D               	movwf	(Can_Init@speedCfg+1)& (0+255),b
   960  0022AC  0EAC               	movlw	low _filter
   961  0022AE  0100               	movlb	0	; () banked
   962  0022B0  6F9E               	movwf	Can_Init@filterCfg& (0+255),b
   963  0022B2  0E00               	movlw	high _filter
   964  0022B4  0100               	movlb	0	; () banked
   965  0022B6  6F9F               	movwf	(Can_Init@filterCfg+1)& (0+255),b
   966  0022B8  EC44  F012         	call	_Can_Init	;wreg free
   967                           
   968                           ;main.c: 32: id = readID();
   969  0022BC  ECB2  F011         	call	_readID	;wreg free
   970  0022C0  0100               	movlb	0	; () banked
   971  0022C2  6FAB               	movwf	_id& (0+255),b
   972                           
   973                           ; BSR set to: 0
   974                           ;main.c: 33: filter.mask0 = 0X00F;
   975  0022C4  0E0F               	movlw	15
   976  0022C6  0100               	movlb	0	; () banked
   977  0022C8  6FAC               	movwf	_filter& (0+255),b
   978  0022CA  0E00               	movlw	0
   979  0022CC  6FAD               	movwf	(_filter+1)& (0+255),b
   980  0022CE  0E00               	movlw	0
   981  0022D0  6FAE               	movwf	(_filter+2)& (0+255),b
   982  0022D2  0E00               	movlw	0
   983  0022D4  6FAF               	movwf	(_filter+3)& (0+255),b
   984                           
   985                           ; BSR set to: 0
   986                           ;main.c: 34: filter.filter0 = id;
   987  0022D6  0100               	movlb	0	; () banked
   988  0022D8  51AB               	movf	_id& (0+255),w,b
   989  0022DA  0100               	movlb	0	; () banked
   990  0022DC  6FB4               	movwf	(_filter+8)& (0+255),b
   991  0022DE  6BB5               	clrf	(_filter+9)& (0+255),b
   992  0022E0  6BB6               	clrf	(_filter+10)& (0+255),b
   993  0022E2  6BB7               	clrf	(_filter+11)& (0+255),b
   994                           
   995                           ; BSR set to: 0
   996                           ;main.c: 35: Can_Init( &canSpeed125k , &filter);
   997  0022E4  0E39               	movlw	low _canSpeed125k
   998  0022E6  0100               	movlb	0	; () banked
   999  0022E8  6F9C               	movwf	Can_Init@speedCfg& (0+255),b
  1000  0022EA  0E10               	movlw	high _canSpeed125k
  1001  0022EC  0100               	movlb	0	; () banked
  1002  0022EE  6F9D               	movwf	(Can_Init@speedCfg+1)& (0+255),b
  1003  0022F0  0EAC               	movlw	low _filter
  1004  0022F2  0100               	movlb	0	; () banked
  1005  0022F4  6F9E               	movwf	Can_Init@filterCfg& (0+255),b
  1006  0022F6  0E00               	movlw	high _filter
  1007  0022F8  0100               	movlb	0	; () banked
  1008  0022FA  6F9F               	movwf	(Can_Init@filterCfg+1)& (0+255),b
  1009  0022FC  EC44  F012         	call	_Can_Init	;wreg free
  1010  002300  0012               	return		;funcret
  1011  002302                     __end_of_init:
  1012                           	opt stack 0
  1013                           tblptru	equ	0xFF8
  1014                           tblptrh	equ	0xFF7
  1015                           tblptrl	equ	0xFF6
  1016                           tablat	equ	0xFF5
  1017                           postinc0	equ	0xFEE
  1018                           wreg	equ	0xFE8
  1019                           postdec1	equ	0xFE5
  1020                           fsr1l	equ	0xFE1
  1021                           
  1022 ;; *************** function _readID *****************
  1023 ;; Defined at:
  1024 ;;		line 39 in file "main.c"
  1025 ;; Parameters:    Size  Location     Type
  1026 ;;		None
  1027 ;; Auto vars:     Size  Location     Type
  1028 ;;  retVal          1    5[BANK0 ] unsigned char 
  1029 ;; Return value:  Size  Location     Type
  1030 ;;                  1    wreg      unsigned char 
  1031 ;; Registers used:
  1032 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1033 ;; Tracked objects:
  1034 ;;		On entry : 0/0
  1035 ;;		On exit  : 0/0
  1036 ;;		Unchanged: 0/0
  1037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1039 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1041 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1042 ;;Total ram usage:        1 bytes
  1043 ;; Hardware stack levels used:    1
  1044 ;; Hardware stack levels required when called:    9
  1045 ;; This function calls:
  1046 ;;		_Can_GetMessage
  1047 ;;		_Can_PutMessage
  1048 ;; This function is called by:
  1049 ;;		_init
  1050 ;; This function uses a non-reentrant model
  1051 ;;
  1052                           
  1053                           	psect	text2
  1054  002364                     __ptext2:
  1055                           	opt stack 0
  1056  002364                     _readID:
  1057                           	opt stack 20
  1058                           
  1059                           ;main.c: 40: uint8_t retVal = 0;
  1060                           
  1061                           ;incstack = 0
  1062  002364  0E00               	movlw	0
  1063  002366  0100               	movlb	0	; () banked
  1064  002368  6F65               	movwf	readID@retVal& (0+255),b
  1065                           
  1066                           ;main.c: 43: message.identifier = ((10<<7) | 0xF) ;
  1067  00236A  0E0F               	movlw	15
  1068  00236C  0100               	movlb	0	; () banked
  1069  00236E  6FCE               	movwf	(_message+1)& (0+255),b
  1070  002370  0E05               	movlw	5
  1071  002372  6FCF               	movwf	(_message+2)& (0+255),b
  1072  002374  0E00               	movlw	0
  1073  002376  6FD0               	movwf	(_message+3)& (0+255),b
  1074  002378  0E00               	movlw	0
  1075  00237A  6FD1               	movwf	(_message+4)& (0+255),b
  1076                           
  1077                           ;main.c: 44: message.dta[0] = 0;
  1078  00237C  0E00               	movlw	0
  1079  00237E  0100               	movlb	0	; () banked
  1080  002380  6FD3               	movwf	(_message+6)& (0+255),b
  1081                           
  1082                           ;main.c: 45: message.rtr = 1;
  1083  002382  0E01               	movlw	1
  1084  002384  0100               	movlb	0	; () banked
  1085  002386  6FDB               	movwf	(_message+14)& (0+255),b
  1086                           
  1087                           ; BSR set to: 0
  1088                           ;main.c: 48: Can_PutMessage(&message);
  1089  002388  0ECD               	movlw	low _message
  1090  00238A  0100               	movlb	0	; () banked
  1091  00238C  6F60               	movwf	Can_PutMessage@msgPtr& (0+255),b
  1092  00238E  0E00               	movlw	high _message
  1093  002390  0100               	movlb	0	; () banked
  1094  002392  6F61               	movwf	(Can_PutMessage@msgPtr+1)& (0+255),b
  1095  002394  ECED  F00B         	call	_Can_PutMessage	;wreg free
  1096  002398                     l2043:
  1097  002398  0ECD               	movlw	low _message
  1098  00239A  0100               	movlb	0	; () banked
  1099  00239C  6F60               	movwf	Can_GetMessage@msgPtr& (0+255),b
  1100  00239E  0E00               	movlw	high _message
  1101  0023A0  0100               	movlb	0	; () banked
  1102  0023A2  6F61               	movwf	(Can_GetMessage@msgPtr+1)& (0+255),b
  1103  0023A4  ECC0  F00C         	call	_Can_GetMessage	;wreg free
  1104  0023A8  0900               	iorlw	0
  1105  0023AA  A4D8               	btfss	status,2,c
  1106  0023AC  D7F5               	goto	l2043
  1107                           
  1108                           ;main.c: 53: retVal = message.dta[0];
  1109  0023AE  C0D3  F065         	movff	_message+6,readID@retVal
  1110                           
  1111                           ;main.c: 55: return retVal;
  1112  0023B2  0100               	movlb	0	; () banked
  1113  0023B4  5165               	movf	readID@retVal& (0+255),w,b
  1114  0023B6  0012               	return	
  1115  0023B8                     __end_of_readID:
  1116                           	opt stack 0
  1117                           tblptru	equ	0xFF8
  1118                           tblptrh	equ	0xFF7
  1119                           tblptrl	equ	0xFF6
  1120                           tablat	equ	0xFF5
  1121                           postinc0	equ	0xFEE
  1122                           wreg	equ	0xFE8
  1123                           postdec1	equ	0xFE5
  1124                           fsr1l	equ	0xFE1
  1125                           status	equ	0xFD8
  1126                           
  1127 ;; *************** function _Can_PutMessage *****************
  1128 ;; Defined at:
  1129 ;;		line 200 in file "can.c"
  1130 ;; Parameters:    Size  Location     Type
  1131 ;;  msgPtr          2    0[BANK0 ] PTR struct CANMESSAGE
  1132 ;;		 -> message(17), 
  1133 ;; Auto vars:     Size  Location     Type
  1134 ;;  i               1    4[BANK0 ] unsigned char 
  1135 ;; Return value:  Size  Location     Type
  1136 ;;                  1    wreg      unsigned char 
  1137 ;; Registers used:
  1138 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1139 ;; Tracked objects:
  1140 ;;		On entry : 0/0
  1141 ;;		On exit  : 0/0
  1142 ;;		Unchanged: 0/0
  1143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1144 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1145 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1146 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1147 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1148 ;;Total ram usage:        5 bytes
  1149 ;; Hardware stack levels used:    1
  1150 ;; Hardware stack levels required when called:    8
  1151 ;; This function calls:
  1152 ;;		Nothing
  1153 ;; This function is called by:
  1154 ;;		_readID
  1155 ;; This function uses a non-reentrant model
  1156 ;;
  1157                           
  1158                           	psect	text3
  1159  0017DA                     __ptext3:
  1160                           	opt stack 0
  1161  0017DA                     _Can_PutMessage:
  1162                           	opt stack 20
  1163                           
  1164                           ;can.c: 202: uint8_t i;
  1165                           ;can.c: 204: if((txBufferCount) < 4)
  1166                           
  1167                           ; BSR set to: 0
  1168                           ;incstack = 0
  1169  0017DA  0E04               	movlw	4
  1170  0017DC  0100               	movlb	0	; () banked
  1171  0017DE  61A8               	cpfslt	_txBufferCount& (0+255),b
  1172  0017E0  0012               	return	
  1173                           
  1174                           ; BSR set to: 0
  1175                           ;can.c: 205: {
  1176                           ;can.c: 206: txBuffer[txBufferPtrIn].dlc = msgPtr->dlc;
  1177  0017E2  0100               	movlb	0	; () banked
  1178  0017E4  EE20 F005          	lfsr	2,5
  1179  0017E8  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  1180  0017EA  26D9               	addwf	fsr2l,f,c
  1181  0017EC  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  1182  0017EE  22DA               	addwfc	fsr2h,f,c
  1183  0017F0  0100               	movlb	0	; () banked
  1184  0017F2  51A9               	movf	_txBufferPtrIn& (0+255),w,b
  1185  0017F4  0D11               	mullw	17
  1186  0017F6  0E05               	movlw	5
  1187  0017F8  26F3               	addwf	prodl,f,c
  1188  0017FA  0E00               	movlw	0
  1189  0017FC  22F4               	addwfc	prodh,f,c
  1190  0017FE  0E00               	movlw	low _txBuffer
  1191  001800  24F3               	addwf	prodl,w,c
  1192  001802  6EE1               	movwf	fsr1l,c
  1193  001804  0E01               	movlw	high _txBuffer
  1194  001806  20F4               	addwfc	prodh,w,c
  1195  001808  6EE2               	movwf	fsr1h,c
  1196  00180A  CFDF FFE7          	movff	indf2,indf1
  1197                           
  1198                           ;can.c: 207: txBuffer[txBufferPtrIn].extended_identifier = msgPtr->extended_identifier;
  1199  00180E  C060  FFD9         	movff	Can_PutMessage@msgPtr,fsr2l
  1200  001812  C061  FFDA         	movff	Can_PutMessage@msgPtr+1,fsr2h
  1201  001816  0100               	movlb	0	; () banked
  1202  001818  51A9               	movf	_txBufferPtrIn& (0+255),w,b
  1203  00181A  0D11               	mullw	17
  1204  00181C  0E00               	movlw	low _txBuffer
  1205  00181E  24F3               	addwf	prodl,w,c
  1206  001820  6EE1               	movwf	fsr1l,c
  1207  001822  0E01               	movlw	high _txBuffer
  1208  001824  20F4               	addwfc	prodh,w,c
  1209  001826  6EE2               	movwf	fsr1h,c
  1210  001828  CFDF FFE7          	movff	indf2,indf1
  1211                           
  1212                           ;can.c: 208: txBuffer[txBufferPtrIn].filhit = msgPtr->filhit;
  1213  00182C  0100               	movlb	0	; () banked
  1214  00182E  EE20 F00F          	lfsr	2,15
  1215  001832  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  1216  001834  26D9               	addwf	fsr2l,f,c
  1217  001836  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  1218  001838  22DA               	addwfc	fsr2h,f,c
  1219  00183A  0100               	movlb	0	; () banked
  1220  00183C  51A9               	movf	_txBufferPtrIn& (0+255),w,b
  1221  00183E  0D11               	mullw	17
  1222  001840  0E0F               	movlw	15
  1223  001842  26F3               	addwf	prodl,f,c
  1224  001844  0E00               	movlw	0
  1225  001846  22F4               	addwfc	prodh,f,c
  1226  001848  0E00               	movlw	low _txBuffer
  1227  00184A  24F3               	addwf	prodl,w,c
  1228  00184C  6EE1               	movwf	fsr1l,c
  1229  00184E  0E01               	movlw	high _txBuffer
  1230  001850  20F4               	addwfc	prodh,w,c
  1231  001852  6EE2               	movwf	fsr1h,c
  1232  001854  CFDF FFE7          	movff	indf2,indf1
  1233                           
  1234                           ;can.c: 209: txBuffer[txBufferPtrIn].identifier = msgPtr->identifier;
  1235  001858  0100               	movlb	0	; () banked
  1236  00185A  EE20 F001          	lfsr	2,1
  1237  00185E  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  1238  001860  26D9               	addwf	fsr2l,f,c
  1239  001862  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  1240  001864  22DA               	addwfc	fsr2h,f,c
  1241  001866  0100               	movlb	0	; () banked
  1242  001868  51A9               	movf	_txBufferPtrIn& (0+255),w,b
  1243  00186A  0D11               	mullw	17
  1244  00186C  0E01               	movlw	1
  1245  00186E  26F3               	addwf	prodl,f,c
  1246  001870  0E00               	movlw	0
  1247  001872  22F4               	addwfc	prodh,f,c
  1248  001874  0E00               	movlw	low _txBuffer
  1249  001876  24F3               	addwf	prodl,w,c
  1250  001878  6EE1               	movwf	fsr1l,c
  1251  00187A  0E01               	movlw	high _txBuffer
  1252  00187C  20F4               	addwfc	prodh,w,c
  1253  00187E  6EE2               	movwf	fsr1h,c
  1254  001880  CFDE FFE6          	movff	postinc2,postinc1
  1255  001884  CFDE FFE6          	movff	postinc2,postinc1
  1256  001888  CFDE FFE6          	movff	postinc2,postinc1
  1257  00188C  CFDE FFE6          	movff	postinc2,postinc1
  1258                           
  1259                           ;can.c: 210: txBuffer[txBufferPtrIn].rtr = msgPtr->rtr;
  1260  001890  0100               	movlb	0	; () banked
  1261  001892  EE20 F00E          	lfsr	2,14
  1262  001896  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  1263  001898  26D9               	addwf	fsr2l,f,c
  1264  00189A  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  1265  00189C  22DA               	addwfc	fsr2h,f,c
  1266  00189E  0100               	movlb	0	; () banked
  1267  0018A0  51A9               	movf	_txBufferPtrIn& (0+255),w,b
  1268  0018A2  0D11               	mullw	17
  1269  0018A4  0E0E               	movlw	14
  1270  0018A6  26F3               	addwf	prodl,f,c
  1271  0018A8  0E00               	movlw	0
  1272  0018AA  22F4               	addwfc	prodh,f,c
  1273  0018AC  0E00               	movlw	low _txBuffer
  1274  0018AE  24F3               	addwf	prodl,w,c
  1275  0018B0  6EE1               	movwf	fsr1l,c
  1276  0018B2  0E01               	movlw	high _txBuffer
  1277  0018B4  20F4               	addwfc	prodh,w,c
  1278  0018B6  6EE2               	movwf	fsr1h,c
  1279  0018B8  CFDF FFE7          	movff	indf2,indf1
  1280                           
  1281                           ;can.c: 211: txBuffer[txBufferPtrIn].txPrio = msgPtr->txPrio;
  1282  0018BC  0100               	movlb	0	; () banked
  1283  0018BE  EE20 F010          	lfsr	2,16
  1284  0018C2  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  1285  0018C4  26D9               	addwf	fsr2l,f,c
  1286  0018C6  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  1287  0018C8  22DA               	addwfc	fsr2h,f,c
  1288  0018CA  0100               	movlb	0	; () banked
  1289  0018CC  51A9               	movf	_txBufferPtrIn& (0+255),w,b
  1290  0018CE  0D11               	mullw	17
  1291  0018D0  0E10               	movlw	16
  1292  0018D2  26F3               	addwf	prodl,f,c
  1293  0018D4  0E00               	movlw	0
  1294  0018D6  22F4               	addwfc	prodh,f,c
  1295  0018D8  0E00               	movlw	low _txBuffer
  1296  0018DA  24F3               	addwf	prodl,w,c
  1297  0018DC  6EE1               	movwf	fsr1l,c
  1298  0018DE  0E01               	movlw	high _txBuffer
  1299  0018E0  20F4               	addwfc	prodh,w,c
  1300  0018E2  6EE2               	movwf	fsr1h,c
  1301  0018E4  CFDF FFE7          	movff	indf2,indf1
  1302                           
  1303                           ; BSR set to: 0
  1304                           ;can.c: 212: for(i=0;i< msgPtr->dlc;i++)
  1305  0018E8  0E00               	movlw	0
  1306  0018EA  0100               	movlb	0	; () banked
  1307  0018EC  6F64               	movwf	Can_PutMessage@i& (0+255),b
  1308  0018EE  D031               	goto	l1809
  1309  0018F0                     l1805:
  1310                           
  1311                           ; BSR set to: 0
  1312                           ;can.c: 213: {
  1313                           ;can.c: 214: txBuffer[txBufferPtrIn].dta[i] = msgPtr->dta[i];
  1314  0018F0  0100               	movlb	0	; () banked
  1315  0018F2  5164               	movf	Can_PutMessage@i& (0+255),w,b
  1316  0018F4  0D01               	mullw	1
  1317  0018F6  0E06               	movlw	6
  1318  0018F8  26F3               	addwf	prodl,f,c
  1319  0018FA  0E00               	movlw	0
  1320  0018FC  22F4               	addwfc	prodh,f,c
  1321  0018FE  50F3               	movf	prodl,w,c
  1322  001900  0100               	movlb	0	; () banked
  1323  001902  2560               	addwf	Can_PutMessage@msgPtr& (0+255),w,b
  1324  001904  6ED9               	movwf	fsr2l,c
  1325  001906  50F4               	movf	prodh,w,c
  1326  001908  0100               	movlb	0	; () banked
  1327  00190A  2161               	addwfc	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  1328  00190C  6EDA               	movwf	fsr2h,c
  1329  00190E  0100               	movlb	0	; () banked
  1330  001910  5164               	movf	Can_PutMessage@i& (0+255),w,b
  1331  001912  0D01               	mullw	1
  1332  001914  0E06               	movlw	6
  1333  001916  26F3               	addwf	prodl,f,c
  1334  001918  0E00               	movlw	0
  1335  00191A  22F4               	addwfc	prodh,f,c
  1336  00191C  0E00               	movlw	low _txBuffer
  1337  00191E  0100               	movlb	0	; () banked
  1338  001920  6F62               	movwf	??_Can_PutMessage& (0+255),b
  1339  001922  0E01               	movlw	high _txBuffer
  1340  001924  0100               	movlb	0	; () banked
  1341  001926  6F63               	movwf	(??_Can_PutMessage+1)& (0+255),b
  1342  001928  50F3               	movf	prodl,w,c
  1343  00192A  0100               	movlb	0	; () banked
  1344  00192C  2762               	addwf	??_Can_PutMessage& (0+255),f,b
  1345  00192E  50F4               	movf	prodh,w,c
  1346  001930  0100               	movlb	0	; () banked
  1347  001932  2363               	addwfc	(??_Can_PutMessage+1)& (0+255),f,b
  1348  001934  0100               	movlb	0	; () banked
  1349  001936  51A9               	movf	_txBufferPtrIn& (0+255),w,b
  1350  001938  0D11               	mullw	17
  1351  00193A  50F3               	movf	prodl,w,c
  1352  00193C  0100               	movlb	0	; () banked
  1353  00193E  2562               	addwf	??_Can_PutMessage& (0+255),w,b
  1354  001940  6EE1               	movwf	fsr1l,c
  1355  001942  50F4               	movf	prodh,w,c
  1356  001944  0100               	movlb	0	; () banked
  1357  001946  2163               	addwfc	(??_Can_PutMessage+1)& (0+255),w,b
  1358  001948  6EE2               	movwf	fsr1h,c
  1359  00194A  CFDF FFE7          	movff	indf2,indf1
  1360                           
  1361                           ; BSR set to: 0
  1362  00194E  0100               	movlb	0	; () banked
  1363  001950  2B64               	incf	Can_PutMessage@i& (0+255),f,b
  1364  001952                     l1809:
  1365                           
  1366                           ; BSR set to: 0
  1367  001952  0100               	movlb	0	; () banked
  1368  001954  EE20 F005          	lfsr	2,5
  1369  001958  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  1370  00195A  26D9               	addwf	fsr2l,f,c
  1371  00195C  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  1372  00195E  22DA               	addwfc	fsr2h,f,c
  1373  001960  50DE               	movf	postinc2,w,c
  1374  001962  0100               	movlb	0	; () banked
  1375  001964  5D64               	subwf	Can_PutMessage@i& (0+255),w,b
  1376  001966  A0D8               	btfss	status,0,c
  1377  001968  D7C3               	goto	l1805
  1378                           
  1379                           ; BSR set to: 0
  1380                           ;can.c: 215: }
  1381                           ;can.c: 216: INT3IE = 0;
  1382  00196A  9AF0               	bcf	intcon3,5,c	;volatile
  1383                           
  1384                           ; BSR set to: 0
  1385                           ;can.c: 217: txBufferCount++;
  1386  00196C  0100               	movlb	0	; () banked
  1387  00196E  2BA8               	incf	_txBufferCount& (0+255),f,b
  1388                           
  1389                           ; BSR set to: 0
  1390                           ;can.c: 218: txBufferPtrIn = (txBufferPtrIn + 1) % 4;
  1391  001970  0100               	movlb	0	; () banked
  1392  001972  29A9               	incf	_txBufferPtrIn& (0+255),w,b
  1393  001974  0B03               	andlw	3
  1394  001976  0100               	movlb	0	; () banked
  1395  001978  6FA9               	movwf	_txBufferPtrIn& (0+255),b
  1396                           
  1397                           ; BSR set to: 0
  1398                           ;can.c: 219: INT3IE = 1;
  1399  00197A  8AF0               	bsf	intcon3,5,c	;volatile
  1400                           
  1401                           ; BSR set to: 0
  1402                           ;can.c: 220: INT3IF = 1;
  1403  00197C  84F0               	bsf	intcon3,2,c	;volatile
  1404                           
  1405                           ; BSR set to: 0
  1406                           ;can.c: 223: else
  1407                           ;can.c: 224: {
  1408                           ;can.c: 225: return 1;
  1409                           ;	Return value of _Can_PutMessage is never used
  1410                           
  1411                           ; BSR set to: 0
  1412                           ;can.c: 222: }
  1413                           
  1414                           ; BSR set to: 0
  1415                           ;can.c: 221: return 0;
  1416                           ;	Return value of _Can_PutMessage is never used
  1417  00197E  0012               	return	
  1418  001980                     __end_of_Can_PutMessage:
  1419                           	opt stack 0
  1420                           tblptru	equ	0xFF8
  1421                           tblptrh	equ	0xFF7
  1422                           tblptrl	equ	0xFF6
  1423                           tablat	equ	0xFF5
  1424                           prodh	equ	0xFF4
  1425                           prodl	equ	0xFF3
  1426                           intcon3	equ	0xFF0
  1427                           postinc0	equ	0xFEE
  1428                           wreg	equ	0xFE8
  1429                           indf1	equ	0xFE7
  1430                           postinc1	equ	0xFE6
  1431                           postdec1	equ	0xFE5
  1432                           fsr1h	equ	0xFE2
  1433                           fsr1l	equ	0xFE1
  1434                           indf2	equ	0xFDF
  1435                           postinc2	equ	0xFDE
  1436                           fsr2h	equ	0xFDA
  1437                           fsr2l	equ	0xFD9
  1438                           status	equ	0xFD8
  1439                           
  1440 ;; *************** function _Can_GetMessage *****************
  1441 ;; Defined at:
  1442 ;;		line 169 in file "can.c"
  1443 ;; Parameters:    Size  Location     Type
  1444 ;;  msgPtr          2    0[BANK0 ] PTR struct CANMESSAGE
  1445 ;;		 -> message(17), 
  1446 ;; Auto vars:     Size  Location     Type
  1447 ;;  i               1    4[BANK0 ] unsigned char 
  1448 ;; Return value:  Size  Location     Type
  1449 ;;                  1    wreg      unsigned char 
  1450 ;; Registers used:
  1451 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1452 ;; Tracked objects:
  1453 ;;		On entry : 0/0
  1454 ;;		On exit  : 0/0
  1455 ;;		Unchanged: 0/0
  1456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1457 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1458 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1459 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1460 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1461 ;;Total ram usage:        5 bytes
  1462 ;; Hardware stack levels used:    1
  1463 ;; Hardware stack levels required when called:    8
  1464 ;; This function calls:
  1465 ;;		Nothing
  1466 ;; This function is called by:
  1467 ;;		_readID
  1468 ;; This function uses a non-reentrant model
  1469 ;;
  1470                           
  1471                           	psect	text4
  1472  001980                     __ptext4:
  1473                           	opt stack 0
  1474  001980                     _Can_GetMessage:
  1475                           	opt stack 20
  1476                           
  1477                           ;can.c: 171: uint8_t i;
  1478                           ;can.c: 172: if(rxBufferCount > 0)
  1479                           
  1480                           ; BSR set to: 0
  1481                           ;incstack = 0
  1482  001980  505C               	movf	_rxBufferCount,w,c
  1483  001982  B4D8               	btfsc	status,2,c
  1484  001984  D0B8               	goto	l1843
  1485                           
  1486                           ;can.c: 173: {
  1487                           ;can.c: 174: msgPtr->dlc = rxBuffer[rxBufferPtrOut].dlc;
  1488  001986  0100               	movlb	0	; () banked
  1489  001988  51AA               	movf	_rxBufferPtrOut& (0+255),w,b
  1490  00198A  0D11               	mullw	17
  1491  00198C  0E05               	movlw	5
  1492  00198E  26F3               	addwf	prodl,f,c
  1493  001990  0E00               	movlw	0
  1494  001992  22F4               	addwfc	prodh,f,c
  1495  001994  0E44               	movlw	low _rxBuffer
  1496  001996  24F3               	addwf	prodl,w,c
  1497  001998  6ED9               	movwf	fsr2l,c
  1498  00199A  0E01               	movlw	high _rxBuffer
  1499  00199C  20F4               	addwfc	prodh,w,c
  1500  00199E  6EDA               	movwf	fsr2h,c
  1501  0019A0  0100               	movlb	0	; () banked
  1502  0019A2  EE10 F005          	lfsr	1,5
  1503  0019A6  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  1504  0019A8  26E1               	addwf	fsr1l,f,c
  1505  0019AA  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  1506  0019AC  22E2               	addwfc	fsr1h,f,c
  1507  0019AE  CFDF FFE7          	movff	indf2,indf1
  1508                           
  1509                           ;can.c: 175: msgPtr->extended_identifier = rxBuffer[rxBufferPtrOut].extended_identifier;
  1510  0019B2  0100               	movlb	0	; () banked
  1511  0019B4  51AA               	movf	_rxBufferPtrOut& (0+255),w,b
  1512  0019B6  0D11               	mullw	17
  1513  0019B8  0E44               	movlw	low _rxBuffer
  1514  0019BA  24F3               	addwf	prodl,w,c
  1515  0019BC  6ED9               	movwf	fsr2l,c
  1516  0019BE  0E01               	movlw	high _rxBuffer
  1517  0019C0  20F4               	addwfc	prodh,w,c
  1518  0019C2  6EDA               	movwf	fsr2h,c
  1519  0019C4  C060  FFE1         	movff	Can_GetMessage@msgPtr,fsr1l
  1520  0019C8  C061  FFE2         	movff	Can_GetMessage@msgPtr+1,fsr1h
  1521  0019CC  CFDF FFE7          	movff	indf2,indf1
  1522                           
  1523                           ;can.c: 176: msgPtr->filhit = rxBuffer[rxBufferPtrOut].filhit;
  1524  0019D0  0100               	movlb	0	; () banked
  1525  0019D2  51AA               	movf	_rxBufferPtrOut& (0+255),w,b
  1526  0019D4  0D11               	mullw	17
  1527  0019D6  0E0F               	movlw	15
  1528  0019D8  26F3               	addwf	prodl,f,c
  1529  0019DA  0E00               	movlw	0
  1530  0019DC  22F4               	addwfc	prodh,f,c
  1531  0019DE  0E44               	movlw	low _rxBuffer
  1532  0019E0  24F3               	addwf	prodl,w,c
  1533  0019E2  6ED9               	movwf	fsr2l,c
  1534  0019E4  0E01               	movlw	high _rxBuffer
  1535  0019E6  20F4               	addwfc	prodh,w,c
  1536  0019E8  6EDA               	movwf	fsr2h,c
  1537  0019EA  0100               	movlb	0	; () banked
  1538  0019EC  EE10 F00F          	lfsr	1,15
  1539  0019F0  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  1540  0019F2  26E1               	addwf	fsr1l,f,c
  1541  0019F4  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  1542  0019F6  22E2               	addwfc	fsr1h,f,c
  1543  0019F8  CFDF FFE7          	movff	indf2,indf1
  1544                           
  1545                           ;can.c: 177: msgPtr->identifier = rxBuffer[rxBufferPtrOut].identifier;
  1546  0019FC  0100               	movlb	0	; () banked
  1547  0019FE  51AA               	movf	_rxBufferPtrOut& (0+255),w,b
  1548  001A00  0D11               	mullw	17
  1549  001A02  0E01               	movlw	1
  1550  001A04  26F3               	addwf	prodl,f,c
  1551  001A06  0E00               	movlw	0
  1552  001A08  22F4               	addwfc	prodh,f,c
  1553  001A0A  0E44               	movlw	low _rxBuffer
  1554  001A0C  24F3               	addwf	prodl,w,c
  1555  001A0E  6ED9               	movwf	fsr2l,c
  1556  001A10  0E01               	movlw	high _rxBuffer
  1557  001A12  20F4               	addwfc	prodh,w,c
  1558  001A14  6EDA               	movwf	fsr2h,c
  1559  001A16  0100               	movlb	0	; () banked
  1560  001A18  EE10 F001          	lfsr	1,1
  1561  001A1C  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  1562  001A1E  26E1               	addwf	fsr1l,f,c
  1563  001A20  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  1564  001A22  22E2               	addwfc	fsr1h,f,c
  1565  001A24  CFDE FFE6          	movff	postinc2,postinc1
  1566  001A28  CFDE FFE6          	movff	postinc2,postinc1
  1567  001A2C  CFDE FFE6          	movff	postinc2,postinc1
  1568  001A30  CFDE FFE6          	movff	postinc2,postinc1
  1569                           
  1570                           ;can.c: 178: msgPtr->rtr = rxBuffer[rxBufferPtrOut].rtr;
  1571  001A34  0100               	movlb	0	; () banked
  1572  001A36  51AA               	movf	_rxBufferPtrOut& (0+255),w,b
  1573  001A38  0D11               	mullw	17
  1574  001A3A  0E0E               	movlw	14
  1575  001A3C  26F3               	addwf	prodl,f,c
  1576  001A3E  0E00               	movlw	0
  1577  001A40  22F4               	addwfc	prodh,f,c
  1578  001A42  0E44               	movlw	low _rxBuffer
  1579  001A44  24F3               	addwf	prodl,w,c
  1580  001A46  6ED9               	movwf	fsr2l,c
  1581  001A48  0E01               	movlw	high _rxBuffer
  1582  001A4A  20F4               	addwfc	prodh,w,c
  1583  001A4C  6EDA               	movwf	fsr2h,c
  1584  001A4E  0100               	movlb	0	; () banked
  1585  001A50  EE10 F00E          	lfsr	1,14
  1586  001A54  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  1587  001A56  26E1               	addwf	fsr1l,f,c
  1588  001A58  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  1589  001A5A  22E2               	addwfc	fsr1h,f,c
  1590  001A5C  CFDF FFE7          	movff	indf2,indf1
  1591                           
  1592                           ; BSR set to: 0
  1593                           ;can.c: 179: for(i=0;i< msgPtr->dlc;i++)
  1594  001A60  0E00               	movlw	0
  1595  001A62  0100               	movlb	0	; () banked
  1596  001A64  6F64               	movwf	Can_GetMessage@i& (0+255),b
  1597  001A66  D031               	goto	l1833
  1598  001A68                     l1829:
  1599                           
  1600                           ; BSR set to: 0
  1601                           ;can.c: 180: {
  1602                           ;can.c: 181: msgPtr->dta[i] = rxBuffer[rxBufferPtrOut].dta[i];
  1603  001A68  0100               	movlb	0	; () banked
  1604  001A6A  5164               	movf	Can_GetMessage@i& (0+255),w,b
  1605  001A6C  0D01               	mullw	1
  1606  001A6E  0E06               	movlw	6
  1607  001A70  26F3               	addwf	prodl,f,c
  1608  001A72  0E00               	movlw	0
  1609  001A74  22F4               	addwfc	prodh,f,c
  1610  001A76  0E44               	movlw	low _rxBuffer
  1611  001A78  0100               	movlb	0	; () banked
  1612  001A7A  6F62               	movwf	??_Can_GetMessage& (0+255),b
  1613  001A7C  0E01               	movlw	high _rxBuffer
  1614  001A7E  0100               	movlb	0	; () banked
  1615  001A80  6F63               	movwf	(??_Can_GetMessage+1)& (0+255),b
  1616  001A82  50F3               	movf	prodl,w,c
  1617  001A84  0100               	movlb	0	; () banked
  1618  001A86  2762               	addwf	??_Can_GetMessage& (0+255),f,b
  1619  001A88  50F4               	movf	prodh,w,c
  1620  001A8A  0100               	movlb	0	; () banked
  1621  001A8C  2363               	addwfc	(??_Can_GetMessage+1)& (0+255),f,b
  1622  001A8E  0100               	movlb	0	; () banked
  1623  001A90  51AA               	movf	_rxBufferPtrOut& (0+255),w,b
  1624  001A92  0D11               	mullw	17
  1625  001A94  50F3               	movf	prodl,w,c
  1626  001A96  0100               	movlb	0	; () banked
  1627  001A98  2562               	addwf	??_Can_GetMessage& (0+255),w,b
  1628  001A9A  6ED9               	movwf	fsr2l,c
  1629  001A9C  50F4               	movf	prodh,w,c
  1630  001A9E  0100               	movlb	0	; () banked
  1631  001AA0  2163               	addwfc	(??_Can_GetMessage+1)& (0+255),w,b
  1632  001AA2  6EDA               	movwf	fsr2h,c
  1633  001AA4  0100               	movlb	0	; () banked
  1634  001AA6  5164               	movf	Can_GetMessage@i& (0+255),w,b
  1635  001AA8  0D01               	mullw	1
  1636  001AAA  0E06               	movlw	6
  1637  001AAC  26F3               	addwf	prodl,f,c
  1638  001AAE  0E00               	movlw	0
  1639  001AB0  22F4               	addwfc	prodh,f,c
  1640  001AB2  50F3               	movf	prodl,w,c
  1641  001AB4  0100               	movlb	0	; () banked
  1642  001AB6  2560               	addwf	Can_GetMessage@msgPtr& (0+255),w,b
  1643  001AB8  6EE1               	movwf	fsr1l,c
  1644  001ABA  50F4               	movf	prodh,w,c
  1645  001ABC  0100               	movlb	0	; () banked
  1646  001ABE  2161               	addwfc	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  1647  001AC0  6EE2               	movwf	fsr1h,c
  1648  001AC2  CFDF FFE7          	movff	indf2,indf1
  1649                           
  1650                           ; BSR set to: 0
  1651  001AC6  0100               	movlb	0	; () banked
  1652  001AC8  2B64               	incf	Can_GetMessage@i& (0+255),f,b
  1653  001ACA                     l1833:
  1654                           
  1655                           ; BSR set to: 0
  1656  001ACA  0100               	movlb	0	; () banked
  1657  001ACC  EE20 F005          	lfsr	2,5
  1658  001AD0  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  1659  001AD2  26D9               	addwf	fsr2l,f,c
  1660  001AD4  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  1661  001AD6  22DA               	addwfc	fsr2h,f,c
  1662  001AD8  50DE               	movf	postinc2,w,c
  1663  001ADA  0100               	movlb	0	; () banked
  1664  001ADC  5D64               	subwf	Can_GetMessage@i& (0+255),w,b
  1665  001ADE  A0D8               	btfss	status,0,c
  1666  001AE0  D7C3               	goto	l1829
  1667                           
  1668                           ; BSR set to: 0
  1669                           ;can.c: 182: }
  1670                           ;can.c: 183: INT3IE = 0;
  1671  001AE2  9AF0               	bcf	intcon3,5,c	;volatile
  1672                           
  1673                           ; BSR set to: 0
  1674                           ;can.c: 184: rxBufferPtrOut = (rxBufferPtrOut + 1) % 4;
  1675  001AE4  0100               	movlb	0	; () banked
  1676  001AE6  29AA               	incf	_rxBufferPtrOut& (0+255),w,b
  1677  001AE8  0B03               	andlw	3
  1678  001AEA  0100               	movlb	0	; () banked
  1679  001AEC  6FAA               	movwf	_rxBufferPtrOut& (0+255),b
  1680                           
  1681                           ; BSR set to: 0
  1682                           ;can.c: 185: rxBufferCount--;
  1683  001AEE  065C               	decf	_rxBufferCount,f,c
  1684                           
  1685                           ; BSR set to: 0
  1686                           ;can.c: 186: INT3IE = 1;
  1687  001AF0  8AF0               	bsf	intcon3,5,c	;volatile
  1688                           
  1689                           ;can.c: 187: return 0;
  1690  001AF2  0E00               	movlw	0
  1691                           
  1692                           ; BSR set to: 0
  1693  001AF4  0012               	return	
  1694  001AF6                     l1843:
  1695                           
  1696                           ;can.c: 188: }
  1697                           ;can.c: 189: return 1;
  1698  001AF6  0E01               	movlw	1
  1699  001AF8  0012               	return	
  1700  001AFA                     __end_of_Can_GetMessage:
  1701                           	opt stack 0
  1702                           tblptru	equ	0xFF8
  1703                           tblptrh	equ	0xFF7
  1704                           tblptrl	equ	0xFF6
  1705                           tablat	equ	0xFF5
  1706                           prodh	equ	0xFF4
  1707                           prodl	equ	0xFF3
  1708                           intcon3	equ	0xFF0
  1709                           postinc0	equ	0xFEE
  1710                           wreg	equ	0xFE8
  1711                           indf1	equ	0xFE7
  1712                           postinc1	equ	0xFE6
  1713                           postdec1	equ	0xFE5
  1714                           fsr1h	equ	0xFE2
  1715                           fsr1l	equ	0xFE1
  1716                           indf2	equ	0xFDF
  1717                           postinc2	equ	0xFDE
  1718                           fsr2h	equ	0xFDA
  1719                           fsr2l	equ	0xFD9
  1720                           status	equ	0xFD8
  1721                           
  1722 ;; *************** function _Can_Init *****************
  1723 ;; Defined at:
  1724 ;;		line 237 in file "can.c"
  1725 ;; Parameters:    Size  Location     Type
  1726 ;;  speedCfg        2   60[BANK0 ] PTR const struct CANSPEE
  1727 ;;		 -> canSpeed125k(7), 
  1728 ;;  filterCfg       2   62[BANK0 ] PTR struct CANFILTER
  1729 ;;		 -> filter(33), 
  1730 ;; Auto vars:     Size  Location     Type
  1731 ;;		None
  1732 ;; Return value:  Size  Location     Type
  1733 ;;                  1    wreg      void 
  1734 ;; Registers used:
  1735 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1736 ;; Tracked objects:
  1737 ;;		On entry : 0/0
  1738 ;;		On exit  : 0/0
  1739 ;;		Unchanged: 0/0
  1740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1741 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1744 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1745 ;;Total ram usage:        4 bytes
  1746 ;; Hardware stack levels used:    1
  1747 ;; Hardware stack levels required when called:   12
  1748 ;; This function calls:
  1749 ;;		_Mcp2515_Init
  1750 ;; This function is called by:
  1751 ;;		_init
  1752 ;; This function uses a non-reentrant model
  1753 ;;
  1754                           
  1755                           	psect	text5
  1756  002488                     __ptext5:
  1757                           	opt stack 0
  1758  002488                     _Can_Init:
  1759                           	opt stack 17
  1760                           
  1761                           ;can.c: 240: TRISF6 = 0;
  1762                           
  1763                           ;incstack = 0
  1764  002488  9C97               	bcf	3991,6,c	;volatile
  1765                           
  1766                           ;can.c: 241: TRISF7 = 0;
  1767  00248A  9E97               	bcf	3991,7,c	;volatile
  1768                           
  1769                           ;can.c: 242: LATF6 = 1;
  1770  00248C  8C8E               	bsf	3982,6,c	;volatile
  1771                           
  1772                           ;can.c: 243: LATF7 = 0;
  1773  00248E  9E8E               	bcf	3982,7,c	;volatile
  1774                           
  1775                           ;can.c: 244: TRISC4 = 1;
  1776  002490  8894               	bsf	3988,4,c	;volatile
  1777                           
  1778                           ;can.c: 245: TRISC5 = 0;
  1779  002492  9A94               	bcf	3988,5,c	;volatile
  1780                           
  1781                           ;can.c: 246: TRISC3 = 0;
  1782  002494  9694               	bcf	3988,3,c	;volatile
  1783                           
  1784                           ;can.c: 247: TRISD1 = 0;
  1785  002496  9295               	bcf	3989,1,c	;volatile
  1786                           
  1787                           ;can.c: 251: CKE1 = 0;
  1788  002498  9CC7               	bcf	4039,6,c	;volatile
  1789                           
  1790                           ;can.c: 252: CKP1 = 1;
  1791  00249A  88C6               	bsf	4038,4,c	;volatile
  1792                           
  1793                           ;can.c: 253: SSPCON1 = 0b00111010;
  1794  00249C  0E3A               	movlw	58
  1795  00249E  6EC6               	movwf	4038,c	;volatile
  1796                           
  1797                           ;can.c: 254: SSPEN1 = 1;
  1798  0024A0  8AC6               	bsf	4038,5,c	;volatile
  1799                           
  1800                           ;can.c: 258: Mcp2515_Init(speedCfg,filterCfg);
  1801  0024A2  C09C  F083         	movff	Can_Init@speedCfg,Mcp2515_Init@speedCfg
  1802  0024A6  C09D  F084         	movff	Can_Init@speedCfg+1,Mcp2515_Init@speedCfg+1
  1803  0024AA  C09E  F085         	movff	Can_Init@filterCfg,Mcp2515_Init@filterCfg
  1804  0024AE  C09F  F086         	movff	Can_Init@filterCfg+1,Mcp2515_Init@filterCfg+1
  1805  0024B2  EC21  F008         	call	_Mcp2515_Init	;wreg free
  1806                           
  1807                           ;can.c: 259: INT3IE = 1;
  1808  0024B6  8AF0               	bsf	intcon3,5,c	;volatile
  1809                           
  1810                           ;can.c: 260: INTEDG3 = 0;
  1811  0024B8  96F1               	bcf	intcon2,3,c	;volatile
  1812  0024BA  0012               	return		;funcret
  1813  0024BC                     __end_of_Can_Init:
  1814                           	opt stack 0
  1815                           tblptru	equ	0xFF8
  1816                           tblptrh	equ	0xFF7
  1817                           tblptrl	equ	0xFF6
  1818                           tablat	equ	0xFF5
  1819                           prodh	equ	0xFF4
  1820                           prodl	equ	0xFF3
  1821                           intcon2	equ	0xFF1
  1822                           intcon3	equ	0xFF0
  1823                           postinc0	equ	0xFEE
  1824                           wreg	equ	0xFE8
  1825                           indf1	equ	0xFE7
  1826                           postinc1	equ	0xFE6
  1827                           postdec1	equ	0xFE5
  1828                           fsr1h	equ	0xFE2
  1829                           fsr1l	equ	0xFE1
  1830                           indf2	equ	0xFDF
  1831                           postinc2	equ	0xFDE
  1832                           fsr2h	equ	0xFDA
  1833                           fsr2l	equ	0xFD9
  1834                           status	equ	0xFD8
  1835                           
  1836 ;; *************** function _Mcp2515_Init *****************
  1837 ;; Defined at:
  1838 ;;		line 38 in file "mcp2515.c"
  1839 ;; Parameters:    Size  Location     Type
  1840 ;;  speedCfg        2   35[BANK0 ] PTR const struct CANSPEE
  1841 ;;		 -> canSpeed125k(7), 
  1842 ;;  filterCfg       2   37[BANK0 ] PTR struct CANFILTER
  1843 ;;		 -> filter(33), 
  1844 ;; Auto vars:     Size  Location     Type
  1845 ;;  cmdMask4        4   53[BANK0 ] unsigned char [4]
  1846 ;;  cmdWrite3       3   57[BANK0 ] unsigned char [3]
  1847 ;;  i               1   52[BANK0 ] unsigned char 
  1848 ;; Return value:  Size  Location     Type
  1849 ;;                  1    wreg      void 
  1850 ;; Registers used:
  1851 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1852 ;; Tracked objects:
  1853 ;;		On entry : 0/0
  1854 ;;		On exit  : 0/0
  1855 ;;		Unchanged: 0/0
  1856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1857 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1858 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1859 ;;      Temps:          0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1860 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1861 ;;Total ram usage:       25 bytes
  1862 ;; Hardware stack levels used:    1
  1863 ;; Hardware stack levels required when called:   11
  1864 ;; This function calls:
  1865 ;;		_Mcp2515WriteCanId
  1866 ;;		_Mcp2515_Reset
  1867 ;;		_Spi_Write
  1868 ;; This function is called by:
  1869 ;;		_Can_Init
  1870 ;; This function uses a non-reentrant model
  1871 ;;
  1872                           
  1873                           	psect	text6
  1874  001042                     __ptext6:
  1875                           	opt stack 0
  1876  001042                     _Mcp2515_Init:
  1877                           	opt stack 17
  1878                           
  1879                           ;mcp2515.c: 40: uint8_t i;
  1880                           ;mcp2515.c: 41: uint8_t cmdMask4[]={0x05,0x0F,0xE0,0x80};
  1881                           
  1882                           ;incstack = 0
  1883  001042  C0E4  F095         	movff	Mcp2515_Init@F8112,Mcp2515_Init@cmdMask4
  1884  001046  C0E5  F096         	movff	Mcp2515_Init@F8112+1,Mcp2515_Init@cmdMask4+1
  1885  00104A  C0E6  F097         	movff	Mcp2515_Init@F8112+2,Mcp2515_Init@cmdMask4+2
  1886  00104E  C0E7  F098         	movff	Mcp2515_Init@F8112+3,Mcp2515_Init@cmdMask4+3
  1887                           
  1888                           ;mcp2515.c: 42: uint8_t cmdWrite3[]={0x02,0,0};
  1889  001052  C0EF  F099         	movff	Mcp2515_Init@F8114,Mcp2515_Init@cmdWrite3
  1890  001056  C0F0  F09A         	movff	Mcp2515_Init@F8114+1,Mcp2515_Init@cmdWrite3+1
  1891  00105A  C0F1  F09B         	movff	Mcp2515_Init@F8114+2,Mcp2515_Init@cmdWrite3+2
  1892                           
  1893                           ;mcp2515.c: 44: Mcp2515_Reset();
  1894  00105E  ECEB  F010         	call	_Mcp2515_Reset	;wreg free
  1895                           
  1896                           ;mcp2515.c: 48: Spi_Write(cmdMask4,sizeof(cmdMask4));
  1897  001062  0E95               	movlw	low Mcp2515_Init@cmdMask4
  1898  001064  0100               	movlb	0	; () banked
  1899  001066  6F6C               	movwf	Spi_Write@tx& (0+255),b
  1900  001068  0E00               	movlw	high Mcp2515_Init@cmdMask4
  1901  00106A  0100               	movlb	0	; () banked
  1902  00106C  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  1903  00106E  0E04               	movlw	4
  1904  001070  0100               	movlb	0	; () banked
  1905  001072  6F6E               	movwf	Spi_Write@size& (0+255),b
  1906  001074  0E00               	movlw	0
  1907  001076  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  1908  001078  0E00               	movlw	0
  1909  00107A  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  1910  00107C  0E00               	movlw	0
  1911  00107E  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  1912  001080  EC5E  F012         	call	_Spi_Write	;wreg free
  1913                           
  1914                           ;mcp2515.c: 52: cmdWrite3[1] = 0x2A;
  1915  001084  0E2A               	movlw	42
  1916  001086  0100               	movlb	0	; () banked
  1917  001088  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  1918                           
  1919                           ; BSR set to: 0
  1920                           ;mcp2515.c: 53: cmdWrite3[2] = speedCfg->brp | speedCfg->sjw << 6;
  1921  00108A  C083  FFF6         	movff	Mcp2515_Init@speedCfg,tblptrl
  1922  00108E  C084  FFF7         	movff	Mcp2515_Init@speedCfg+1,tblptrh
  1923  001092                     	if	0	;tblptru may be non-zero
  1924  001092                     	endif
  1925  001092                     	if	0	;tblptru may be non-zero
  1926  001092                     	endif
  1927  001092  0008               	tblrd		*
  1928  001094  CFF5 F087          	movff	tablat,??_Mcp2515_Init
  1929  001098  0E01               	movlw	1
  1930  00109A  0100               	movlb	0	; () banked
  1931  00109C  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  1932  00109E  0100               	movlb	0	; () banked
  1933  0010A0  6F88               	movwf	(??_Mcp2515_Init+1)& (0+255),b
  1934  0010A2  0E00               	movlw	0
  1935  0010A4  0100               	movlb	0	; () banked
  1936  0010A6  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  1937  0010A8  0100               	movlb	0	; () banked
  1938  0010AA  6F89               	movwf	(??_Mcp2515_Init+2)& (0+255),b
  1939  0010AC  C088  FFF6         	movff	??_Mcp2515_Init+1,tblptrl
  1940  0010B0  C089  FFF7         	movff	??_Mcp2515_Init+2,tblptrh
  1941  0010B4                     	if	0	;tblptru may be non-zero
  1942  0010B4                     	endif
  1943  0010B4                     	if	0	;tblptru may be non-zero
  1944  0010B4                     	endif
  1945  0010B4  0008               	tblrd		*
  1946  0010B6  CFF5 F08A          	movff	tablat,??_Mcp2515_Init+3
  1947  0010BA  0E06               	movlw	6
  1948  0010BC  0100               	movlb	0	; () banked
  1949  0010BE  6F8B               	movwf	(??_Mcp2515_Init+4)& (0+255),b
  1950  0010C0                     u925:
  1951  0010C0  0100               	movlb	0	; () banked
  1952  0010C2  90D8               	bcf	status,0,c
  1953  0010C4  378A               	rlcf	(??_Mcp2515_Init+3)& (0+255),f,b
  1954  0010C6  0100               	movlb	0	; () banked
  1955  0010C8  2F8B               	decfsz	(??_Mcp2515_Init+4)& (0+255),f,b
  1956  0010CA  D7FA               	goto	u925
  1957  0010CC  0100               	movlb	0	; () banked
  1958  0010CE  518A               	movf	(??_Mcp2515_Init+3)& (0+255),w,b
  1959  0010D0  0100               	movlb	0	; () banked
  1960  0010D2  1187               	iorwf	??_Mcp2515_Init& (0+255),w,b
  1961  0010D4  0100               	movlb	0	; () banked
  1962  0010D6  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  1963                           
  1964                           ; BSR set to: 0
  1965                           ;mcp2515.c: 54: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  1966  0010D8  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  1967  0010DA  0100               	movlb	0	; () banked
  1968  0010DC  6F6C               	movwf	Spi_Write@tx& (0+255),b
  1969  0010DE  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  1970  0010E0  0100               	movlb	0	; () banked
  1971  0010E2  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  1972  0010E4  0E03               	movlw	3
  1973  0010E6  0100               	movlb	0	; () banked
  1974  0010E8  6F6E               	movwf	Spi_Write@size& (0+255),b
  1975  0010EA  0E00               	movlw	0
  1976  0010EC  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  1977  0010EE  0E00               	movlw	0
  1978  0010F0  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  1979  0010F2  0E00               	movlw	0
  1980  0010F4  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  1981  0010F6  EC5E  F012         	call	_Spi_Write	;wreg free
  1982                           
  1983                           ;mcp2515.c: 56: cmdWrite3[1] = 0x29;
  1984  0010FA  0E29               	movlw	41
  1985  0010FC  0100               	movlb	0	; () banked
  1986  0010FE  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  1987                           
  1988                           ;mcp2515.c: 57: cmdWrite3[2] = speedCfg->prseg
  1989                           ;mcp2515.c: 58: | speedCfg->phseg1 << 3
  1990                           ;mcp2515.c: 59: | speedCfg->sam << 6
  1991                           ;mcp2515.c: 60: | speedCfg->btlmode << 7;
  1992  001100  0E02               	movlw	2
  1993  001102  0100               	movlb	0	; () banked
  1994  001104  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  1995  001106  0100               	movlb	0	; () banked
  1996  001108  6F87               	movwf	??_Mcp2515_Init& (0+255),b
  1997  00110A  0E00               	movlw	0
  1998  00110C  0100               	movlb	0	; () banked
  1999  00110E  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  2000  001110  0100               	movlb	0	; () banked
  2001  001112  6F88               	movwf	(??_Mcp2515_Init+1)& (0+255),b
  2002  001114  C087  FFF6         	movff	??_Mcp2515_Init,tblptrl
  2003  001118  C088  FFF7         	movff	??_Mcp2515_Init+1,tblptrh
  2004  00111C                     	if	0	;tblptru may be non-zero
  2005  00111C                     	endif
  2006  00111C                     	if	0	;tblptru may be non-zero
  2007  00111C                     	endif
  2008  00111C  0008               	tblrd		*
  2009  00111E  CFF5 F089          	movff	tablat,??_Mcp2515_Init+2
  2010  001122  0E06               	movlw	6
  2011  001124  0100               	movlb	0	; () banked
  2012  001126  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  2013  001128  0100               	movlb	0	; () banked
  2014  00112A  6F8A               	movwf	(??_Mcp2515_Init+3)& (0+255),b
  2015  00112C  0E00               	movlw	0
  2016  00112E  0100               	movlb	0	; () banked
  2017  001130  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  2018  001132  0100               	movlb	0	; () banked
  2019  001134  6F8B               	movwf	(??_Mcp2515_Init+4)& (0+255),b
  2020  001136  C08A  FFF6         	movff	??_Mcp2515_Init+3,tblptrl
  2021  00113A  C08B  FFF7         	movff	??_Mcp2515_Init+4,tblptrh
  2022  00113E                     	if	0	;tblptru may be non-zero
  2023  00113E                     	endif
  2024  00113E                     	if	0	;tblptru may be non-zero
  2025  00113E                     	endif
  2026  00113E  0008               	tblrd		*
  2027  001140  CFF5 F08C          	movff	tablat,??_Mcp2515_Init+5
  2028  001144  0E00               	movlw	0
  2029  001146  B18C               	btfsc	(??_Mcp2515_Init+5)& (0+255),0,b
  2030  001148  0E80               	movlw	128
  2031  00114A  6F8C               	movwf	(??_Mcp2515_Init+5)& (0+255),b
  2032  00114C  0E05               	movlw	5
  2033  00114E  0100               	movlb	0	; () banked
  2034  001150  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  2035  001152  0100               	movlb	0	; () banked
  2036  001154  6F8D               	movwf	(??_Mcp2515_Init+6)& (0+255),b
  2037  001156  0E00               	movlw	0
  2038  001158  0100               	movlb	0	; () banked
  2039  00115A  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  2040  00115C  0100               	movlb	0	; () banked
  2041  00115E  6F8E               	movwf	(??_Mcp2515_Init+7)& (0+255),b
  2042  001160  C08D  FFF6         	movff	??_Mcp2515_Init+6,tblptrl
  2043  001164  C08E  FFF7         	movff	??_Mcp2515_Init+7,tblptrh
  2044  001168                     	if	0	;tblptru may be non-zero
  2045  001168                     	endif
  2046  001168                     	if	0	;tblptru may be non-zero
  2047  001168                     	endif
  2048  001168  0008               	tblrd		*
  2049  00116A  CFF5 F08F          	movff	tablat,??_Mcp2515_Init+8
  2050  00116E  0E06               	movlw	6
  2051  001170  0100               	movlb	0	; () banked
  2052  001172  6F90               	movwf	(??_Mcp2515_Init+9)& (0+255),b
  2053  001174                     u935:
  2054  001174  0100               	movlb	0	; () banked
  2055  001176  90D8               	bcf	status,0,c
  2056  001178  378F               	rlcf	(??_Mcp2515_Init+8)& (0+255),f,b
  2057  00117A  0100               	movlb	0	; () banked
  2058  00117C  2F90               	decfsz	(??_Mcp2515_Init+9)& (0+255),f,b
  2059  00117E  D7FA               	goto	u935
  2060  001180  0E03               	movlw	3
  2061  001182  0100               	movlb	0	; () banked
  2062  001184  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  2063  001186  0100               	movlb	0	; () banked
  2064  001188  6F91               	movwf	(??_Mcp2515_Init+10)& (0+255),b
  2065  00118A  0E00               	movlw	0
  2066  00118C  0100               	movlb	0	; () banked
  2067  00118E  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  2068  001190  0100               	movlb	0	; () banked
  2069  001192  6F92               	movwf	(??_Mcp2515_Init+11)& (0+255),b
  2070  001194  C091  FFF6         	movff	??_Mcp2515_Init+10,tblptrl
  2071  001198  C092  FFF7         	movff	??_Mcp2515_Init+11,tblptrh
  2072  00119C                     	if	0	;tblptru may be non-zero
  2073  00119C                     	endif
  2074  00119C                     	if	0	;tblptru may be non-zero
  2075  00119C                     	endif
  2076  00119C  0008               	tblrd		*
  2077  00119E  CFF5 F093          	movff	tablat,??_Mcp2515_Init+12
  2078  0011A2  0100               	movlb	0	; () banked
  2079  0011A4  90D8               	bcf	status,0,c
  2080  0011A6  3793               	rlcf	(??_Mcp2515_Init+12)& (0+255),f,b
  2081  0011A8  0100               	movlb	0	; () banked
  2082  0011AA  90D8               	bcf	status,0,c
  2083  0011AC  3793               	rlcf	(??_Mcp2515_Init+12)& (0+255),f,b
  2084  0011AE  0100               	movlb	0	; () banked
  2085  0011B0  90D8               	bcf	status,0,c
  2086  0011B2  3593               	rlcf	(??_Mcp2515_Init+12)& (0+255),w,b
  2087  0011B4  0100               	movlb	0	; () banked
  2088  0011B6  118F               	iorwf	(??_Mcp2515_Init+8)& (0+255),w,b
  2089  0011B8  0100               	movlb	0	; () banked
  2090  0011BA  118C               	iorwf	(??_Mcp2515_Init+5)& (0+255),w,b
  2091  0011BC  0100               	movlb	0	; () banked
  2092  0011BE  1189               	iorwf	(??_Mcp2515_Init+2)& (0+255),w,b
  2093  0011C0  0100               	movlb	0	; () banked
  2094  0011C2  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  2095                           
  2096                           ; BSR set to: 0
  2097                           ;mcp2515.c: 61: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  2098  0011C4  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  2099  0011C6  0100               	movlb	0	; () banked
  2100  0011C8  6F6C               	movwf	Spi_Write@tx& (0+255),b
  2101  0011CA  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  2102  0011CC  0100               	movlb	0	; () banked
  2103  0011CE  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  2104  0011D0  0E03               	movlw	3
  2105  0011D2  0100               	movlb	0	; () banked
  2106  0011D4  6F6E               	movwf	Spi_Write@size& (0+255),b
  2107  0011D6  0E00               	movlw	0
  2108  0011D8  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  2109  0011DA  0E00               	movlw	0
  2110  0011DC  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  2111  0011DE  0E00               	movlw	0
  2112  0011E0  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  2113  0011E2  EC5E  F012         	call	_Spi_Write	;wreg free
  2114                           
  2115                           ;mcp2515.c: 63: cmdWrite3[1] = 0x28;
  2116  0011E6  0E28               	movlw	40
  2117  0011E8  0100               	movlb	0	; () banked
  2118  0011EA  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  2119                           
  2120                           ; BSR set to: 0
  2121                           ;mcp2515.c: 64: cmdWrite3[2] = speedCfg->phseg2 | speedCfg->sjw << 6;
  2122  0011EC  0E04               	movlw	4
  2123  0011EE  0100               	movlb	0	; () banked
  2124  0011F0  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  2125  0011F2  0100               	movlb	0	; () banked
  2126  0011F4  6F87               	movwf	??_Mcp2515_Init& (0+255),b
  2127  0011F6  0E00               	movlw	0
  2128  0011F8  0100               	movlb	0	; () banked
  2129  0011FA  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  2130  0011FC  0100               	movlb	0	; () banked
  2131  0011FE  6F88               	movwf	(??_Mcp2515_Init+1)& (0+255),b
  2132  001200  C087  FFF6         	movff	??_Mcp2515_Init,tblptrl
  2133  001204  C088  FFF7         	movff	??_Mcp2515_Init+1,tblptrh
  2134  001208                     	if	0	;tblptru may be non-zero
  2135  001208                     	endif
  2136  001208                     	if	0	;tblptru may be non-zero
  2137  001208                     	endif
  2138  001208  0008               	tblrd		*
  2139  00120A  CFF5 F089          	movff	tablat,??_Mcp2515_Init+2
  2140  00120E  0E01               	movlw	1
  2141  001210  0100               	movlb	0	; () banked
  2142  001212  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  2143  001214  0100               	movlb	0	; () banked
  2144  001216  6F8A               	movwf	(??_Mcp2515_Init+3)& (0+255),b
  2145  001218  0E00               	movlw	0
  2146  00121A  0100               	movlb	0	; () banked
  2147  00121C  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  2148  00121E  0100               	movlb	0	; () banked
  2149  001220  6F8B               	movwf	(??_Mcp2515_Init+4)& (0+255),b
  2150  001222  C08A  FFF6         	movff	??_Mcp2515_Init+3,tblptrl
  2151  001226  C08B  FFF7         	movff	??_Mcp2515_Init+4,tblptrh
  2152  00122A                     	if	0	;tblptru may be non-zero
  2153  00122A                     	endif
  2154  00122A                     	if	0	;tblptru may be non-zero
  2155  00122A                     	endif
  2156  00122A  0008               	tblrd		*
  2157  00122C  CFF5 F08C          	movff	tablat,??_Mcp2515_Init+5
  2158  001230  0E06               	movlw	6
  2159  001232  0100               	movlb	0	; () banked
  2160  001234  6F8D               	movwf	(??_Mcp2515_Init+6)& (0+255),b
  2161  001236                     u945:
  2162  001236  0100               	movlb	0	; () banked
  2163  001238  90D8               	bcf	status,0,c
  2164  00123A  378C               	rlcf	(??_Mcp2515_Init+5)& (0+255),f,b
  2165  00123C  0100               	movlb	0	; () banked
  2166  00123E  2F8D               	decfsz	(??_Mcp2515_Init+6)& (0+255),f,b
  2167  001240  D7FA               	goto	u945
  2168  001242  0100               	movlb	0	; () banked
  2169  001244  518C               	movf	(??_Mcp2515_Init+5)& (0+255),w,b
  2170  001246  0100               	movlb	0	; () banked
  2171  001248  1189               	iorwf	(??_Mcp2515_Init+2)& (0+255),w,b
  2172  00124A  0100               	movlb	0	; () banked
  2173  00124C  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;mcp2515.c: 65: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  2177  00124E  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  2178  001250  0100               	movlb	0	; () banked
  2179  001252  6F6C               	movwf	Spi_Write@tx& (0+255),b
  2180  001254  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  2181  001256  0100               	movlb	0	; () banked
  2182  001258  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  2183  00125A  0E03               	movlw	3
  2184  00125C  0100               	movlb	0	; () banked
  2185  00125E  6F6E               	movwf	Spi_Write@size& (0+255),b
  2186  001260  0E00               	movlw	0
  2187  001262  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  2188  001264  0E00               	movlw	0
  2189  001266  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  2190  001268  0E00               	movlw	0
  2191  00126A  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  2192  00126C  EC5E  F012         	call	_Spi_Write	;wreg free
  2193                           
  2194                           ;mcp2515.c: 69: Mcp2515WriteCanId(0x20,filterCfg->ext,filterCfg->mask0);
  2195  001270  0100               	movlb	0	; () banked
  2196  001272  EE20 F020          	lfsr	2,32
  2197  001276  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2198  001278  26D9               	addwf	fsr2l,f,c
  2199  00127A  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2200  00127C  22DA               	addwfc	fsr2h,f,c
  2201  00127E  50DF               	movf	indf2,w,c
  2202  001280  0100               	movlb	0	; () banked
  2203  001282  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  2204  001284  C085  FFD9         	movff	Mcp2515_Init@filterCfg,fsr2l
  2205  001288  C086  FFDA         	movff	Mcp2515_Init@filterCfg+1,fsr2h
  2206  00128C  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  2207  001290  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  2208  001294  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  2209  001298  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  2210  00129C  0E20               	movlw	32
  2211  00129E  EC98  F00E         	call	_Mcp2515WriteCanId
  2212                           
  2213                           ;mcp2515.c: 70: Mcp2515WriteCanId(0x24,filterCfg->ext,filterCfg->mask1);
  2214  0012A2  0100               	movlb	0	; () banked
  2215  0012A4  EE20 F020          	lfsr	2,32
  2216  0012A8  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2217  0012AA  26D9               	addwf	fsr2l,f,c
  2218  0012AC  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2219  0012AE  22DA               	addwfc	fsr2h,f,c
  2220  0012B0  50DF               	movf	indf2,w,c
  2221  0012B2  0100               	movlb	0	; () banked
  2222  0012B4  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  2223  0012B6  0100               	movlb	0	; () banked
  2224  0012B8  EE20 F004          	lfsr	2,4
  2225  0012BC  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2226  0012BE  26D9               	addwf	fsr2l,f,c
  2227  0012C0  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2228  0012C2  22DA               	addwfc	fsr2h,f,c
  2229  0012C4  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  2230  0012C8  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  2231  0012CC  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  2232  0012D0  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  2233  0012D4  0E24               	movlw	36
  2234  0012D6  EC98  F00E         	call	_Mcp2515WriteCanId
  2235                           
  2236                           ;mcp2515.c: 71: Mcp2515WriteCanId(0x00,filterCfg->ext,filterCfg->filter0);
  2237  0012DA  0100               	movlb	0	; () banked
  2238  0012DC  EE20 F020          	lfsr	2,32
  2239  0012E0  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2240  0012E2  26D9               	addwf	fsr2l,f,c
  2241  0012E4  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2242  0012E6  22DA               	addwfc	fsr2h,f,c
  2243  0012E8  50DF               	movf	indf2,w,c
  2244  0012EA  0100               	movlb	0	; () banked
  2245  0012EC  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  2246  0012EE  0100               	movlb	0	; () banked
  2247  0012F0  EE20 F008          	lfsr	2,8
  2248  0012F4  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2249  0012F6  26D9               	addwf	fsr2l,f,c
  2250  0012F8  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2251  0012FA  22DA               	addwfc	fsr2h,f,c
  2252  0012FC  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  2253  001300  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  2254  001304  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  2255  001308  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  2256  00130C  0E00               	movlw	0
  2257  00130E  EC98  F00E         	call	_Mcp2515WriteCanId
  2258                           
  2259                           ;mcp2515.c: 72: Mcp2515WriteCanId(0x04,filterCfg->ext,filterCfg->filter1);
  2260  001312  0100               	movlb	0	; () banked
  2261  001314  EE20 F020          	lfsr	2,32
  2262  001318  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2263  00131A  26D9               	addwf	fsr2l,f,c
  2264  00131C  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2265  00131E  22DA               	addwfc	fsr2h,f,c
  2266  001320  50DF               	movf	indf2,w,c
  2267  001322  0100               	movlb	0	; () banked
  2268  001324  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  2269  001326  0100               	movlb	0	; () banked
  2270  001328  EE20 F00C          	lfsr	2,12
  2271  00132C  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2272  00132E  26D9               	addwf	fsr2l,f,c
  2273  001330  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2274  001332  22DA               	addwfc	fsr2h,f,c
  2275  001334  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  2276  001338  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  2277  00133C  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  2278  001340  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  2279  001344  0E04               	movlw	4
  2280  001346  EC98  F00E         	call	_Mcp2515WriteCanId
  2281                           
  2282                           ;mcp2515.c: 73: Mcp2515WriteCanId(0x08,filterCfg->ext,filterCfg->filter2);
  2283  00134A  0100               	movlb	0	; () banked
  2284  00134C  EE20 F020          	lfsr	2,32
  2285  001350  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2286  001352  26D9               	addwf	fsr2l,f,c
  2287  001354  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2288  001356  22DA               	addwfc	fsr2h,f,c
  2289  001358  50DF               	movf	indf2,w,c
  2290  00135A  0100               	movlb	0	; () banked
  2291  00135C  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  2292  00135E  0100               	movlb	0	; () banked
  2293  001360  EE20 F010          	lfsr	2,16
  2294  001364  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2295  001366  26D9               	addwf	fsr2l,f,c
  2296  001368  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2297  00136A  22DA               	addwfc	fsr2h,f,c
  2298  00136C  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  2299  001370  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  2300  001374  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  2301  001378  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  2302  00137C  0E08               	movlw	8
  2303  00137E  EC98  F00E         	call	_Mcp2515WriteCanId
  2304                           
  2305                           ;mcp2515.c: 74: Mcp2515WriteCanId(0x10,filterCfg->ext,filterCfg->filter3);
  2306  001382  0100               	movlb	0	; () banked
  2307  001384  EE20 F020          	lfsr	2,32
  2308  001388  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2309  00138A  26D9               	addwf	fsr2l,f,c
  2310  00138C  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2311  00138E  22DA               	addwfc	fsr2h,f,c
  2312  001390  50DF               	movf	indf2,w,c
  2313  001392  0100               	movlb	0	; () banked
  2314  001394  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  2315  001396  0100               	movlb	0	; () banked
  2316  001398  EE20 F014          	lfsr	2,20
  2317  00139C  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2318  00139E  26D9               	addwf	fsr2l,f,c
  2319  0013A0  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2320  0013A2  22DA               	addwfc	fsr2h,f,c
  2321  0013A4  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  2322  0013A8  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  2323  0013AC  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  2324  0013B0  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  2325  0013B4  0E10               	movlw	16
  2326  0013B6  EC98  F00E         	call	_Mcp2515WriteCanId
  2327                           
  2328                           ;mcp2515.c: 75: Mcp2515WriteCanId(0x14,filterCfg->ext,filterCfg->filter4);
  2329  0013BA  0100               	movlb	0	; () banked
  2330  0013BC  EE20 F020          	lfsr	2,32
  2331  0013C0  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2332  0013C2  26D9               	addwf	fsr2l,f,c
  2333  0013C4  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2334  0013C6  22DA               	addwfc	fsr2h,f,c
  2335  0013C8  50DF               	movf	indf2,w,c
  2336  0013CA  0100               	movlb	0	; () banked
  2337  0013CC  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  2338  0013CE  0100               	movlb	0	; () banked
  2339  0013D0  EE20 F018          	lfsr	2,24
  2340  0013D4  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2341  0013D6  26D9               	addwf	fsr2l,f,c
  2342  0013D8  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2343  0013DA  22DA               	addwfc	fsr2h,f,c
  2344  0013DC  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  2345  0013E0  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  2346  0013E4  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  2347  0013E8  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  2348  0013EC  0E14               	movlw	20
  2349  0013EE  EC98  F00E         	call	_Mcp2515WriteCanId
  2350                           
  2351                           ;mcp2515.c: 76: Mcp2515WriteCanId(0x18,filterCfg->ext,filterCfg->filter5);
  2352  0013F2  0100               	movlb	0	; () banked
  2353  0013F4  EE20 F020          	lfsr	2,32
  2354  0013F8  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2355  0013FA  26D9               	addwf	fsr2l,f,c
  2356  0013FC  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2357  0013FE  22DA               	addwfc	fsr2h,f,c
  2358  001400  50DF               	movf	indf2,w,c
  2359  001402  0100               	movlb	0	; () banked
  2360  001404  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  2361  001406  0100               	movlb	0	; () banked
  2362  001408  EE20 F01C          	lfsr	2,28
  2363  00140C  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2364  00140E  26D9               	addwf	fsr2l,f,c
  2365  001410  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2366  001412  22DA               	addwfc	fsr2h,f,c
  2367  001414  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  2368  001418  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  2369  00141C  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  2370  001420  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  2371  001424  0E18               	movlw	24
  2372  001426  EC98  F00E         	call	_Mcp2515WriteCanId
  2373                           
  2374                           ;mcp2515.c: 80: cmdWrite3[2] = 0;
  2375  00142A  0E00               	movlw	0
  2376  00142C  0100               	movlb	0	; () banked
  2377  00142E  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  2378                           
  2379                           ;mcp2515.c: 81: for (i = 0; i < 14; i++)
  2380  001430  0E00               	movlw	0
  2381  001432  0100               	movlb	0	; () banked
  2382  001434  6F94               	movwf	Mcp2515_Init@i& (0+255),b
  2383  001436                     l1967:
  2384                           
  2385                           ; BSR set to: 0
  2386  001436  0E0D               	movlw	13
  2387  001438  0100               	movlb	0	; () banked
  2388  00143A  6594               	cpfsgt	Mcp2515_Init@i& (0+255),b
  2389  00143C  D001               	goto	l1971
  2390  00143E  D045               	goto	l1985
  2391  001440                     l1971:
  2392                           
  2393                           ; BSR set to: 0
  2394                           ;mcp2515.c: 82: {
  2395                           ;mcp2515.c: 83: cmdWrite3[1] = 0x30 + i;
  2396  001440  0100               	movlb	0	; () banked
  2397  001442  5194               	movf	Mcp2515_Init@i& (0+255),w,b
  2398  001444  0F30               	addlw	48
  2399  001446  0100               	movlb	0	; () banked
  2400  001448  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  2401                           
  2402                           ; BSR set to: 0
  2403                           ;mcp2515.c: 84: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  2404  00144A  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  2405  00144C  0100               	movlb	0	; () banked
  2406  00144E  6F6C               	movwf	Spi_Write@tx& (0+255),b
  2407  001450  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  2408  001452  0100               	movlb	0	; () banked
  2409  001454  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  2410  001456  0E03               	movlw	3
  2411  001458  0100               	movlb	0	; () banked
  2412  00145A  6F6E               	movwf	Spi_Write@size& (0+255),b
  2413  00145C  0E00               	movlw	0
  2414  00145E  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  2415  001460  0E00               	movlw	0
  2416  001462  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  2417  001464  0E00               	movlw	0
  2418  001466  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  2419  001468  EC5E  F012         	call	_Spi_Write	;wreg free
  2420                           
  2421                           ;mcp2515.c: 85: cmdWrite3[1] = 0x40 + i;
  2422  00146C  0100               	movlb	0	; () banked
  2423  00146E  5194               	movf	Mcp2515_Init@i& (0+255),w,b
  2424  001470  0F40               	addlw	64
  2425  001472  0100               	movlb	0	; () banked
  2426  001474  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  2427                           
  2428                           ;mcp2515.c: 86: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  2429  001476  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  2430  001478  0100               	movlb	0	; () banked
  2431  00147A  6F6C               	movwf	Spi_Write@tx& (0+255),b
  2432  00147C  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  2433  00147E  0100               	movlb	0	; () banked
  2434  001480  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  2435  001482  0E03               	movlw	3
  2436  001484  0100               	movlb	0	; () banked
  2437  001486  6F6E               	movwf	Spi_Write@size& (0+255),b
  2438  001488  0E00               	movlw	0
  2439  00148A  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  2440  00148C  0E00               	movlw	0
  2441  00148E  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  2442  001490  0E00               	movlw	0
  2443  001492  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  2444  001494  EC5E  F012         	call	_Spi_Write	;wreg free
  2445                           
  2446                           ;mcp2515.c: 87: cmdWrite3[1] = 0x50 + i;
  2447  001498  0100               	movlb	0	; () banked
  2448  00149A  5194               	movf	Mcp2515_Init@i& (0+255),w,b
  2449  00149C  0F50               	addlw	80
  2450  00149E  0100               	movlb	0	; () banked
  2451  0014A0  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  2452                           
  2453                           ; BSR set to: 0
  2454                           ;mcp2515.c: 88: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  2455  0014A2  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  2456  0014A4  0100               	movlb	0	; () banked
  2457  0014A6  6F6C               	movwf	Spi_Write@tx& (0+255),b
  2458  0014A8  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  2459  0014AA  0100               	movlb	0	; () banked
  2460  0014AC  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  2461  0014AE  0E03               	movlw	3
  2462  0014B0  0100               	movlb	0	; () banked
  2463  0014B2  6F6E               	movwf	Spi_Write@size& (0+255),b
  2464  0014B4  0E00               	movlw	0
  2465  0014B6  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  2466  0014B8  0E00               	movlw	0
  2467  0014BA  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  2468  0014BC  0E00               	movlw	0
  2469  0014BE  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  2470  0014C0  EC5E  F012         	call	_Spi_Write	;wreg free
  2471  0014C4  0100               	movlb	0	; () banked
  2472  0014C6  2B94               	incf	Mcp2515_Init@i& (0+255),f,b
  2473  0014C8  D7B6               	goto	l1967
  2474  0014CA                     l1985:
  2475                           
  2476                           ; BSR set to: 0
  2477                           ;mcp2515.c: 89: }
  2478                           ;mcp2515.c: 93: cmdWrite3[2] = 0;
  2479  0014CA  0E00               	movlw	0
  2480  0014CC  0100               	movlb	0	; () banked
  2481  0014CE  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  2482                           
  2483                           ;mcp2515.c: 94: cmdWrite3[1] = 0x60;
  2484  0014D0  0E60               	movlw	96
  2485  0014D2  0100               	movlb	0	; () banked
  2486  0014D4  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  2487                           
  2488                           ; BSR set to: 0
  2489                           ;mcp2515.c: 95: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  2490  0014D6  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  2491  0014D8  0100               	movlb	0	; () banked
  2492  0014DA  6F6C               	movwf	Spi_Write@tx& (0+255),b
  2493  0014DC  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  2494  0014DE  0100               	movlb	0	; () banked
  2495  0014E0  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  2496  0014E2  0E03               	movlw	3
  2497  0014E4  0100               	movlb	0	; () banked
  2498  0014E6  6F6E               	movwf	Spi_Write@size& (0+255),b
  2499  0014E8  0E00               	movlw	0
  2500  0014EA  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  2501  0014EC  0E00               	movlw	0
  2502  0014EE  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  2503  0014F0  0E00               	movlw	0
  2504  0014F2  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  2505  0014F4  EC5E  F012         	call	_Spi_Write	;wreg free
  2506                           
  2507                           ;mcp2515.c: 96: cmdWrite3[1] = 0x70;
  2508  0014F8  0E70               	movlw	112
  2509  0014FA  0100               	movlb	0	; () banked
  2510  0014FC  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  2511                           
  2512                           ;mcp2515.c: 97: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  2513  0014FE  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  2514  001500  0100               	movlb	0	; () banked
  2515  001502  6F6C               	movwf	Spi_Write@tx& (0+255),b
  2516  001504  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  2517  001506  0100               	movlb	0	; () banked
  2518  001508  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  2519  00150A  0E03               	movlw	3
  2520  00150C  0100               	movlb	0	; () banked
  2521  00150E  6F6E               	movwf	Spi_Write@size& (0+255),b
  2522  001510  0E00               	movlw	0
  2523  001512  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  2524  001514  0E00               	movlw	0
  2525  001516  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  2526  001518  0E00               	movlw	0
  2527  00151A  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  2528  00151C  EC5E  F012         	call	_Spi_Write	;wreg free
  2529                           
  2530                           ;mcp2515.c: 101: cmdMask4[1] = 0x60;
  2531  001520  0E60               	movlw	96
  2532  001522  0100               	movlb	0	; () banked
  2533  001524  6F96               	movwf	(Mcp2515_Init@cmdMask4+1)& (0+255),b
  2534                           
  2535                           ; BSR set to: 0
  2536                           ;mcp2515.c: 102: cmdMask4[2] = 0x60 | (1<<2);
  2537  001526  0E64               	movlw	100
  2538  001528  0100               	movlb	0	; () banked
  2539  00152A  6F97               	movwf	(Mcp2515_Init@cmdMask4+2)& (0+255),b
  2540                           
  2541                           ; BSR set to: 0
  2542                           ;mcp2515.c: 103: if(filterCfg->ext == 0)
  2543  00152C  0100               	movlb	0	; () banked
  2544  00152E  EE20 F020          	lfsr	2,32
  2545  001532  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2546  001534  26D9               	addwf	fsr2l,f,c
  2547  001536  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2548  001538  22DA               	addwfc	fsr2h,f,c
  2549  00153A  50DF               	movf	indf2,w,c
  2550  00153C  A4D8               	btfss	status,2,c
  2551  00153E  D002               	goto	l1999
  2552                           
  2553                           ; BSR set to: 0
  2554                           ;mcp2515.c: 104: {
  2555                           ;mcp2515.c: 105: cmdMask4[3] = 0x20 | (1<<2);
  2556  001540  0E24               	movlw	36
  2557  001542  D001               	goto	L1
  2558  001544                     l1999:
  2559                           
  2560                           ; BSR set to: 0
  2561                           ;mcp2515.c: 107: else
  2562                           ;mcp2515.c: 108: {
  2563                           ;mcp2515.c: 109: cmdMask4[3] = 0x40 | (1<<2);
  2564  001544  0E44               	movlw	68
  2565  001546                     L1:
  2566  001546  0100               	movlb	0	; () banked
  2567  001548  6F98               	movwf	(Mcp2515_Init@cmdMask4+3)& (0+255),b
  2568                           
  2569                           ; BSR set to: 0
  2570                           ;mcp2515.c: 110: }
  2571                           ;mcp2515.c: 111: Spi_Write(cmdMask4,sizeof(cmdMask4));
  2572                           
  2573                           ; BSR set to: 0
  2574  00154A  0E95               	movlw	low Mcp2515_Init@cmdMask4
  2575  00154C  0100               	movlb	0	; () banked
  2576  00154E  6F6C               	movwf	Spi_Write@tx& (0+255),b
  2577  001550  0E00               	movlw	high Mcp2515_Init@cmdMask4
  2578  001552  0100               	movlb	0	; () banked
  2579  001554  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  2580  001556  0E04               	movlw	4
  2581  001558  0100               	movlb	0	; () banked
  2582  00155A  6F6E               	movwf	Spi_Write@size& (0+255),b
  2583  00155C  0E00               	movlw	0
  2584  00155E  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  2585  001560  0E00               	movlw	0
  2586  001562  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  2587  001564  0E00               	movlw	0
  2588  001566  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  2589  001568  EC5E  F012         	call	_Spi_Write	;wreg free
  2590                           
  2591                           ;mcp2515.c: 115: cmdMask4[1] = 0x70;
  2592  00156C  0E70               	movlw	112
  2593  00156E  0100               	movlb	0	; () banked
  2594  001570  6F96               	movwf	(Mcp2515_Init@cmdMask4+1)& (0+255),b
  2595                           
  2596                           ; BSR set to: 0
  2597                           ;mcp2515.c: 116: cmdMask4[2] = 0x60;
  2598  001572  0E60               	movlw	96
  2599  001574  0100               	movlb	0	; () banked
  2600  001576  6F97               	movwf	(Mcp2515_Init@cmdMask4+2)& (0+255),b
  2601                           
  2602                           ; BSR set to: 0
  2603                           ;mcp2515.c: 117: if(filterCfg->ext == 0)
  2604  001578  0100               	movlb	0	; () banked
  2605  00157A  EE20 F020          	lfsr	2,32
  2606  00157E  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  2607  001580  26D9               	addwf	fsr2l,f,c
  2608  001582  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  2609  001584  22DA               	addwfc	fsr2h,f,c
  2610  001586  50DF               	movf	indf2,w,c
  2611  001588  A4D8               	btfss	status,2,c
  2612  00158A  D002               	goto	l2011
  2613                           
  2614                           ; BSR set to: 0
  2615                           ;mcp2515.c: 118: {
  2616                           ;mcp2515.c: 119: cmdMask4[3] = 0x20;
  2617  00158C  0E20               	movlw	32
  2618  00158E  D001               	goto	L2
  2619  001590                     l2011:
  2620                           
  2621                           ; BSR set to: 0
  2622                           ;mcp2515.c: 121: else
  2623                           ;mcp2515.c: 122: {
  2624                           ;mcp2515.c: 123: cmdMask4[3] = 0x40;
  2625  001590  0E40               	movlw	64
  2626  001592                     L2:
  2627  001592  0100               	movlb	0	; () banked
  2628  001594  6F98               	movwf	(Mcp2515_Init@cmdMask4+3)& (0+255),b
  2629                           
  2630                           ; BSR set to: 0
  2631                           ;mcp2515.c: 124: }
  2632                           ;mcp2515.c: 125: Spi_Write(cmdMask4,sizeof(cmdMask4));
  2633                           
  2634                           ; BSR set to: 0
  2635  001596  0E95               	movlw	low Mcp2515_Init@cmdMask4
  2636  001598  0100               	movlb	0	; () banked
  2637  00159A  6F6C               	movwf	Spi_Write@tx& (0+255),b
  2638  00159C  0E00               	movlw	high Mcp2515_Init@cmdMask4
  2639  00159E  0100               	movlb	0	; () banked
  2640  0015A0  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  2641  0015A2  0E04               	movlw	4
  2642  0015A4  0100               	movlb	0	; () banked
  2643  0015A6  6F6E               	movwf	Spi_Write@size& (0+255),b
  2644  0015A8  0E00               	movlw	0
  2645  0015AA  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  2646  0015AC  0E00               	movlw	0
  2647  0015AE  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  2648  0015B0  0E00               	movlw	0
  2649  0015B2  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  2650  0015B4  EC5E  F012         	call	_Spi_Write	;wreg free
  2651                           
  2652                           ;mcp2515.c: 129: cmdMask4[0] = 0x05;
  2653  0015B8  0E05               	movlw	5
  2654  0015BA  0100               	movlb	0	; () banked
  2655  0015BC  6F95               	movwf	Mcp2515_Init@cmdMask4& (0+255),b
  2656                           
  2657                           ; BSR set to: 0
  2658                           ;mcp2515.c: 130: cmdMask4[1] = 0x2B;
  2659  0015BE  0E2B               	movlw	43
  2660  0015C0  0100               	movlb	0	; () banked
  2661  0015C2  6F96               	movwf	(Mcp2515_Init@cmdMask4+1)& (0+255),b
  2662                           
  2663                           ; BSR set to: 0
  2664                           ;mcp2515.c: 131: cmdMask4[2] = 0x1F;
  2665  0015C4  0E1F               	movlw	31
  2666  0015C6  0100               	movlb	0	; () banked
  2667  0015C8  6F97               	movwf	(Mcp2515_Init@cmdMask4+2)& (0+255),b
  2668                           
  2669                           ; BSR set to: 0
  2670                           ;mcp2515.c: 132: cmdMask4[3] = 0x1F;
  2671  0015CA  0E1F               	movlw	31
  2672  0015CC  0100               	movlb	0	; () banked
  2673  0015CE  6F98               	movwf	(Mcp2515_Init@cmdMask4+3)& (0+255),b
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;mcp2515.c: 133: Spi_Write(cmdMask4,sizeof(cmdMask4));
  2677  0015D0  0E95               	movlw	low Mcp2515_Init@cmdMask4
  2678  0015D2  0100               	movlb	0	; () banked
  2679  0015D4  6F6C               	movwf	Spi_Write@tx& (0+255),b
  2680  0015D6  0E00               	movlw	high Mcp2515_Init@cmdMask4
  2681  0015D8  0100               	movlb	0	; () banked
  2682  0015DA  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  2683  0015DC  0E04               	movlw	4
  2684  0015DE  0100               	movlb	0	; () banked
  2685  0015E0  6F6E               	movwf	Spi_Write@size& (0+255),b
  2686  0015E2  0E00               	movlw	0
  2687  0015E4  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  2688  0015E6  0E00               	movlw	0
  2689  0015E8  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  2690  0015EA  0E00               	movlw	0
  2691  0015EC  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  2692  0015EE  EC5E  F012         	call	_Spi_Write	;wreg free
  2693                           
  2694                           ;mcp2515.c: 137: cmdMask4[0] = 0x05;
  2695  0015F2  0E05               	movlw	5
  2696  0015F4  0100               	movlb	0	; () banked
  2697  0015F6  6F95               	movwf	Mcp2515_Init@cmdMask4& (0+255),b
  2698                           
  2699                           ;mcp2515.c: 138: cmdMask4[1] = 0x0F;
  2700  0015F8  0E0F               	movlw	15
  2701  0015FA  0100               	movlb	0	; () banked
  2702  0015FC  6F96               	movwf	(Mcp2515_Init@cmdMask4+1)& (0+255),b
  2703                           
  2704                           ;mcp2515.c: 139: cmdMask4[2] = 0xE0;
  2705  0015FE  0EE0               	movlw	224
  2706  001600  0100               	movlb	0	; () banked
  2707  001602  6F97               	movwf	(Mcp2515_Init@cmdMask4+2)& (0+255),b
  2708                           
  2709                           ;mcp2515.c: 140: cmdMask4[3] = 0x00;
  2710  001604  0E00               	movlw	0
  2711  001606  0100               	movlb	0	; () banked
  2712  001608  6F98               	movwf	(Mcp2515_Init@cmdMask4+3)& (0+255),b
  2713                           
  2714                           ; BSR set to: 0
  2715                           ;mcp2515.c: 141: Spi_Write(cmdMask4,sizeof(cmdMask4));
  2716  00160A  0E95               	movlw	low Mcp2515_Init@cmdMask4
  2717  00160C  0100               	movlb	0	; () banked
  2718  00160E  6F6C               	movwf	Spi_Write@tx& (0+255),b
  2719  001610  0E00               	movlw	high Mcp2515_Init@cmdMask4
  2720  001612  0100               	movlb	0	; () banked
  2721  001614  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  2722  001616  0E04               	movlw	4
  2723  001618  0100               	movlb	0	; () banked
  2724  00161A  6F6E               	movwf	Spi_Write@size& (0+255),b
  2725  00161C  0E00               	movlw	0
  2726  00161E  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  2727  001620  0E00               	movlw	0
  2728  001622  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  2729  001624  0E00               	movlw	0
  2730  001626  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  2731  001628  EC5E  F012         	call	_Spi_Write	;wreg free
  2732  00162C  0012               	return		;funcret
  2733  00162E                     __end_of_Mcp2515_Init:
  2734                           	opt stack 0
  2735                           tblptru	equ	0xFF8
  2736                           tblptrh	equ	0xFF7
  2737                           tblptrl	equ	0xFF6
  2738                           tablat	equ	0xFF5
  2739                           prodh	equ	0xFF4
  2740                           prodl	equ	0xFF3
  2741                           intcon2	equ	0xFF1
  2742                           intcon3	equ	0xFF0
  2743                           postinc0	equ	0xFEE
  2744                           wreg	equ	0xFE8
  2745                           indf1	equ	0xFE7
  2746                           postinc1	equ	0xFE6
  2747                           postdec1	equ	0xFE5
  2748                           fsr1h	equ	0xFE2
  2749                           fsr1l	equ	0xFE1
  2750                           indf2	equ	0xFDF
  2751                           postinc2	equ	0xFDE
  2752                           fsr2h	equ	0xFDA
  2753                           fsr2l	equ	0xFD9
  2754                           status	equ	0xFD8
  2755                           
  2756 ;; *************** function _Mcp2515_Reset *****************
  2757 ;; Defined at:
  2758 ;;		line 21 in file "mcp2515.c"
  2759 ;; Parameters:    Size  Location     Type
  2760 ;;		None
  2761 ;; Auto vars:     Size  Location     Type
  2762 ;;  i               4   19[BANK0 ] unsigned long 
  2763 ;;  cmd             1   18[BANK0 ] unsigned char 
  2764 ;; Return value:  Size  Location     Type
  2765 ;;                  1    wreg      void 
  2766 ;; Registers used:
  2767 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2768 ;; Tracked objects:
  2769 ;;		On entry : 0/0
  2770 ;;		On exit  : 0/0
  2771 ;;		Unchanged: 0/0
  2772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2774 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2776 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2777 ;;Total ram usage:        5 bytes
  2778 ;; Hardware stack levels used:    1
  2779 ;; Hardware stack levels required when called:   10
  2780 ;; This function calls:
  2781 ;;		_Spi_Write
  2782 ;; This function is called by:
  2783 ;;		_Mcp2515_Init
  2784 ;; This function uses a non-reentrant model
  2785 ;;
  2786                           
  2787                           	psect	text7
  2788  0021D6                     __ptext7:
  2789                           	opt stack 0
  2790  0021D6                     _Mcp2515_Reset:
  2791                           	opt stack 17
  2792                           
  2793                           ;mcp2515.c: 23: uint32_t i;
  2794                           ;mcp2515.c: 24: uint8_t cmd = 0xC0;
  2795                           
  2796                           ;incstack = 0
  2797  0021D6  0EC0               	movlw	192
  2798  0021D8  0100               	movlb	0	; () banked
  2799  0021DA  6F72               	movwf	Mcp2515_Reset@cmd& (0+255),b
  2800                           
  2801                           ; BSR set to: 0
  2802                           ;mcp2515.c: 26: Spi_Write(&cmd,sizeof(cmd));
  2803  0021DC  0E72               	movlw	low Mcp2515_Reset@cmd
  2804  0021DE  0100               	movlb	0	; () banked
  2805  0021E0  6F6C               	movwf	Spi_Write@tx& (0+255),b
  2806  0021E2  0E00               	movlw	high Mcp2515_Reset@cmd
  2807  0021E4  0100               	movlb	0	; () banked
  2808  0021E6  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  2809  0021E8  0E01               	movlw	1
  2810  0021EA  0100               	movlb	0	; () banked
  2811  0021EC  6F6E               	movwf	Spi_Write@size& (0+255),b
  2812  0021EE  0E00               	movlw	0
  2813  0021F0  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  2814  0021F2  0E00               	movlw	0
  2815  0021F4  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  2816  0021F6  0E00               	movlw	0
  2817  0021F8  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  2818  0021FA  EC5E  F012         	call	_Spi_Write	;wreg free
  2819                           
  2820                           ;mcp2515.c: 27: for(i=0;i<10000;i++){}
  2821  0021FE  0E00               	movlw	0
  2822  002200  0100               	movlb	0	; () banked
  2823  002202  6F73               	movwf	Mcp2515_Reset@i& (0+255),b
  2824  002204  0E00               	movlw	0
  2825  002206  6F74               	movwf	(Mcp2515_Reset@i+1)& (0+255),b
  2826  002208  0E00               	movlw	0
  2827  00220A  6F75               	movwf	(Mcp2515_Reset@i+2)& (0+255),b
  2828  00220C  0E00               	movlw	0
  2829  00220E  6F76               	movwf	(Mcp2515_Reset@i+3)& (0+255),b
  2830  002210                     l1763:
  2831                           
  2832                           ; BSR set to: 0
  2833  002210  0100               	movlb	0	; () banked
  2834  002212  5176               	movf	(Mcp2515_Reset@i+3)& (0+255),w,b
  2835  002214  0100               	movlb	0	; () banked
  2836  002216  1175               	iorwf	(Mcp2515_Reset@i+2)& (0+255),w,b
  2837  002218  E110               	bnz	l247
  2838  00221A  0E10               	movlw	16
  2839  00221C  0100               	movlb	0	; () banked
  2840  00221E  5D73               	subwf	Mcp2515_Reset@i& (0+255),w,b
  2841  002220  0E27               	movlw	39
  2842  002222  0100               	movlb	0	; () banked
  2843  002224  5974               	subwfb	(Mcp2515_Reset@i+1)& (0+255),w,b
  2844  002226  B0D8               	btfsc	status,0,c
  2845  002228  0012               	return	
  2846                           
  2847                           ; BSR set to: 0
  2848                           
  2849                           ; BSR set to: 0
  2850                           
  2851                           ; BSR set to: 0
  2852  00222A  0E01               	movlw	1
  2853  00222C  0100               	movlb	0	; () banked
  2854  00222E  2773               	addwf	Mcp2515_Reset@i& (0+255),f,b
  2855  002230  0E00               	movlw	0
  2856  002232  2374               	addwfc	(Mcp2515_Reset@i+1)& (0+255),f,b
  2857  002234  2375               	addwfc	(Mcp2515_Reset@i+2)& (0+255),f,b
  2858  002236  2376               	addwfc	(Mcp2515_Reset@i+3)& (0+255),f,b
  2859  002238  D7EB               	goto	l1763
  2860  00223A                     l247:
  2861                           
  2862                           ; BSR set to: 0
  2863  00223A  0012               	return		;funcret
  2864  00223C                     __end_of_Mcp2515_Reset:
  2865                           	opt stack 0
  2866                           tblptru	equ	0xFF8
  2867                           tblptrh	equ	0xFF7
  2868                           tblptrl	equ	0xFF6
  2869                           tablat	equ	0xFF5
  2870                           prodh	equ	0xFF4
  2871                           prodl	equ	0xFF3
  2872                           intcon2	equ	0xFF1
  2873                           intcon3	equ	0xFF0
  2874                           postinc0	equ	0xFEE
  2875                           wreg	equ	0xFE8
  2876                           indf1	equ	0xFE7
  2877                           postinc1	equ	0xFE6
  2878                           postdec1	equ	0xFE5
  2879                           fsr1h	equ	0xFE2
  2880                           fsr1l	equ	0xFE1
  2881                           indf2	equ	0xFDF
  2882                           postinc2	equ	0xFDE
  2883                           fsr2h	equ	0xFDA
  2884                           fsr2l	equ	0xFD9
  2885                           status	equ	0xFD8
  2886                           
  2887 ;; *************** function _Mcp2515WriteCanId *****************
  2888 ;; Defined at:
  2889 ;;		line 233 in file "mcp2515.c"
  2890 ;; Parameters:    Size  Location     Type
  2891 ;;  mcp_addr        1    wreg     unsigned char 
  2892 ;;  ext             1   18[BANK0 ] unsigned char 
  2893 ;;  can_id          4   19[BANK0 ] unsigned long 
  2894 ;; Auto vars:     Size  Location     Type
  2895 ;;  mcp_addr        1   26[BANK0 ] unsigned char 
  2896 ;;  buf             6   27[BANK0 ] unsigned char [6]
  2897 ;;  canid           2   33[BANK0 ] unsigned int 
  2898 ;; Return value:  Size  Location     Type
  2899 ;;                  1    wreg      void 
  2900 ;; Registers used:
  2901 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2902 ;; Tracked objects:
  2903 ;;		On entry : 0/0
  2904 ;;		On exit  : 0/0
  2905 ;;		Unchanged: 0/0
  2906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2907 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2908 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2909 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2910 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2911 ;;Total ram usage:       17 bytes
  2912 ;; Hardware stack levels used:    1
  2913 ;; Hardware stack levels required when called:   10
  2914 ;; This function calls:
  2915 ;;		_Spi_Write
  2916 ;; This function is called by:
  2917 ;;		_Mcp2515_Init
  2918 ;; This function uses a non-reentrant model
  2919 ;;
  2920                           
  2921                           	psect	text8
  2922  001D30                     __ptext8:
  2923                           	opt stack 0
  2924  001D30                     _Mcp2515WriteCanId:
  2925                           	opt stack 17
  2926                           
  2927                           ; BSR set to: 0
  2928                           ;incstack = 0
  2929                           ;Mcp2515WriteCanId@mcp_addr stored from wreg
  2930  001D30  0100               	movlb	0	; () banked
  2931  001D32  6F7A               	movwf	Mcp2515WriteCanId@mcp_addr& (0+255),b
  2932                           
  2933                           ;mcp2515.c: 235: uint16_t canid;
  2934                           ;mcp2515.c: 236: uint8_t buf[6];
  2935                           ;mcp2515.c: 238: canid = (uint16_t)(can_id & 0x0FFFF);
  2936  001D34  C073  F081         	movff	Mcp2515WriteCanId@can_id,Mcp2515WriteCanId@canid
  2937  001D38  C074  F082         	movff	Mcp2515WriteCanId@can_id+1,Mcp2515WriteCanId@canid+1
  2938                           
  2939                           ;mcp2515.c: 240: buf[0] = 0x02;
  2940  001D3C  0E02               	movlw	2
  2941  001D3E  0100               	movlb	0	; () banked
  2942  001D40  6F7B               	movwf	Mcp2515WriteCanId@buf& (0+255),b
  2943                           
  2944                           ; BSR set to: 0
  2945                           ;mcp2515.c: 241: buf[1] = mcp_addr;
  2946  001D42  C07A  F07C         	movff	Mcp2515WriteCanId@mcp_addr,Mcp2515WriteCanId@buf+1
  2947                           
  2948                           ; BSR set to: 0
  2949                           ;mcp2515.c: 243: if ( ext == 1)
  2950  001D46  0100               	movlb	0	; () banked
  2951  001D48  0572               	decf	Mcp2515WriteCanId@ext& (0+255),w,b
  2952  001D4A  A4D8               	btfss	status,2,c
  2953  001D4C  D034               	goto	l1791
  2954                           
  2955                           ; BSR set to: 0
  2956                           ;mcp2515.c: 244: {
  2957                           ;mcp2515.c: 245: buf[3+2] = (uint8_t) (canid & 0xFF);
  2958  001D4E  C081  F080         	movff	Mcp2515WriteCanId@canid,Mcp2515WriteCanId@buf+5
  2959                           
  2960                           ; BSR set to: 0
  2961                           ;mcp2515.c: 246: buf[2+2] = (uint8_t) (canid >> 8);
  2962  001D52  0100               	movlb	0	; () banked
  2963  001D54  5182               	movf	(Mcp2515WriteCanId@canid+1)& (0+255),w,b
  2964  001D56  0100               	movlb	0	; () banked
  2965  001D58  6F7F               	movwf	(Mcp2515WriteCanId@buf+4)& (0+255),b
  2966                           
  2967                           ; BSR set to: 0
  2968                           ;mcp2515.c: 247: canid = (uint16_t)( can_id / 0x10000L );
  2969  001D5A  C075  F081         	movff	Mcp2515WriteCanId@can_id+2,Mcp2515WriteCanId@canid
  2970  001D5E  C076  F082         	movff	Mcp2515WriteCanId@can_id+3,Mcp2515WriteCanId@canid+1
  2971                           
  2972                           ; BSR set to: 0
  2973                           ;mcp2515.c: 248: buf[1+2] = (uint8_t) (canid & 0x03);
  2974  001D62  0100               	movlb	0	; () banked
  2975  001D64  5181               	movf	Mcp2515WriteCanId@canid& (0+255),w,b
  2976  001D66  0B03               	andlw	3
  2977  001D68  0100               	movlb	0	; () banked
  2978  001D6A  6F7E               	movwf	(Mcp2515WriteCanId@buf+3)& (0+255),b
  2979                           
  2980                           ; BSR set to: 0
  2981                           ;mcp2515.c: 249: buf[1+2] += (uint8_t) ((canid & 0x1C )*8);
  2982  001D6C  C081  F077         	movff	Mcp2515WriteCanId@canid,??_Mcp2515WriteCanId
  2983  001D70  0E1C               	movlw	28
  2984  001D72  0100               	movlb	0	; () banked
  2985  001D74  1777               	andwf	??_Mcp2515WriteCanId& (0+255),f,b
  2986  001D76  0100               	movlb	0	; () banked
  2987  001D78  90D8               	bcf	status,0,c
  2988  001D7A  3777               	rlcf	??_Mcp2515WriteCanId& (0+255),f,b
  2989  001D7C  0100               	movlb	0	; () banked
  2990  001D7E  90D8               	bcf	status,0,c
  2991  001D80  3777               	rlcf	??_Mcp2515WriteCanId& (0+255),f,b
  2992  001D82  0100               	movlb	0	; () banked
  2993  001D84  90D8               	bcf	status,0,c
  2994  001D86  3577               	rlcf	??_Mcp2515WriteCanId& (0+255),w,b
  2995  001D88  0100               	movlb	0	; () banked
  2996  001D8A  277E               	addwf	(Mcp2515WriteCanId@buf+3)& (0+255),f,b
  2997                           
  2998                           ; BSR set to: 0
  2999                           ;mcp2515.c: 250: buf[1+2] |= 0x08;
  3000  001D8C  0100               	movlb	0	; () banked
  3001  001D8E  877E               	bsf	(Mcp2515WriteCanId@buf+3)& (0+255),3,b
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;mcp2515.c: 251: buf[0+2] = (uint8_t) (canid / 32 );
  3005  001D90  C081  F077         	movff	Mcp2515WriteCanId@canid,??_Mcp2515WriteCanId
  3006  001D94  C082  F078         	movff	Mcp2515WriteCanId@canid+1,??_Mcp2515WriteCanId+1
  3007  001D98  0E05               	movlw	5
  3008  001D9A  0100               	movlb	0	; () banked
  3009  001D9C  6F79               	movwf	(??_Mcp2515WriteCanId+2)& (0+255),b
  3010  001D9E                     u825:
  3011  001D9E  0100               	movlb	0	; () banked
  3012  001DA0  90D8               	bcf	status,0,c
  3013  001DA2  3378               	rrcf	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  3014  001DA4  3377               	rrcf	??_Mcp2515WriteCanId& (0+255),f,b
  3015  001DA6  0100               	movlb	0	; () banked
  3016  001DA8  2F79               	decfsz	(??_Mcp2515WriteCanId+2)& (0+255),f,b
  3017  001DAA  D7F9               	goto	u825
  3018  001DAC  0100               	movlb	0	; () banked
  3019  001DAE  5177               	movf	??_Mcp2515WriteCanId& (0+255),w,b
  3020  001DB0  0100               	movlb	0	; () banked
  3021  001DB2  6F7D               	movwf	(Mcp2515WriteCanId@buf+2)& (0+255),b
  3022                           
  3023                           ;mcp2515.c: 252: }
  3024  001DB4  D02C               	goto	l1797
  3025  001DB6                     l1791:
  3026                           
  3027                           ; BSR set to: 0
  3028                           ;mcp2515.c: 254: else
  3029                           ;mcp2515.c: 255: {
  3030                           ;mcp2515.c: 256: buf[0+2] = (uint8_t) (canid >> 3);
  3031  001DB6  C081  F077         	movff	Mcp2515WriteCanId@canid,??_Mcp2515WriteCanId
  3032  001DBA  C082  F078         	movff	Mcp2515WriteCanId@canid+1,??_Mcp2515WriteCanId+1
  3033  001DBE  0100               	movlb	0	; () banked
  3034  001DC0  90D8               	bcf	status,0,c
  3035  001DC2  3378               	rrcf	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  3036  001DC4  3377               	rrcf	??_Mcp2515WriteCanId& (0+255),f,b
  3037  001DC6  0100               	movlb	0	; () banked
  3038  001DC8  90D8               	bcf	status,0,c
  3039  001DCA  3378               	rrcf	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  3040  001DCC  3377               	rrcf	??_Mcp2515WriteCanId& (0+255),f,b
  3041  001DCE  0100               	movlb	0	; () banked
  3042  001DD0  90D8               	bcf	status,0,c
  3043  001DD2  3378               	rrcf	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  3044  001DD4  3377               	rrcf	??_Mcp2515WriteCanId& (0+255),f,b
  3045  001DD6  0100               	movlb	0	; () banked
  3046  001DD8  5177               	movf	??_Mcp2515WriteCanId& (0+255),w,b
  3047  001DDA  0100               	movlb	0	; () banked
  3048  001DDC  6F7D               	movwf	(Mcp2515WriteCanId@buf+2)& (0+255),b
  3049                           
  3050                           ;mcp2515.c: 257: buf[1+2] = (uint8_t) ((canid & 0x07 )*32);
  3051  001DDE  C081  F077         	movff	Mcp2515WriteCanId@canid,??_Mcp2515WriteCanId
  3052  001DE2  0E07               	movlw	7
  3053  001DE4  0100               	movlb	0	; () banked
  3054  001DE6  1777               	andwf	??_Mcp2515WriteCanId& (0+255),f,b
  3055  001DE8  0E05               	movlw	5
  3056  001DEA  0100               	movlb	0	; () banked
  3057  001DEC  6F78               	movwf	(??_Mcp2515WriteCanId+1)& (0+255),b
  3058  001DEE                     u835:
  3059  001DEE  0100               	movlb	0	; () banked
  3060  001DF0  90D8               	bcf	status,0,c
  3061  001DF2  3777               	rlcf	??_Mcp2515WriteCanId& (0+255),f,b
  3062  001DF4  0100               	movlb	0	; () banked
  3063  001DF6  2F78               	decfsz	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  3064  001DF8  D7FA               	goto	u835
  3065  001DFA  0100               	movlb	0	; () banked
  3066  001DFC  5177               	movf	??_Mcp2515WriteCanId& (0+255),w,b
  3067  001DFE  0100               	movlb	0	; () banked
  3068  001E00  6F7E               	movwf	(Mcp2515WriteCanId@buf+3)& (0+255),b
  3069                           
  3070                           ; BSR set to: 0
  3071                           ;mcp2515.c: 258: buf[3+2] = 0;
  3072  001E02  0E00               	movlw	0
  3073  001E04  0100               	movlb	0	; () banked
  3074  001E06  6F80               	movwf	(Mcp2515WriteCanId@buf+5)& (0+255),b
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;mcp2515.c: 259: buf[2+2] = 0;
  3078  001E08  0E00               	movlw	0
  3079  001E0A  0100               	movlb	0	; () banked
  3080  001E0C  6F7F               	movwf	(Mcp2515WriteCanId@buf+4)& (0+255),b
  3081  001E0E                     l1797:
  3082                           
  3083                           ; BSR set to: 0
  3084                           ;mcp2515.c: 260: }
  3085                           ;mcp2515.c: 261: Spi_Write(buf,6);
  3086  001E0E  0E7B               	movlw	low Mcp2515WriteCanId@buf
  3087  001E10  0100               	movlb	0	; () banked
  3088  001E12  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3089  001E14  0E00               	movlw	high Mcp2515WriteCanId@buf
  3090  001E16  0100               	movlb	0	; () banked
  3091  001E18  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3092  001E1A  0E06               	movlw	6
  3093  001E1C  0100               	movlb	0	; () banked
  3094  001E1E  6F6E               	movwf	Spi_Write@size& (0+255),b
  3095  001E20  0E00               	movlw	0
  3096  001E22  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3097  001E24  0E00               	movlw	0
  3098  001E26  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3099  001E28  0E00               	movlw	0
  3100  001E2A  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3101  001E2C  EC5E  F012         	call	_Spi_Write	;wreg free
  3102  001E30  0012               	return		;funcret
  3103  001E32                     __end_of_Mcp2515WriteCanId:
  3104                           	opt stack 0
  3105                           tblptru	equ	0xFF8
  3106                           tblptrh	equ	0xFF7
  3107                           tblptrl	equ	0xFF6
  3108                           tablat	equ	0xFF5
  3109                           prodh	equ	0xFF4
  3110                           prodl	equ	0xFF3
  3111                           intcon2	equ	0xFF1
  3112                           intcon3	equ	0xFF0
  3113                           postinc0	equ	0xFEE
  3114                           wreg	equ	0xFE8
  3115                           indf1	equ	0xFE7
  3116                           postinc1	equ	0xFE6
  3117                           postdec1	equ	0xFE5
  3118                           fsr1h	equ	0xFE2
  3119                           fsr1l	equ	0xFE1
  3120                           indf2	equ	0xFDF
  3121                           postinc2	equ	0xFDE
  3122                           fsr2h	equ	0xFDA
  3123                           fsr2l	equ	0xFD9
  3124                           status	equ	0xFD8
  3125                           
  3126 ;; *************** function _Spi_Write *****************
  3127 ;; Defined at:
  3128 ;;		line 327 in file "can.c"
  3129 ;; Parameters:    Size  Location     Type
  3130 ;;  tx              2   12[BANK0 ] PTR unsigned char 
  3131 ;;		 -> Mcp2515WriteCanMsg@buf(10), Mcp2515WriteCanId@buf(6), Mcp2515Sleep@cmdMask4(3), Mcp2515_Init@cmdWrite3(3), 
  3132 ;;		 -> Mcp2515_Init@cmdMask4(4), Mcp2515_Reset@cmd(1), Can_SendMessage@buf(4), Can_ReadMessage@buf(4), 
  3133 ;;  size            4   14[BANK0 ] unsigned long 
  3134 ;; Auto vars:     Size  Location     Type
  3135 ;;		None
  3136 ;; Return value:  Size  Location     Type
  3137 ;;                  1    wreg      void 
  3138 ;; Registers used:
  3139 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3140 ;; Tracked objects:
  3141 ;;		On entry : 0/0
  3142 ;;		On exit  : 0/0
  3143 ;;		Unchanged: 0/0
  3144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3145 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3148 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3149 ;;Total ram usage:        6 bytes
  3150 ;; Hardware stack levels used:    1
  3151 ;; Hardware stack levels required when called:    9
  3152 ;; This function calls:
  3153 ;;		_SPIRW
  3154 ;; This function is called by:
  3155 ;;		_Mcp2515_Reset
  3156 ;;		_Mcp2515_Init
  3157 ;;		_Mcp2515WriteCanId
  3158 ;;		_Mcp2515Sleep
  3159 ;; This function uses a non-reentrant model
  3160 ;;
  3161                           
  3162                           	psect	text9
  3163  0024BC                     __ptext9:
  3164                           	opt stack 0
  3165  0024BC                     _Spi_Write:
  3166                           	opt stack 18
  3167                           
  3168                           ;can.c: 329: SPIRW(tx, 0, size);
  3169                           
  3170                           ;incstack = 0
  3171  0024BC  C06C  F060         	movff	Spi_Write@tx,SPIRW@tx
  3172  0024C0  C06D  F061         	movff	Spi_Write@tx+1,SPIRW@tx+1
  3173  0024C4  0E00               	movlw	0
  3174  0024C6  0100               	movlb	0	; () banked
  3175  0024C8  6F62               	movwf	SPIRW@rx& (0+255),b
  3176  0024CA  0E00               	movlw	0
  3177  0024CC  0100               	movlb	0	; () banked
  3178  0024CE  6F63               	movwf	(SPIRW@rx+1)& (0+255),b
  3179  0024D0  C06E  F064         	movff	Spi_Write@size,SPIRW@size
  3180  0024D4  C06F  F065         	movff	Spi_Write@size+1,SPIRW@size+1
  3181  0024D8  C070  F066         	movff	Spi_Write@size+2,SPIRW@size+2
  3182  0024DC  C071  F067         	movff	Spi_Write@size+3,SPIRW@size+3
  3183  0024E0  ECF5  F00F         	call	_SPIRW	;wreg free
  3184  0024E4  0012               	return		;funcret
  3185  0024E6                     __end_of_Spi_Write:
  3186                           	opt stack 0
  3187                           tblptru	equ	0xFF8
  3188                           tblptrh	equ	0xFF7
  3189                           tblptrl	equ	0xFF6
  3190                           tablat	equ	0xFF5
  3191                           prodh	equ	0xFF4
  3192                           prodl	equ	0xFF3
  3193                           intcon2	equ	0xFF1
  3194                           intcon3	equ	0xFF0
  3195                           postinc0	equ	0xFEE
  3196                           wreg	equ	0xFE8
  3197                           indf1	equ	0xFE7
  3198                           postinc1	equ	0xFE6
  3199                           postdec1	equ	0xFE5
  3200                           fsr1h	equ	0xFE2
  3201                           fsr1l	equ	0xFE1
  3202                           indf2	equ	0xFDF
  3203                           postinc2	equ	0xFDE
  3204                           fsr2h	equ	0xFDA
  3205                           fsr2l	equ	0xFD9
  3206                           status	equ	0xFD8
  3207                           
  3208 ;; *************** function _SPIRW *****************
  3209 ;; Defined at:
  3210 ;;		line 288 in file "can.c"
  3211 ;; Parameters:    Size  Location     Type
  3212 ;;  tx              2    0[BANK0 ] PTR const unsigned char 
  3213 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515WriteCanMsg@buf(10), Mcp2515WriteCanId@buf(6), Mcp2515ReadCanMsg@cmd(10),
      + 
  3214 ;;		 -> Mcp2515ReadCanId@msg(6), Mcp2515Sleep@cmdMask4(3), Mcp2515_Init@cmdWrite3(3), Mcp2515_Init@cmdMask4(4), 
  3215 ;;		 -> Mcp2515_Reset@cmd(1), Can_SendMessage@buf(4), Can_ReadMessage@buf(4), Can_GetStatus@msg4(4), 
  3216 ;;		 -> Can_GetStatus@msg(3), 
  3217 ;;  rx              2    2[BANK0 ] PTR unsigned char 
  3218 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515ReadCanMsg@cmd(10), Mcp2515ReadCanId@msg(6), Can_ReadMessage@buf(4), 
  3219 ;;		 -> Can_GetStatus@msg4(4), Can_GetStatus@msg(3), NULL(0), 
  3220 ;;  size            4    4[BANK0 ] unsigned long 
  3221 ;; Auto vars:     Size  Location     Type
  3222 ;;  i               4    8[BANK0 ] unsigned long 
  3223 ;; Return value:  Size  Location     Type
  3224 ;;                  1    wreg      void 
  3225 ;; Registers used:
  3226 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3227 ;; Tracked objects:
  3228 ;;		On entry : 0/0
  3229 ;;		On exit  : 0/0
  3230 ;;		Unchanged: 0/0
  3231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3232 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3233 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3235 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3236 ;;Total ram usage:       12 bytes
  3237 ;; Hardware stack levels used:    1
  3238 ;; Hardware stack levels required when called:    8
  3239 ;; This function calls:
  3240 ;;		Nothing
  3241 ;; This function is called by:
  3242 ;;		_Spi_Write
  3243 ;; This function uses a non-reentrant model
  3244 ;;
  3245                           
  3246                           	psect	text10
  3247  001FEA                     __ptext10:
  3248                           	opt stack 0
  3249  001FEA                     _SPIRW:
  3250                           	opt stack 18
  3251                           
  3252                           ;can.c: 290: uint32_t i;
  3253                           ;can.c: 292: SSPCON1 = 0b00111010;
  3254                           
  3255                           ;incstack = 0
  3256  001FEA  0E3A               	movlw	58
  3257  001FEC  6EC6               	movwf	4038,c	;volatile
  3258                           
  3259                           ;can.c: 294: LATD1 = 0;
  3260  001FEE  928C               	bcf	3980,1,c	;volatile
  3261                           
  3262                           ;can.c: 295: for(i=0;i<size;i++)
  3263  001FF0  0E00               	movlw	0
  3264  001FF2  0100               	movlb	0	; () banked
  3265  001FF4  6F68               	movwf	SPIRW@i& (0+255),b
  3266  001FF6  0E00               	movlw	0
  3267  001FF8  6F69               	movwf	(SPIRW@i+1)& (0+255),b
  3268  001FFA  0E00               	movlw	0
  3269  001FFC  6F6A               	movwf	(SPIRW@i+2)& (0+255),b
  3270  001FFE  0E00               	movlw	0
  3271  002000  6F6B               	movwf	(SPIRW@i+3)& (0+255),b
  3272  002002  D028               	goto	l1601
  3273  002004                     l1593:
  3274                           
  3275                           ; BSR set to: 0
  3276                           ;can.c: 296: {
  3277                           ;can.c: 297: SSPBUF = tx[i];
  3278  002004  0100               	movlb	0	; () banked
  3279  002006  5168               	movf	SPIRW@i& (0+255),w,b
  3280  002008  0100               	movlb	0	; () banked
  3281  00200A  2560               	addwf	SPIRW@tx& (0+255),w,b
  3282  00200C  6ED9               	movwf	fsr2l,c
  3283  00200E  0100               	movlb	0	; () banked
  3284  002010  5169               	movf	(SPIRW@i+1)& (0+255),w,b
  3285  002012  0100               	movlb	0	; () banked
  3286  002014  2161               	addwfc	(SPIRW@tx+1)& (0+255),w,b
  3287  002016  6EDA               	movwf	fsr2h,c
  3288  002018  50DF               	movf	indf2,w,c
  3289  00201A  6EC9               	movwf	4041,c	;volatile
  3290  00201C                     l188:
  3291  00201C  A69E               	btfss	3998,3,c	;volatile
  3292  00201E  D7FE               	goto	l188
  3293                           
  3294                           ;can.c: 299: SSP1IF = 0;
  3295  002020  969E               	bcf	3998,3,c	;volatile
  3296                           
  3297                           ;can.c: 300: if(rx != 0)
  3298  002022  0100               	movlb	0	; () banked
  3299  002024  5162               	movf	SPIRW@rx& (0+255),w,b
  3300  002026  0100               	movlb	0	; () banked
  3301  002028  1163               	iorwf	(SPIRW@rx+1)& (0+255),w,b
  3302  00202A  B4D8               	btfsc	status,2,c
  3303  00202C  D00C               	goto	l1599
  3304                           
  3305                           ; BSR set to: 0
  3306                           ;can.c: 301: rx[i] = SSPBUF;
  3307  00202E  0100               	movlb	0	; () banked
  3308  002030  5168               	movf	SPIRW@i& (0+255),w,b
  3309  002032  0100               	movlb	0	; () banked
  3310  002034  2562               	addwf	SPIRW@rx& (0+255),w,b
  3311  002036  6ED9               	movwf	fsr2l,c
  3312  002038  0100               	movlb	0	; () banked
  3313  00203A  5169               	movf	(SPIRW@i+1)& (0+255),w,b
  3314  00203C  0100               	movlb	0	; () banked
  3315  00203E  2163               	addwfc	(SPIRW@rx+1)& (0+255),w,b
  3316  002040  6EDA               	movwf	fsr2h,c
  3317  002042  CFC9 FFDF          	movff	4041,indf2	;volatile
  3318  002046                     l1599:
  3319                           
  3320                           ; BSR set to: 0
  3321  002046  0E01               	movlw	1
  3322  002048  0100               	movlb	0	; () banked
  3323  00204A  2768               	addwf	SPIRW@i& (0+255),f,b
  3324  00204C  0E00               	movlw	0
  3325  00204E  2369               	addwfc	(SPIRW@i+1)& (0+255),f,b
  3326  002050  236A               	addwfc	(SPIRW@i+2)& (0+255),f,b
  3327  002052  236B               	addwfc	(SPIRW@i+3)& (0+255),f,b
  3328  002054                     l1601:
  3329                           
  3330                           ; BSR set to: 0
  3331  002054  0100               	movlb	0	; () banked
  3332  002056  5164               	movf	SPIRW@size& (0+255),w,b
  3333  002058  0100               	movlb	0	; () banked
  3334  00205A  5D68               	subwf	SPIRW@i& (0+255),w,b
  3335  00205C  0100               	movlb	0	; () banked
  3336  00205E  5165               	movf	(SPIRW@size+1)& (0+255),w,b
  3337  002060  0100               	movlb	0	; () banked
  3338  002062  5969               	subwfb	(SPIRW@i+1)& (0+255),w,b
  3339  002064  0100               	movlb	0	; () banked
  3340  002066  5166               	movf	(SPIRW@size+2)& (0+255),w,b
  3341  002068  0100               	movlb	0	; () banked
  3342  00206A  596A               	subwfb	(SPIRW@i+2)& (0+255),w,b
  3343  00206C  0100               	movlb	0	; () banked
  3344  00206E  5167               	movf	(SPIRW@size+3)& (0+255),w,b
  3345  002070  0100               	movlb	0	; () banked
  3346  002072  596B               	subwfb	(SPIRW@i+3)& (0+255),w,b
  3347  002074  A0D8               	btfss	status,0,c
  3348  002076  D7C6               	goto	l1593
  3349                           
  3350                           ; BSR set to: 0
  3351                           ;can.c: 302: }
  3352                           ;can.c: 303: LATD1 = 1;
  3353  002078  828C               	bsf	3980,1,c	;volatile
  3354                           
  3355                           ; BSR set to: 0
  3356  00207A  0012               	return		;funcret
  3357  00207C                     __end_of_SPIRW:
  3358                           	opt stack 0
  3359                           tblptru	equ	0xFF8
  3360                           tblptrh	equ	0xFF7
  3361                           tblptrl	equ	0xFF6
  3362                           tablat	equ	0xFF5
  3363                           prodh	equ	0xFF4
  3364                           prodl	equ	0xFF3
  3365                           intcon2	equ	0xFF1
  3366                           intcon3	equ	0xFF0
  3367                           postinc0	equ	0xFEE
  3368                           wreg	equ	0xFE8
  3369                           indf1	equ	0xFE7
  3370                           postinc1	equ	0xFE6
  3371                           postdec1	equ	0xFE5
  3372                           fsr1h	equ	0xFE2
  3373                           fsr1l	equ	0xFE1
  3374                           indf2	equ	0xFDF
  3375                           postinc2	equ	0xFDE
  3376                           fsr2h	equ	0xFDA
  3377                           fsr2l	equ	0xFD9
  3378                           status	equ	0xFD8
  3379                           
  3380 ;; *************** function _high_isr *****************
  3381 ;; Defined at:
  3382 ;;		line 3 in file "interrupt.c"
  3383 ;; Parameters:    Size  Location     Type
  3384 ;;		None
  3385 ;; Auto vars:     Size  Location     Type
  3386 ;;		None
  3387 ;; Return value:  Size  Location     Type
  3388 ;;                  1    wreg      void 
  3389 ;; Registers used:
  3390 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3391 ;; Tracked objects:
  3392 ;;		On entry : 0/0
  3393 ;;		On exit  : 0/0
  3394 ;;		Unchanged: 0/0
  3395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3398 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3399 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3400 ;;Total ram usage:       14 bytes
  3401 ;; Hardware stack levels used:    1
  3402 ;; Hardware stack levels required when called:    7
  3403 ;; This function calls:
  3404 ;;		_Can_Isr
  3405 ;; This function is called by:
  3406 ;;		Interrupt level 2
  3407 ;; This function uses a non-reentrant model
  3408 ;;
  3409                           
  3410                           	psect	intcode
  3411  000008                     __pintcode:
  3412                           	opt stack 0
  3413  000008                     _high_isr:
  3414                           	opt stack 17
  3415                           
  3416                           ; BSR set to: 0
  3417                           ;incstack = 0
  3418  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3419  00000A  CFFA F04A          	movff	pclath,??_high_isr
  3420  00000E  CFFB F04B          	movff	pclatu,??_high_isr+1
  3421  000012  CFE9 F04C          	movff	fsr0l,??_high_isr+2
  3422  000016  CFEA F04D          	movff	fsr0h,??_high_isr+3
  3423  00001A  CFE1 F04E          	movff	fsr1l,??_high_isr+4
  3424  00001E  CFE2 F04F          	movff	fsr1h,??_high_isr+5
  3425  000022  CFD9 F050          	movff	fsr2l,??_high_isr+6
  3426  000026  CFDA F051          	movff	fsr2h,??_high_isr+7
  3427  00002A  CFF3 F052          	movff	prodl,??_high_isr+8
  3428  00002E  CFF4 F053          	movff	prodh,??_high_isr+9
  3429  000032  CFF6 F054          	movff	tblptrl,??_high_isr+10
  3430  000036  CFF7 F055          	movff	tblptrh,??_high_isr+11
  3431  00003A  CFF8 F056          	movff	tblptru,??_high_isr+12
  3432  00003E  CFF5 F057          	movff	tablat,??_high_isr+13
  3433                           
  3434                           ;interrupt.c: 4: if((INT3IF == 1)&&(INT3IE == 1))
  3435  000042  B4F0               	btfsc	intcon3,2,c	;volatile
  3436  000044  AAF0               	btfss	intcon3,5,c	;volatile
  3437  000046  D005               	goto	i2l234
  3438                           
  3439                           ;interrupt.c: 5: {
  3440                           ;interrupt.c: 6: INT3IF = 0;
  3441  000048  94F0               	bcf	intcon3,2,c	;volatile
  3442                           
  3443                           ;interrupt.c: 7: Can_Isr();
  3444  00004A  ECDC  F011         	call	_Can_Isr	;wreg free
  3445                           
  3446                           ;interrupt.c: 8: if(RB3 == 0)
  3447  00004E  A681               	btfss	3969,3,c	;volatile
  3448                           
  3449                           ;interrupt.c: 9: {
  3450                           ;interrupt.c: 10: INT3IF = 1;
  3451  000050  84F0               	bsf	intcon3,2,c	;volatile
  3452  000052                     i2l234:
  3453  000052  C057  FFF5         	movff	??_high_isr+13,tablat
  3454  000056  C056  FFF8         	movff	??_high_isr+12,tblptru
  3455  00005A  C055  FFF7         	movff	??_high_isr+11,tblptrh
  3456  00005E  C054  FFF6         	movff	??_high_isr+10,tblptrl
  3457  000062  C053  FFF4         	movff	??_high_isr+9,prodh
  3458  000066  C052  FFF3         	movff	??_high_isr+8,prodl
  3459  00006A  C051  FFDA         	movff	??_high_isr+7,fsr2h
  3460  00006E  C050  FFD9         	movff	??_high_isr+6,fsr2l
  3461  000072  C04F  FFE2         	movff	??_high_isr+5,fsr1h
  3462  000076  C04E  FFE1         	movff	??_high_isr+4,fsr1l
  3463  00007A  C04D  FFEA         	movff	??_high_isr+3,fsr0h
  3464  00007E  C04C  FFE9         	movff	??_high_isr+2,fsr0l
  3465  000082  C04B  FFFB         	movff	??_high_isr+1,pclatu
  3466  000086  C04A  FFFA         	movff	??_high_isr,pclath
  3467  00008A  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3468  00008C  0011               	retfie		f
  3469  00008E                     __end_of_high_isr:
  3470                           	opt stack 0
  3471                           pclatu	equ	0xFFB
  3472                           pclath	equ	0xFFA
  3473                           tblptru	equ	0xFF8
  3474                           tblptrh	equ	0xFF7
  3475                           tblptrl	equ	0xFF6
  3476                           tablat	equ	0xFF5
  3477                           prodh	equ	0xFF4
  3478                           prodl	equ	0xFF3
  3479                           intcon2	equ	0xFF1
  3480                           intcon3	equ	0xFF0
  3481                           postinc0	equ	0xFEE
  3482                           fsr0h	equ	0xFEA
  3483                           fsr0l	equ	0xFE9
  3484                           wreg	equ	0xFE8
  3485                           indf1	equ	0xFE7
  3486                           postinc1	equ	0xFE6
  3487                           postdec1	equ	0xFE5
  3488                           fsr1h	equ	0xFE2
  3489                           fsr1l	equ	0xFE1
  3490                           indf2	equ	0xFDF
  3491                           postinc2	equ	0xFDE
  3492                           fsr2h	equ	0xFDA
  3493                           fsr2l	equ	0xFD9
  3494                           status	equ	0xFD8
  3495                           
  3496 ;; *************** function _Can_Isr *****************
  3497 ;; Defined at:
  3498 ;;		line 50 in file "can.c"
  3499 ;; Parameters:    Size  Location     Type
  3500 ;;		None
  3501 ;; Auto vars:     Size  Location     Type
  3502 ;;  retCode         1   72[COMRAM] unsigned char 
  3503 ;; Return value:  Size  Location     Type
  3504 ;;                  1    wreg      void 
  3505 ;; Registers used:
  3506 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3507 ;; Tracked objects:
  3508 ;;		On entry : 0/0
  3509 ;;		On exit  : 0/0
  3510 ;;		Unchanged: 0/0
  3511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3513 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3514 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3515 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3516 ;;Total ram usage:        2 bytes
  3517 ;; Hardware stack levels used:    1
  3518 ;; Hardware stack levels required when called:    6
  3519 ;; This function calls:
  3520 ;;		_Can_GetStatus
  3521 ;;		_Can_OutBufferStatus
  3522 ;;		_Can_ReadInBuffer
  3523 ;;		_Can_WriteOutBuffer
  3524 ;; This function is called by:
  3525 ;;		_high_isr
  3526 ;; This function uses a non-reentrant model
  3527 ;;
  3528                           
  3529                           	psect	text12
  3530  0023B8                     __ptext12:
  3531                           	opt stack 0
  3532  0023B8                     _Can_Isr:
  3533                           	opt stack 17
  3534                           
  3535                           ;can.c: 52: static uint8_t nbTxBuf=3;
  3536                           ;can.c: 53: uint8_t retCode;
  3537                           ;can.c: 55: retCode = Can_GetStatus();
  3538                           
  3539                           ;incstack = 0
  3540  0023B8  EC81  F011         	call	_Can_GetStatus	;wreg free
  3541  0023BC  6E49               	movwf	Can_Isr@retCode,c
  3542                           
  3543                           ;can.c: 57: if((retCode & 0x03) != 0)
  3544  0023BE  C049  F048         	movff	Can_Isr@retCode,??_Can_Isr
  3545  0023C2  0E03               	movlw	3
  3546  0023C4  1648               	andwf	??_Can_Isr,f,c
  3547  0023C6  A4D8               	btfss	status,2,c
  3548                           
  3549                           ;can.c: 58: {
  3550                           ;can.c: 59: Can_ReadInBuffer();
  3551  0023C8  EC00  F012         	call	_Can_ReadInBuffer	;wreg free
  3552                           
  3553                           ;can.c: 60: }
  3554                           ;can.c: 62: if((retCode & 0x1C) != 0)
  3555  0023CC  C049  F048         	movff	Can_Isr@retCode,??_Can_Isr
  3556  0023D0  0E1C               	movlw	28
  3557  0023D2  1648               	andwf	??_Can_Isr,f,c
  3558  0023D4  B4D8               	btfsc	status,2,c
  3559  0023D6  D00B               	goto	i2l2131
  3560                           
  3561                           ;can.c: 63: {
  3562                           ;can.c: 64: if((retCode & 0x10) != 0)
  3563  0023D8  B849               	btfsc	Can_Isr@retCode,4,c
  3564                           
  3565                           ;can.c: 65: {
  3566                           ;can.c: 66: nbTxBuf++;
  3567  0023DA  2A5E               	incf	Can_Isr@nbTxBuf,f,c
  3568                           
  3569                           ;can.c: 67: }
  3570                           ;can.c: 68: if((retCode & 0x08) != 0)
  3571  0023DC  B649               	btfsc	Can_Isr@retCode,3,c
  3572                           
  3573                           ;can.c: 69: {
  3574                           ;can.c: 70: nbTxBuf++;
  3575  0023DE  2A5E               	incf	Can_Isr@nbTxBuf,f,c
  3576                           
  3577                           ;can.c: 71: }
  3578                           ;can.c: 72: if((retCode & 0x04) != 0)
  3579  0023E0  A449               	btfss	Can_Isr@retCode,2,c
  3580  0023E2  D005               	goto	i2l2131
  3581                           
  3582                           ;can.c: 73: {
  3583                           ;can.c: 74: nbTxBuf++;
  3584  0023E4  2A5E               	incf	Can_Isr@nbTxBuf,f,c
  3585                           
  3586                           ;can.c: 75: }
  3587                           ;can.c: 76: }
  3588                           ;can.c: 78: while((Can_OutBufferStatus() != 0) && (nbTxBuf != 0))
  3589  0023E6  D003               	goto	i2l2131
  3590  0023E8                     i2l2127:
  3591                           
  3592                           ;can.c: 79: {
  3593                           ;can.c: 80: Can_WriteOutBuffer();
  3594  0023E8  EC99  F012         	call	_Can_WriteOutBuffer	;wreg free
  3595                           
  3596                           ;can.c: 81: nbTxBuf--;
  3597  0023EC  065E               	decf	Can_Isr@nbTxBuf,f,c
  3598  0023EE                     i2l2131:
  3599  0023EE  ECB9  F012         	call	_Can_OutBufferStatus	;wreg free
  3600  0023F2  0900               	iorlw	0
  3601  0023F4  B4D8               	btfsc	status,2,c
  3602  0023F6  0012               	return	
  3603  0023F8  505E               	movf	Can_Isr@nbTxBuf,w,c
  3604  0023FA  B4D8               	btfsc	status,2,c
  3605  0023FC  0012               	return	
  3606  0023FE  D7F4               	goto	i2l2127
  3607  002400                     __end_of_Can_Isr:
  3608                           	opt stack 0
  3609                           pclatu	equ	0xFFB
  3610                           pclath	equ	0xFFA
  3611                           tblptru	equ	0xFF8
  3612                           tblptrh	equ	0xFF7
  3613                           tblptrl	equ	0xFF6
  3614                           tablat	equ	0xFF5
  3615                           prodh	equ	0xFF4
  3616                           prodl	equ	0xFF3
  3617                           intcon2	equ	0xFF1
  3618                           intcon3	equ	0xFF0
  3619                           postinc0	equ	0xFEE
  3620                           fsr0h	equ	0xFEA
  3621                           fsr0l	equ	0xFE9
  3622                           wreg	equ	0xFE8
  3623                           indf1	equ	0xFE7
  3624                           postinc1	equ	0xFE6
  3625                           postdec1	equ	0xFE5
  3626                           fsr1h	equ	0xFE2
  3627                           fsr1l	equ	0xFE1
  3628                           indf2	equ	0xFDF
  3629                           postinc2	equ	0xFDE
  3630                           fsr2h	equ	0xFDA
  3631                           fsr2l	equ	0xFD9
  3632                           status	equ	0xFD8
  3633                           
  3634 ;; *************** function _Can_WriteOutBuffer *****************
  3635 ;; Defined at:
  3636 ;;		line 127 in file "can.c"
  3637 ;; Parameters:    Size  Location     Type
  3638 ;;		None
  3639 ;; Auto vars:     Size  Location     Type
  3640 ;;		None
  3641 ;; Return value:  Size  Location     Type
  3642 ;;                  1    wreg      unsigned char 
  3643 ;; Registers used:
  3644 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3645 ;; Tracked objects:
  3646 ;;		On entry : 0/0
  3647 ;;		On exit  : 0/0
  3648 ;;		Unchanged: 0/0
  3649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3654 ;;Total ram usage:        0 bytes
  3655 ;; Hardware stack levels used:    1
  3656 ;; Hardware stack levels required when called:    5
  3657 ;; This function calls:
  3658 ;;		_Can_SendMessage
  3659 ;; This function is called by:
  3660 ;;		_Can_Isr
  3661 ;; This function uses a non-reentrant model
  3662 ;;
  3663                           
  3664                           	psect	text13
  3665  002532                     __ptext13:
  3666                           	opt stack 0
  3667  002532                     _Can_WriteOutBuffer:
  3668                           	opt stack 17
  3669                           
  3670                           ;can.c: 129: Can_SendMessage(&txBuffer[txBufferPtrOut]);
  3671                           
  3672                           ;incstack = 0
  3673  002532  505B               	movf	_txBufferPtrOut,w,c
  3674  002534  0D11               	mullw	17
  3675  002536  0E00               	movlw	low _txBuffer
  3676  002538  24F3               	addwf	prodl,w,c
  3677  00253A  6E36               	movwf	Can_SendMessage@msg,c
  3678  00253C  0E01               	movlw	high _txBuffer
  3679  00253E  20F4               	addwfc	prodh,w,c
  3680  002540  6E37               	movwf	Can_SendMessage@msg+1,c
  3681  002542  EC1E  F011         	call	_Can_SendMessage	;wreg free
  3682                           
  3683                           ;can.c: 130: txBufferPtrOut = (txBufferPtrOut + 1) % 4;
  3684  002546  285B               	incf	_txBufferPtrOut,w,c
  3685  002548  0B03               	andlw	3
  3686  00254A  6E5B               	movwf	_txBufferPtrOut,c
  3687                           
  3688                           ;can.c: 131: txBufferCount--;
  3689  00254C  0100               	movlb	0	; () banked
  3690  00254E  07A8               	decf	_txBufferCount& (0+255),f,b
  3691  002550  0012               	return	
  3692  002552                     __end_of_Can_WriteOutBuffer:
  3693                           	opt stack 0
  3694                           pclatu	equ	0xFFB
  3695                           pclath	equ	0xFFA
  3696                           tblptru	equ	0xFF8
  3697                           tblptrh	equ	0xFF7
  3698                           tblptrl	equ	0xFF6
  3699                           tablat	equ	0xFF5
  3700                           prodh	equ	0xFF4
  3701                           prodl	equ	0xFF3
  3702                           intcon2	equ	0xFF1
  3703                           intcon3	equ	0xFF0
  3704                           postinc0	equ	0xFEE
  3705                           fsr0h	equ	0xFEA
  3706                           fsr0l	equ	0xFE9
  3707                           wreg	equ	0xFE8
  3708                           indf1	equ	0xFE7
  3709                           postinc1	equ	0xFE6
  3710                           postdec1	equ	0xFE5
  3711                           fsr1h	equ	0xFE2
  3712                           fsr1l	equ	0xFE1
  3713                           indf2	equ	0xFDF
  3714                           postinc2	equ	0xFDE
  3715                           fsr2h	equ	0xFDA
  3716                           fsr2l	equ	0xFD9
  3717                           status	equ	0xFD8
  3718                           
  3719 ;; *************** function _Can_SendMessage *****************
  3720 ;; Defined at:
  3721 ;;		line 421 in file "can.c"
  3722 ;; Parameters:    Size  Location     Type
  3723 ;;  msg             2   53[COMRAM] PTR const struct CANMESS
  3724 ;;		 -> txBuffer(68), 
  3725 ;; Auto vars:     Size  Location     Type
  3726 ;;  buf             4   55[COMRAM] unsigned char [4]
  3727 ;;  txbuf_n         1   60[COMRAM] unsigned char 
  3728 ;;  res             1   59[COMRAM] unsigned char 
  3729 ;; Return value:  Size  Location     Type
  3730 ;;                  1    wreg      unsigned char 
  3731 ;; Registers used:
  3732 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3733 ;; Tracked objects:
  3734 ;;		On entry : 0/0
  3735 ;;		On exit  : 0/0
  3736 ;;		Unchanged: 0/0
  3737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3738 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3739 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3741 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3742 ;;Total ram usage:        8 bytes
  3743 ;; Hardware stack levels used:    1
  3744 ;; Hardware stack levels required when called:    4
  3745 ;; This function calls:
  3746 ;;		_Mcp2515GetNextFreeTXBuf
  3747 ;;		_Mcp2515WriteCanMsg
  3748 ;;		i2_Spi_Write
  3749 ;; This function is called by:
  3750 ;;		_Can_WriteOutBuffer
  3751 ;; This function uses a non-reentrant model
  3752 ;;
  3753                           
  3754                           	psect	text14
  3755  00223C                     __ptext14:
  3756                           	opt stack 0
  3757  00223C                     _Can_SendMessage:
  3758                           	opt stack 17
  3759  00223C                     
  3760                           ;can.c: 428: {
  3761                           ;can.c: 429: res = Mcp2515GetNextFreeTXBuf(&txbuf_n);
  3762  00223C  0E3D               	movlw	low Can_SendMessage@txbuf_n
  3763  00223E  6E13               	movwf	Mcp2515GetNextFreeTXBuf@txbuf_n,c
  3764  002240  0E00               	movlw	high Can_SendMessage@txbuf_n
  3765  002242  6E14               	movwf	Mcp2515GetNextFreeTXBuf@txbuf_n+1,c
  3766  002244  EC3E  F010         	call	_Mcp2515GetNextFreeTXBuf	;wreg free
  3767  002248  6E3C               	movwf	Can_SendMessage@res,c
  3768                           
  3769                           ;can.c: 431: } while (res == (2));
  3770  00224A  0E02               	movlw	2
  3771  00224C  183C               	xorwf	Can_SendMessage@res,w,c
  3772  00224E  B4D8               	btfsc	status,2,c
  3773  002250  D7F5               	goto	i2l1911
  3774                           
  3775                           ;can.c: 433: if (res != (2))
  3776  002252  0E02               	movlw	2
  3777  002254  183C               	xorwf	Can_SendMessage@res,w,c
  3778  002256  B4D8               	btfsc	status,2,c
  3779  002258  0012               	return	
  3780                           
  3781                           ;can.c: 434: {
  3782                           ;can.c: 435: Mcp2515WriteCanMsg( txbuf_n, msg);
  3783  00225A  C036  F024         	movff	Can_SendMessage@msg,Mcp2515WriteCanMsg@msg
  3784  00225E  C037  F025         	movff	Can_SendMessage@msg+1,Mcp2515WriteCanMsg@msg+1
  3785  002262  503D               	movf	Can_SendMessage@txbuf_n,w,c
  3786  002264  EC7D  F00D         	call	_Mcp2515WriteCanMsg
  3787                           
  3788                           ;can.c: 436: buf[0] = 0x02;
  3789  002268  0E02               	movlw	2
  3790  00226A  6E38               	movwf	Can_SendMessage@buf,c
  3791                           
  3792                           ;can.c: 437: buf[1] = txbuf_n-1;
  3793  00226C  043D               	decf	Can_SendMessage@txbuf_n,w,c
  3794  00226E  6E39               	movwf	Can_SendMessage@buf+1,c
  3795                           
  3796                           ;can.c: 438: buf[2] = 0x08 | msg->txPrio;
  3797  002270  EE20 F010          	lfsr	2,16
  3798  002274  5036               	movf	Can_SendMessage@msg,w,c
  3799  002276  26D9               	addwf	fsr2l,f,c
  3800  002278  5037               	movf	Can_SendMessage@msg+1,w,c
  3801  00227A  22DA               	addwfc	fsr2h,f,c
  3802  00227C  50DF               	movf	indf2,w,c
  3803  00227E  0908               	iorlw	8
  3804  002280  6E3A               	movwf	Can_SendMessage@buf+2,c
  3805                           
  3806                           ;can.c: 439: Spi_Write(buf,3);
  3807  002282  0E38               	movlw	low Can_SendMessage@buf
  3808  002284  6E0D               	movwf	i2Spi_Write@tx,c
  3809  002286  0E00               	movlw	high Can_SendMessage@buf
  3810  002288  6E0E               	movwf	i2Spi_Write@tx+1,c
  3811  00228A  0E03               	movlw	3
  3812  00228C  6E0F               	movwf	i2Spi_Write@size,c
  3813  00228E  0E00               	movlw	0
  3814  002290  6E10               	movwf	i2Spi_Write@size+1,c
  3815  002292  0E00               	movlw	0
  3816  002294  6E11               	movwf	i2Spi_Write@size+2,c
  3817  002296  0E00               	movlw	0
  3818  002298  6E12               	movwf	i2Spi_Write@size+3,c
  3819  00229A  EC73  F012         	call	i2_Spi_Write	;wreg free
  3820                           
  3821                           ;can.c: 442: else
  3822                           ;can.c: 443: {
  3823                           ;can.c: 444: return (2);
  3824                           ;	Return value of _Can_SendMessage is never used
  3825                           
  3826                           ;can.c: 441: }
  3827                           
  3828                           ;can.c: 440: return (0);
  3829                           ;	Return value of _Can_SendMessage is never used
  3830  00229E  0012               	return	
  3831  0022A0                     __end_of_Can_SendMessage:
  3832                           	opt stack 0
  3833                           pclatu	equ	0xFFB
  3834                           pclath	equ	0xFFA
  3835                           tblptru	equ	0xFF8
  3836                           tblptrh	equ	0xFF7
  3837                           tblptrl	equ	0xFF6
  3838                           tablat	equ	0xFF5
  3839                           prodh	equ	0xFF4
  3840                           prodl	equ	0xFF3
  3841                           intcon2	equ	0xFF1
  3842                           intcon3	equ	0xFF0
  3843                           postinc0	equ	0xFEE
  3844                           fsr0h	equ	0xFEA
  3845                           fsr0l	equ	0xFE9
  3846                           wreg	equ	0xFE8
  3847                           indf1	equ	0xFE7
  3848                           postinc1	equ	0xFE6
  3849                           postdec1	equ	0xFE5
  3850                           fsr1h	equ	0xFE2
  3851                           fsr1l	equ	0xFE1
  3852                           indf2	equ	0xFDF
  3853                           postinc2	equ	0xFDE
  3854                           fsr2h	equ	0xFDA
  3855                           fsr2l	equ	0xFD9
  3856                           status	equ	0xFD8
  3857                           
  3858 ;; *************** function _Mcp2515WriteCanMsg *****************
  3859 ;; Defined at:
  3860 ;;		line 272 in file "mcp2515.c"
  3861 ;; Parameters:    Size  Location     Type
  3862 ;;  buffer_sidh_    1    wreg     const unsigned char 
  3863 ;;  msg             2   35[COMRAM] PTR const struct CANMESS
  3864 ;;		 -> txBuffer(68), 
  3865 ;; Auto vars:     Size  Location     Type
  3866 ;;  buffer_sidh_    1   49[COMRAM] const unsigned char 
  3867 ;;  buf            10   39[COMRAM] unsigned char [10]
  3868 ;;  i               1   52[COMRAM] unsigned char 
  3869 ;;  mcp_addr        1   51[COMRAM] unsigned char 
  3870 ;;  dlc             1   50[COMRAM] unsigned char 
  3871 ;; Return value:  Size  Location     Type
  3872 ;;                  1    wreg      void 
  3873 ;; Registers used:
  3874 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3875 ;; Tracked objects:
  3876 ;;		On entry : 0/0
  3877 ;;		On exit  : 0/0
  3878 ;;		Unchanged: 0/0
  3879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3880 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3881 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3882 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3883 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3884 ;;Total ram usage:       18 bytes
  3885 ;; Hardware stack levels used:    1
  3886 ;; Hardware stack levels required when called:    3
  3887 ;; This function calls:
  3888 ;;		i2_Mcp2515WriteCanId
  3889 ;;		i2_Spi_Write
  3890 ;; This function is called by:
  3891 ;;		_Can_SendMessage
  3892 ;; This function uses a non-reentrant model
  3893 ;;
  3894                           
  3895                           	psect	text15
  3896  001AFA                     __ptext15:
  3897                           	opt stack 0
  3898  001AFA                     _Mcp2515WriteCanMsg:
  3899                           	opt stack 17
  3900                           
  3901                           ;incstack = 0
  3902                           ;Mcp2515WriteCanMsg@buffer_sidh_addr stored from wreg
  3903  001AFA  6E32               	movwf	Mcp2515WriteCanMsg@buffer_sidh_addr,c
  3904                           
  3905                           ;mcp2515.c: 275: uint8_t mcp_addr, i, dlc;
  3906                           ;mcp2515.c: 276: uint8_t buf[10];
  3907                           ;mcp2515.c: 277: mcp_addr = buffer_sidh_addr;
  3908  001AFC  C032  F034         	movff	Mcp2515WriteCanMsg@buffer_sidh_addr,Mcp2515WriteCanMsg@mcp_addr
  3909                           
  3910                           ;mcp2515.c: 279: buf[0] = 0x02;
  3911  001B00  0E02               	movlw	2
  3912  001B02  6E28               	movwf	Mcp2515WriteCanMsg@buf,c
  3913                           
  3914                           ;mcp2515.c: 280: buf[1] = mcp_addr+5;
  3915  001B04  5034               	movf	Mcp2515WriteCanMsg@mcp_addr,w,c
  3916  001B06  0F05               	addlw	5
  3917  001B08  6E29               	movwf	Mcp2515WriteCanMsg@buf+1,c
  3918                           
  3919                           ;mcp2515.c: 282: for(i=0;i<msg->dlc;i++)
  3920  001B0A  0E00               	movlw	0
  3921  001B0C  6E35               	movwf	Mcp2515WriteCanMsg@i,c
  3922  001B0E  D01C               	goto	i2l1739
  3923  001B10                     i2l1735:
  3924                           
  3925                           ;mcp2515.c: 283: {
  3926                           ;mcp2515.c: 284: buf[i+2] = msg->dta[i];
  3927  001B10  5035               	movf	Mcp2515WriteCanMsg@i,w,c
  3928  001B12  0D01               	mullw	1
  3929  001B14  0E06               	movlw	6
  3930  001B16  26F3               	addwf	prodl,f,c
  3931  001B18  0E00               	movlw	0
  3932  001B1A  22F4               	addwfc	prodh,f,c
  3933  001B1C  50F3               	movf	prodl,w,c
  3934  001B1E  2424               	addwf	Mcp2515WriteCanMsg@msg,w,c
  3935  001B20  6ED9               	movwf	fsr2l,c
  3936  001B22  50F4               	movf	prodh,w,c
  3937  001B24  2025               	addwfc	Mcp2515WriteCanMsg@msg+1,w,c
  3938  001B26  6EDA               	movwf	fsr2h,c
  3939  001B28  5035               	movf	Mcp2515WriteCanMsg@i,w,c
  3940  001B2A  6E26               	movwf	??_Mcp2515WriteCanMsg& (0+255),c
  3941  001B2C  6A27               	clrf	(??_Mcp2515WriteCanMsg+1)& (0+255),c
  3942  001B2E  0E02               	movlw	2
  3943  001B30  2626               	addwf	??_Mcp2515WriteCanMsg,f,c
  3944  001B32  0E00               	movlw	0
  3945  001B34  2227               	addwfc	??_Mcp2515WriteCanMsg+1,f,c
  3946  001B36  0E28               	movlw	low Mcp2515WriteCanMsg@buf
  3947  001B38  2426               	addwf	??_Mcp2515WriteCanMsg,w,c
  3948  001B3A  6EE1               	movwf	fsr1l,c
  3949  001B3C  0E00               	movlw	high Mcp2515WriteCanMsg@buf
  3950  001B3E  2027               	addwfc	??_Mcp2515WriteCanMsg+1,w,c
  3951  001B40  6EE2               	movwf	fsr1h,c
  3952  001B42  CFDF FFE7          	movff	indf2,indf1
  3953  001B46  2A35               	incf	Mcp2515WriteCanMsg@i,f,c
  3954  001B48                     i2l1739:
  3955  001B48  EE20 F005          	lfsr	2,5
  3956  001B4C  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  3957  001B4E  26D9               	addwf	fsr2l,f,c
  3958  001B50  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  3959  001B52  22DA               	addwfc	fsr2h,f,c
  3960  001B54  50DE               	movf	postinc2,w,c
  3961  001B56  5C35               	subwf	Mcp2515WriteCanMsg@i,w,c
  3962  001B58  A0D8               	btfss	status,0,c
  3963  001B5A  D7DA               	goto	i2l1735
  3964                           
  3965                           ;mcp2515.c: 285: }
  3966                           ;mcp2515.c: 286: Spi_Write(buf,msg->dlc + 2);
  3967  001B5C  0E28               	movlw	low Mcp2515WriteCanMsg@buf
  3968  001B5E  6E0D               	movwf	i2Spi_Write@tx,c
  3969  001B60  0E00               	movlw	high Mcp2515WriteCanMsg@buf
  3970  001B62  6E0E               	movwf	i2Spi_Write@tx+1,c
  3971  001B64  EE20 F005          	lfsr	2,5
  3972  001B68  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  3973  001B6A  26D9               	addwf	fsr2l,f,c
  3974  001B6C  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  3975  001B6E  22DA               	addwfc	fsr2h,f,c
  3976  001B70  50DF               	movf	indf2,w,c
  3977  001B72  6E26               	movwf	??_Mcp2515WriteCanMsg& (0+255),c
  3978  001B74  6A27               	clrf	(??_Mcp2515WriteCanMsg+1)& (0+255),c
  3979  001B76  0E02               	movlw	2
  3980  001B78  2626               	addwf	??_Mcp2515WriteCanMsg,f,c
  3981  001B7A  0E00               	movlw	0
  3982  001B7C  2227               	addwfc	??_Mcp2515WriteCanMsg+1,f,c
  3983  001B7E  C026  F00F         	movff	??_Mcp2515WriteCanMsg,i2Spi_Write@size
  3984  001B82  C027  F010         	movff	??_Mcp2515WriteCanMsg+1,i2Spi_Write@size+1
  3985  001B86  0E00               	movlw	0
  3986  001B88  BE10               	btfsc	i2Spi_Write@size+1,7,c
  3987  001B8A  0EFF               	movlw	-1
  3988  001B8C  6E11               	movwf	i2Spi_Write@size+2,c
  3989  001B8E  6E12               	movwf	i2Spi_Write@size+3,c
  3990  001B90  EC73  F012         	call	i2_Spi_Write	;wreg free
  3991                           
  3992                           ;mcp2515.c: 288: Mcp2515WriteCanId( mcp_addr,
  3993                           ;mcp2515.c: 289: msg->extended_identifier,
  3994                           ;mcp2515.c: 290: msg->identifier );
  3995  001B94  C024  FFD9         	movff	Mcp2515WriteCanMsg@msg,fsr2l
  3996  001B98  C025  FFDA         	movff	Mcp2515WriteCanMsg@msg+1,fsr2h
  3997  001B9C  50DF               	movf	indf2,w,c
  3998  001B9E  6E13               	movwf	i2Mcp2515WriteCanId@ext,c
  3999  001BA0  EE20 F001          	lfsr	2,1
  4000  001BA4  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  4001  001BA6  26D9               	addwf	fsr2l,f,c
  4002  001BA8  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  4003  001BAA  22DA               	addwfc	fsr2h,f,c
  4004  001BAC  CFDE F014          	movff	postinc2,i2Mcp2515WriteCanId@can_id
  4005  001BB0  CFDE F015          	movff	postinc2,i2Mcp2515WriteCanId@can_id+1
  4006  001BB4  CFDE F016          	movff	postinc2,i2Mcp2515WriteCanId@can_id+2
  4007  001BB8  CFDE F017          	movff	postinc2,i2Mcp2515WriteCanId@can_id+3
  4008  001BBC  5034               	movf	Mcp2515WriteCanMsg@mcp_addr,w,c
  4009  001BBE  EC96  F00F         	call	i2_Mcp2515WriteCanId
  4010                           
  4011                           ;mcp2515.c: 291: dlc = msg->dlc;
  4012  001BC2  EE20 F005          	lfsr	2,5
  4013  001BC6  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  4014  001BC8  26D9               	addwf	fsr2l,f,c
  4015  001BCA  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  4016  001BCC  22DA               	addwfc	fsr2h,f,c
  4017  001BCE  50DF               	movf	indf2,w,c
  4018  001BD0  6E33               	movwf	Mcp2515WriteCanMsg@dlc,c
  4019                           
  4020                           ;mcp2515.c: 293: if ( msg->rtr == 1)
  4021  001BD2  EE20 F00E          	lfsr	2,14
  4022  001BD6  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  4023  001BD8  26D9               	addwf	fsr2l,f,c
  4024  001BDA  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  4025  001BDC  22DA               	addwfc	fsr2h,f,c
  4026  001BDE  04DE               	decf	postinc2,w,c
  4027  001BE0  A4D8               	btfss	status,2,c
  4028  001BE2  D009               	goto	i2l1749
  4029                           
  4030                           ;mcp2515.c: 294: {
  4031                           ;mcp2515.c: 295: dlc = msg->dlc | 0x40;
  4032  001BE4  EE20 F005          	lfsr	2,5
  4033  001BE8  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  4034  001BEA  26D9               	addwf	fsr2l,f,c
  4035  001BEC  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  4036  001BEE  22DA               	addwfc	fsr2h,f,c
  4037  001BF0  50DF               	movf	indf2,w,c
  4038  001BF2  0940               	iorlw	64
  4039  001BF4  6E33               	movwf	Mcp2515WriteCanMsg@dlc,c
  4040  001BF6                     i2l1749:
  4041                           
  4042                           ;mcp2515.c: 296: }
  4043                           ;mcp2515.c: 297: buf[0] = 0x02;
  4044  001BF6  0E02               	movlw	2
  4045  001BF8  6E28               	movwf	Mcp2515WriteCanMsg@buf,c
  4046                           
  4047                           ;mcp2515.c: 298: buf[1] = mcp_addr+4;
  4048  001BFA  5034               	movf	Mcp2515WriteCanMsg@mcp_addr,w,c
  4049  001BFC  0F04               	addlw	4
  4050  001BFE  6E29               	movwf	Mcp2515WriteCanMsg@buf+1,c
  4051                           
  4052                           ;mcp2515.c: 299: buf[2] = dlc;
  4053  001C00  C033  F02A         	movff	Mcp2515WriteCanMsg@dlc,Mcp2515WriteCanMsg@buf+2
  4054                           
  4055                           ;mcp2515.c: 300: Spi_Write(buf,3);
  4056  001C04  0E28               	movlw	low Mcp2515WriteCanMsg@buf
  4057  001C06  6E0D               	movwf	i2Spi_Write@tx,c
  4058  001C08  0E00               	movlw	high Mcp2515WriteCanMsg@buf
  4059  001C0A  6E0E               	movwf	i2Spi_Write@tx+1,c
  4060  001C0C  0E03               	movlw	3
  4061  001C0E  6E0F               	movwf	i2Spi_Write@size,c
  4062  001C10  0E00               	movlw	0
  4063  001C12  6E10               	movwf	i2Spi_Write@size+1,c
  4064  001C14  0E00               	movlw	0
  4065  001C16  6E11               	movwf	i2Spi_Write@size+2,c
  4066  001C18  0E00               	movlw	0
  4067  001C1A  6E12               	movwf	i2Spi_Write@size+3,c
  4068  001C1C  EC73  F012         	call	i2_Spi_Write	;wreg free
  4069  001C20  0012               	return		;funcret
  4070  001C22                     __end_of_Mcp2515WriteCanMsg:
  4071                           	opt stack 0
  4072                           pclatu	equ	0xFFB
  4073                           pclath	equ	0xFFA
  4074                           tblptru	equ	0xFF8
  4075                           tblptrh	equ	0xFF7
  4076                           tblptrl	equ	0xFF6
  4077                           tablat	equ	0xFF5
  4078                           prodh	equ	0xFF4
  4079                           prodl	equ	0xFF3
  4080                           intcon2	equ	0xFF1
  4081                           intcon3	equ	0xFF0
  4082                           postinc0	equ	0xFEE
  4083                           fsr0h	equ	0xFEA
  4084                           fsr0l	equ	0xFE9
  4085                           wreg	equ	0xFE8
  4086                           indf1	equ	0xFE7
  4087                           postinc1	equ	0xFE6
  4088                           postdec1	equ	0xFE5
  4089                           fsr1h	equ	0xFE2
  4090                           fsr1l	equ	0xFE1
  4091                           indf2	equ	0xFDF
  4092                           postinc2	equ	0xFDE
  4093                           fsr2h	equ	0xFDA
  4094                           fsr2l	equ	0xFD9
  4095                           status	equ	0xFD8
  4096                           
  4097 ;; *************** function i2_Mcp2515WriteCanId *****************
  4098 ;; Defined at:
  4099 ;;		line 233 in file "mcp2515.c"
  4100 ;; Parameters:    Size  Location     Type
  4101 ;;  mcp_addr        1    wreg     unsigned char 
  4102 ;;  ext             1   18[COMRAM] unsigned char 
  4103 ;;  can_id          4   19[COMRAM] unsigned long 
  4104 ;; Auto vars:     Size  Location     Type
  4105 ;;  mcp_addr        1   26[COMRAM] unsigned char 
  4106 ;;  Mcp2515Write    6   27[COMRAM] unsigned char [6]
  4107 ;;  Mcp2515Write    2   33[COMRAM] unsigned int 
  4108 ;; Return value:  Size  Location     Type
  4109 ;;                  1    wreg      void 
  4110 ;; Registers used:
  4111 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4112 ;; Tracked objects:
  4113 ;;		On entry : 0/0
  4114 ;;		On exit  : 0/0
  4115 ;;		Unchanged: 0/0
  4116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4117 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4118 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4119 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4120 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4121 ;;Total ram usage:       17 bytes
  4122 ;; Hardware stack levels used:    1
  4123 ;; Hardware stack levels required when called:    2
  4124 ;; This function calls:
  4125 ;;		i2_Spi_Write
  4126 ;; This function is called by:
  4127 ;;		_Mcp2515WriteCanMsg
  4128 ;; This function uses a non-reentrant model
  4129 ;;
  4130                           
  4131                           	psect	text16
  4132  001F2C                     __ptext16:
  4133                           	opt stack 0
  4134  001F2C                     i2_Mcp2515WriteCanId:
  4135                           	opt stack 17
  4136                           
  4137                           ;incstack = 0
  4138                           ;i2Mcp2515WriteCanId@mcp_addr stored from wreg
  4139  001F2C  6E1B               	movwf	i2Mcp2515WriteCanId@mcp_addr,c
  4140                           
  4141                           ;mcp2515.c: 235: uint16_t canid;
  4142                           ;mcp2515.c: 236: uint8_t buf[6];
  4143                           ;mcp2515.c: 238: canid = (uint16_t)(can_id & 0x0FFFF);
  4144  001F2E  C014  F022         	movff	i2Mcp2515WriteCanId@can_id,i2Mcp2515WriteCanId@canid
  4145  001F32  C015  F023         	movff	i2Mcp2515WriteCanId@can_id+1,i2Mcp2515WriteCanId@canid+1
  4146                           
  4147                           ;mcp2515.c: 240: buf[0] = 0x02;
  4148  001F36  0E02               	movlw	2
  4149  001F38  6E1C               	movwf	i2Mcp2515WriteCanId@buf,c
  4150                           
  4151                           ;mcp2515.c: 241: buf[1] = mcp_addr;
  4152  001F3A  C01B  F01D         	movff	i2Mcp2515WriteCanId@mcp_addr,i2Mcp2515WriteCanId@buf+1
  4153                           
  4154                           ;mcp2515.c: 243: if ( ext == 1)
  4155  001F3E  0413               	decf	i2Mcp2515WriteCanId@ext,w,c
  4156  001F40  A4D8               	btfss	status,2,c
  4157  001F42  D025               	goto	i2l1661
  4158                           
  4159                           ;mcp2515.c: 244: {
  4160                           ;mcp2515.c: 245: buf[3+2] = (uint8_t) (canid & 0xFF);
  4161  001F44  C022  F021         	movff	i2Mcp2515WriteCanId@canid,i2Mcp2515WriteCanId@buf+5
  4162                           
  4163                           ;mcp2515.c: 246: buf[2+2] = (uint8_t) (canid >> 8);
  4164  001F48  5023               	movf	i2Mcp2515WriteCanId@canid+1,w,c
  4165  001F4A  6E20               	movwf	i2Mcp2515WriteCanId@buf+4,c
  4166                           
  4167                           ;mcp2515.c: 247: canid = (uint16_t)( can_id / 0x10000L );
  4168  001F4C  C016  F022         	movff	i2Mcp2515WriteCanId@can_id+2,i2Mcp2515WriteCanId@canid
  4169  001F50  C017  F023         	movff	i2Mcp2515WriteCanId@can_id+3,i2Mcp2515WriteCanId@canid+1
  4170                           
  4171                           ;mcp2515.c: 248: buf[1+2] = (uint8_t) (canid & 0x03);
  4172  001F54  5022               	movf	i2Mcp2515WriteCanId@canid,w,c
  4173  001F56  0B03               	andlw	3
  4174  001F58  6E1F               	movwf	i2Mcp2515WriteCanId@buf+3,c
  4175                           
  4176                           ;mcp2515.c: 249: buf[1+2] += (uint8_t) ((canid & 0x1C )*8);
  4177  001F5A  C022  F018         	movff	i2Mcp2515WriteCanId@canid,??i2_Mcp2515WriteCanId
  4178  001F5E  0E1C               	movlw	28
  4179  001F60  1618               	andwf	??i2_Mcp2515WriteCanId,f,c
  4180  001F62  90D8               	bcf	status,0,c
  4181  001F64  3618               	rlcf	??i2_Mcp2515WriteCanId,f,c
  4182  001F66  90D8               	bcf	status,0,c
  4183  001F68  3618               	rlcf	??i2_Mcp2515WriteCanId,f,c
  4184  001F6A  90D8               	bcf	status,0,c
  4185  001F6C  3418               	rlcf	??i2_Mcp2515WriteCanId,w,c
  4186  001F6E  261F               	addwf	i2Mcp2515WriteCanId@buf+3,f,c
  4187                           
  4188                           ;mcp2515.c: 250: buf[1+2] |= 0x08;
  4189  001F70  861F               	bsf	i2Mcp2515WriteCanId@buf+3,3,c
  4190                           
  4191                           ;mcp2515.c: 251: buf[0+2] = (uint8_t) (canid / 32 );
  4192  001F72  C022  F018         	movff	i2Mcp2515WriteCanId@canid,??i2_Mcp2515WriteCanId
  4193  001F76  C023  F019         	movff	i2Mcp2515WriteCanId@canid+1,??i2_Mcp2515WriteCanId+1
  4194  001F7A  0E05               	movlw	5
  4195  001F7C  6E1A               	movwf	(??i2_Mcp2515WriteCanId+2)& (0+255),c
  4196  001F7E                     i2u71_45:
  4197  001F7E  90D8               	bcf	status,0,c
  4198  001F80  3219               	rrcf	??i2_Mcp2515WriteCanId+1,f,c
  4199  001F82  3218               	rrcf	??i2_Mcp2515WriteCanId,f,c
  4200  001F84  2E1A               	decfsz	(??i2_Mcp2515WriteCanId+2)& (0+255),f,c
  4201  001F86  D7FB               	goto	i2u71_45
  4202  001F88  5018               	movf	??i2_Mcp2515WriteCanId,w,c
  4203  001F8A  6E1E               	movwf	i2Mcp2515WriteCanId@buf+2,c
  4204                           
  4205                           ;mcp2515.c: 252: }
  4206  001F8C  D01F               	goto	i2l1667
  4207  001F8E                     i2l1661:
  4208                           
  4209                           ;mcp2515.c: 254: else
  4210                           ;mcp2515.c: 255: {
  4211                           ;mcp2515.c: 256: buf[0+2] = (uint8_t) (canid >> 3);
  4212  001F8E  C022  F018         	movff	i2Mcp2515WriteCanId@canid,??i2_Mcp2515WriteCanId
  4213  001F92  C023  F019         	movff	i2Mcp2515WriteCanId@canid+1,??i2_Mcp2515WriteCanId+1
  4214  001F96  90D8               	bcf	status,0,c
  4215  001F98  3219               	rrcf	??i2_Mcp2515WriteCanId+1,f,c
  4216  001F9A  3218               	rrcf	??i2_Mcp2515WriteCanId,f,c
  4217  001F9C  90D8               	bcf	status,0,c
  4218  001F9E  3219               	rrcf	??i2_Mcp2515WriteCanId+1,f,c
  4219  001FA0  3218               	rrcf	??i2_Mcp2515WriteCanId,f,c
  4220  001FA2  90D8               	bcf	status,0,c
  4221  001FA4  3219               	rrcf	??i2_Mcp2515WriteCanId+1,f,c
  4222  001FA6  3218               	rrcf	??i2_Mcp2515WriteCanId,f,c
  4223  001FA8  5018               	movf	??i2_Mcp2515WriteCanId,w,c
  4224  001FAA  6E1E               	movwf	i2Mcp2515WriteCanId@buf+2,c
  4225                           
  4226                           ;mcp2515.c: 257: buf[1+2] = (uint8_t) ((canid & 0x07 )*32);
  4227  001FAC  C022  F018         	movff	i2Mcp2515WriteCanId@canid,??i2_Mcp2515WriteCanId
  4228  001FB0  0E07               	movlw	7
  4229  001FB2  1618               	andwf	??i2_Mcp2515WriteCanId,f,c
  4230  001FB4  0E05               	movlw	5
  4231  001FB6  6E19               	movwf	(??i2_Mcp2515WriteCanId+1)& (0+255),c
  4232  001FB8                     i2u72_45:
  4233  001FB8  90D8               	bcf	status,0,c
  4234  001FBA  3618               	rlcf	??i2_Mcp2515WriteCanId,f,c
  4235  001FBC  2E19               	decfsz	(??i2_Mcp2515WriteCanId+1)& (0+255),f,c
  4236  001FBE  D7FC               	goto	i2u72_45
  4237  001FC0  5018               	movf	??i2_Mcp2515WriteCanId,w,c
  4238  001FC2  6E1F               	movwf	i2Mcp2515WriteCanId@buf+3,c
  4239                           
  4240                           ;mcp2515.c: 258: buf[3+2] = 0;
  4241  001FC4  0E00               	movlw	0
  4242  001FC6  6E21               	movwf	i2Mcp2515WriteCanId@buf+5,c
  4243                           
  4244                           ;mcp2515.c: 259: buf[2+2] = 0;
  4245  001FC8  0E00               	movlw	0
  4246  001FCA  6E20               	movwf	i2Mcp2515WriteCanId@buf+4,c
  4247  001FCC                     i2l1667:
  4248                           
  4249                           ;mcp2515.c: 260: }
  4250                           ;mcp2515.c: 261: Spi_Write(buf,6);
  4251  001FCC  0E1C               	movlw	low i2Mcp2515WriteCanId@buf
  4252  001FCE  6E0D               	movwf	i2Spi_Write@tx,c
  4253  001FD0  0E00               	movlw	high i2Mcp2515WriteCanId@buf
  4254  001FD2  6E0E               	movwf	i2Spi_Write@tx+1,c
  4255  001FD4  0E06               	movlw	6
  4256  001FD6  6E0F               	movwf	i2Spi_Write@size,c
  4257  001FD8  0E00               	movlw	0
  4258  001FDA  6E10               	movwf	i2Spi_Write@size+1,c
  4259  001FDC  0E00               	movlw	0
  4260  001FDE  6E11               	movwf	i2Spi_Write@size+2,c
  4261  001FE0  0E00               	movlw	0
  4262  001FE2  6E12               	movwf	i2Spi_Write@size+3,c
  4263  001FE4  EC73  F012         	call	i2_Spi_Write	;wreg free
  4264  001FE8  0012               	return		;funcret
  4265  001FEA                     __end_ofi2_Mcp2515WriteCanId:
  4266                           	opt stack 0
  4267                           pclatu	equ	0xFFB
  4268                           pclath	equ	0xFFA
  4269                           tblptru	equ	0xFF8
  4270                           tblptrh	equ	0xFF7
  4271                           tblptrl	equ	0xFF6
  4272                           tablat	equ	0xFF5
  4273                           prodh	equ	0xFF4
  4274                           prodl	equ	0xFF3
  4275                           intcon2	equ	0xFF1
  4276                           intcon3	equ	0xFF0
  4277                           postinc0	equ	0xFEE
  4278                           fsr0h	equ	0xFEA
  4279                           fsr0l	equ	0xFE9
  4280                           wreg	equ	0xFE8
  4281                           indf1	equ	0xFE7
  4282                           postinc1	equ	0xFE6
  4283                           postdec1	equ	0xFE5
  4284                           fsr1h	equ	0xFE2
  4285                           fsr1l	equ	0xFE1
  4286                           indf2	equ	0xFDF
  4287                           postinc2	equ	0xFDE
  4288                           fsr2h	equ	0xFDA
  4289                           fsr2l	equ	0xFD9
  4290                           status	equ	0xFD8
  4291                           
  4292 ;; *************** function _Mcp2515GetNextFreeTXBuf *****************
  4293 ;; Defined at:
  4294 ;;		line 311 in file "mcp2515.c"
  4295 ;; Parameters:    Size  Location     Type
  4296 ;;  txbuf_n         2   18[COMRAM] PTR unsigned char 
  4297 ;;		 -> Can_SendMessage@txbuf_n(1), 
  4298 ;; Auto vars:     Size  Location     Type
  4299 ;;  buf             3   24[COMRAM] unsigned char [3]
  4300 ;;  ctrlregs        3   21[COMRAM] unsigned char [3]
  4301 ;;  i               1   27[COMRAM] unsigned char 
  4302 ;; Return value:  Size  Location     Type
  4303 ;;                  1    wreg      unsigned char 
  4304 ;; Registers used:
  4305 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4306 ;; Tracked objects:
  4307 ;;		On entry : 0/0
  4308 ;;		On exit  : 0/0
  4309 ;;		Unchanged: 0/0
  4310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4311 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4312 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4313 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4314 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4315 ;;Total ram usage:       10 bytes
  4316 ;; Hardware stack levels used:    1
  4317 ;; Hardware stack levels required when called:    2
  4318 ;; This function calls:
  4319 ;;		_Spi_ReadWrite
  4320 ;; This function is called by:
  4321 ;;		_Can_SendMessage
  4322 ;; This function uses a non-reentrant model
  4323 ;;
  4324                           
  4325                           	psect	text17
  4326  00207C                     __ptext17:
  4327                           	opt stack 0
  4328  00207C                     _Mcp2515GetNextFreeTXBuf:
  4329                           	opt stack 18
  4330                           
  4331                           ;mcp2515.c: 313: uint8_t i;
  4332                           ;mcp2515.c: 314: uint8_t ctrlregs[(3)] = {0x30,0x40,0x50};
  4333                           
  4334                           ;incstack = 0
  4335  00207C  C0EC  F016         	movff	Mcp2515GetNextFreeTXBuf@F8153,Mcp2515GetNextFreeTXBuf@ctrlregs
  4336  002080  C0ED  F017         	movff	Mcp2515GetNextFreeTXBuf@F8153+1,Mcp2515GetNextFreeTXBuf@ctrlregs+1
  4337  002084  C0EE  F018         	movff	Mcp2515GetNextFreeTXBuf@F8153+2,Mcp2515GetNextFreeTXBuf@ctrlregs+2
  4338                           
  4339                           ;mcp2515.c: 315: uint8_t buf[3];
  4340                           ;mcp2515.c: 316: *txbuf_n = 0x00;
  4341  002088  C013  FFD9         	movff	Mcp2515GetNextFreeTXBuf@txbuf_n,fsr2l
  4342  00208C  C014  FFDA         	movff	Mcp2515GetNextFreeTXBuf@txbuf_n+1,fsr2h
  4343  002090  0E00               	movlw	0
  4344  002092  6EDF               	movwf	indf2,c
  4345                           
  4346                           ;mcp2515.c: 319: for (i=0; i<(3); i++)
  4347  002094  0E00               	movlw	0
  4348  002096  6E1C               	movwf	Mcp2515GetNextFreeTXBuf@i,c
  4349  002098                     i2l1701:
  4350  002098  0E02               	movlw	2
  4351  00209A  641C               	cpfsgt	Mcp2515GetNextFreeTXBuf@i,c
  4352  00209C  D001               	goto	i2l1705
  4353  00209E  D030               	goto	i2l1723
  4354  0020A0                     i2l1705:
  4355                           
  4356                           ;mcp2515.c: 320: {
  4357                           ;mcp2515.c: 321: buf[0] = 0x03;
  4358  0020A0  0E03               	movlw	3
  4359  0020A2  6E19               	movwf	Mcp2515GetNextFreeTXBuf@buf,c
  4360                           
  4361                           ;mcp2515.c: 322: buf[1] = ctrlregs[i];
  4362  0020A4  501C               	movf	Mcp2515GetNextFreeTXBuf@i,w,c
  4363  0020A6  0D01               	mullw	1
  4364  0020A8  0E16               	movlw	low Mcp2515GetNextFreeTXBuf@ctrlregs
  4365  0020AA  24F3               	addwf	prodl,w,c
  4366  0020AC  6ED9               	movwf	fsr2l,c
  4367  0020AE  0E00               	movlw	high Mcp2515GetNextFreeTXBuf@ctrlregs
  4368  0020B0  20F4               	addwfc	prodh,w,c
  4369  0020B2  6EDA               	movwf	fsr2h,c
  4370  0020B4  50DF               	movf	indf2,w,c
  4371  0020B6  6E1A               	movwf	Mcp2515GetNextFreeTXBuf@buf+1,c
  4372                           
  4373                           ;mcp2515.c: 323: Spi_ReadWrite(buf,3);
  4374  0020B8  0E19               	movlw	low Mcp2515GetNextFreeTXBuf@buf
  4375  0020BA  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  4376  0020BC  0E00               	movlw	high Mcp2515GetNextFreeTXBuf@buf
  4377  0020BE  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  4378  0020C0  0E03               	movlw	3
  4379  0020C2  6E0F               	movwf	Spi_ReadWrite@size,c
  4380  0020C4  0E00               	movlw	0
  4381  0020C6  6E10               	movwf	Spi_ReadWrite@size+1,c
  4382  0020C8  0E00               	movlw	0
  4383  0020CA  6E11               	movwf	Spi_ReadWrite@size+2,c
  4384  0020CC  0E00               	movlw	0
  4385  0020CE  6E12               	movwf	Spi_ReadWrite@size+3,c
  4386  0020D0  EC86  F012         	call	_Spi_ReadWrite	;wreg free
  4387                           
  4388                           ;mcp2515.c: 325: if ( (buf[2] & 0x08) == 0 )
  4389  0020D4  B61B               	btfsc	Mcp2515GetNextFreeTXBuf@buf+2,3,c
  4390  0020D6  D012               	goto	i2l1719
  4391                           
  4392                           ;mcp2515.c: 326: {
  4393                           ;mcp2515.c: 327: *txbuf_n = ctrlregs[i]+1;
  4394  0020D8  501C               	movf	Mcp2515GetNextFreeTXBuf@i,w,c
  4395  0020DA  0D01               	mullw	1
  4396  0020DC  0E16               	movlw	low Mcp2515GetNextFreeTXBuf@ctrlregs
  4397  0020DE  24F3               	addwf	prodl,w,c
  4398  0020E0  6ED9               	movwf	fsr2l,c
  4399  0020E2  0E00               	movlw	high Mcp2515GetNextFreeTXBuf@ctrlregs
  4400  0020E4  20F4               	addwfc	prodh,w,c
  4401  0020E6  6EDA               	movwf	fsr2h,c
  4402  0020E8  50DF               	movf	indf2,w,c
  4403  0020EA  6E15               	movwf	??_Mcp2515GetNextFreeTXBuf& (0+255),c
  4404  0020EC  2815               	incf	??_Mcp2515GetNextFreeTXBuf,w,c
  4405  0020EE  C013  FFD9         	movff	Mcp2515GetNextFreeTXBuf@txbuf_n,fsr2l
  4406  0020F2  C014  FFDA         	movff	Mcp2515GetNextFreeTXBuf@txbuf_n+1,fsr2h
  4407  0020F6  6EDF               	movwf	indf2,c
  4408                           
  4409                           ;mcp2515.c: 328: return (0);
  4410  0020F8  0E00               	movlw	0
  4411  0020FA  0012               	return	
  4412  0020FC                     i2l1719:
  4413  0020FC  2A1C               	incf	Mcp2515GetNextFreeTXBuf@i,f,c
  4414  0020FE  D7CC               	goto	i2l1701
  4415  002100                     i2l1723:
  4416                           
  4417                           ;mcp2515.c: 329: }
  4418                           ;mcp2515.c: 330: }
  4419                           ;mcp2515.c: 331: return (2);
  4420  002100  0E02               	movlw	2
  4421  002102  0012               	return	
  4422  002104                     __end_of_Mcp2515GetNextFreeTXBuf:
  4423                           	opt stack 0
  4424                           pclatu	equ	0xFFB
  4425                           pclath	equ	0xFFA
  4426                           tblptru	equ	0xFF8
  4427                           tblptrh	equ	0xFF7
  4428                           tblptrl	equ	0xFF6
  4429                           tablat	equ	0xFF5
  4430                           prodh	equ	0xFF4
  4431                           prodl	equ	0xFF3
  4432                           intcon2	equ	0xFF1
  4433                           intcon3	equ	0xFF0
  4434                           postinc0	equ	0xFEE
  4435                           fsr0h	equ	0xFEA
  4436                           fsr0l	equ	0xFE9
  4437                           wreg	equ	0xFE8
  4438                           indf1	equ	0xFE7
  4439                           postinc1	equ	0xFE6
  4440                           postdec1	equ	0xFE5
  4441                           fsr1h	equ	0xFE2
  4442                           fsr1l	equ	0xFE1
  4443                           indf2	equ	0xFDF
  4444                           postinc2	equ	0xFDE
  4445                           fsr2h	equ	0xFDA
  4446                           fsr2l	equ	0xFD9
  4447                           status	equ	0xFD8
  4448                           
  4449 ;; *************** function _Can_ReadInBuffer *****************
  4450 ;; Defined at:
  4451 ;;		line 94 in file "can.c"
  4452 ;; Parameters:    Size  Location     Type
  4453 ;;		None
  4454 ;; Auto vars:     Size  Location     Type
  4455 ;;  i               1   70[COMRAM] unsigned char 
  4456 ;;  rdStatus        1   69[COMRAM] unsigned char 
  4457 ;;  error           1   68[COMRAM] unsigned char 
  4458 ;; Return value:  Size  Location     Type
  4459 ;;                  1    wreg      unsigned char 
  4460 ;; Registers used:
  4461 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4462 ;; Tracked objects:
  4463 ;;		On entry : 0/0
  4464 ;;		On exit  : 0/0
  4465 ;;		Unchanged: 0/0
  4466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4468 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4470 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4471 ;;Total ram usage:        3 bytes
  4472 ;; Hardware stack levels used:    1
  4473 ;; Hardware stack levels required when called:    5
  4474 ;; This function calls:
  4475 ;;		_Can_ReadMessage
  4476 ;; This function is called by:
  4477 ;;		_Can_Isr
  4478 ;; This function uses a non-reentrant model
  4479 ;;
  4480                           
  4481                           	psect	text18
  4482  002400                     __ptext18:
  4483                           	opt stack 0
  4484  002400                     _Can_ReadInBuffer:
  4485                           	opt stack 17
  4486                           
  4487                           ;can.c: 96: uint8_t i;
  4488                           ;can.c: 97: uint8_t error=0;
  4489                           
  4490                           ;incstack = 0
  4491  002400  0E00               	movlw	0
  4492  002402  6E45               	movwf	Can_ReadInBuffer@error,c
  4493                           
  4494                           ;can.c: 98: uint8_t rdStatus;
  4495                           ;can.c: 100: for(i=0;i<2;i++)
  4496  002404  0E00               	movlw	0
  4497  002406  6E47               	movwf	Can_ReadInBuffer@i,c
  4498  002408                     i2l2065:
  4499  002408  0E01               	movlw	1
  4500  00240A  6447               	cpfsgt	Can_ReadInBuffer@i,c
  4501  00240C  D001               	goto	i2l2069
  4502  00240E  0012               	return	
  4503  002410                     i2l2069:
  4504                           
  4505                           ;can.c: 101: {
  4506                           ;can.c: 102: rdStatus = Can_ReadMessage(&rxBuffer[rxBufferPtrIn]);
  4507  002410  505D               	movf	_rxBufferPtrIn,w,c
  4508  002412  0D11               	mullw	17
  4509  002414  0E44               	movlw	low _rxBuffer
  4510  002416  24F3               	addwf	prodl,w,c
  4511  002418  6E3F               	movwf	Can_ReadMessage@msg,c
  4512  00241A  0E01               	movlw	high _rxBuffer
  4513  00241C  20F4               	addwfc	prodh,w,c
  4514  00241E  6E40               	movwf	Can_ReadMessage@msg+1,c
  4515  002420  EC19  F00F         	call	_Can_ReadMessage	;wreg free
  4516  002424  6E46               	movwf	Can_ReadInBuffer@rdStatus,c
  4517                           
  4518                           ;can.c: 103: if((rxBufferCount) < 4)
  4519  002426  0E04               	movlw	4
  4520  002428  605C               	cpfslt	_rxBufferCount,c
  4521  00242A  D008               	goto	i2l2079
  4522                           
  4523                           ;can.c: 104: {
  4524                           ;can.c: 105: if(rdStatus == (0))
  4525  00242C  5046               	movf	Can_ReadInBuffer@rdStatus,w,c
  4526  00242E  A4D8               	btfss	status,2,c
  4527  002430  D007               	goto	i2l2081
  4528                           
  4529                           ;can.c: 106: {
  4530                           ;can.c: 107: rxBufferCount++;
  4531  002432  2A5C               	incf	_rxBufferCount,f,c
  4532                           
  4533                           ;can.c: 108: rxBufferPtrIn = (rxBufferPtrIn + 1) % 4;
  4534  002434  285D               	incf	_rxBufferPtrIn,w,c
  4535  002436  0B03               	andlw	3
  4536  002438  6E5D               	movwf	_rxBufferPtrIn,c
  4537                           
  4538                           ;can.c: 109: }
  4539                           ;can.c: 110: }
  4540  00243A  D002               	goto	i2l2081
  4541  00243C                     i2l2079:
  4542                           
  4543                           ;can.c: 111: else
  4544                           ;can.c: 112: {
  4545                           ;can.c: 113: error = 1;
  4546  00243C  0E01               	movlw	1
  4547  00243E  6E45               	movwf	Can_ReadInBuffer@error,c
  4548  002440                     i2l2081:
  4549  002440  2A47               	incf	Can_ReadInBuffer@i,f,c
  4550  002442  D7E2               	goto	i2l2065
  4551  002444                     __end_of_Can_ReadInBuffer:
  4552                           	opt stack 0
  4553                           pclatu	equ	0xFFB
  4554                           pclath	equ	0xFFA
  4555                           tblptru	equ	0xFF8
  4556                           tblptrh	equ	0xFF7
  4557                           tblptrl	equ	0xFF6
  4558                           tablat	equ	0xFF5
  4559                           prodh	equ	0xFF4
  4560                           prodl	equ	0xFF3
  4561                           intcon2	equ	0xFF1
  4562                           intcon3	equ	0xFF0
  4563                           postinc0	equ	0xFEE
  4564                           fsr0h	equ	0xFEA
  4565                           fsr0l	equ	0xFE9
  4566                           wreg	equ	0xFE8
  4567                           indf1	equ	0xFE7
  4568                           postinc1	equ	0xFE6
  4569                           postdec1	equ	0xFE5
  4570                           fsr1h	equ	0xFE2
  4571                           fsr1l	equ	0xFE1
  4572                           indf2	equ	0xFDF
  4573                           postinc2	equ	0xFDE
  4574                           fsr2h	equ	0xFDA
  4575                           fsr2l	equ	0xFD9
  4576                           status	equ	0xFD8
  4577                           
  4578 ;; *************** function _Can_ReadMessage *****************
  4579 ;; Defined at:
  4580 ;;		line 367 in file "can.c"
  4581 ;; Parameters:    Size  Location     Type
  4582 ;;  msg             2   62[COMRAM] PTR struct CANMESSAGE
  4583 ;;		 -> rxBuffer(68), 
  4584 ;; Auto vars:     Size  Location     Type
  4585 ;;  buf             4   64[COMRAM] unsigned char [4]
  4586 ;; Return value:  Size  Location     Type
  4587 ;;                  1    wreg      unsigned char 
  4588 ;; Registers used:
  4589 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4590 ;; Tracked objects:
  4591 ;;		On entry : 0/0
  4592 ;;		On exit  : 0/0
  4593 ;;		Unchanged: 0/0
  4594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4595 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4596 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4598 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4599 ;;Total ram usage:        6 bytes
  4600 ;; Hardware stack levels used:    1
  4601 ;; Hardware stack levels required when called:    4
  4602 ;; This function calls:
  4603 ;;		_Mcp2515ReadCanMsg
  4604 ;;		_Spi_ReadWrite
  4605 ;;		i2_Spi_Write
  4606 ;; This function is called by:
  4607 ;;		_Can_ReadInBuffer
  4608 ;; This function uses a non-reentrant model
  4609 ;;
  4610                           
  4611                           	psect	text19
  4612  001E32                     __ptext19:
  4613                           	opt stack 0
  4614  001E32                     _Can_ReadMessage:
  4615                           	opt stack 17
  4616                           
  4617                           ;can.c: 369: uint8_t buf[4];
  4618                           ;can.c: 371: buf[0] = 0xA0;
  4619                           
  4620                           ;incstack = 0
  4621  001E32  0EA0               	movlw	160
  4622  001E34  6E41               	movwf	Can_ReadMessage@buf,c
  4623                           
  4624                           ;can.c: 372: Spi_ReadWrite(buf,2);
  4625  001E36  0E41               	movlw	low Can_ReadMessage@buf
  4626  001E38  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  4627  001E3A  0E00               	movlw	high Can_ReadMessage@buf
  4628  001E3C  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  4629  001E3E  0E02               	movlw	2
  4630  001E40  6E0F               	movwf	Spi_ReadWrite@size,c
  4631  001E42  0E00               	movlw	0
  4632  001E44  6E10               	movwf	Spi_ReadWrite@size+1,c
  4633  001E46  0E00               	movlw	0
  4634  001E48  6E11               	movwf	Spi_ReadWrite@size+2,c
  4635  001E4A  0E00               	movlw	0
  4636  001E4C  6E12               	movwf	Spi_ReadWrite@size+3,c
  4637  001E4E  EC86  F012         	call	_Spi_ReadWrite	;wreg free
  4638                           
  4639                           ;can.c: 374: if ( buf[1] & (1<<0) )
  4640  001E52  A042               	btfss	Can_ReadMessage@buf+1,0,c
  4641  001E54  D034               	goto	i2l209
  4642                           
  4643                           ;can.c: 375: {
  4644                           ;can.c: 376: Mcp2515ReadCanMsg( (0x61), msg);
  4645  001E56  C03F  F030         	movff	Can_ReadMessage@msg,Mcp2515ReadCanMsg@msg
  4646  001E5A  C040  F031         	movff	Can_ReadMessage@msg+1,Mcp2515ReadCanMsg@msg+1
  4647  001E5E  0E61               	movlw	97
  4648  001E60  EC11  F00E         	call	_Mcp2515ReadCanMsg
  4649                           
  4650                           ;can.c: 377: buf[0] = 0x05;
  4651  001E64  0E05               	movlw	5
  4652  001E66  6E41               	movwf	Can_ReadMessage@buf,c
  4653                           
  4654                           ;can.c: 378: buf[1] = 0x2C;
  4655  001E68  0E2C               	movlw	44
  4656  001E6A  6E42               	movwf	Can_ReadMessage@buf+1,c
  4657                           
  4658                           ;can.c: 379: buf[2] = 0x01;
  4659  001E6C  0E01               	movlw	1
  4660  001E6E  6E43               	movwf	Can_ReadMessage@buf+2,c
  4661                           
  4662                           ;can.c: 380: buf[3] = 0;
  4663  001E70  0E00               	movlw	0
  4664  001E72  6E44               	movwf	Can_ReadMessage@buf+3,c
  4665                           
  4666                           ;can.c: 381: Spi_Write(buf,4);
  4667  001E74  0E41               	movlw	low Can_ReadMessage@buf
  4668  001E76  6E0D               	movwf	i2Spi_Write@tx,c
  4669  001E78  0E00               	movlw	high Can_ReadMessage@buf
  4670  001E7A  6E0E               	movwf	i2Spi_Write@tx+1,c
  4671  001E7C  0E04               	movlw	4
  4672  001E7E  6E0F               	movwf	i2Spi_Write@size,c
  4673  001E80  0E00               	movlw	0
  4674  001E82  6E10               	movwf	i2Spi_Write@size+1,c
  4675  001E84  0E00               	movlw	0
  4676  001E86  6E11               	movwf	i2Spi_Write@size+2,c
  4677  001E88  0E00               	movlw	0
  4678  001E8A  6E12               	movwf	i2Spi_Write@size+3,c
  4679  001E8C  EC73  F012         	call	i2_Spi_Write	;wreg free
  4680                           
  4681                           ;can.c: 382: buf[0] = 0x05;
  4682  001E90  0E05               	movlw	5
  4683  001E92  6E41               	movwf	Can_ReadMessage@buf,c
  4684                           
  4685                           ;can.c: 383: buf[1] = 0x2B;
  4686  001E94  0E2B               	movlw	43
  4687  001E96  6E42               	movwf	Can_ReadMessage@buf+1,c
  4688                           
  4689                           ;can.c: 384: buf[2] = 0x01;
  4690  001E98  0E01               	movlw	1
  4691  001E9A  6E43               	movwf	Can_ReadMessage@buf+2,c
  4692                           
  4693                           ;can.c: 385: buf[3] = 0xFF;
  4694  001E9C  6844               	setf	Can_ReadMessage@buf+3,c
  4695                           
  4696                           ;can.c: 386: Spi_Write(buf,4);
  4697  001E9E  0E41               	movlw	low Can_ReadMessage@buf
  4698  001EA0  6E0D               	movwf	i2Spi_Write@tx,c
  4699  001EA2  0E00               	movlw	high Can_ReadMessage@buf
  4700  001EA4  6E0E               	movwf	i2Spi_Write@tx+1,c
  4701  001EA6  0E04               	movlw	4
  4702  001EA8  6E0F               	movwf	i2Spi_Write@size,c
  4703  001EAA  0E00               	movlw	0
  4704  001EAC  6E10               	movwf	i2Spi_Write@size+1,c
  4705  001EAE  0E00               	movlw	0
  4706  001EB0  6E11               	movwf	i2Spi_Write@size+2,c
  4707  001EB2  0E00               	movlw	0
  4708  001EB4  6E12               	movwf	i2Spi_Write@size+3,c
  4709  001EB6  EC73  F012         	call	i2_Spi_Write	;wreg free
  4710  001EBA                     i2l1875:
  4711                           
  4712                           ;can.c: 387: return (0);
  4713  001EBA  0E00               	movlw	0
  4714  001EBC  0012               	return	
  4715  001EBE                     i2l209:
  4716                           
  4717                           ;can.c: 390: else if ( buf[1] & (1<<1) )
  4718  001EBE  A242               	btfss	Can_ReadMessage@buf+1,1,c
  4719  001EC0  D033               	goto	i2l1907
  4720                           
  4721                           ;can.c: 391: {
  4722                           ;can.c: 393: Mcp2515ReadCanMsg( (0x71), msg);
  4723  001EC2  C03F  F030         	movff	Can_ReadMessage@msg,Mcp2515ReadCanMsg@msg
  4724  001EC6  C040  F031         	movff	Can_ReadMessage@msg+1,Mcp2515ReadCanMsg@msg+1
  4725  001ECA  0E71               	movlw	113
  4726  001ECC  EC11  F00E         	call	_Mcp2515ReadCanMsg
  4727                           
  4728                           ;can.c: 394: buf[0] = 0x05;
  4729  001ED0  0E05               	movlw	5
  4730  001ED2  6E41               	movwf	Can_ReadMessage@buf,c
  4731                           
  4732                           ;can.c: 395: buf[1] = 0x2C;
  4733  001ED4  0E2C               	movlw	44
  4734  001ED6  6E42               	movwf	Can_ReadMessage@buf+1,c
  4735                           
  4736                           ;can.c: 396: buf[2] = 0x02;
  4737  001ED8  0E02               	movlw	2
  4738  001EDA  6E43               	movwf	Can_ReadMessage@buf+2,c
  4739                           
  4740                           ;can.c: 397: buf[3] = 0;
  4741  001EDC  0E00               	movlw	0
  4742  001EDE  6E44               	movwf	Can_ReadMessage@buf+3,c
  4743                           
  4744                           ;can.c: 398: Spi_Write(buf,4);
  4745  001EE0  0E41               	movlw	low Can_ReadMessage@buf
  4746  001EE2  6E0D               	movwf	i2Spi_Write@tx,c
  4747  001EE4  0E00               	movlw	high Can_ReadMessage@buf
  4748  001EE6  6E0E               	movwf	i2Spi_Write@tx+1,c
  4749  001EE8  0E04               	movlw	4
  4750  001EEA  6E0F               	movwf	i2Spi_Write@size,c
  4751  001EEC  0E00               	movlw	0
  4752  001EEE  6E10               	movwf	i2Spi_Write@size+1,c
  4753  001EF0  0E00               	movlw	0
  4754  001EF2  6E11               	movwf	i2Spi_Write@size+2,c
  4755  001EF4  0E00               	movlw	0
  4756  001EF6  6E12               	movwf	i2Spi_Write@size+3,c
  4757  001EF8  EC73  F012         	call	i2_Spi_Write	;wreg free
  4758                           
  4759                           ;can.c: 399: buf[0] = 0x05;
  4760  001EFC  0E05               	movlw	5
  4761  001EFE  6E41               	movwf	Can_ReadMessage@buf,c
  4762                           
  4763                           ;can.c: 400: buf[1] = 0x2B;
  4764  001F00  0E2B               	movlw	43
  4765  001F02  6E42               	movwf	Can_ReadMessage@buf+1,c
  4766                           
  4767                           ;can.c: 401: buf[2] = 0x02;
  4768  001F04  0E02               	movlw	2
  4769  001F06  6E43               	movwf	Can_ReadMessage@buf+2,c
  4770                           
  4771                           ;can.c: 402: buf[3] = 0xFF;
  4772  001F08  6844               	setf	Can_ReadMessage@buf+3,c
  4773                           
  4774                           ;can.c: 403: Spi_Write(buf,4);
  4775  001F0A  0E41               	movlw	low Can_ReadMessage@buf
  4776  001F0C  6E0D               	movwf	i2Spi_Write@tx,c
  4777  001F0E  0E00               	movlw	high Can_ReadMessage@buf
  4778  001F10  6E0E               	movwf	i2Spi_Write@tx+1,c
  4779  001F12  0E04               	movlw	4
  4780  001F14  6E0F               	movwf	i2Spi_Write@size,c
  4781  001F16  0E00               	movlw	0
  4782  001F18  6E10               	movwf	i2Spi_Write@size+1,c
  4783  001F1A  0E00               	movlw	0
  4784  001F1C  6E11               	movwf	i2Spi_Write@size+2,c
  4785  001F1E  0E00               	movlw	0
  4786  001F20  6E12               	movwf	i2Spi_Write@size+3,c
  4787  001F22  EC73  F012         	call	i2_Spi_Write	;wreg free
  4788  001F26  D7C9               	goto	i2l1875
  4789  001F28                     i2l1907:
  4790                           
  4791                           ;can.c: 405: }
  4792                           ;can.c: 407: return (4);
  4793  001F28  0E04               	movlw	4
  4794  001F2A  0012               	return	
  4795  001F2C                     __end_of_Can_ReadMessage:
  4796                           	opt stack 0
  4797                           pclatu	equ	0xFFB
  4798                           pclath	equ	0xFFA
  4799                           tblptru	equ	0xFF8
  4800                           tblptrh	equ	0xFF7
  4801                           tblptrl	equ	0xFF6
  4802                           tablat	equ	0xFF5
  4803                           prodh	equ	0xFF4
  4804                           prodl	equ	0xFF3
  4805                           intcon2	equ	0xFF1
  4806                           intcon3	equ	0xFF0
  4807                           postinc0	equ	0xFEE
  4808                           fsr0h	equ	0xFEA
  4809                           fsr0l	equ	0xFE9
  4810                           wreg	equ	0xFE8
  4811                           indf1	equ	0xFE7
  4812                           postinc1	equ	0xFE6
  4813                           postdec1	equ	0xFE5
  4814                           fsr1h	equ	0xFE2
  4815                           fsr1l	equ	0xFE1
  4816                           indf2	equ	0xFDF
  4817                           postinc2	equ	0xFDE
  4818                           fsr2h	equ	0xFDA
  4819                           fsr2l	equ	0xFD9
  4820                           status	equ	0xFD8
  4821                           
  4822 ;; *************** function i2_Spi_Write *****************
  4823 ;; Defined at:
  4824 ;;		line 327 in file "can.c"
  4825 ;; Parameters:    Size  Location     Type
  4826 ;;  tx              2   12[COMRAM] PTR unsigned char 
  4827 ;;		 -> Mcp2515WriteCanMsg@buf(10), Mcp2515WriteCanId@buf(6), Mcp2515Sleep@cmdMask4(3), Mcp2515_Init@cmdWrite3(3), 
  4828 ;;		 -> Mcp2515_Init@cmdMask4(4), Mcp2515_Reset@cmd(1), Can_SendMessage@buf(4), Can_ReadMessage@buf(4), 
  4829 ;;  size            4   14[COMRAM] unsigned long 
  4830 ;; Auto vars:     Size  Location     Type
  4831 ;;		None
  4832 ;; Return value:  Size  Location     Type
  4833 ;;                  1    wreg      void 
  4834 ;; Registers used:
  4835 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4836 ;; Tracked objects:
  4837 ;;		On entry : 0/0
  4838 ;;		On exit  : 0/0
  4839 ;;		Unchanged: 0/0
  4840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4841 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4844 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4845 ;;Total ram usage:        6 bytes
  4846 ;; Hardware stack levels used:    1
  4847 ;; Hardware stack levels required when called:    1
  4848 ;; This function calls:
  4849 ;;		i2_SPIRW
  4850 ;; This function is called by:
  4851 ;;		_Can_ReadMessage
  4852 ;;		_Can_SendMessage
  4853 ;;		_Mcp2515WriteCanMsg
  4854 ;;		i2_Mcp2515WriteCanId
  4855 ;; This function uses a non-reentrant model
  4856 ;;
  4857                           
  4858                           	psect	text20
  4859  0024E6                     __ptext20:
  4860                           	opt stack 0
  4861  0024E6                     i2_Spi_Write:
  4862                           	opt stack 19
  4863                           
  4864                           ;can.c: 329: SPIRW(tx, 0, size);
  4865                           
  4866                           ;incstack = 0
  4867  0024E6  C00D  F001         	movff	i2Spi_Write@tx,i2SPIRW@tx
  4868  0024EA  C00E  F002         	movff	i2Spi_Write@tx+1,i2SPIRW@tx+1
  4869  0024EE  0E00               	movlw	0
  4870  0024F0  6E03               	movwf	i2SPIRW@rx,c
  4871  0024F2  0E00               	movlw	0
  4872  0024F4  6E04               	movwf	i2SPIRW@rx+1,c
  4873  0024F6  C00F  F005         	movff	i2Spi_Write@size,i2SPIRW@size
  4874  0024FA  C010  F006         	movff	i2Spi_Write@size+1,i2SPIRW@size+1
  4875  0024FE  C011  F007         	movff	i2Spi_Write@size+2,i2SPIRW@size+2
  4876  002502  C012  F008         	movff	i2Spi_Write@size+3,i2SPIRW@size+3
  4877  002506  EC82  F010         	call	i2_SPIRW	;wreg free
  4878  00250A  0012               	return		;funcret
  4879  00250C                     __end_ofi2_Spi_Write:
  4880                           	opt stack 0
  4881                           pclatu	equ	0xFFB
  4882                           pclath	equ	0xFFA
  4883                           tblptru	equ	0xFF8
  4884                           tblptrh	equ	0xFF7
  4885                           tblptrl	equ	0xFF6
  4886                           tablat	equ	0xFF5
  4887                           prodh	equ	0xFF4
  4888                           prodl	equ	0xFF3
  4889                           intcon2	equ	0xFF1
  4890                           intcon3	equ	0xFF0
  4891                           postinc0	equ	0xFEE
  4892                           fsr0h	equ	0xFEA
  4893                           fsr0l	equ	0xFE9
  4894                           wreg	equ	0xFE8
  4895                           indf1	equ	0xFE7
  4896                           postinc1	equ	0xFE6
  4897                           postdec1	equ	0xFE5
  4898                           fsr1h	equ	0xFE2
  4899                           fsr1l	equ	0xFE1
  4900                           indf2	equ	0xFDF
  4901                           postinc2	equ	0xFDE
  4902                           fsr2h	equ	0xFDA
  4903                           fsr2l	equ	0xFD9
  4904                           status	equ	0xFD8
  4905                           
  4906 ;; *************** function _Mcp2515ReadCanMsg *****************
  4907 ;; Defined at:
  4908 ;;		line 194 in file "mcp2515.c"
  4909 ;; Parameters:    Size  Location     Type
  4910 ;;  mcp_addr        1    wreg     const unsigned char 
  4911 ;;  msg             2   47[COMRAM] PTR struct CANMESSAGE
  4912 ;;		 -> rxBuffer(68), 
  4913 ;; Auto vars:     Size  Location     Type
  4914 ;;  mcp_addr        1   61[COMRAM] const unsigned char 
  4915 ;;  cmd            10   51[COMRAM] unsigned char [10]
  4916 ;; Return value:  Size  Location     Type
  4917 ;;                  1    wreg      void 
  4918 ;; Registers used:
  4919 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4920 ;; Tracked objects:
  4921 ;;		On entry : 0/0
  4922 ;;		On exit  : 0/0
  4923 ;;		Unchanged: 0/0
  4924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4925 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4926 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4927 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4928 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4929 ;;Total ram usage:       15 bytes
  4930 ;; Hardware stack levels used:    1
  4931 ;; Hardware stack levels required when called:    3
  4932 ;; This function calls:
  4933 ;;		_Mcp2515ReadCanId
  4934 ;;		_Spi_ReadWrite
  4935 ;;		_memcpy
  4936 ;; This function is called by:
  4937 ;;		_Can_ReadMessage
  4938 ;; This function uses a non-reentrant model
  4939 ;;
  4940                           
  4941                           	psect	text21
  4942  001C22                     __ptext21:
  4943                           	opt stack 0
  4944  001C22                     _Mcp2515ReadCanMsg:
  4945                           	opt stack 17
  4946                           
  4947                           ;incstack = 0
  4948                           ;Mcp2515ReadCanMsg@mcp_addr stored from wreg
  4949  001C22  6E3E               	movwf	Mcp2515ReadCanMsg@mcp_addr,c
  4950                           
  4951                           ;mcp2515.c: 197: uint8_t cmd[10];
  4952                           ;mcp2515.c: 202: Mcp2515ReadCanId( mcp_addr, &(msg->extended_identifier),
  4953                           ;mcp2515.c: 203: &(msg->identifier) );
  4954  001C24  C030  F013         	movff	Mcp2515ReadCanMsg@msg,Mcp2515ReadCanId@ext
  4955  001C28  C031  F014         	movff	Mcp2515ReadCanMsg@msg+1,Mcp2515ReadCanId@ext+1
  4956  001C2C  0E01               	movlw	1
  4957  001C2E  2430               	addwf	Mcp2515ReadCanMsg@msg,w,c
  4958  001C30  6E15               	movwf	Mcp2515ReadCanId@can_id,c
  4959  001C32  0E00               	movlw	0
  4960  001C34  2031               	addwfc	Mcp2515ReadCanMsg@msg+1,w,c
  4961  001C36  6E16               	movwf	Mcp2515ReadCanId@can_id+1,c
  4962  001C38  503E               	movf	Mcp2515ReadCanMsg@mcp_addr,w,c
  4963  001C3A  EC17  F00B         	call	_Mcp2515ReadCanId
  4964                           
  4965                           ;mcp2515.c: 205: cmd[0] = 0x03;
  4966  001C3E  0E03               	movlw	3
  4967  001C40  6E34               	movwf	Mcp2515ReadCanMsg@cmd,c
  4968                           
  4969                           ;mcp2515.c: 206: cmd[1] = mcp_addr-1;
  4970  001C42  043E               	decf	Mcp2515ReadCanMsg@mcp_addr,w,c
  4971  001C44  6E35               	movwf	Mcp2515ReadCanMsg@cmd+1,c
  4972                           
  4973                           ;mcp2515.c: 207: Spi_ReadWrite(cmd,3);
  4974  001C46  0E34               	movlw	low Mcp2515ReadCanMsg@cmd
  4975  001C48  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  4976  001C4A  0E00               	movlw	high Mcp2515ReadCanMsg@cmd
  4977  001C4C  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  4978  001C4E  0E03               	movlw	3
  4979  001C50  6E0F               	movwf	Spi_ReadWrite@size,c
  4980  001C52  0E00               	movlw	0
  4981  001C54  6E10               	movwf	Spi_ReadWrite@size+1,c
  4982  001C56  0E00               	movlw	0
  4983  001C58  6E11               	movwf	Spi_ReadWrite@size+2,c
  4984  001C5A  0E00               	movlw	0
  4985  001C5C  6E12               	movwf	Spi_ReadWrite@size+3,c
  4986  001C5E  EC86  F012         	call	_Spi_ReadWrite	;wreg free
  4987                           
  4988                           ;mcp2515.c: 208: msg->rtr = 0;
  4989  001C62  EE20 F00E          	lfsr	2,14
  4990  001C66  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  4991  001C68  26D9               	addwf	fsr2l,f,c
  4992  001C6A  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  4993  001C6C  22DA               	addwfc	fsr2h,f,c
  4994  001C6E  0E00               	movlw	0
  4995  001C70  6EDF               	movwf	indf2,c
  4996                           
  4997                           ;mcp2515.c: 209: if (cmd[2] & 0x08)
  4998  001C72  A636               	btfss	Mcp2515ReadCanMsg@cmd+2,3,c
  4999  001C74  D008               	goto	i2l1683
  5000                           
  5001                           ;mcp2515.c: 210: {
  5002                           ;mcp2515.c: 211: msg->rtr = 1;
  5003  001C76  EE20 F00E          	lfsr	2,14
  5004  001C7A  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  5005  001C7C  26D9               	addwf	fsr2l,f,c
  5006  001C7E  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  5007  001C80  22DA               	addwfc	fsr2h,f,c
  5008  001C82  0E01               	movlw	1
  5009  001C84  6EDF               	movwf	indf2,c
  5010  001C86                     i2l1683:
  5011                           
  5012                           ;mcp2515.c: 212: }
  5013                           ;mcp2515.c: 214: cmd[0] = 0x03;
  5014  001C86  0E03               	movlw	3
  5015  001C88  6E34               	movwf	Mcp2515ReadCanMsg@cmd,c
  5016                           
  5017                           ;mcp2515.c: 215: cmd[1] = mcp_addr+4;
  5018  001C8A  503E               	movf	Mcp2515ReadCanMsg@mcp_addr,w,c
  5019  001C8C  0F04               	addlw	4
  5020  001C8E  6E35               	movwf	Mcp2515ReadCanMsg@cmd+1,c
  5021                           
  5022                           ;mcp2515.c: 216: Spi_ReadWrite(cmd,3);
  5023  001C90  0E34               	movlw	low Mcp2515ReadCanMsg@cmd
  5024  001C92  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  5025  001C94  0E00               	movlw	high Mcp2515ReadCanMsg@cmd
  5026  001C96  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  5027  001C98  0E03               	movlw	3
  5028  001C9A  6E0F               	movwf	Spi_ReadWrite@size,c
  5029  001C9C  0E00               	movlw	0
  5030  001C9E  6E10               	movwf	Spi_ReadWrite@size+1,c
  5031  001CA0  0E00               	movlw	0
  5032  001CA2  6E11               	movwf	Spi_ReadWrite@size+2,c
  5033  001CA4  0E00               	movlw	0
  5034  001CA6  6E12               	movwf	Spi_ReadWrite@size+3,c
  5035  001CA8  EC86  F012         	call	_Spi_ReadWrite	;wreg free
  5036                           
  5037                           ;mcp2515.c: 217: msg->dlc = cmd[2] & 0x0F;
  5038  001CAC  EE20 F005          	lfsr	2,5
  5039  001CB0  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  5040  001CB2  26D9               	addwf	fsr2l,f,c
  5041  001CB4  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  5042  001CB6  22DA               	addwfc	fsr2h,f,c
  5043  001CB8  5036               	movf	Mcp2515ReadCanMsg@cmd+2,w,c
  5044  001CBA  0B0F               	andlw	15
  5045  001CBC  6EDF               	movwf	indf2,c
  5046                           
  5047                           ;mcp2515.c: 219: cmd[0] = 0x03;
  5048  001CBE  0E03               	movlw	3
  5049  001CC0  6E34               	movwf	Mcp2515ReadCanMsg@cmd,c
  5050                           
  5051                           ;mcp2515.c: 220: cmd[1] = mcp_addr+5;
  5052  001CC2  503E               	movf	Mcp2515ReadCanMsg@mcp_addr,w,c
  5053  001CC4  0F05               	addlw	5
  5054  001CC6  6E35               	movwf	Mcp2515ReadCanMsg@cmd+1,c
  5055                           
  5056                           ;mcp2515.c: 221: Spi_ReadWrite(cmd,msg->dlc + 2);
  5057  001CC8  0E34               	movlw	low Mcp2515ReadCanMsg@cmd
  5058  001CCA  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  5059  001CCC  0E00               	movlw	high Mcp2515ReadCanMsg@cmd
  5060  001CCE  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  5061  001CD0  EE20 F005          	lfsr	2,5
  5062  001CD4  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  5063  001CD6  26D9               	addwf	fsr2l,f,c
  5064  001CD8  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  5065  001CDA  22DA               	addwfc	fsr2h,f,c
  5066  001CDC  50DF               	movf	indf2,w,c
  5067  001CDE  6E32               	movwf	??_Mcp2515ReadCanMsg& (0+255),c
  5068  001CE0  6A33               	clrf	(??_Mcp2515ReadCanMsg+1)& (0+255),c
  5069  001CE2  0E02               	movlw	2
  5070  001CE4  2632               	addwf	??_Mcp2515ReadCanMsg,f,c
  5071  001CE6  0E00               	movlw	0
  5072  001CE8  2233               	addwfc	??_Mcp2515ReadCanMsg+1,f,c
  5073  001CEA  C032  F00F         	movff	??_Mcp2515ReadCanMsg,Spi_ReadWrite@size
  5074  001CEE  C033  F010         	movff	??_Mcp2515ReadCanMsg+1,Spi_ReadWrite@size+1
  5075  001CF2  0E00               	movlw	0
  5076  001CF4  BE10               	btfsc	Spi_ReadWrite@size+1,7,c
  5077  001CF6  0EFF               	movlw	-1
  5078  001CF8  6E11               	movwf	Spi_ReadWrite@size+2,c
  5079  001CFA  6E12               	movwf	Spi_ReadWrite@size+3,c
  5080  001CFC  EC86  F012         	call	_Spi_ReadWrite	;wreg free
  5081                           
  5082                           ;mcp2515.c: 222: memcpy((void *)msg->dta,(const void *)&cmd[2],msg->dlc);
  5083  001D00  0E06               	movlw	6
  5084  001D02  2430               	addwf	Mcp2515ReadCanMsg@msg,w,c
  5085  001D04  6E01               	movwf	memcpy@d1,c
  5086  001D06  0E00               	movlw	0
  5087  001D08  2031               	addwfc	Mcp2515ReadCanMsg@msg+1,w,c
  5088  001D0A  6E02               	movwf	memcpy@d1+1,c
  5089  001D0C  0E36               	movlw	low (Mcp2515ReadCanMsg@cmd+2)
  5090  001D0E  6E03               	movwf	memcpy@s1,c
  5091  001D10  0E00               	movlw	high (Mcp2515ReadCanMsg@cmd+2)
  5092  001D12  6E04               	movwf	memcpy@s1+1,c
  5093  001D14  EE20 F005          	lfsr	2,5
  5094  001D18  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  5095  001D1A  26D9               	addwf	fsr2l,f,c
  5096  001D1C  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  5097  001D1E  22DA               	addwfc	fsr2h,f,c
  5098  001D20  50DF               	movf	indf2,w,c
  5099  001D22  6E32               	movwf	??_Mcp2515ReadCanMsg& (0+255),c
  5100  001D24  5032               	movf	??_Mcp2515ReadCanMsg,w,c
  5101  001D26  6E05               	movwf	memcpy@n,c
  5102  001D28  6A06               	clrf	memcpy@n+1,c
  5103  001D2A  EC22  F012         	call	_memcpy	;wreg free
  5104  001D2E  0012               	return		;funcret
  5105  001D30                     __end_of_Mcp2515ReadCanMsg:
  5106                           	opt stack 0
  5107                           pclatu	equ	0xFFB
  5108                           pclath	equ	0xFFA
  5109                           tblptru	equ	0xFF8
  5110                           tblptrh	equ	0xFF7
  5111                           tblptrl	equ	0xFF6
  5112                           tablat	equ	0xFF5
  5113                           prodh	equ	0xFF4
  5114                           prodl	equ	0xFF3
  5115                           intcon2	equ	0xFF1
  5116                           intcon3	equ	0xFF0
  5117                           postinc0	equ	0xFEE
  5118                           fsr0h	equ	0xFEA
  5119                           fsr0l	equ	0xFE9
  5120                           wreg	equ	0xFE8
  5121                           indf1	equ	0xFE7
  5122                           postinc1	equ	0xFE6
  5123                           postdec1	equ	0xFE5
  5124                           fsr1h	equ	0xFE2
  5125                           fsr1l	equ	0xFE1
  5126                           indf2	equ	0xFDF
  5127                           postinc2	equ	0xFDE
  5128                           fsr2h	equ	0xFDA
  5129                           fsr2l	equ	0xFD9
  5130                           status	equ	0xFD8
  5131                           
  5132 ;; *************** function _memcpy *****************
  5133 ;; Defined at:
  5134 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\memcpy.c"
  5135 ;; Parameters:    Size  Location     Type
  5136 ;;  d1              2    0[COMRAM] PTR void 
  5137 ;;		 -> rxBuffer(68), 
  5138 ;;  s1              2    2[COMRAM] PTR const void 
  5139 ;;		 -> Mcp2515ReadCanMsg@cmd(10), 
  5140 ;;  n               2    4[COMRAM] unsigned int 
  5141 ;; Auto vars:     Size  Location     Type
  5142 ;;  s               2    8[COMRAM] PTR const unsigned char 
  5143 ;;		 -> Mcp2515ReadCanMsg@cmd(10), 
  5144 ;;  d               2    6[COMRAM] PTR unsigned char 
  5145 ;;		 -> rxBuffer(68), 
  5146 ;;  tmp             1   10[COMRAM] unsigned char 
  5147 ;; Return value:  Size  Location     Type
  5148 ;;                  2    0[COMRAM] PTR void 
  5149 ;; Registers used:
  5150 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5151 ;; Tracked objects:
  5152 ;;		On entry : 0/0
  5153 ;;		On exit  : 0/0
  5154 ;;		Unchanged: 0/0
  5155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5156 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5157 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5159 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5160 ;;Total ram usage:       11 bytes
  5161 ;; Hardware stack levels used:    1
  5162 ;; This function calls:
  5163 ;;		Nothing
  5164 ;; This function is called by:
  5165 ;;		_Mcp2515ReadCanMsg
  5166 ;; This function uses a non-reentrant model
  5167 ;;
  5168                           
  5169                           	psect	text22
  5170  002444                     __ptext22:
  5171                           	opt stack 0
  5172  002444                     _memcpy:
  5173                           	opt stack 19
  5174                           
  5175                           ;incstack = 0
  5176  002444  C003  F009         	movff	memcpy@s1,memcpy@s
  5177  002448  C004  F00A         	movff	memcpy@s1+1,memcpy@s+1
  5178  00244C  C001  F007         	movff	memcpy@d1,memcpy@d
  5179  002450  C002  F008         	movff	memcpy@d1+1,memcpy@d+1
  5180  002454  D010               	goto	i2l1637
  5181  002456                     i2l1629:
  5182  002456  C009  FFD9         	movff	memcpy@s,fsr2l
  5183  00245A  C00A  FFDA         	movff	memcpy@s+1,fsr2h
  5184  00245E  50DF               	movf	indf2,w,c
  5185  002460  6E0B               	movwf	memcpy@tmp,c
  5186  002462  4A09               	infsnz	memcpy@s,f,c
  5187  002464  2A0A               	incf	memcpy@s+1,f,c
  5188  002466  C007  FFD9         	movff	memcpy@d,fsr2l
  5189  00246A  C008  FFDA         	movff	memcpy@d+1,fsr2h
  5190  00246E  C00B  FFDF         	movff	memcpy@tmp,indf2
  5191  002472  4A07               	infsnz	memcpy@d,f,c
  5192  002474  2A08               	incf	memcpy@d+1,f,c
  5193  002476                     i2l1637:
  5194  002476  0605               	decf	memcpy@n,f,c
  5195  002478  A0D8               	btfss	status,0,c
  5196  00247A  0606               	decf	memcpy@n+1,f,c
  5197  00247C  2805               	incf	memcpy@n,w,c
  5198  00247E  E1EB               	bnz	i2l1629
  5199  002480  2806               	incf	memcpy@n+1,w,c
  5200  002482  B4D8               	btfsc	status,2,c
  5201  002484  0012               	return	
  5202  002486  D7E7               	goto	i2l1629
  5203  002488                     __end_of_memcpy:
  5204                           	opt stack 0
  5205                           pclatu	equ	0xFFB
  5206                           pclath	equ	0xFFA
  5207                           tblptru	equ	0xFF8
  5208                           tblptrh	equ	0xFF7
  5209                           tblptrl	equ	0xFF6
  5210                           tablat	equ	0xFF5
  5211                           prodh	equ	0xFF4
  5212                           prodl	equ	0xFF3
  5213                           intcon2	equ	0xFF1
  5214                           intcon3	equ	0xFF0
  5215                           postinc0	equ	0xFEE
  5216                           fsr0h	equ	0xFEA
  5217                           fsr0l	equ	0xFE9
  5218                           wreg	equ	0xFE8
  5219                           indf1	equ	0xFE7
  5220                           postinc1	equ	0xFE6
  5221                           postdec1	equ	0xFE5
  5222                           fsr1h	equ	0xFE2
  5223                           fsr1l	equ	0xFE1
  5224                           indf2	equ	0xFDF
  5225                           postinc2	equ	0xFDE
  5226                           fsr2h	equ	0xFDA
  5227                           fsr2l	equ	0xFD9
  5228                           status	equ	0xFD8
  5229                           
  5230 ;; *************** function _Mcp2515ReadCanId *****************
  5231 ;; Defined at:
  5232 ;;		line 164 in file "mcp2515.c"
  5233 ;; Parameters:    Size  Location     Type
  5234 ;;  mcp_addr        1    wreg     const unsigned char 
  5235 ;;  ext             2   18[COMRAM] PTR unsigned char 
  5236 ;;		 -> rxBuffer(68), 
  5237 ;;  can_id          2   20[COMRAM] PTR unsigned long 
  5238 ;;		 -> rxBuffer(68), 
  5239 ;; Auto vars:     Size  Location     Type
  5240 ;;  mcp_addr        1   40[COMRAM] const unsigned char 
  5241 ;;  msg             6   41[COMRAM] unsigned char [6]
  5242 ;; Return value:  Size  Location     Type
  5243 ;;                  1    wreg      void 
  5244 ;; Registers used:
  5245 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5246 ;; Tracked objects:
  5247 ;;		On entry : 0/0
  5248 ;;		On exit  : 0/0
  5249 ;;		Unchanged: 0/0
  5250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5251 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5252 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5253 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5254 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5255 ;;Total ram usage:       29 bytes
  5256 ;; Hardware stack levels used:    1
  5257 ;; Hardware stack levels required when called:    2
  5258 ;; This function calls:
  5259 ;;		_Spi_ReadWrite
  5260 ;; This function is called by:
  5261 ;;		_Mcp2515ReadCanMsg
  5262 ;; This function uses a non-reentrant model
  5263 ;;
  5264                           
  5265                           	psect	text23
  5266  00162E                     __ptext23:
  5267                           	opt stack 0
  5268  00162E                     _Mcp2515ReadCanId:
  5269                           	opt stack 17
  5270                           
  5271                           ;incstack = 0
  5272                           ;Mcp2515ReadCanId@mcp_addr stored from wreg
  5273  00162E  6E29               	movwf	Mcp2515ReadCanId@mcp_addr,c
  5274                           
  5275                           ;mcp2515.c: 167: uint8_t msg[]={0x03,0,0,0,0,0};
  5276  001630  EE20  F0DE         	lfsr	2,Mcp2515ReadCanId@F8123
  5277  001634  EE10  F02A         	lfsr	1,Mcp2515ReadCanId@msg
  5278  001638  0E05               	movlw	5
  5279  00163A                     i2u64_41:
  5280  00163A  CFDB FFE3          	movff	plusw2,plusw1
  5281  00163E  06E8               	decf	wreg,f,c
  5282  001640  E2FC               	bc	i2u64_41
  5283                           
  5284                           ;mcp2515.c: 169: msg[1] = mcp_addr;
  5285  001642  C029  F02B         	movff	Mcp2515ReadCanId@mcp_addr,Mcp2515ReadCanId@msg+1
  5286                           
  5287                           ;mcp2515.c: 170: *ext = 0;
  5288  001646  C013  FFD9         	movff	Mcp2515ReadCanId@ext,fsr2l
  5289  00164A  C014  FFDA         	movff	Mcp2515ReadCanId@ext+1,fsr2h
  5290  00164E  0E00               	movlw	0
  5291  001650  6EDF               	movwf	indf2,c
  5292                           
  5293                           ;mcp2515.c: 171: *can_id = 0;
  5294  001652  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  5295  001656  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  5296  00165A  6ADE               	clrf	postinc2,c
  5297  00165C  6ADE               	clrf	postinc2,c
  5298  00165E  6ADE               	clrf	postinc2,c
  5299  001660  6ADD               	clrf	postdec2,c
  5300                           
  5301                           ;mcp2515.c: 172: Spi_ReadWrite(msg,sizeof(msg));
  5302  001662  0E2A               	movlw	low Mcp2515ReadCanId@msg
  5303  001664  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  5304  001666  0E00               	movlw	high Mcp2515ReadCanId@msg
  5305  001668  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  5306  00166A  0E06               	movlw	6
  5307  00166C  6E0F               	movwf	Spi_ReadWrite@size,c
  5308  00166E  0E00               	movlw	0
  5309  001670  6E10               	movwf	Spi_ReadWrite@size+1,c
  5310  001672  0E00               	movlw	0
  5311  001674  6E11               	movwf	Spi_ReadWrite@size+2,c
  5312  001676  0E00               	movlw	0
  5313  001678  6E12               	movwf	Spi_ReadWrite@size+3,c
  5314  00167A  EC86  F012         	call	_Spi_ReadWrite	;wreg free
  5315                           
  5316                           ;mcp2515.c: 174: *can_id = (msg[0+2]<<3) + (msg[1+2]>>5);
  5317  00167E  C02D  F017         	movff	Mcp2515ReadCanId@msg+3,??_Mcp2515ReadCanId
  5318  001682  0E05               	movlw	5
  5319  001684  6E18               	movwf	(??_Mcp2515ReadCanId+1)& (0+255),c
  5320  001686                     i2u65_45:
  5321  001686  90D8               	bcf	status,0,c
  5322  001688  3217               	rrcf	??_Mcp2515ReadCanId,f,c
  5323  00168A  2E18               	decfsz	(??_Mcp2515ReadCanId+1)& (0+255),f,c
  5324  00168C  D7FC               	goto	i2u65_45
  5325  00168E  502C               	movf	Mcp2515ReadCanId@msg+2,w,c
  5326  001690  6E19               	movwf	(??_Mcp2515ReadCanId+2)& (0+255),c
  5327  001692  6A1A               	clrf	(??_Mcp2515ReadCanId+3)& (0+255),c
  5328  001694  90D8               	bcf	status,0,c
  5329  001696  3619               	rlcf	??_Mcp2515ReadCanId+2,f,c
  5330  001698  361A               	rlcf	??_Mcp2515ReadCanId+3,f,c
  5331  00169A  90D8               	bcf	status,0,c
  5332  00169C  3619               	rlcf	??_Mcp2515ReadCanId+2,f,c
  5333  00169E  361A               	rlcf	??_Mcp2515ReadCanId+3,f,c
  5334  0016A0  90D8               	bcf	status,0,c
  5335  0016A2  3619               	rlcf	??_Mcp2515ReadCanId+2,f,c
  5336  0016A4  361A               	rlcf	??_Mcp2515ReadCanId+3,f,c
  5337  0016A6  5017               	movf	??_Mcp2515ReadCanId,w,c
  5338  0016A8  2419               	addwf	??_Mcp2515ReadCanId+2,w,c
  5339  0016AA  6E1B               	movwf	(??_Mcp2515ReadCanId+4)& (0+255),c
  5340  0016AC  0E00               	movlw	0
  5341  0016AE  201A               	addwfc	??_Mcp2515ReadCanId+3,w,c
  5342  0016B0  6E1C               	movwf	(??_Mcp2515ReadCanId+5)& (0+255),c
  5343  0016B2  6A1D               	clrf	(??_Mcp2515ReadCanId+6)& (0+255),c
  5344  0016B4  BE1C               	btfsc	(??_Mcp2515ReadCanId+5)& (0+255),7,c
  5345  0016B6  061D               	decf	(??_Mcp2515ReadCanId+6)& (0+255),f,c
  5346  0016B8  501D               	movf	(??_Mcp2515ReadCanId+6)& (0+255),w,c
  5347  0016BA  6E1E               	movwf	(??_Mcp2515ReadCanId+7)& (0+255),c
  5348  0016BC  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  5349  0016C0  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  5350  0016C4  C01B  FFDE         	movff	??_Mcp2515ReadCanId+4,postinc2
  5351  0016C8  C01C  FFDE         	movff	??_Mcp2515ReadCanId+5,postinc2
  5352  0016CC  C01D  FFDE         	movff	??_Mcp2515ReadCanId+6,postinc2
  5353  0016D0  C01E  FFDE         	movff	??_Mcp2515ReadCanId+7,postinc2
  5354                           
  5355                           ;mcp2515.c: 176: if ( (msg[1+2] & 0x08) == 0x08 )
  5356  0016D4  A62D               	btfss	Mcp2515ReadCanId@msg+3,3,c
  5357  0016D6  0012               	return	
  5358                           
  5359                           ;mcp2515.c: 177: {
  5360                           ;mcp2515.c: 179: *can_id = (*can_id<<2) + (msg[1+2] & 0x03);
  5361  0016D8  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  5362  0016DC  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  5363  0016E0  CFDE F017          	movff	postinc2,??_Mcp2515ReadCanId
  5364  0016E4  CFDE F018          	movff	postinc2,??_Mcp2515ReadCanId+1
  5365  0016E8  CFDE F019          	movff	postinc2,??_Mcp2515ReadCanId+2
  5366  0016EC  CFDE F01A          	movff	postinc2,??_Mcp2515ReadCanId+3
  5367  0016F0  0E02               	movlw	2
  5368  0016F2                     i2u67_45:
  5369  0016F2  90D8               	bcf	status,0,c
  5370  0016F4  3617               	rlcf	??_Mcp2515ReadCanId,f,c
  5371  0016F6  3618               	rlcf	??_Mcp2515ReadCanId+1,f,c
  5372  0016F8  3619               	rlcf	??_Mcp2515ReadCanId+2,f,c
  5373  0016FA  361A               	rlcf	??_Mcp2515ReadCanId+3,f,c
  5374  0016FC  2EE8               	decfsz	wreg,f,c
  5375  0016FE  D7F9               	goto	i2u67_45
  5376  001700  C02D  F01B         	movff	Mcp2515ReadCanId@msg+3,??_Mcp2515ReadCanId+4
  5377  001704  0E03               	movlw	3
  5378  001706  161B               	andwf	??_Mcp2515ReadCanId+4,f,c
  5379  001708  501B               	movf	??_Mcp2515ReadCanId+4,w,c
  5380  00170A  2417               	addwf	??_Mcp2515ReadCanId,w,c
  5381  00170C  6E1C               	movwf	(??_Mcp2515ReadCanId+5)& (0+255),c
  5382  00170E  0E00               	movlw	0
  5383  001710  2018               	addwfc	??_Mcp2515ReadCanId+1,w,c
  5384  001712  6E1D               	movwf	(??_Mcp2515ReadCanId+6)& (0+255),c
  5385  001714  0E00               	movlw	0
  5386  001716  2019               	addwfc	??_Mcp2515ReadCanId+2,w,c
  5387  001718  6E1E               	movwf	(??_Mcp2515ReadCanId+7)& (0+255),c
  5388  00171A  0E00               	movlw	0
  5389  00171C  201A               	addwfc	??_Mcp2515ReadCanId+3,w,c
  5390  00171E  6E1F               	movwf	(??_Mcp2515ReadCanId+8)& (0+255),c
  5391  001720  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  5392  001724  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  5393  001728  C01C  FFDE         	movff	??_Mcp2515ReadCanId+5,postinc2
  5394  00172C  C01D  FFDE         	movff	??_Mcp2515ReadCanId+6,postinc2
  5395  001730  C01E  FFDE         	movff	??_Mcp2515ReadCanId+7,postinc2
  5396  001734  C01F  FFDE         	movff	??_Mcp2515ReadCanId+8,postinc2
  5397                           
  5398                           ;mcp2515.c: 180: *can_id <<= 16;
  5399  001738  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  5400  00173C  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  5401  001740  0E10               	movlw	16
  5402  001742                     i2u68_45:
  5403  001742  90D8               	bcf	status,0,c
  5404  001744  36DE               	rlcf	postinc2,f,c
  5405  001746  36DE               	rlcf	postinc2,f,c
  5406  001748  36DE               	rlcf	postinc2,f,c
  5407  00174A  36DD               	rlcf	postdec2,f,c
  5408  00174C  06D9               	decf	fsr2l,f,c
  5409  00174E  06D9               	decf	fsr2l,f,c
  5410  001750  2EE8               	decfsz	wreg,f,c
  5411  001752  D7F7               	goto	i2u68_45
  5412                           
  5413                           ;mcp2515.c: 181: *can_id = *can_id +(msg[2+2]<<8) + msg[3+2];
  5414  001754  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  5415  001758  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  5416  00175C  CFDE F017          	movff	postinc2,??_Mcp2515ReadCanId
  5417  001760  CFDE F018          	movff	postinc2,??_Mcp2515ReadCanId+1
  5418  001764  CFDE F019          	movff	postinc2,??_Mcp2515ReadCanId+2
  5419  001768  CFDE F01A          	movff	postinc2,??_Mcp2515ReadCanId+3
  5420  00176C  502E               	movf	Mcp2515ReadCanId@msg+4,w,c
  5421  00176E  6E1C               	movwf	(??_Mcp2515ReadCanId+5)& (0+255),c
  5422  001770  6A1B               	clrf	(??_Mcp2515ReadCanId+4)& (0+255),c
  5423  001772  C01B  F01D         	movff	??_Mcp2515ReadCanId+4,??_Mcp2515ReadCanId+6
  5424  001776  C01C  F01E         	movff	??_Mcp2515ReadCanId+5,??_Mcp2515ReadCanId+7
  5425  00177A  0E00               	movlw	0
  5426  00177C  BE1E               	btfsc	(??_Mcp2515ReadCanId+7)& (0+255),7,c
  5427  00177E  0EFF               	movlw	255
  5428  001780  6E1F               	movwf	(??_Mcp2515ReadCanId+8)& (0+255),c
  5429  001782  6E20               	movwf	(??_Mcp2515ReadCanId+9)& (0+255),c
  5430  001784  502F               	movf	Mcp2515ReadCanId@msg+5,w,c
  5431  001786  241D               	addwf	??_Mcp2515ReadCanId+6,w,c
  5432  001788  6E21               	movwf	(??_Mcp2515ReadCanId+10)& (0+255),c
  5433  00178A  0E00               	movlw	0
  5434  00178C  201E               	addwfc	??_Mcp2515ReadCanId+7,w,c
  5435  00178E  6E22               	movwf	(??_Mcp2515ReadCanId+11)& (0+255),c
  5436  001790  0E00               	movlw	0
  5437  001792  201F               	addwfc	??_Mcp2515ReadCanId+8,w,c
  5438  001794  6E23               	movwf	(??_Mcp2515ReadCanId+12)& (0+255),c
  5439  001796  0E00               	movlw	0
  5440  001798  2020               	addwfc	??_Mcp2515ReadCanId+9,w,c
  5441  00179A  6E24               	movwf	(??_Mcp2515ReadCanId+13)& (0+255),c
  5442  00179C  5017               	movf	??_Mcp2515ReadCanId,w,c
  5443  00179E  2421               	addwf	??_Mcp2515ReadCanId+10,w,c
  5444  0017A0  6E25               	movwf	(??_Mcp2515ReadCanId+14)& (0+255),c
  5445  0017A2  5018               	movf	??_Mcp2515ReadCanId+1,w,c
  5446  0017A4  2022               	addwfc	??_Mcp2515ReadCanId+11,w,c
  5447  0017A6  6E26               	movwf	(??_Mcp2515ReadCanId+15)& (0+255),c
  5448  0017A8  5019               	movf	??_Mcp2515ReadCanId+2,w,c
  5449  0017AA  2023               	addwfc	??_Mcp2515ReadCanId+12,w,c
  5450  0017AC  6E27               	movwf	(??_Mcp2515ReadCanId+16)& (0+255),c
  5451  0017AE  501A               	movf	??_Mcp2515ReadCanId+3,w,c
  5452  0017B0  2024               	addwfc	??_Mcp2515ReadCanId+13,w,c
  5453  0017B2  6E28               	movwf	(??_Mcp2515ReadCanId+17)& (0+255),c
  5454  0017B4  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  5455  0017B8  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  5456  0017BC  C025  FFDE         	movff	??_Mcp2515ReadCanId+14,postinc2
  5457  0017C0  C026  FFDE         	movff	??_Mcp2515ReadCanId+15,postinc2
  5458  0017C4  C027  FFDE         	movff	??_Mcp2515ReadCanId+16,postinc2
  5459  0017C8  C028  FFDE         	movff	??_Mcp2515ReadCanId+17,postinc2
  5460                           
  5461                           ;mcp2515.c: 182: *ext = 1;
  5462  0017CC  C013  FFD9         	movff	Mcp2515ReadCanId@ext,fsr2l
  5463  0017D0  C014  FFDA         	movff	Mcp2515ReadCanId@ext+1,fsr2h
  5464  0017D4  0E01               	movlw	1
  5465  0017D6  6EDF               	movwf	indf2,c
  5466  0017D8  0012               	return	
  5467  0017DA                     __end_of_Mcp2515ReadCanId:
  5468                           	opt stack 0
  5469                           pclatu	equ	0xFFB
  5470                           pclath	equ	0xFFA
  5471                           tblptru	equ	0xFF8
  5472                           tblptrh	equ	0xFF7
  5473                           tblptrl	equ	0xFF6
  5474                           tablat	equ	0xFF5
  5475                           prodh	equ	0xFF4
  5476                           prodl	equ	0xFF3
  5477                           intcon2	equ	0xFF1
  5478                           intcon3	equ	0xFF0
  5479                           postinc0	equ	0xFEE
  5480                           fsr0h	equ	0xFEA
  5481                           fsr0l	equ	0xFE9
  5482                           wreg	equ	0xFE8
  5483                           indf1	equ	0xFE7
  5484                           postinc1	equ	0xFE6
  5485                           postdec1	equ	0xFE5
  5486                           plusw1	equ	0xFE3
  5487                           fsr1h	equ	0xFE2
  5488                           fsr1l	equ	0xFE1
  5489                           indf2	equ	0xFDF
  5490                           postinc2	equ	0xFDE
  5491                           postdec2	equ	0xFDD
  5492                           plusw2	equ	0xFDB
  5493                           fsr2h	equ	0xFDA
  5494                           fsr2l	equ	0xFD9
  5495                           status	equ	0xFD8
  5496                           
  5497 ;; *************** function _Can_OutBufferStatus *****************
  5498 ;; Defined at:
  5499 ;;		line 156 in file "can.c"
  5500 ;; Parameters:    Size  Location     Type
  5501 ;;		None
  5502 ;; Auto vars:     Size  Location     Type
  5503 ;;		None
  5504 ;; Return value:  Size  Location     Type
  5505 ;;                  1    wreg      unsigned char 
  5506 ;; Registers used:
  5507 ;;		wreg, status,2
  5508 ;; Tracked objects:
  5509 ;;		On entry : 0/0
  5510 ;;		On exit  : 0/0
  5511 ;;		Unchanged: 0/0
  5512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5516 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5517 ;;Total ram usage:        0 bytes
  5518 ;; Hardware stack levels used:    1
  5519 ;; This function calls:
  5520 ;;		Nothing
  5521 ;; This function is called by:
  5522 ;;		_Can_Isr
  5523 ;; This function uses a non-reentrant model
  5524 ;;
  5525                           
  5526                           	psect	text24
  5527  002572                     __ptext24:
  5528                           	opt stack 0
  5529  002572                     _Can_OutBufferStatus:
  5530                           	opt stack 22
  5531                           
  5532                           ;can.c: 158: return txBufferCount;
  5533                           
  5534                           ;incstack = 0
  5535  002572  0100               	movlb	0	; () banked
  5536  002574  51A8               	movf	_txBufferCount& (0+255),w,b
  5537  002576  0012               	return	
  5538  002578                     __end_of_Can_OutBufferStatus:
  5539                           	opt stack 0
  5540                           pclatu	equ	0xFFB
  5541                           pclath	equ	0xFFA
  5542                           tblptru	equ	0xFF8
  5543                           tblptrh	equ	0xFF7
  5544                           tblptrl	equ	0xFF6
  5545                           tablat	equ	0xFF5
  5546                           prodh	equ	0xFF4
  5547                           prodl	equ	0xFF3
  5548                           intcon2	equ	0xFF1
  5549                           intcon3	equ	0xFF0
  5550                           postinc0	equ	0xFEE
  5551                           fsr0h	equ	0xFEA
  5552                           fsr0l	equ	0xFE9
  5553                           wreg	equ	0xFE8
  5554                           indf1	equ	0xFE7
  5555                           postinc1	equ	0xFE6
  5556                           postdec1	equ	0xFE5
  5557                           plusw1	equ	0xFE3
  5558                           fsr1h	equ	0xFE2
  5559                           fsr1l	equ	0xFE1
  5560                           indf2	equ	0xFDF
  5561                           postinc2	equ	0xFDE
  5562                           postdec2	equ	0xFDD
  5563                           plusw2	equ	0xFDB
  5564                           fsr2h	equ	0xFDA
  5565                           fsr2l	equ	0xFD9
  5566                           status	equ	0xFD8
  5567                           
  5568 ;; *************** function _Can_GetStatus *****************
  5569 ;; Defined at:
  5570 ;;		line 344 in file "can.c"
  5571 ;; Parameters:    Size  Location     Type
  5572 ;;		None
  5573 ;; Auto vars:     Size  Location     Type
  5574 ;;  msg4            4   18[COMRAM] unsigned char [4]
  5575 ;;  msg             3   22[COMRAM] unsigned char [3]
  5576 ;;  status          1   25[COMRAM] unsigned char 
  5577 ;; Return value:  Size  Location     Type
  5578 ;;                  1    wreg      unsigned char 
  5579 ;; Registers used:
  5580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5581 ;; Tracked objects:
  5582 ;;		On entry : 0/0
  5583 ;;		On exit  : 0/0
  5584 ;;		Unchanged: 0/0
  5585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5587 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5589 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5590 ;;Total ram usage:        8 bytes
  5591 ;; Hardware stack levels used:    1
  5592 ;; Hardware stack levels required when called:    2
  5593 ;; This function calls:
  5594 ;;		_Spi_ReadWrite
  5595 ;; This function is called by:
  5596 ;;		_Can_Isr
  5597 ;; This function uses a non-reentrant model
  5598 ;;
  5599                           
  5600                           	psect	text25
  5601  002302                     __ptext25:
  5602                           	opt stack 0
  5603  002302                     _Can_GetStatus:
  5604                           	opt stack 20
  5605                           
  5606                           ;can.c: 346: uint8_t status;
  5607                           ;can.c: 347: uint8_t msg[]={0x03,0x2C,0};
  5608                           
  5609                           ; BSR set to: 0
  5610                           ;incstack = 0
  5611  002302  C0F2  F017         	movff	Can_GetStatus@F8262,Can_GetStatus@msg
  5612  002306  C0F3  F018         	movff	Can_GetStatus@F8262+1,Can_GetStatus@msg+1
  5613  00230A  C0F4  F019         	movff	Can_GetStatus@F8262+2,Can_GetStatus@msg+2
  5614                           
  5615                           ;can.c: 348: uint8_t msg4[]={0x05,0x2C,0x1C,0};
  5616  00230E  C0E8  F013         	movff	Can_GetStatus@F8264,Can_GetStatus@msg4
  5617  002312  C0E9  F014         	movff	Can_GetStatus@F8264+1,Can_GetStatus@msg4+1
  5618  002316  C0EA  F015         	movff	Can_GetStatus@F8264+2,Can_GetStatus@msg4+2
  5619  00231A  C0EB  F016         	movff	Can_GetStatus@F8264+3,Can_GetStatus@msg4+3
  5620                           
  5621                           ;can.c: 350: Spi_ReadWrite(msg,sizeof(msg));
  5622  00231E  0E17               	movlw	low Can_GetStatus@msg
  5623  002320  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  5624  002322  0E00               	movlw	high Can_GetStatus@msg
  5625  002324  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  5626  002326  0E03               	movlw	3
  5627  002328  6E0F               	movwf	Spi_ReadWrite@size,c
  5628  00232A  0E00               	movlw	0
  5629  00232C  6E10               	movwf	Spi_ReadWrite@size+1,c
  5630  00232E  0E00               	movlw	0
  5631  002330  6E11               	movwf	Spi_ReadWrite@size+2,c
  5632  002332  0E00               	movlw	0
  5633  002334  6E12               	movwf	Spi_ReadWrite@size+3,c
  5634  002336  EC86  F012         	call	_Spi_ReadWrite	;wreg free
  5635                           
  5636                           ;can.c: 351: status = msg[2];
  5637  00233A  C019  F01A         	movff	Can_GetStatus@msg+2,Can_GetStatus@status
  5638                           
  5639                           ;can.c: 352: msg4[2] = status & 0x1C;
  5640  00233E  501A               	movf	Can_GetStatus@status,w,c
  5641  002340  0B1C               	andlw	28
  5642  002342  6E15               	movwf	Can_GetStatus@msg4+2,c
  5643                           
  5644                           ;can.c: 353: Spi_ReadWrite(msg4,sizeof(msg4));
  5645  002344  0E13               	movlw	low Can_GetStatus@msg4
  5646  002346  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  5647  002348  0E00               	movlw	high Can_GetStatus@msg4
  5648  00234A  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  5649  00234C  0E04               	movlw	4
  5650  00234E  6E0F               	movwf	Spi_ReadWrite@size,c
  5651  002350  0E00               	movlw	0
  5652  002352  6E10               	movwf	Spi_ReadWrite@size+1,c
  5653  002354  0E00               	movlw	0
  5654  002356  6E11               	movwf	Spi_ReadWrite@size+2,c
  5655  002358  0E00               	movlw	0
  5656  00235A  6E12               	movwf	Spi_ReadWrite@size+3,c
  5657  00235C  EC86  F012         	call	_Spi_ReadWrite	;wreg free
  5658                           
  5659                           ;can.c: 354: return status;
  5660  002360  501A               	movf	Can_GetStatus@status,w,c
  5661  002362  0012               	return	
  5662  002364                     __end_of_Can_GetStatus:
  5663                           	opt stack 0
  5664                           pclatu	equ	0xFFB
  5665                           pclath	equ	0xFFA
  5666                           tblptru	equ	0xFF8
  5667                           tblptrh	equ	0xFF7
  5668                           tblptrl	equ	0xFF6
  5669                           tablat	equ	0xFF5
  5670                           prodh	equ	0xFF4
  5671                           prodl	equ	0xFF3
  5672                           intcon2	equ	0xFF1
  5673                           intcon3	equ	0xFF0
  5674                           postinc0	equ	0xFEE
  5675                           fsr0h	equ	0xFEA
  5676                           fsr0l	equ	0xFE9
  5677                           wreg	equ	0xFE8
  5678                           indf1	equ	0xFE7
  5679                           postinc1	equ	0xFE6
  5680                           postdec1	equ	0xFE5
  5681                           plusw1	equ	0xFE3
  5682                           fsr1h	equ	0xFE2
  5683                           fsr1l	equ	0xFE1
  5684                           indf2	equ	0xFDF
  5685                           postinc2	equ	0xFDE
  5686                           postdec2	equ	0xFDD
  5687                           plusw2	equ	0xFDB
  5688                           fsr2h	equ	0xFDA
  5689                           fsr2l	equ	0xFD9
  5690                           status	equ	0xFD8
  5691                           
  5692 ;; *************** function _Spi_ReadWrite *****************
  5693 ;; Defined at:
  5694 ;;		line 314 in file "can.c"
  5695 ;; Parameters:    Size  Location     Type
  5696 ;;  rx_tx           2   12[COMRAM] PTR unsigned char 
  5697 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515ReadCanMsg@cmd(10), Mcp2515ReadCanId@msg(6), Can_ReadMessage@buf(4), 
  5698 ;;		 -> Can_GetStatus@msg4(4), Can_GetStatus@msg(3), 
  5699 ;;  size            4   14[COMRAM] unsigned long 
  5700 ;; Auto vars:     Size  Location     Type
  5701 ;;		None
  5702 ;; Return value:  Size  Location     Type
  5703 ;;                  1    wreg      void 
  5704 ;; Registers used:
  5705 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5706 ;; Tracked objects:
  5707 ;;		On entry : 0/0
  5708 ;;		On exit  : 0/0
  5709 ;;		Unchanged: 0/0
  5710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5711 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5714 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5715 ;;Total ram usage:        6 bytes
  5716 ;; Hardware stack levels used:    1
  5717 ;; Hardware stack levels required when called:    1
  5718 ;; This function calls:
  5719 ;;		i2_SPIRW
  5720 ;; This function is called by:
  5721 ;;		_Can_GetStatus
  5722 ;;		_Can_ReadMessage
  5723 ;;		_Mcp2515ReadCanId
  5724 ;;		_Mcp2515ReadCanMsg
  5725 ;;		_Mcp2515GetNextFreeTXBuf
  5726 ;; This function uses a non-reentrant model
  5727 ;;
  5728                           
  5729                           	psect	text26
  5730  00250C                     __ptext26:
  5731                           	opt stack 0
  5732  00250C                     _Spi_ReadWrite:
  5733                           	opt stack 18
  5734                           
  5735                           ;can.c: 316: SPIRW(rx_tx, rx_tx, size);
  5736                           
  5737                           ;incstack = 0
  5738  00250C  C00D  F001         	movff	Spi_ReadWrite@rx_tx,i2SPIRW@tx
  5739  002510  C00E  F002         	movff	Spi_ReadWrite@rx_tx+1,i2SPIRW@tx+1
  5740  002514  C00D  F003         	movff	Spi_ReadWrite@rx_tx,i2SPIRW@rx
  5741  002518  C00E  F004         	movff	Spi_ReadWrite@rx_tx+1,i2SPIRW@rx+1
  5742  00251C  C00F  F005         	movff	Spi_ReadWrite@size,i2SPIRW@size
  5743  002520  C010  F006         	movff	Spi_ReadWrite@size+1,i2SPIRW@size+1
  5744  002524  C011  F007         	movff	Spi_ReadWrite@size+2,i2SPIRW@size+2
  5745  002528  C012  F008         	movff	Spi_ReadWrite@size+3,i2SPIRW@size+3
  5746  00252C  EC82  F010         	call	i2_SPIRW	;wreg free
  5747  002530  0012               	return		;funcret
  5748  002532                     __end_of_Spi_ReadWrite:
  5749                           	opt stack 0
  5750                           pclatu	equ	0xFFB
  5751                           pclath	equ	0xFFA
  5752                           tblptru	equ	0xFF8
  5753                           tblptrh	equ	0xFF7
  5754                           tblptrl	equ	0xFF6
  5755                           tablat	equ	0xFF5
  5756                           prodh	equ	0xFF4
  5757                           prodl	equ	0xFF3
  5758                           intcon2	equ	0xFF1
  5759                           intcon3	equ	0xFF0
  5760                           postinc0	equ	0xFEE
  5761                           fsr0h	equ	0xFEA
  5762                           fsr0l	equ	0xFE9
  5763                           wreg	equ	0xFE8
  5764                           indf1	equ	0xFE7
  5765                           postinc1	equ	0xFE6
  5766                           postdec1	equ	0xFE5
  5767                           plusw1	equ	0xFE3
  5768                           fsr1h	equ	0xFE2
  5769                           fsr1l	equ	0xFE1
  5770                           indf2	equ	0xFDF
  5771                           postinc2	equ	0xFDE
  5772                           postdec2	equ	0xFDD
  5773                           plusw2	equ	0xFDB
  5774                           fsr2h	equ	0xFDA
  5775                           fsr2l	equ	0xFD9
  5776                           status	equ	0xFD8
  5777                           
  5778 ;; *************** function i2_SPIRW *****************
  5779 ;; Defined at:
  5780 ;;		line 288 in file "can.c"
  5781 ;; Parameters:    Size  Location     Type
  5782 ;;  tx              2    0[COMRAM] PTR const unsigned char 
  5783 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515WriteCanMsg@buf(10), Mcp2515WriteCanId@buf(6), Mcp2515ReadCanMsg@cmd(10),
      + 
  5784 ;;		 -> Mcp2515ReadCanId@msg(6), Mcp2515Sleep@cmdMask4(3), Mcp2515_Init@cmdWrite3(3), Mcp2515_Init@cmdMask4(4), 
  5785 ;;		 -> Mcp2515_Reset@cmd(1), Can_SendMessage@buf(4), Can_ReadMessage@buf(4), Can_GetStatus@msg4(4), 
  5786 ;;		 -> Can_GetStatus@msg(3), 
  5787 ;;  rx              2    2[COMRAM] PTR unsigned char 
  5788 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515ReadCanMsg@cmd(10), Mcp2515ReadCanId@msg(6), Can_ReadMessage@buf(4), 
  5789 ;;		 -> Can_GetStatus@msg4(4), Can_GetStatus@msg(3), NULL(0), 
  5790 ;;  size            4    4[COMRAM] unsigned long 
  5791 ;; Auto vars:     Size  Location     Type
  5792 ;;  SPIRW           4    8[COMRAM] unsigned long 
  5793 ;; Return value:  Size  Location     Type
  5794 ;;                  1    wreg      void 
  5795 ;; Registers used:
  5796 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5797 ;; Tracked objects:
  5798 ;;		On entry : 0/0
  5799 ;;		On exit  : 0/0
  5800 ;;		Unchanged: 0/0
  5801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5802 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5803 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5805 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5806 ;;Total ram usage:       12 bytes
  5807 ;; Hardware stack levels used:    1
  5808 ;; This function calls:
  5809 ;;		Nothing
  5810 ;; This function is called by:
  5811 ;;		_Spi_ReadWrite
  5812 ;;		i2_Spi_Write
  5813 ;; This function uses a non-reentrant model
  5814 ;;
  5815                           
  5816                           	psect	text27
  5817  002104                     __ptext27:
  5818                           	opt stack 0
  5819  002104                     i2_SPIRW:
  5820                           	opt stack 19
  5821                           
  5822                           ;can.c: 290: uint32_t i;
  5823                           ;can.c: 292: SSPCON1 = 0b00111010;
  5824                           
  5825                           ;incstack = 0
  5826  002104  0E3A               	movlw	58
  5827  002106  6EC6               	movwf	4038,c	;volatile
  5828                           
  5829                           ;can.c: 294: LATD1 = 0;
  5830  002108  928C               	bcf	3980,1,c	;volatile
  5831                           
  5832                           ;can.c: 295: for(i=0;i<size;i++)
  5833  00210A  0E00               	movlw	0
  5834  00210C  6E09               	movwf	i2SPIRW@i,c
  5835  00210E  0E00               	movlw	0
  5836  002110  6E0A               	movwf	i2SPIRW@i+1,c
  5837  002112  0E00               	movlw	0
  5838  002114  6E0B               	movwf	i2SPIRW@i+2,c
  5839  002116  0E00               	movlw	0
  5840  002118  6E0C               	movwf	i2SPIRW@i+3,c
  5841  00211A  D01D               	goto	i2l1587
  5842  00211C                     i2l1579:
  5843                           
  5844                           ;can.c: 296: {
  5845                           ;can.c: 297: SSPBUF = tx[i];
  5846  00211C  5009               	movf	i2SPIRW@i,w,c
  5847  00211E  2401               	addwf	i2SPIRW@tx,w,c
  5848  002120  6ED9               	movwf	fsr2l,c
  5849  002122  500A               	movf	i2SPIRW@i+1,w,c
  5850  002124  2002               	addwfc	i2SPIRW@tx+1,w,c
  5851  002126  6EDA               	movwf	fsr2h,c
  5852  002128  50DF               	movf	indf2,w,c
  5853  00212A  6EC9               	movwf	4041,c	;volatile
  5854  00212C                     i2l188:
  5855  00212C  A69E               	btfss	3998,3,c	;volatile
  5856  00212E  D7FE               	goto	i2l188
  5857                           
  5858                           ;can.c: 299: SSP1IF = 0;
  5859  002130  969E               	bcf	3998,3,c	;volatile
  5860                           
  5861                           ;can.c: 300: if(rx != 0)
  5862  002132  5003               	movf	i2SPIRW@rx,w,c
  5863  002134  1004               	iorwf	i2SPIRW@rx+1,w,c
  5864  002136  B4D8               	btfsc	status,2,c
  5865  002138  D008               	goto	i2l1585
  5866                           
  5867                           ;can.c: 301: rx[i] = SSPBUF;
  5868  00213A  5009               	movf	i2SPIRW@i,w,c
  5869  00213C  2403               	addwf	i2SPIRW@rx,w,c
  5870  00213E  6ED9               	movwf	fsr2l,c
  5871  002140  500A               	movf	i2SPIRW@i+1,w,c
  5872  002142  2004               	addwfc	i2SPIRW@rx+1,w,c
  5873  002144  6EDA               	movwf	fsr2h,c
  5874  002146  CFC9 FFDF          	movff	4041,indf2	;volatile
  5875  00214A                     i2l1585:
  5876  00214A  0E01               	movlw	1
  5877  00214C  2609               	addwf	i2SPIRW@i,f,c
  5878  00214E  0E00               	movlw	0
  5879  002150  220A               	addwfc	i2SPIRW@i+1,f,c
  5880  002152  220B               	addwfc	i2SPIRW@i+2,f,c
  5881  002154  220C               	addwfc	i2SPIRW@i+3,f,c
  5882  002156                     i2l1587:
  5883  002156  5005               	movf	i2SPIRW@size,w,c
  5884  002158  5C09               	subwf	i2SPIRW@i,w,c
  5885  00215A  5006               	movf	i2SPIRW@size+1,w,c
  5886  00215C  580A               	subwfb	i2SPIRW@i+1,w,c
  5887  00215E  5007               	movf	i2SPIRW@size+2,w,c
  5888  002160  580B               	subwfb	i2SPIRW@i+2,w,c
  5889  002162  5008               	movf	i2SPIRW@size+3,w,c
  5890  002164  580C               	subwfb	i2SPIRW@i+3,w,c
  5891  002166  A0D8               	btfss	status,0,c
  5892  002168  D7D9               	goto	i2l1579
  5893                           
  5894                           ;can.c: 302: }
  5895                           ;can.c: 303: LATD1 = 1;
  5896  00216A  828C               	bsf	3980,1,c	;volatile
  5897  00216C  0012               	return		;funcret
  5898  00216E                     __end_ofi2_SPIRW:
  5899                           	opt stack 0
  5900                           pclatu	equ	0xFFB
  5901                           pclath	equ	0xFFA
  5902                           tblptru	equ	0xFF8
  5903                           tblptrh	equ	0xFF7
  5904                           tblptrl	equ	0xFF6
  5905                           tablat	equ	0xFF5
  5906                           prodh	equ	0xFF4
  5907                           prodl	equ	0xFF3
  5908                           intcon2	equ	0xFF1
  5909                           intcon3	equ	0xFF0
  5910                           postinc0	equ	0xFEE
  5911                           fsr0h	equ	0xFEA
  5912                           fsr0l	equ	0xFE9
  5913                           wreg	equ	0xFE8
  5914                           indf1	equ	0xFE7
  5915                           postinc1	equ	0xFE6
  5916                           postdec1	equ	0xFE5
  5917                           plusw1	equ	0xFE3
  5918                           fsr1h	equ	0xFE2
  5919                           fsr1l	equ	0xFE1
  5920                           indf2	equ	0xFDF
  5921                           postinc2	equ	0xFDE
  5922                           postdec2	equ	0xFDD
  5923                           plusw2	equ	0xFDB
  5924                           fsr2h	equ	0xFDA
  5925                           fsr2l	equ	0xFD9
  5926                           status	equ	0xFD8
  5927                           pclatu	equ	0xFFB
  5928                           pclath	equ	0xFFA
  5929                           tblptru	equ	0xFF8
  5930                           tblptrh	equ	0xFF7
  5931                           tblptrl	equ	0xFF6
  5932                           tablat	equ	0xFF5
  5933                           prodh	equ	0xFF4
  5934                           prodl	equ	0xFF3
  5935                           intcon2	equ	0xFF1
  5936                           intcon3	equ	0xFF0
  5937                           postinc0	equ	0xFEE
  5938                           fsr0h	equ	0xFEA
  5939                           fsr0l	equ	0xFE9
  5940                           wreg	equ	0xFE8
  5941                           indf1	equ	0xFE7
  5942                           postinc1	equ	0xFE6
  5943                           postdec1	equ	0xFE5
  5944                           plusw1	equ	0xFE3
  5945                           fsr1h	equ	0xFE2
  5946                           fsr1l	equ	0xFE1
  5947                           indf2	equ	0xFDF
  5948                           postinc2	equ	0xFDE
  5949                           postdec2	equ	0xFDD
  5950                           plusw2	equ	0xFDB
  5951                           fsr2h	equ	0xFDA
  5952                           fsr2l	equ	0xFD9
  5953                           status	equ	0xFD8
  5954                           
  5955                           	psect	rparam
  5956  0000                     pclatu	equ	0xFFB
  5957                           pclath	equ	0xFFA
  5958                           tblptru	equ	0xFF8
  5959                           tblptrh	equ	0xFF7
  5960                           tblptrl	equ	0xFF6
  5961                           tablat	equ	0xFF5
  5962                           prodh	equ	0xFF4
  5963                           prodl	equ	0xFF3
  5964                           intcon2	equ	0xFF1
  5965                           intcon3	equ	0xFF0
  5966                           postinc0	equ	0xFEE
  5967                           fsr0h	equ	0xFEA
  5968                           fsr0l	equ	0xFE9
  5969                           wreg	equ	0xFE8
  5970                           indf1	equ	0xFE7
  5971                           postinc1	equ	0xFE6
  5972                           postdec1	equ	0xFE5
  5973                           plusw1	equ	0xFE3
  5974                           fsr1h	equ	0xFE2
  5975                           fsr1l	equ	0xFE1
  5976                           indf2	equ	0xFDF
  5977                           postinc2	equ	0xFDE
  5978                           postdec2	equ	0xFDD
  5979                           plusw2	equ	0xFDB
  5980                           fsr2h	equ	0xFDA
  5981                           fsr2l	equ	0xFD9
  5982                           status	equ	0xFD8
  5983                           
  5984                           	psect	temp
  5985  00005F                     btemp:
  5986                           	opt stack 0
  5987  00005F                     	ds	1
  5988  0000                     int$flags	set	btemp
  5989                           pclatu	equ	0xFFB
  5990                           pclath	equ	0xFFA
  5991                           tblptru	equ	0xFF8
  5992                           tblptrh	equ	0xFF7
  5993                           tblptrl	equ	0xFF6
  5994                           tablat	equ	0xFF5
  5995                           prodh	equ	0xFF4
  5996                           prodl	equ	0xFF3
  5997                           intcon2	equ	0xFF1
  5998                           intcon3	equ	0xFF0
  5999                           postinc0	equ	0xFEE
  6000                           fsr0h	equ	0xFEA
  6001                           fsr0l	equ	0xFE9
  6002                           wreg	equ	0xFE8
  6003                           indf1	equ	0xFE7
  6004                           postinc1	equ	0xFE6
  6005                           postdec1	equ	0xFE5
  6006                           plusw1	equ	0xFE3
  6007                           fsr1h	equ	0xFE2
  6008                           fsr1l	equ	0xFE1
  6009                           indf2	equ	0xFDF
  6010                           postinc2	equ	0xFDE
  6011                           postdec2	equ	0xFDD
  6012                           plusw2	equ	0xFDB
  6013                           fsr2h	equ	0xFDA
  6014                           fsr2l	equ	0xFD9
  6015                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    63
    Data        24
    BSS         199
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     87      94
    BANK0           160     69     149
    BANK1           256      0     136
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           22      0       0

Pointer List with Targets:

    memcpy@d1	PTR void  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    memcpy@s1	PTR const void  size(2) Largest target is 10
		 -> Mcp2515ReadCanMsg@cmd(COMRAM[10]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 10
		 -> Mcp2515ReadCanMsg@cmd(COMRAM[10]), 

    Mcp2515GetNextFreeTXBuf@txbuf_n	PTR unsigned char  size(2) Largest target is 1
		 -> Can_SendMessage@txbuf_n(COMRAM[1]), 

    Mcp2515WriteCanMsg@msg	PTR const struct CANMESSAGE size(2) Largest target is 68
		 -> txBuffer(BANK1[68]), 

    sp__memcpy	PTR void  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Mcp2515ReadCanMsg@msg	PTR struct CANMESSAGE size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Mcp2515ReadCanId@can_id	PTR unsigned long  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Mcp2515ReadCanId@ext	PTR unsigned char  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Mcp2515_Init@filterCfg	PTR struct CANFILTER size(2) Largest target is 33
		 -> filter(BANK0[33]), 

    Mcp2515_Init@speedCfg	PTR const struct CANSPEED size(2) Largest target is 7
		 -> canSpeed125k(CODE[7]), 

    Can_SendMessage@msg	PTR const struct CANMESSAGE size(2) Largest target is 68
		 -> txBuffer(BANK1[68]), 

    Can_ReadMessage@msg	PTR struct CANMESSAGE size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Spi_Write@tx	PTR unsigned char  size(2) Largest target is 10
		 -> Mcp2515WriteCanMsg@buf(COMRAM[10]), Mcp2515WriteCanId@buf(BANK0[6]), Mcp2515Sleep@cmdMask4(COMRAM[3]), Mcp2515_Init@cmdWrite3(BANK0[3]), 
		 -> Mcp2515_Init@cmdMask4(BANK0[4]), Mcp2515_Reset@cmd(BANK0[1]), Can_SendMessage@buf(COMRAM[4]), Can_ReadMessage@buf(COMRAM[4]), 

    Spi_ReadWrite@rx_tx	PTR unsigned char  size(2) Largest target is 10
		 -> Mcp2515GetNextFreeTXBuf@buf(COMRAM[3]), Mcp2515ReadCanMsg@cmd(COMRAM[10]), Mcp2515ReadCanId@msg(COMRAM[6]), Can_ReadMessage@buf(COMRAM[4]), 
		 -> Can_GetStatus@msg4(COMRAM[4]), Can_GetStatus@msg(COMRAM[3]), 

    SPIRW@rx	PTR unsigned char  size(2) Largest target is 10
		 -> Mcp2515GetNextFreeTXBuf@buf(COMRAM[3]), Mcp2515ReadCanMsg@cmd(COMRAM[10]), Mcp2515ReadCanId@msg(COMRAM[6]), Can_ReadMessage@buf(COMRAM[4]), 
		 -> Can_GetStatus@msg4(COMRAM[4]), Can_GetStatus@msg(COMRAM[3]), NULL(NULL[0]), 

    SPIRW@tx	PTR const unsigned char  size(2) Largest target is 10
		 -> Mcp2515GetNextFreeTXBuf@buf(COMRAM[3]), Mcp2515WriteCanMsg@buf(COMRAM[10]), Mcp2515WriteCanId@buf(BANK0[6]), Mcp2515ReadCanMsg@cmd(COMRAM[10]), 
		 -> Mcp2515ReadCanId@msg(COMRAM[6]), Mcp2515Sleep@cmdMask4(COMRAM[3]), Mcp2515_Init@cmdWrite3(BANK0[3]), Mcp2515_Init@cmdMask4(BANK0[4]), 
		 -> Mcp2515_Reset@cmd(BANK0[1]), Can_SendMessage@buf(COMRAM[4]), Can_ReadMessage@buf(COMRAM[4]), Can_GetStatus@msg4(COMRAM[4]), 
		 -> Can_GetStatus@msg(COMRAM[3]), 

    Can_Init@filterCfg	PTR struct CANFILTER size(2) Largest target is 33
		 -> filter(BANK0[33]), 

    Can_Init@speedCfg	PTR const struct CANSPEED size(2) Largest target is 7
		 -> canSpeed125k(CODE[7]), 

    Can_PutMessage@msgPtr	PTR struct CANMESSAGE size(2) Largest target is 17
		 -> message(BANK0[17]), 

    Can_GetMessage@msgPtr	PTR struct CANMESSAGE size(2) Largest target is 17
		 -> message(BANK0[17]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_Can_Isr
    _Can_Isr->_Can_ReadInBuffer
    _Can_WriteOutBuffer->_Can_SendMessage
    _Can_SendMessage->_Mcp2515WriteCanMsg
    _Mcp2515WriteCanMsg->i2_Mcp2515WriteCanId
    i2_Mcp2515WriteCanId->i2_Spi_Write
    _Mcp2515GetNextFreeTXBuf->_Spi_ReadWrite
    _Can_ReadInBuffer->_Can_ReadMessage
    _Can_ReadMessage->_Mcp2515ReadCanMsg
    i2_Spi_Write->i2_SPIRW
    _Mcp2515ReadCanMsg->_Mcp2515ReadCanId
    _Mcp2515ReadCanId->_Spi_ReadWrite
    _Can_GetStatus->_Spi_ReadWrite
    _Spi_ReadWrite->i2_SPIRW

Critical Paths under _main in BANK0

    _init->_Can_Init
    _readID->_Can_GetMessage
    _readID->_Can_PutMessage
    _Can_Init->_Mcp2515_Init
    _Mcp2515_Init->_Mcp2515WriteCanId
    _Mcp2515_Reset->_Spi_Write
    _Mcp2515WriteCanId->_Spi_Write
    _Spi_Write->_SPIRW

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5   15840
                                             64 BANK0      5     0      5
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0   15840
                           _Can_Init
                             _readID
 ---------------------------------------------------------------------------------
 (2) _readID                                               1     1      0     642
                                              5 BANK0      1     1      0
                     _Can_GetMessage
                     _Can_PutMessage
 ---------------------------------------------------------------------------------
 (3) _Can_PutMessage                                       5     3      2     320
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (3) _Can_GetMessage                                       5     3      2     298
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _Can_Init                                             4     0      4   15198
                                             60 BANK0      4     0      4
                       _Mcp2515_Init
 ---------------------------------------------------------------------------------
 (3) _Mcp2515_Init                                        25    21      4   14850
                                             35 BANK0     25    21      4
                  _Mcp2515WriteCanId
                      _Mcp2515_Reset
                          _Spi_Write
 ---------------------------------------------------------------------------------
 (4) _Mcp2515_Reset                                        5     5      0    3781
                                             18 BANK0      5     5      0
                          _Spi_Write
 ---------------------------------------------------------------------------------
 (4) _Mcp2515WriteCanId                                   17    12      5    5581
                                             18 BANK0     17    12      5
                          _Spi_Write
 ---------------------------------------------------------------------------------
 (4) _Spi_Write                                            6     0      6    3710
                                             12 BANK0      6     0      6
                              _SPIRW
 ---------------------------------------------------------------------------------
 (5) _SPIRW                                               12     4      8     534
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _high_isr                                            14    14      0   15316
                                             73 COMRAM    14    14      0
                            _Can_Isr
 ---------------------------------------------------------------------------------
 (8) _Can_Isr                                              2     2      0   15316
                                             71 COMRAM     2     2      0
                      _Can_GetStatus
                _Can_OutBufferStatus
                   _Can_ReadInBuffer
                 _Can_WriteOutBuffer
 ---------------------------------------------------------------------------------
 (9) _Can_WriteOutBuffer                                   0     0      0    5689
                    _Can_SendMessage
 ---------------------------------------------------------------------------------
 (10) _Can_SendMessage                                     8     6      2    5689
                                             53 COMRAM     8     6      2
            _Mcp2515GetNextFreeTXBuf
                 _Mcp2515WriteCanMsg
                        i2_Spi_Write
 ---------------------------------------------------------------------------------
 (11) _Mcp2515WriteCanMsg                                 18    16      2    2682
                                             35 COMRAM    18    16      2
                i2_Mcp2515WriteCanId
                        i2_Spi_Write
 ---------------------------------------------------------------------------------
 (12) i2_Mcp2515WriteCanId                                17    12      5    1333
                                             18 COMRAM    17    12      5
                        i2_Spi_Write
 ---------------------------------------------------------------------------------
 (11) _Mcp2515GetNextFreeTXBuf                            10     8      2    1927
                                             18 COMRAM    10     8      2
                      _Spi_ReadWrite
 ---------------------------------------------------------------------------------
 (9) _Can_ReadInBuffer                                     3     3      0    7772
                                             68 COMRAM     3     3      0
                    _Can_ReadMessage
 ---------------------------------------------------------------------------------
 (10) _Can_ReadMessage                                     6     4      2    7695
                                             62 COMRAM     6     4      2
                  _Mcp2515ReadCanMsg
                      _Spi_ReadWrite
                        i2_Spi_Write
 ---------------------------------------------------------------------------------
 (11) i2_Spi_Write                                         6     0      6     772
                                             12 COMRAM     6     0      6
                            i2_SPIRW
 ---------------------------------------------------------------------------------
 (11) _Mcp2515ReadCanMsg                                  15    13      2    4754
                                             47 COMRAM    15    13      2
                   _Mcp2515ReadCanId
                      _Spi_ReadWrite
                             _memcpy
 ---------------------------------------------------------------------------------
 (12) _memcpy                                             11     5      6     371
                                              0 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (12) _Mcp2515ReadCanId                                   29    25      4    2157
                                             18 COMRAM    29    25      4
                      _Spi_ReadWrite
 ---------------------------------------------------------------------------------
 (9) _Can_OutBufferStatus                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _Can_GetStatus                                        8     8      0    1744
                                             18 COMRAM     8     8      0
                      _Spi_ReadWrite
 ---------------------------------------------------------------------------------
 (12) _Spi_ReadWrite                                       6     0      6    1594
                                             12 COMRAM     6     0      6
                            i2_SPIRW
 ---------------------------------------------------------------------------------
 (12) i2_SPIRW                                            12     4      8     312
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _Can_Init
       _Mcp2515_Init
         _Mcp2515WriteCanId
           _Spi_Write
             _SPIRW
         _Mcp2515_Reset
           _Spi_Write
             _SPIRW
         _Spi_Write
           _SPIRW
     _readID
       _Can_GetMessage
       _Can_PutMessage

 _high_isr (ROOT)
   _Can_Isr
     _Can_GetStatus
       _Spi_ReadWrite
         i2_SPIRW
     _Can_OutBufferStatus
     _Can_ReadInBuffer
       _Can_ReadMessage
         _Mcp2515ReadCanMsg
           _Mcp2515ReadCanId
             _Spi_ReadWrite
               i2_SPIRW
           _Spi_ReadWrite
             i2_SPIRW
           _memcpy
         _Spi_ReadWrite
           i2_SPIRW
         i2_Spi_Write
           i2_SPIRW
     _Can_WriteOutBuffer
       _Can_SendMessage
         _Mcp2515GetNextFreeTXBuf
           _Spi_ReadWrite
             i2_SPIRW
         _Mcp2515WriteCanMsg
           i2_Mcp2515WriteCanId
             i2_Spi_Write
               i2_SPIRW
           i2_Spi_Write
             i2_SPIRW
         i2_Spi_Write
           i2_SPIRW

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F15      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      88       7       53.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     45      95       5       93.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     57      5E       1      100.0%
BITBANK15           16      0       0      35        0.0%
BANK15              16      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     17B      12        0.0%
DATA                 0      0     17B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Thu May 17 16:10:47 2018

                       i2_Spi_Write 24E6                                  _id 00AB  
                       __CFG_BORV$2 000000                       i2Spi_Write@tx 000D  
                      __CFG_CP0$OFF 000000                        __CFG_CP1$OFF 000000  
                      __CFG_CP2$OFF 000000                        __CFG_CP3$OFF 000000  
                      __CFG_CP4$OFF 000000                        __CFG_CP5$OFF 000000  
                      __CFG_CP6$OFF 000000                        __CFG_CP7$OFF 000000  
                               l247 223A                                 l188 201C  
                      __CFG_CPB$OFF 000000                                 _RB3 007C0B  
                      __CFG_CPD$OFF 000000                                 u825 1D9E  
                               u835 1DEE                                 u925 10C0  
                               u935 1174                                 u945 1236  
                               fsr2 000FD9                                 prod 000FF3  
                               wreg 000FE8                                l2011 1590  
                              l2043 2398                                l1601 2054  
                              l1805 18F0                                l1593 2004  
                              l1833 1ACA                                l1809 1952  
                              l1763 2210                                l1843 1AF6  
                              l1829 1A68                                l1599 2046  
                              l1791 1DB6                                l1971 1440  
                              l1797 1E0E                                l1967 1436  
                              l1985 14CA                                l1999 1544  
                              _CKE1 007E3E                                _CKP1 007E34  
                     __CFG_DEBUG$ON 000000                        __CFG_WDTPS$1 000000  
                              _TXIF 007CF4               Mcp2515ReadCanId@F8123 00DE  
                   __end_ofi2_SPIRW 216E                Mcp2515ReadCanMsg@cmd 0034  
              Mcp2515ReadCanMsg@msg 0030                                _main 256A  
                              _init 22A0                                fsr0h 000FEA  
                              fsr1h 000FE2                                fsr2h 000FDA  
                              fsr0l 000FE9                                indf1 000FE7  
                              indf2 000FDF                                fsr1l 000FE1  
                              fsr2l 000FD9                                btemp 005F  
                   __end_of_Can_Isr 2400                                prodh 000FF4  
                              prodl 000FF3                                start 008E  
                     __CFG_IESO$OFF 000000            __end_of_Mcp2515ReadCanId 17DA  
                     __CFG_MCLRE$ON 000000               __size_of_Mcp2515_Init 05EC  
                      ___param_bank 000000                     i2Spi_Write@size 000F  
          __size_of_Can_ReadMessage 00FA                  Can_ReadMessage@buf 0041  
                Can_ReadMessage@msg 003F           Mcp2515WriteCanId@mcp_addr 007A  
                             ?_main 00A0                               ?_init 0001  
                             _BRGH1 007D62                               _CREN1 007D5C  
                             _LATD1 007C61                               _LATG0 007C78  
                             _LATF6 007C76                               _LATF7 007C77  
                             i2l209 1EBE                               i2l234 0052  
                             i2l188 212C                       _Can_GetStatus 2302  
                             _PLLEN 007CDE                               _SPEN1 007D5F  
                             _SPIRW 1FEA                               _SSPIF 007CF3  
                             _TXEN1 007D65                               _SYNC1 007D64  
                             _TXREG 000FAD                       __CFG_WRT0$OFF 000000  
                     __CFG_WRT1$OFF 000000                       __CFG_WRT2$OFF 000000  
                     __CFG_WRT3$OFF 000000                       __CFG_WRT4$OFF 000000  
                    __CFG_EBRT0$OFF 000000                       __CFG_WRT5$OFF 000000  
                    __CFG_EBRT1$OFF 000000                       __CFG_WRT6$OFF 000000  
                    __CFG_EBRT2$OFF 000000                       __CFG_WRT7$OFF 000000  
                    __CFG_EBRT3$OFF 000000                      __CFG_EBRT4$OFF 000000  
                    __CFG_FCMEN$OFF 000000                      __CFG_EBRT5$OFF 000000  
                    __CFG_EBRT6$OFF 000000                      __CFG_EBRT7$OFF 000000  
                     __CFG_WRTB$OFF 000000                       __CFG_WRTC$OFF 000000  
                     __CFG_WRTD$OFF 000000                      __CFG_EBRTB$OFF 000000  
                             _nbTx0 005A                               _nbTx1 0059  
                             _nbTx2 0058                      __CFG_BOREN$OFF 000000  
                             pclath 000FFA                               tablat 000FF5  
                  __end_of_Can_Init 24BC                        _Mcp2515_Init 1042  
           __size_of_Can_PutMessage 01A6                               plusw1 000FE3  
                             plusw2 000FDB                               status 000FD8  
          ?_Mcp2515GetNextFreeTXBuf 0013                     __initialization 216E  
            __size_of_Mcp2515_Reset 0066              Mcp2515ReadCanId@can_id 0015  
                      __end_of_main 2572                        __end_of_init 2302  
          __end_of_Can_ReadInBuffer 2444            __size_of_Can_SendMessage 0064  
             Can_ReadInBuffer@error 0045                        _canSpeed100k 101D  
                      _canSpeed125k 1039                        _canSpeed250k 1016  
                      _canSpeed500k 100F                        _canSpeed800k 1008  
                            ??_main 00A5                              ??_init 00A0  
          Can_ReadInBuffer@rdStatus 0046                      ?_Can_GetStatus 0001  
             __end_of_Spi_ReadWrite 2532                       __activetblptr 000001  
                    __CFG_PLLCFG$ON 000000                              ?_SPIRW 0060  
                    __CFG_RETEN$OFF 000000                           ??i2_SPIRW 0009  
                    _Can_GetMessage 1980                              SPIRW@i 0068  
                            _BRG161 007B2B                           ??_Can_Isr 0048  
                            _INT3IE 007F85                              _INT3IF 007F82  
                   __CFG_BBSIZ$BB1K 000000                              i2l2131 23EE  
                            i2l2127 23E8                              i2l2081 2440  
                            i2l2065 2408                              i2l2069 2410  
                            i2l1701 2098                              i2l2079 243C  
                            i2l1705 20A0                              i2l1723 2100  
                            i2l1629 2456                              i2l1637 2476  
                            i2l1661 1F8E                      __CFG_WDTEN$OFF 000000  
                            i2l1719 20FC                              i2l1735 1B10  
                            i2l1911 223C                              i2l1585 214A  
                            i2l1579 211C                              i2l1587 2156  
                            i2l1683 1C86                              i2l1907 1F28  
                            i2l1667 1FCC                              i2l1739 1B48  
                            i2l1749 1BF6                              i2l1875 1EBA  
                            _OSCCON 000FD3              Mcp2515WriteCanId@canid 0081  
                            _SPBRG1 000FAF                              _SSP1IF 007CF3  
                            _TRISC3 007CA3                              _TRISD1 007CA9  
                            _TRISC4 007CA4                              _TRISC5 007CA5  
                            _SSPEN1 007E35                              _TRISG0 007CC0  
                            _TRISF6 007CBE                              _TRISF7 007CBF  
                            _SSPBUF 000FC9                      __CFG_PWRTEN$ON 000000  
                    __CFG_XINST$OFF 000000                    __end_of_high_isr 008E  
   Mcp2515GetNextFreeTXBuf@ctrlregs 0016                      __CFG_STVREN$ON 000000  
                            _filter 00AC                              _readID 2364  
                            _memcpy 2444                              clear_0 21A6  
                            clear_1 21B2                   ??_Can_ReadMessage 0041  
                __size_of_Spi_Write 002A                   Can_GetStatus@msg4 0013  
                      __pdataCOMRAM 005E              __end_of_Can_GetMessage 1AFA  
                Can_SendMessage@buf 0038                  Can_SendMessage@msg 0036  
                Can_SendMessage@res 003C                        __mediumconst 0000  
                            tblptrh 000FF7                              tblptrl 000FF6  
                            tblptru 000FF8                       _Mcp2515_Reset 21D6  
                    _rxBufferPtrOut 00AA                     __CFG_BORPWR$LOW 000000  
   __end_of_Mcp2515GetNextFreeTXBuf 2104                          __accesstop 0060  
           __end_of__initialization 21C4                       ___rparam_used 000001  
      __size_ofi2_Mcp2515WriteCanId 00BE                        readID@retVal 0065  
                     __end_of_SPIRW 207C           Mcp2515ReadCanMsg@mcp_addr 003E  
                    __pcstackCOMRAM 0001                        __pidataBANK0 2552  
                      ?i2_Spi_Write 000D                     ??_Can_GetStatus 0013  
                         ?_Can_Init 009C                       _canSpeed1000k 1001  
                 ??_Can_SendMessage 0038                             ??_SPIRW 0068  
                    ?_Mcp2515_Reset 0001                Mcp2515WriteCanId@buf 007B  
                   ?_Can_GetMessage 0060                Mcp2515WriteCanId@ext 0072  
        __end_of_Mcp2515WriteCanMsg 1C22         __size_of_Can_WriteOutBuffer 0020  
      __size_of_Can_OutBufferStatus 0006                          __pbssBANK0 00A5  
                        __pbssBANK1 0100                      _Can_PutMessage 17DA  
                 __end_of_Spi_Write 24E6                   ?_Mcp2515ReadCanId 0013  
                __CFG_CCP2MX$PORTBE 000000                     Can_PutMessage@i 0064  
                ??_Mcp2515ReadCanId 0017                             SPIRW@rx 0062  
                           SPIRW@tx 0060                             ?_readID 0001  
                           ?_memcpy 0001                          ??_Can_Init 00A0  
                           _INTEDG3 007F8B                   Spi_ReadWrite@size 000F  
           Mcp2515WriteCanId@can_id 0073                             i2_SPIRW 2104  
                           i2u71_45 1F7E                             i2u64_41 163A  
                           i2u72_45 1FB8                             i2u65_45 1686  
                           _SPBRGH1 000FD4                             i2u67_45 16F2  
                           i2u68_45 1742                             _SSPCON1 000FC6  
            __end_of_Can_PutMessage 1980                           SPIRW@size 0064  
                         ?_high_isr 0001                             _Can_Isr 23B8  
              Can_GetMessage@msgPtr 0060                             __Hparam 0000  
                           __Lparam 0000                   ?_Can_ReadInBuffer 0001  
                      __psmallconst 1000                         Spi_Write@tx 006C  
                   __size_of_readID 0054                             __pcinit 216E  
                   __size_of_memcpy 0044                             __ramtop 1000  
                ??_Can_ReadInBuffer 0045                             __ptext0 256A  
                           __ptext1 22A0                             __ptext2 2364  
                           __ptext3 17DA                             __ptext4 1980  
                           __ptext5 2488                             __ptext6 1042  
                           __ptext7 21D6                             __ptext8 1D30  
                           __ptext9 24BC                     ??_Mcp2515_Reset 0072  
  __size_of_Mcp2515GetNextFreeTXBuf 0088                  Can_GetStatus@F8262 00F2  
                Can_GetStatus@F8264 00E8                             _message 00CD  
                 __CFG_MSSPMSK$MSK7 000000                     ?_Can_PutMessage 0060  
                        ??_high_isr 004A                  __CFG_INTOSCSEL$LOW 000000  
             Mcp2515_Init@cmdWrite3 0099                end_of_initialization 21C4  
                         i2SPIRW@rx 0003                           i2SPIRW@tx 0001  
                           memcpy@d 0007                             memcpy@n 0005  
                           memcpy@s 0009                 __end_of_canSpeed10k 1039  
               __end_of_canSpeed20k 1032                 __end_of_canSpeed50k 102B  
                   _Can_ReadMessage 1E32               Mcp2515_Init@filterCfg 0085  
                           postdec1 000FE5                             postdec2 000FDD  
                    Mcp2515_Reset@i 0073                             postinc0 000FEE  
                           postinc1 000FE6                             postinc2 000FDE  
              __size_ofi2_Spi_Write 0026                    __CFG_FOSC$INTIO2 000000  
               i2_Mcp2515WriteCanId 1F2C                      _txBufferPtrOut 005B  
               Mcp2515ReadCanId@ext 0013                 Mcp2515ReadCanId@msg 002A  
              ?i2_Mcp2515WriteCanId 0013              __size_of_Spi_ReadWrite 0026  
      Mcp2515GetNextFreeTXBuf@F8153 00EC                     _Can_SendMessage 223C  
               _Can_OutBufferStatus 2572         i2Mcp2515WriteCanId@mcp_addr 001B  
                     __pidataCOMRAM 2578                    ??_Can_GetMessage 0062  
                    __end_of_readID 23B8                      __end_of_memcpy 2488  
               start_initialization 216E                   __size_of_Can_Init 0034  
          Mcp2515ReadCanId@mcp_addr 0029            i2Mcp2515WriteCanId@canid 0022  
                       _canSpeed10k 1032                         _canSpeed20k 102B  
                       _canSpeed50k 1024                ?_Can_OutBufferStatus 0001  
           __end_of_Can_ReadMessage 1F2C               ??i2_Mcp2515WriteCanId 0018  
                _Mcp2515WriteCanMsg 1AFA          Mcp2515GetNextFreeTXBuf@buf 0019  
          Mcp2515GetNextFreeTXBuf@i 001C                           _Spi_Write 24BC  
               ?_Mcp2515WriteCanMsg 0024               Mcp2515WriteCanMsg@dlc 0033  
             Mcp2515WriteCanMsg@buf 0028               Mcp2515WriteCanMsg@msg 0024  
                       __pdataBANK0 00DE                            ??_readID 0065  
                  Can_GetStatus@msg 0017                            ??_memcpy 0007  
                     _rxBufferCount 005C                       _rxBufferPtrIn 005D  
           _Mcp2515GetNextFreeTXBuf 207C               __end_of_Can_GetStatus 2364  
                     _Spi_ReadWrite 250C           __size_of_Mcp2515ReadCanId 01AC  
                       __pbssCOMRAM 0058          __end_of_Can_WriteOutBuffer 2552  
                     __pcstackBANK0 0060                            ?i2_SPIRW 0001  
             ??_Can_OutBufferStatus 0001                ??_Mcp2515WriteCanMsg 0026  
                          ?_Can_Isr 0001                       ?_Mcp2515_Init 0083  
                     Spi_Write@size 006E                   __size_of_high_isr 0086  
               Mcp2515WriteCanMsg@i 0035             __end_of_Can_SendMessage 22A0  
                 _Mcp2515ReadCanMsg 1C22                  ?_Mcp2515ReadCanMsg 0030  
                         __pintcode 0008                          ?_Spi_Write 006C  
               ??_Mcp2515ReadCanMsg 0032                      ?_Spi_ReadWrite 000D  
                       __smallconst 1000                    ??_Can_PutMessage 0062  
                    __size_of_SPIRW 0092                   Mcp2515_Init@F8112 00E4  
                 Mcp2515_Init@F8114 00EF              Can_SendMessage@txbuf_n 003D  
         __size_of_Can_ReadInBuffer 0044          Mcp2515WriteCanMsg@mcp_addr 0034  
                    ??_Mcp2515_Init 0087           __end_of_Mcp2515ReadCanMsg 1D30  
              Mcp2515_Init@cmdMask4 0095                    ?_Can_ReadMessage 003F  
                          i2SPIRW@i 0009                  Spi_ReadWrite@rx_tx 000D  
                     Mcp2515_Init@i 0094           i2Mcp2515WriteCanId@can_id 0014  
                 Mcp2515Sleep@F8117 00A5           ??_Mcp2515GetNextFreeTXBuf 0015  
                     _txBufferCount 00A8                            _Can_Init 2488  
                     _txBufferPtrIn 00A9                    __CFG_SOSCSEL$LOW 000000  
              Mcp2515_Init@speedCfg 0083                     Can_GetMessage@i 0064  
             __end_of_Mcp2515_Reset 223C  Mcp2515WriteCanMsg@buffer_sidh_addr 0032  
                  __size_ofi2_SPIRW 006A                           copy_data0 2182  
                       i2SPIRW@size 0005                    __size_of_Can_Isr 0048  
                  ?_Can_SendMessage 0036                   _Mcp2515WriteCanId 1D30  
                          __Hrparam 0000                           memcpy@tmp 000B  
                          __Lrparam 0000                Can_PutMessage@msgPtr 0060  
                      __Lsmallconst 1000                  ?_Mcp2515WriteCanId 0072  
                     ??i2_Spi_Write 0013                         ??_Spi_Write 0072  
                   ??_Spi_ReadWrite 0013                 ??_Mcp2515WriteCanId 0077  
             __end_of_canSpeed1000k 1008      Mcp2515GetNextFreeTXBuf@txbuf_n 0013  
                  _Mcp2515ReadCanId 162E                            __ptext10 1FEA  
                          __ptext20 24E6                            __ptext12 23B8  
                          __ptext21 1C22                            __ptext13 2532  
                          __ptext22 2444                            __ptext14 223C  
                          __ptext23 162E                            __ptext15 1AFA  
                          __ptext24 2572                            __ptext16 1F2C  
                          __ptext25 2302                            __ptext17 207C  
                          __ptext26 250C                            __ptext18 2400  
                          __ptext27 2104                            __ptext19 1E32  
                          _high_isr 0008          __size_of_Mcp2515ReadCanMsg 010E  
                 Can_Init@filterCfg 009E                       __size_of_main 0008  
                     __size_of_init 0062           __end_of_Mcp2515WriteCanId 1E32  
               __CFG_RTCOSC$SOSCREF 000000                            _rxBuffer 0144  
                          _txBuffer 0100                            int$flags 005F  
                          main@argc 00A0                            main@argv 00A2  
              __end_of_Mcp2515_Init 162E                    Mcp2515_Reset@cmd 0072  
               __end_ofi2_Spi_Write 250C              i2Mcp2515WriteCanId@buf 001C  
            i2Mcp2515WriteCanId@ext 0013                            memcpy@d1 0001  
                          memcpy@s1 0003                    _Can_ReadInBuffer 2400  
               Can_GetStatus@status 001A         __end_ofi2_Mcp2515WriteCanId 1FEA  
              __end_of_canSpeed100k 1024                __end_of_canSpeed125k 1040  
              __end_of_canSpeed250k 101D                __end_of_canSpeed500k 1016  
                          intlevel2 0000                __end_of_canSpeed800k 100F  
                _Can_WriteOutBuffer 2532                 ?_Can_WriteOutBuffer 0001  
                 Can_ReadInBuffer@i 0047                    Can_Init@speedCfg 009C  
       __end_of_Can_OutBufferStatus 2578                ??_Can_WriteOutBuffer 003E  
           __size_of_Can_GetMessage 017A         __size_of_Mcp2515WriteCanMsg 0128  
        __size_of_Mcp2515WriteCanId 0102                      Can_Isr@nbTxBuf 005E  
            __size_of_Can_GetStatus 0062                      Can_Isr@retCode 0049  
