

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue May 22 11:30:18 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F87K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    53                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    54  0000                     
    55                           ; Version 1.42
    56                           ; Generated 13/04/2017 GMT
    57                           ; 
    58                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC18F87K22 Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     
    90                           	psect	idataCOMRAM
    91  002A9E                     __pidataCOMRAM:
    92                           	opt stack 0
    93                           
    94                           ;initializer for Can_Isr@nbTxBuf
    95  002A9E  03                 	db	3
    96                           
    97                           	psect	idataBANK0
    98  002A80                     __pidataBANK0:
    99                           	opt stack 0
   100                           
   101                           ;initializer for Mcp2515ReadCanId@F8123
   102  002A80  03                 	db	3
   103  002A81  00                 	db	0
   104  002A82  00                 	db	0
   105  002A83  00                 	db	0
   106  002A84  00                 	db	0
   107  002A85  00                 	db	0
   108                           
   109                           ;initializer for Mcp2515_Init@F8112
   110  002A86  05                 	db	5
   111  002A87  0F                 	db	15
   112  002A88  E0                 	db	224
   113  002A89  80                 	db	128
   114                           
   115                           ;initializer for Can_GetStatus@F8264
   116  002A8A  05                 	db	5
   117  002A8B  2C                 	db	44
   118  002A8C  1C                 	db	28
   119  002A8D  00                 	db	0
   120                           
   121                           ;initializer for Mcp2515GetNextFreeTXBuf@F8153
   122  002A8E  30                 	db	48
   123  002A8F  40                 	db	64
   124  002A90  50                 	db	80
   125                           
   126                           ;initializer for Mcp2515_Init@F8114
   127  002A91  02                 	db	2
   128  002A92  00                 	db	0
   129  002A93  00                 	db	0
   130                           
   131                           ;initializer for Can_GetStatus@F8262
   132  002A94  03                 	db	3
   133  002A95  2C                 	db	44
   134  002A96  00                 	db	0
   135                           
   136                           	psect	smallconst
   137  001000                     __psmallconst:
   138                           	opt stack 0
   139  001000  00                 	db	0
   140  001001                     _canSpeed1000k:
   141                           	opt stack 0
   142  001001  00                 	db	0
   143  001002  01                 	db	1
   144  001003  00                 	db	0
   145  001004  03                 	db	3
   146  001005  01                 	db	1
   147  001006  01                 	db	1
   148  001007  01                 	db	1
   149  001008                     __end_of_canSpeed1000k:
   150                           	opt stack 0
   151  001008                     _canSpeed800k:
   152                           	opt stack 0
   153  001008  00                 	db	0
   154  001009  01                 	db	1
   155  00100A  02                 	db	2
   156  00100B  03                 	db	3
   157  00100C  01                 	db	1
   158  00100D  01                 	db	1
   159  00100E  01                 	db	1
   160  00100F                     __end_of_canSpeed800k:
   161                           	opt stack 0
   162  00100F                     _canSpeed500k:
   163                           	opt stack 0
   164  00100F  01                 	db	1
   165  001010  01                 	db	1
   166  001011  00                 	db	0
   167  001012  03                 	db	3
   168  001013  01                 	db	1
   169  001014  01                 	db	1
   170  001015  01                 	db	1
   171  001016                     __end_of_canSpeed500k:
   172                           	opt stack 0
   173  001016                     _canSpeed250k:
   174                           	opt stack 0
   175  001016  03                 	db	3
   176  001017  01                 	db	1
   177  001018  00                 	db	0
   178  001019  03                 	db	3
   179  00101A  01                 	db	1
   180  00101B  01                 	db	1
   181  00101C  01                 	db	1
   182  00101D                     __end_of_canSpeed250k:
   183                           	opt stack 0
   184  00101D                     _canSpeed100k:
   185                           	opt stack 0
   186  00101D  07                 	db	7
   187  00101E  01                 	db	1
   188  00101F  02                 	db	2
   189  001020  03                 	db	3
   190  001021  01                 	db	1
   191  001022  01                 	db	1
   192  001023  01                 	db	1
   193  001024                     __end_of_canSpeed100k:
   194                           	opt stack 0
   195  001024                     _canSpeed50k:
   196                           	opt stack 0
   197  001024  0F                 	db	15
   198  001025  01                 	db	1
   199  001026  02                 	db	2
   200  001027  03                 	db	3
   201  001028  01                 	db	1
   202  001029  01                 	db	1
   203  00102A  01                 	db	1
   204  00102B                     __end_of_canSpeed50k:
   205                           	opt stack 0
   206  00102B                     _canSpeed20k:
   207                           	opt stack 0
   208  00102B  13                 	db	19
   209  00102C  01                 	db	1
   210  00102D  06                 	db	6
   211  00102E  06                 	db	6
   212  00102F  04                 	db	4
   213  001030  01                 	db	1
   214  001031  01                 	db	1
   215  001032                     __end_of_canSpeed20k:
   216                           	opt stack 0
   217  001032                     _canSpeed10k:
   218                           	opt stack 0
   219  001032  1F                 	db	31
   220  001033  01                 	db	1
   221  001034  07                 	db	7
   222  001035  07                 	db	7
   223  001036  07                 	db	7
   224  001037  01                 	db	1
   225  001038  01                 	db	1
   226  001039                     __end_of_canSpeed10k:
   227                           	opt stack 0
   228  001039                     _canSpeed125k:
   229                           	opt stack 0
   230  001039  07                 	db	7
   231  00103A  01                 	db	1
   232  00103B  00                 	db	0
   233  00103C  03                 	db	3
   234  00103D  01                 	db	1
   235  00103E  01                 	db	1
   236  00103F  01                 	db	1
   237  001040                     __end_of_canSpeed125k:
   238                           	opt stack 0
   239  0000                     _TMR0	set	4054
   240  0000                     _SPBRG1	set	4015
   241  0000                     _SPBRGH1	set	4052
   242  0000                     _OSCCON	set	4051
   243  0000                     _TXREG	set	4013
   244  0000                     _SSPBUF	set	4041
   245  0000                     _SSPCON1	set	4038
   246  0000                     _T0CONbits	set	4053
   247  0000                     _TXEN1	set	32101
   248  0000                     _CREN1	set	32092
   249  0000                     _SPEN1	set	32095
   250  0000                     _SYNC1	set	32100
   251  0000                     _BRG161	set	31531
   252  0000                     _BRGH1	set	32098
   253  0000                     _LATG0	set	31864
   254  0000                     _TRISG0	set	31936
   255  0000                     _PLLEN	set	31966
   256  0000                     _TXIF	set	31988
   257  0000                     _TMR0IF	set	32658
   258  0000                     _RB3	set	31755
   259  0000                     _SSP1IF	set	31987
   260  0000                     _SSPIF	set	31987
   261  0000                     _LATD1	set	31841
   262  0000                     _INTEDG3	set	32651
   263  0000                     _SSPEN1	set	32309
   264  0000                     _CKP1	set	32308
   265  0000                     _CKE1	set	32318
   266  0000                     _TRISD1	set	31913
   267  0000                     _TRISC3	set	31907
   268  0000                     _TRISC5	set	31909
   269  0000                     _TRISC4	set	31908
   270  0000                     _LATF7	set	31863
   271  0000                     _LATF6	set	31862
   272  0000                     _TRISF7	set	31935
   273  0000                     _TRISF6	set	31934
   274  0000                     _INT3IF	set	32642
   275  0000                     _INT3IE	set	32645
   276  0000                     _GIE	set	32663
   277  0000                     _PEIE	set	32662
   278                           
   279                           ; #config settings
   280  001040  00                 	db	0	; dummy byte at the end
   281  0000                     
   282                           	psect	cinit
   283  002518                     __pcinit:
   284                           	opt stack 0
   285  002518                     start_initialization:
   286                           	opt stack 0
   287  002518                     __initialization:
   288                           	opt stack 0
   289                           
   290                           ; Initialize objects allocated to BANK0 (23 bytes)
   291                           ; load TBLPTR registers with __pidataBANK0
   292  002518  0E80               	movlw	low __pidataBANK0
   293  00251A  6EF6               	movwf	tblptrl,c
   294  00251C  0E2A               	movlw	high __pidataBANK0
   295  00251E  6EF7               	movwf	tblptrh,c
   296  002520  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   297  002522  6EF8               	movwf	tblptru,c
   298  002524  EE00  F0D2         	lfsr	0,__pdataBANK0
   299  002528  EE10 F017          	lfsr	1,23
   300  00252C                     copy_data0:
   301  00252C  0009               	tblrd		*+
   302  00252E  CFF5 FFEE          	movff	tablat,postinc0
   303  002532  50E5               	movf	postdec1,w,c
   304  002534  50E1               	movf	fsr1l,w,c
   305  002536  E1FA               	bnz	copy_data0
   306                           
   307                           ; Initialize objects allocated to COMRAM (1 bytes)
   308                           ; load TBLPTR registers with __pidataCOMRAM
   309  002538  0E9E               	movlw	low __pidataCOMRAM
   310  00253A  6EF6               	movwf	tblptrl,c
   311  00253C  0E2A               	movlw	high __pidataCOMRAM
   312  00253E  6EF7               	movwf	tblptrh,c
   313  002540  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   314  002542  6EF8               	movwf	tblptru,c
   315  002544  0009               	tblrd		*+	;fetch initializer
   316  002546  CFF5 F05E          	movff	tablat,__pdataCOMRAM
   317                           
   318                           ; Clear objects allocated to BANK2 (144 bytes)
   319  00254A  EE02  F000         	lfsr	0,__pbssBANK2
   320  00254E  0E90               	movlw	144
   321  002550                     clear_0:
   322  002550  6AEE               	clrf	postinc0,c
   323  002552  06E8               	decf	wreg,f,c
   324  002554  E1FD               	bnz	clear_0
   325                           
   326                           ; Clear objects allocated to BANK1 (169 bytes)
   327  002556  EE01  F000         	lfsr	0,__pbssBANK1
   328  00255A  0EA9               	movlw	169
   329  00255C                     clear_1:
   330  00255C  6AEE               	clrf	postinc0,c
   331  00255E  06E8               	decf	wreg,f,c
   332  002560  E1FD               	bnz	clear_1
   333                           
   334                           ; Clear objects allocated to BANK0 (45 bytes)
   335  002562  EE00  F0A5         	lfsr	0,__pbssBANK0
   336  002566  0E2D               	movlw	45
   337  002568                     clear_2:
   338  002568  6AEE               	clrf	postinc0,c
   339  00256A  06E8               	decf	wreg,f,c
   340  00256C  E1FD               	bnz	clear_2
   341                           
   342                           ; Clear objects allocated to COMRAM (6 bytes)
   343  00256E  6A5D               	clrf	(__pbssCOMRAM+5)& (0+255),c
   344  002570  6A5C               	clrf	(__pbssCOMRAM+4)& (0+255),c
   345  002572  6A5B               	clrf	(__pbssCOMRAM+3)& (0+255),c
   346  002574  6A5A               	clrf	(__pbssCOMRAM+2)& (0+255),c
   347  002576  6A59               	clrf	(__pbssCOMRAM+1)& (0+255),c
   348  002578  6A58               	clrf	__pbssCOMRAM& (0+255),c
   349  00257A                     end_of_initialization:
   350                           	opt stack 0
   351  00257A                     __end_of__initialization:
   352                           	opt stack 0
   353  00257A  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   354  00257C  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   355  00257E  0E00               	movlw	low (__Lsmallconst shr (0+16))
   356  002580  6EF8               	movwf	tblptru,c
   357  002582  0E10               	movlw	high __Lsmallconst
   358  002584  6EF7               	movwf	tblptrh,c
   359  002586  0100               	movlb	0
   360  002588  EFE0  F014         	goto	_main	;jump to C main() function
   361                           tblptru	equ	0xFF8
   362                           tblptrh	equ	0xFF7
   363                           tblptrl	equ	0xFF6
   364                           tablat	equ	0xFF5
   365                           postinc0	equ	0xFEE
   366                           wreg	equ	0xFE8
   367                           postdec1	equ	0xFE5
   368                           fsr1l	equ	0xFE1
   369                           
   370                           	psect	bssCOMRAM
   371  000058                     __pbssCOMRAM:
   372                           	opt stack 0
   373  000058                     _txBufferPtrOut:
   374                           	opt stack 0
   375  000058                     	ds	1
   376  000059                     _rxBufferCount:
   377                           	opt stack 0
   378  000059                     	ds	1
   379  00005A                     _rxBufferPtrIn:
   380                           	opt stack 0
   381  00005A                     	ds	1
   382  00005B                     _topLeft:
   383                           	opt stack 0
   384  00005B                     	ds	1
   385  00005C                     _topRight:
   386                           	opt stack 0
   387  00005C                     	ds	1
   388  00005D                     _bottomRight:
   389                           	opt stack 0
   390  00005D                     	ds	1
   391                           tblptru	equ	0xFF8
   392                           tblptrh	equ	0xFF7
   393                           tblptrl	equ	0xFF6
   394                           tablat	equ	0xFF5
   395                           postinc0	equ	0xFEE
   396                           wreg	equ	0xFE8
   397                           postdec1	equ	0xFE5
   398                           fsr1l	equ	0xFE1
   399                           
   400                           	psect	dataCOMRAM
   401  00005E                     __pdataCOMRAM:
   402                           	opt stack 0
   403  00005E                     Can_Isr@nbTxBuf:
   404                           	opt stack 0
   405  00005E                     	ds	1
   406                           tblptru	equ	0xFF8
   407                           tblptrh	equ	0xFF7
   408                           tblptrl	equ	0xFF6
   409                           tablat	equ	0xFF5
   410                           postinc0	equ	0xFEE
   411                           wreg	equ	0xFE8
   412                           postdec1	equ	0xFE5
   413                           fsr1l	equ	0xFE1
   414                           
   415                           	psect	bssBANK0
   416  0000A5                     __pbssBANK0:
   417                           	opt stack 0
   418  0000A5                     Mcp2515Sleep@F8117:
   419                           	opt stack 0
   420  0000A5                     	ds	3
   421  0000A8                     _nbTx2:
   422                           	opt stack 0
   423  0000A8                     	ds	1
   424  0000A9                     _nbTx1:
   425                           	opt stack 0
   426  0000A9                     	ds	1
   427  0000AA                     _nbTx0:
   428                           	opt stack 0
   429  0000AA                     	ds	1
   430  0000AB                     _txBufferCount:
   431                           	opt stack 0
   432  0000AB                     	ds	1
   433  0000AC                     _txBufferPtrIn:
   434                           	opt stack 0
   435  0000AC                     	ds	1
   436  0000AD                     _rxBufferPtrOut:
   437                           	opt stack 0
   438  0000AD                     	ds	1
   439  0000AE                     _bottomLeft:
   440                           	opt stack 0
   441  0000AE                     	ds	1
   442  0000AF                     _id:
   443                           	opt stack 0
   444  0000AF                     	ds	1
   445  0000B0                     _messageTx:
   446                           	opt stack 0
   447  0000B0                     	ds	17
   448  0000C1                     _message:
   449                           	opt stack 0
   450  0000C1                     	ds	17
   451                           tblptru	equ	0xFF8
   452                           tblptrh	equ	0xFF7
   453                           tblptrl	equ	0xFF6
   454                           tablat	equ	0xFF5
   455                           postinc0	equ	0xFEE
   456                           wreg	equ	0xFE8
   457                           postdec1	equ	0xFE5
   458                           fsr1l	equ	0xFE1
   459                           
   460                           	psect	dataBANK0
   461  0000D2                     __pdataBANK0:
   462                           	opt stack 0
   463  0000D2                     Mcp2515ReadCanId@F8123:
   464                           	opt stack 0
   465  0000D2                     	ds	6
   466  0000D8                     Mcp2515_Init@F8112:
   467                           	opt stack 0
   468  0000D8                     	ds	4
   469  0000DC                     Can_GetStatus@F8264:
   470                           	opt stack 0
   471  0000DC                     	ds	4
   472  0000E0                     Mcp2515GetNextFreeTXBuf@F8153:
   473                           	opt stack 0
   474  0000E0                     	ds	3
   475  0000E3                     Mcp2515_Init@F8114:
   476                           	opt stack 0
   477  0000E3                     	ds	3
   478  0000E6                     Can_GetStatus@F8262:
   479                           	opt stack 0
   480  0000E6                     	ds	3
   481                           tblptru	equ	0xFF8
   482                           tblptrh	equ	0xFF7
   483                           tblptrl	equ	0xFF6
   484                           tablat	equ	0xFF5
   485                           postinc0	equ	0xFEE
   486                           wreg	equ	0xFE8
   487                           postdec1	equ	0xFE5
   488                           fsr1l	equ	0xFE1
   489                           
   490                           	psect	bssBANK1
   491  000100                     __pbssBANK1:
   492                           	opt stack 0
   493  000100                     _txBuffer:
   494                           	opt stack 0
   495  000100                     	ds	68
   496  000144                     _rxBuffer:
   497                           	opt stack 0
   498  000144                     	ds	68
   499  000188                     _filter:
   500                           	opt stack 0
   501  000188                     	ds	33
   502                           tblptru	equ	0xFF8
   503                           tblptrh	equ	0xFF7
   504                           tblptrl	equ	0xFF6
   505                           tablat	equ	0xFF5
   506                           postinc0	equ	0xFEE
   507                           wreg	equ	0xFE8
   508                           postdec1	equ	0xFE5
   509                           fsr1l	equ	0xFE1
   510                           
   511                           	psect	bssBANK2
   512  000200                     __pbssBANK2:
   513                           	opt stack 0
   514  000200                     _conflictTable:
   515                           	opt stack 0
   516  000200                     	ds	144
   517                           tblptru	equ	0xFF8
   518                           tblptrh	equ	0xFF7
   519                           tblptrl	equ	0xFF6
   520                           tablat	equ	0xFF5
   521                           postinc0	equ	0xFEE
   522                           wreg	equ	0xFE8
   523                           postdec1	equ	0xFE5
   524                           fsr1l	equ	0xFE1
   525                           
   526                           	psect	cstackBANK0
   527  000060                     __pcstackBANK0:
   528                           	opt stack 0
   529  000060                     ?___wmul:
   530                           	opt stack 0
   531  000060                     resetData@i:
   532                           	opt stack 0
   533  000060                     Can_GetMessage@msgPtr:
   534                           	opt stack 0
   535  000060                     Can_PutMessage@msgPtr:
   536                           	opt stack 0
   537  000060                     SPIRW@tx:
   538                           	opt stack 0
   539  000060                     ___wmul@multiplier:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x0
   543  000060                     	ds	2
   544  000062                     ??_Can_PutMessage:
   545  000062                     ??_Can_GetMessage:
   546  000062                     SPIRW@rx:
   547                           	opt stack 0
   548  000062                     ___wmul@multiplicand:
   549                           	opt stack 0
   550                           
   551                           ; 2 bytes @ 0x2
   552  000062                     	ds	2
   553  000064                     Can_GetMessage@i:
   554                           	opt stack 0
   555  000064                     Can_PutMessage@i:
   556                           	opt stack 0
   557  000064                     ___wmul@product:
   558                           	opt stack 0
   559  000064                     SPIRW@size:
   560                           	opt stack 0
   561                           
   562                           ; 4 bytes @ 0x4
   563  000064                     	ds	1
   564  000065                     readID@retVal:
   565                           	opt stack 0
   566  000065                     sendTrafficLight@color:
   567                           	opt stack 0
   568  000065                     sendPedestrianLight@color:
   569                           	opt stack 0
   570  000065                     sendWarningLight@state:
   571                           	opt stack 0
   572                           
   573                           ; 1 bytes @ 0x5
   574  000065                     	ds	1
   575  000066                     ??_readConflictInfo:
   576  000066                     ??_sendTrafficLight:
   577  000066                     ??_sendPedestrianLight:
   578  000066                     ??_sendWarningLight:
   579                           
   580                           ; 1 bytes @ 0x6
   581  000066                     	ds	2
   582  000068                     sendTrafficLight@trafficLight:
   583                           	opt stack 0
   584  000068                     sendPedestrianLight@trafficLight:
   585                           	opt stack 0
   586  000068                     SPIRW@i:
   587                           	opt stack 0
   588                           
   589                           ; 4 bytes @ 0x8
   590  000068                     	ds	2
   591  00006A                     sendWarningLight@trafficLight:
   592                           	opt stack 0
   593                           
   594                           ; 1 bytes @ 0xA
   595  00006A                     	ds	2
   596  00006C                     readConflictInfo@i:
   597                           	opt stack 0
   598  00006C                     Spi_Write@tx:
   599                           	opt stack 0
   600                           
   601                           ; 2 bytes @ 0xC
   602  00006C                     	ds	2
   603  00006E                     readConflictInfo@j:
   604                           	opt stack 0
   605  00006E                     Spi_Write@size:
   606                           	opt stack 0
   607                           
   608                           ; 4 bytes @ 0xE
   609  00006E                     	ds	4
   610  000072                     Mcp2515_Reset@cmd:
   611                           	opt stack 0
   612  000072                     Mcp2515WriteCanId@ext:
   613                           	opt stack 0
   614                           
   615                           ; 1 bytes @ 0x12
   616  000072                     	ds	1
   617  000073                     Mcp2515_Reset@i:
   618                           	opt stack 0
   619  000073                     Mcp2515WriteCanId@can_id:
   620                           	opt stack 0
   621                           
   622                           ; 4 bytes @ 0x13
   623  000073                     	ds	4
   624  000077                     ??_Mcp2515WriteCanId:
   625                           
   626                           ; 1 bytes @ 0x17
   627  000077                     	ds	3
   628  00007A                     Mcp2515WriteCanId@mcp_addr:
   629                           	opt stack 0
   630                           
   631                           ; 1 bytes @ 0x1A
   632  00007A                     	ds	1
   633  00007B                     Mcp2515WriteCanId@buf:
   634                           	opt stack 0
   635                           
   636                           ; 6 bytes @ 0x1B
   637  00007B                     	ds	6
   638  000081                     Mcp2515WriteCanId@canid:
   639                           	opt stack 0
   640                           
   641                           ; 2 bytes @ 0x21
   642  000081                     	ds	2
   643  000083                     Mcp2515_Init@speedCfg:
   644                           	opt stack 0
   645                           
   646                           ; 2 bytes @ 0x23
   647  000083                     	ds	2
   648  000085                     Mcp2515_Init@filterCfg:
   649                           	opt stack 0
   650                           
   651                           ; 2 bytes @ 0x25
   652  000085                     	ds	2
   653  000087                     ??_Mcp2515_Init:
   654                           
   655                           ; 1 bytes @ 0x27
   656  000087                     	ds	13
   657  000094                     Mcp2515_Init@i:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x34
   661  000094                     	ds	1
   662  000095                     Mcp2515_Init@cmdMask4:
   663                           	opt stack 0
   664                           
   665                           ; 4 bytes @ 0x35
   666  000095                     	ds	4
   667  000099                     Mcp2515_Init@cmdWrite3:
   668                           	opt stack 0
   669                           
   670                           ; 3 bytes @ 0x39
   671  000099                     	ds	3
   672  00009C                     Can_Init@speedCfg:
   673                           	opt stack 0
   674                           
   675                           ; 2 bytes @ 0x3C
   676  00009C                     	ds	2
   677  00009E                     Can_Init@filterCfg:
   678                           	opt stack 0
   679                           
   680                           ; 2 bytes @ 0x3E
   681  00009E                     	ds	2
   682  0000A0                     
   683                           ; 2 bytes @ 0x40
   684  0000A0                     	ds	2
   685  0000A2                     
   686                           ; 3 bytes @ 0x42
   687  0000A2                     	ds	3
   688  0000A5                     tblptru	equ	0xFF8
   689                           tblptrh	equ	0xFF7
   690                           tblptrl	equ	0xFF6
   691                           tablat	equ	0xFF5
   692                           postinc0	equ	0xFEE
   693                           wreg	equ	0xFE8
   694                           postdec1	equ	0xFE5
   695                           fsr1l	equ	0xFE1
   696                           
   697                           ; 1 bytes @ 0x45
   698                           
   699                           	psect	cstackCOMRAM
   700  000001                     __pcstackCOMRAM:
   701                           	opt stack 0
   702  000001                     memcpy@d1:
   703                           	opt stack 0
   704  000001                     i2SPIRW@tx:
   705                           	opt stack 0
   706                           
   707                           ; 2 bytes @ 0x0
   708  000001                     	ds	2
   709  000003                     memcpy@s1:
   710                           	opt stack 0
   711  000003                     i2SPIRW@rx:
   712                           	opt stack 0
   713                           
   714                           ; 2 bytes @ 0x2
   715  000003                     	ds	2
   716  000005                     memcpy@n:
   717                           	opt stack 0
   718  000005                     i2SPIRW@size:
   719                           	opt stack 0
   720                           
   721                           ; 4 bytes @ 0x4
   722  000005                     	ds	2
   723  000007                     memcpy@d:
   724                           	opt stack 0
   725                           
   726                           ; 2 bytes @ 0x6
   727  000007                     	ds	2
   728  000009                     memcpy@s:
   729                           	opt stack 0
   730  000009                     i2SPIRW@i:
   731                           	opt stack 0
   732                           
   733                           ; 4 bytes @ 0x8
   734  000009                     	ds	2
   735  00000B                     memcpy@tmp:
   736                           	opt stack 0
   737                           
   738                           ; 1 bytes @ 0xA
   739  00000B                     	ds	2
   740  00000D                     Spi_ReadWrite@rx_tx:
   741                           	opt stack 0
   742  00000D                     i2Spi_Write@tx:
   743                           	opt stack 0
   744                           
   745                           ; 2 bytes @ 0xC
   746  00000D                     	ds	2
   747  00000F                     Spi_ReadWrite@size:
   748                           	opt stack 0
   749  00000F                     i2Spi_Write@size:
   750                           	opt stack 0
   751                           
   752                           ; 4 bytes @ 0xE
   753  00000F                     	ds	4
   754  000013                     i2Mcp2515WriteCanId@ext:
   755                           	opt stack 0
   756  000013                     Mcp2515ReadCanId@ext:
   757                           	opt stack 0
   758  000013                     Mcp2515GetNextFreeTXBuf@txbuf_n:
   759                           	opt stack 0
   760  000013                     Can_GetStatus@msg4:
   761                           	opt stack 0
   762                           
   763                           ; 4 bytes @ 0x12
   764  000013                     	ds	1
   765  000014                     i2Mcp2515WriteCanId@can_id:
   766                           	opt stack 0
   767                           
   768                           ; 4 bytes @ 0x13
   769  000014                     	ds	1
   770  000015                     ??_Mcp2515GetNextFreeTXBuf:
   771  000015                     Mcp2515ReadCanId@can_id:
   772                           	opt stack 0
   773                           
   774                           ; 2 bytes @ 0x14
   775  000015                     	ds	1
   776  000016                     Mcp2515GetNextFreeTXBuf@ctrlregs:
   777                           	opt stack 0
   778                           
   779                           ; 3 bytes @ 0x15
   780  000016                     	ds	1
   781  000017                     ??_Mcp2515ReadCanId:
   782  000017                     Can_GetStatus@msg:
   783                           	opt stack 0
   784                           
   785                           ; 3 bytes @ 0x16
   786  000017                     	ds	1
   787  000018                     ??i2_Mcp2515WriteCanId:
   788                           
   789                           ; 1 bytes @ 0x17
   790  000018                     	ds	1
   791  000019                     Mcp2515GetNextFreeTXBuf@buf:
   792                           	opt stack 0
   793                           
   794                           ; 3 bytes @ 0x18
   795  000019                     	ds	1
   796  00001A                     Can_GetStatus@status:
   797                           	opt stack 0
   798                           
   799                           ; 1 bytes @ 0x19
   800  00001A                     	ds	1
   801  00001B                     i2Mcp2515WriteCanId@mcp_addr:
   802                           	opt stack 0
   803                           
   804                           ; 1 bytes @ 0x1A
   805  00001B                     	ds	1
   806  00001C                     Mcp2515GetNextFreeTXBuf@i:
   807                           	opt stack 0
   808  00001C                     i2Mcp2515WriteCanId@buf:
   809                           	opt stack 0
   810                           
   811                           ; 6 bytes @ 0x1B
   812  00001C                     	ds	6
   813  000022                     i2Mcp2515WriteCanId@canid:
   814                           	opt stack 0
   815                           
   816                           ; 2 bytes @ 0x21
   817  000022                     	ds	2
   818  000024                     Mcp2515WriteCanMsg@msg:
   819                           	opt stack 0
   820                           
   821                           ; 2 bytes @ 0x23
   822  000024                     	ds	2
   823  000026                     ??_Mcp2515WriteCanMsg:
   824                           
   825                           ; 1 bytes @ 0x25
   826  000026                     	ds	2
   827  000028                     Mcp2515WriteCanMsg@buf:
   828                           	opt stack 0
   829                           
   830                           ; 10 bytes @ 0x27
   831  000028                     	ds	1
   832  000029                     Mcp2515ReadCanId@mcp_addr:
   833                           	opt stack 0
   834                           
   835                           ; 1 bytes @ 0x28
   836  000029                     	ds	1
   837  00002A                     Mcp2515ReadCanId@msg:
   838                           	opt stack 0
   839                           
   840                           ; 6 bytes @ 0x29
   841  00002A                     	ds	6
   842  000030                     Mcp2515ReadCanMsg@msg:
   843                           	opt stack 0
   844                           
   845                           ; 2 bytes @ 0x2F
   846  000030                     	ds	2
   847  000032                     ??_Mcp2515ReadCanMsg:
   848  000032                     Mcp2515WriteCanMsg@buffer_sidh_addr:
   849                           	opt stack 0
   850                           
   851                           ; 1 bytes @ 0x31
   852  000032                     	ds	1
   853  000033                     Mcp2515WriteCanMsg@dlc:
   854                           	opt stack 0
   855                           
   856                           ; 1 bytes @ 0x32
   857  000033                     	ds	1
   858  000034                     Mcp2515WriteCanMsg@mcp_addr:
   859                           	opt stack 0
   860  000034                     Mcp2515ReadCanMsg@cmd:
   861                           	opt stack 0
   862                           
   863                           ; 10 bytes @ 0x33
   864  000034                     	ds	1
   865  000035                     Mcp2515WriteCanMsg@i:
   866                           	opt stack 0
   867                           
   868                           ; 1 bytes @ 0x34
   869  000035                     	ds	1
   870  000036                     Can_SendMessage@msg:
   871                           	opt stack 0
   872                           
   873                           ; 2 bytes @ 0x35
   874  000036                     	ds	2
   875  000038                     Can_SendMessage@buf:
   876                           	opt stack 0
   877                           
   878                           ; 4 bytes @ 0x37
   879  000038                     	ds	4
   880  00003C                     Can_SendMessage@res:
   881                           	opt stack 0
   882                           
   883                           ; 1 bytes @ 0x3B
   884  00003C                     	ds	1
   885  00003D                     Can_SendMessage@txbuf_n:
   886                           	opt stack 0
   887                           
   888                           ; 1 bytes @ 0x3C
   889  00003D                     	ds	1
   890  00003E                     Mcp2515ReadCanMsg@mcp_addr:
   891                           	opt stack 0
   892                           
   893                           ; 1 bytes @ 0x3D
   894  00003E                     	ds	1
   895  00003F                     Can_ReadMessage@msg:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x3E
   899  00003F                     	ds	2
   900  000041                     Can_ReadMessage@buf:
   901                           	opt stack 0
   902                           
   903                           ; 4 bytes @ 0x40
   904  000041                     	ds	4
   905  000045                     Can_ReadInBuffer@error:
   906                           	opt stack 0
   907                           
   908                           ; 1 bytes @ 0x44
   909  000045                     	ds	1
   910  000046                     Can_ReadInBuffer@rdStatus:
   911                           	opt stack 0
   912                           
   913                           ; 1 bytes @ 0x45
   914  000046                     	ds	1
   915  000047                     Can_ReadInBuffer@i:
   916                           	opt stack 0
   917                           
   918                           ; 1 bytes @ 0x46
   919  000047                     	ds	1
   920  000048                     ??_Can_Isr:
   921                           
   922                           ; 1 bytes @ 0x47
   923  000048                     	ds	1
   924  000049                     Can_Isr@retCode:
   925                           	opt stack 0
   926                           
   927                           ; 1 bytes @ 0x48
   928  000049                     	ds	1
   929  00004A                     ??_high_isr:
   930                           
   931                           ; 1 bytes @ 0x49
   932  00004A                     	ds	14
   933                           tblptru	equ	0xFF8
   934                           tblptrh	equ	0xFF7
   935                           tblptrl	equ	0xFF6
   936                           tablat	equ	0xFF5
   937                           postinc0	equ	0xFEE
   938                           wreg	equ	0xFE8
   939                           postdec1	equ	0xFE5
   940                           fsr1l	equ	0xFE1
   941                           
   942 ;;
   943 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   944 ;;
   945 ;; *************** function _main *****************
   946 ;; Defined at:
   947 ;;		line 172 in file "main.c"
   948 ;; Parameters:    Size  Location     Type
   949 ;;  argc            2   64[BANK0 ] int 
   950 ;;  argv            3   66[BANK0 ] PTR PTR unsigned char 
   951 ;; Auto vars:     Size  Location     Type
   952 ;;		None
   953 ;; Return value:  Size  Location     Type
   954 ;;                  2   64[BANK0 ] int 
   955 ;; Registers used:
   956 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   957 ;; Tracked objects:
   958 ;;		On entry : 0/0
   959 ;;		On exit  : 0/0
   960 ;;		Unchanged: 0/0
   961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   962 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   965 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   966 ;;Total ram usage:        5 bytes
   967 ;; Hardware stack levels required when called:   14
   968 ;; This function calls:
   969 ;;		_init
   970 ;;		_sendPedestrianLight
   971 ;;		_sendTrafficLight
   972 ;;		_sendWarningLight
   973 ;; This function is called by:
   974 ;;		Startup code after reset
   975 ;; This function uses a non-reentrant model
   976 ;;
   977                           
   978                           	psect	text0
   979  0029C0                     __ptext0:
   980                           	opt stack 0
   981  0029C0                     _main:
   982                           	opt stack 17
   983                           
   984                           ;main.c: 173: init();
   985                           
   986                           ;incstack = 0
   987  0029C0  EC4C  F012         	call	_init	;wreg free
   988                           
   989                           ;main.c: 174: sendTrafficLight(1,3);
   990  0029C4  0E03               	movlw	3
   991  0029C6  0100               	movlb	0	; () banked
   992  0029C8  6F65               	movwf	sendTrafficLight@color& (0+255),b
   993  0029CA  0E01               	movlw	1
   994  0029CC  EC62  F013         	call	_sendTrafficLight
   995                           
   996                           ;main.c: 175: sendWarningLight(0,1);
   997  0029D0  0E01               	movlw	1
   998  0029D2  0100               	movlb	0	; () banked
   999  0029D4  6F65               	movwf	sendWarningLight@state& (0+255),b
  1000  0029D6  0E00               	movlw	0
  1001  0029D8  EC0C  F012         	call	_sendWarningLight
  1002                           
  1003                           ;main.c: 176: sendPedestrianLight(0,2);
  1004  0029DC  0E02               	movlw	2
  1005  0029DE  0100               	movlb	0	; () banked
  1006  0029E0  6F65               	movwf	sendPedestrianLight@color& (0+255),b
  1007  0029E2  0E00               	movlw	0
  1008  0029E4  ECFB  F012         	call	_sendPedestrianLight
  1009  0029E8                     l78:
  1010  0029E8  D7FF               	goto	l78
  1011  0029EA                     __end_of_main:
  1012                           	opt stack 0
  1013                           tblptru	equ	0xFF8
  1014                           tblptrh	equ	0xFF7
  1015                           tblptrl	equ	0xFF6
  1016                           tablat	equ	0xFF5
  1017                           postinc0	equ	0xFEE
  1018                           wreg	equ	0xFE8
  1019                           postdec1	equ	0xFE5
  1020                           fsr1l	equ	0xFE1
  1021                           
  1022 ;; *************** function _sendWarningLight *****************
  1023 ;; Defined at:
  1024 ;;		line 155 in file "main.c"
  1025 ;; Parameters:    Size  Location     Type
  1026 ;;  trafficLight    1    wreg     unsigned char 
  1027 ;;  state           1    5[BANK0 ] unsigned char 
  1028 ;; Auto vars:     Size  Location     Type
  1029 ;;  trafficLight    1   10[BANK0 ] unsigned char 
  1030 ;; Return value:  Size  Location     Type
  1031 ;;                  1    wreg      void 
  1032 ;; Registers used:
  1033 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1034 ;; Tracked objects:
  1035 ;;		On entry : 0/0
  1036 ;;		On exit  : 0/0
  1037 ;;		Unchanged: 0/0
  1038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1039 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1040 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1041 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1042 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1043 ;;Total ram usage:        6 bytes
  1044 ;; Hardware stack levels used:    1
  1045 ;; Hardware stack levels required when called:    9
  1046 ;; This function calls:
  1047 ;;		_Can_PutMessage
  1048 ;; This function is called by:
  1049 ;;		_main
  1050 ;; This function uses a non-reentrant model
  1051 ;;
  1052                           
  1053                           	psect	text1
  1054  002418                     __ptext1:
  1055                           	opt stack 0
  1056  002418                     _sendWarningLight:
  1057                           	opt stack 21
  1058                           
  1059                           ;incstack = 0
  1060                           ;sendWarningLight@trafficLight stored from wreg
  1061  002418  0100               	movlb	0	; () banked
  1062  00241A  6F6A               	movwf	sendWarningLight@trafficLight& (0+255),b
  1063                           
  1064                           ;main.c: 157: messageTx.identifier = ((2<<7) | (trafficLight << 4) | id );
  1065  00241C  0E00               	movlw	0
  1066  00241E  0100               	movlb	0	; () banked
  1067  002420  6F66               	movwf	??_sendWarningLight& (0+255),b
  1068  002422  0E01               	movlw	1
  1069  002424  0100               	movlb	0	; () banked
  1070  002426  6F67               	movwf	(??_sendWarningLight+1)& (0+255),b
  1071  002428  0100               	movlb	0	; () banked
  1072  00242A  516A               	movf	sendWarningLight@trafficLight& (0+255),w,b
  1073  00242C  0100               	movlb	0	; () banked
  1074  00242E  6F68               	movwf	(??_sendWarningLight+2)& (0+255),b
  1075  002430  6B69               	clrf	(??_sendWarningLight+3)& (0+255),b
  1076  002432  0100               	movlb	0	; () banked
  1077  002434  3B68               	swapf	(??_sendWarningLight+2)& (0+255),f,b
  1078  002436  3B69               	swapf	(??_sendWarningLight+3)& (0+255),f,b
  1079  002438  0EF0               	movlw	240
  1080  00243A  1769               	andwf	(??_sendWarningLight+3)& (0+255),f,b
  1081  00243C  5168               	movf	(??_sendWarningLight+2)& (0+255),w,b
  1082  00243E  0B0F               	andlw	15
  1083  002440  1369               	iorwf	(??_sendWarningLight+3)& (0+255),f,b
  1084  002442  0EF0               	movlw	240
  1085  002444  1768               	andwf	(??_sendWarningLight+2)& (0+255),f,b
  1086  002446  0100               	movlb	0	; () banked
  1087  002448  51AF               	movf	_id& (0+255),w,b
  1088  00244A  0100               	movlb	0	; () banked
  1089  00244C  1368               	iorwf	(??_sendWarningLight+2)& (0+255),f,b
  1090  00244E  0E00               	movlw	0
  1091  002450  1369               	iorwf	(??_sendWarningLight+3)& (0+255),f,b
  1092  002452  0100               	movlb	0	; () banked
  1093  002454  5166               	movf	??_sendWarningLight& (0+255),w,b
  1094  002456  0100               	movlb	0	; () banked
  1095  002458  1368               	iorwf	(??_sendWarningLight+2)& (0+255),f,b
  1096  00245A  0100               	movlb	0	; () banked
  1097  00245C  5167               	movf	(??_sendWarningLight+1)& (0+255),w,b
  1098  00245E  0100               	movlb	0	; () banked
  1099  002460  1369               	iorwf	(??_sendWarningLight+3)& (0+255),f,b
  1100  002462  C068  F0B1         	movff	??_sendWarningLight+2,_messageTx+1
  1101  002466  C069  F0B2         	movff	??_sendWarningLight+3,_messageTx+2
  1102  00246A  0100               	movlb	0	; () banked
  1103  00246C  0E00               	movlw	0
  1104  00246E  BFB2               	btfsc	(_messageTx+2)& (0+255),7,b
  1105  002470  0EFF               	movlw	-1
  1106  002472  6FB3               	movwf	(_messageTx+3)& (0+255),b
  1107  002474  6FB4               	movwf	(_messageTx+4)& (0+255),b
  1108                           
  1109                           ; BSR set to: 0
  1110                           ;main.c: 158: messageTx.rtr = 0;
  1111  002476  0E00               	movlw	0
  1112  002478  0100               	movlb	0	; () banked
  1113  00247A  6FBE               	movwf	(_messageTx+14)& (0+255),b
  1114                           
  1115                           ; BSR set to: 0
  1116                           ;main.c: 159: messageTx.dta[0] = state;
  1117  00247C  C065  F0B6         	movff	sendWarningLight@state,_messageTx+6
  1118                           
  1119                           ; BSR set to: 0
  1120                           ;main.c: 160: messageTx.dlc = 1;
  1121  002480  0E01               	movlw	1
  1122  002482  0100               	movlb	0	; () banked
  1123  002484  6FB5               	movwf	(_messageTx+5)& (0+255),b
  1124                           
  1125                           ; BSR set to: 0
  1126                           ;main.c: 163: Can_PutMessage(&messageTx);
  1127  002486  0EB0               	movlw	low _messageTx
  1128  002488  0100               	movlb	0	; () banked
  1129  00248A  6F60               	movwf	Can_PutMessage@msgPtr& (0+255),b
  1130  00248C  0E00               	movlw	high _messageTx
  1131  00248E  0100               	movlb	0	; () banked
  1132  002490  6F61               	movwf	(Can_PutMessage@msgPtr+1)& (0+255),b
  1133  002492  EC77  F00D         	call	_Can_PutMessage	;wreg free
  1134  002496  0012               	return		;funcret
  1135  002498                     __end_of_sendWarningLight:
  1136                           	opt stack 0
  1137                           tblptru	equ	0xFF8
  1138                           tblptrh	equ	0xFF7
  1139                           tblptrl	equ	0xFF6
  1140                           tablat	equ	0xFF5
  1141                           postinc0	equ	0xFEE
  1142                           wreg	equ	0xFE8
  1143                           postdec1	equ	0xFE5
  1144                           fsr1l	equ	0xFE1
  1145                           
  1146 ;; *************** function _sendTrafficLight *****************
  1147 ;; Defined at:
  1148 ;;		line 122 in file "main.c"
  1149 ;; Parameters:    Size  Location     Type
  1150 ;;  trafficLight    1    wreg     unsigned char 
  1151 ;;  color           1    5[BANK0 ] unsigned char 
  1152 ;; Auto vars:     Size  Location     Type
  1153 ;;  trafficLight    1    8[BANK0 ] unsigned char 
  1154 ;; Return value:  Size  Location     Type
  1155 ;;                  1    wreg      void 
  1156 ;; Registers used:
  1157 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1158 ;; Tracked objects:
  1159 ;;		On entry : 0/0
  1160 ;;		On exit  : 0/0
  1161 ;;		Unchanged: 0/0
  1162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1163 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1164 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1165 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1166 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1167 ;;Total ram usage:        4 bytes
  1168 ;; Hardware stack levels used:    1
  1169 ;; Hardware stack levels required when called:    9
  1170 ;; This function calls:
  1171 ;;		_Can_PutMessage
  1172 ;; This function is called by:
  1173 ;;		_main
  1174 ;; This function uses a non-reentrant model
  1175 ;;
  1176                           
  1177                           	psect	text2
  1178  0026C4                     __ptext2:
  1179                           	opt stack 0
  1180  0026C4                     _sendTrafficLight:
  1181                           	opt stack 21
  1182                           
  1183                           ;incstack = 0
  1184                           ;sendTrafficLight@trafficLight stored from wreg
  1185  0026C4  0100               	movlb	0	; () banked
  1186  0026C6  6F68               	movwf	sendTrafficLight@trafficLight& (0+255),b
  1187                           
  1188                           ;main.c: 125: messageTx.identifier = ((0<<7) | (trafficLight << 4) | id );
  1189  0026C8  0100               	movlb	0	; () banked
  1190  0026CA  5168               	movf	sendTrafficLight@trafficLight& (0+255),w,b
  1191  0026CC  0100               	movlb	0	; () banked
  1192  0026CE  6F66               	movwf	??_sendTrafficLight& (0+255),b
  1193  0026D0  6B67               	clrf	(??_sendTrafficLight+1)& (0+255),b
  1194  0026D2  0100               	movlb	0	; () banked
  1195  0026D4  3B66               	swapf	??_sendTrafficLight& (0+255),f,b
  1196  0026D6  3B67               	swapf	(??_sendTrafficLight+1)& (0+255),f,b
  1197  0026D8  0EF0               	movlw	240
  1198  0026DA  1767               	andwf	(??_sendTrafficLight+1)& (0+255),f,b
  1199  0026DC  5166               	movf	??_sendTrafficLight& (0+255),w,b
  1200  0026DE  0B0F               	andlw	15
  1201  0026E0  1367               	iorwf	(??_sendTrafficLight+1)& (0+255),f,b
  1202  0026E2  0EF0               	movlw	240
  1203  0026E4  1766               	andwf	??_sendTrafficLight& (0+255),f,b
  1204  0026E6  0100               	movlb	0	; () banked
  1205  0026E8  51AF               	movf	_id& (0+255),w,b
  1206  0026EA  0100               	movlb	0	; () banked
  1207  0026EC  1366               	iorwf	??_sendTrafficLight& (0+255),f,b
  1208  0026EE  0E00               	movlw	0
  1209  0026F0  1367               	iorwf	(??_sendTrafficLight+1)& (0+255),f,b
  1210  0026F2  C066  F0B1         	movff	??_sendTrafficLight,_messageTx+1
  1211  0026F6  C067  F0B2         	movff	??_sendTrafficLight+1,_messageTx+2
  1212  0026FA  0100               	movlb	0	; () banked
  1213  0026FC  0E00               	movlw	0
  1214  0026FE  BFB2               	btfsc	(_messageTx+2)& (0+255),7,b
  1215  002700  0EFF               	movlw	-1
  1216  002702  6FB3               	movwf	(_messageTx+3)& (0+255),b
  1217  002704  6FB4               	movwf	(_messageTx+4)& (0+255),b
  1218                           
  1219                           ; BSR set to: 0
  1220                           ;main.c: 126: messageTx.rtr = 0;
  1221  002706  0E00               	movlw	0
  1222  002708  0100               	movlb	0	; () banked
  1223  00270A  6FBE               	movwf	(_messageTx+14)& (0+255),b
  1224                           
  1225                           ; BSR set to: 0
  1226                           ;main.c: 127: messageTx.dta[0] = color;
  1227  00270C  C065  F0B6         	movff	sendTrafficLight@color,_messageTx+6
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;main.c: 128: messageTx.dlc = 1;
  1231  002710  0E01               	movlw	1
  1232  002712  0100               	movlb	0	; () banked
  1233  002714  6FB5               	movwf	(_messageTx+5)& (0+255),b
  1234                           
  1235                           ; BSR set to: 0
  1236                           ;main.c: 131: Can_PutMessage(&messageTx);
  1237  002716  0EB0               	movlw	low _messageTx
  1238  002718  0100               	movlb	0	; () banked
  1239  00271A  6F60               	movwf	Can_PutMessage@msgPtr& (0+255),b
  1240  00271C  0E00               	movlw	high _messageTx
  1241  00271E  0100               	movlb	0	; () banked
  1242  002720  6F61               	movwf	(Can_PutMessage@msgPtr+1)& (0+255),b
  1243  002722  EC77  F00D         	call	_Can_PutMessage	;wreg free
  1244  002726  0012               	return		;funcret
  1245  002728                     __end_of_sendTrafficLight:
  1246                           	opt stack 0
  1247                           tblptru	equ	0xFF8
  1248                           tblptrh	equ	0xFF7
  1249                           tblptrl	equ	0xFF6
  1250                           tablat	equ	0xFF5
  1251                           postinc0	equ	0xFEE
  1252                           wreg	equ	0xFE8
  1253                           postdec1	equ	0xFE5
  1254                           fsr1l	equ	0xFE1
  1255                           
  1256 ;; *************** function _sendPedestrianLight *****************
  1257 ;; Defined at:
  1258 ;;		line 140 in file "main.c"
  1259 ;; Parameters:    Size  Location     Type
  1260 ;;  trafficLight    1    wreg     unsigned char 
  1261 ;;  color           1    5[BANK0 ] unsigned char 
  1262 ;; Auto vars:     Size  Location     Type
  1263 ;;  trafficLight    1    8[BANK0 ] unsigned char 
  1264 ;; Return value:  Size  Location     Type
  1265 ;;                  1    wreg      void 
  1266 ;; Registers used:
  1267 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1268 ;; Tracked objects:
  1269 ;;		On entry : 0/0
  1270 ;;		On exit  : 0/0
  1271 ;;		Unchanged: 0/0
  1272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1273 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1274 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1275 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1276 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1277 ;;Total ram usage:        4 bytes
  1278 ;; Hardware stack levels used:    1
  1279 ;; Hardware stack levels required when called:    9
  1280 ;; This function calls:
  1281 ;;		_Can_PutMessage
  1282 ;; This function is called by:
  1283 ;;		_main
  1284 ;; This function uses a non-reentrant model
  1285 ;;
  1286                           
  1287                           	psect	text3
  1288  0025F6                     __ptext3:
  1289                           	opt stack 0
  1290  0025F6                     _sendPedestrianLight:
  1291                           	opt stack 21
  1292                           
  1293                           ;incstack = 0
  1294                           ;sendPedestrianLight@trafficLight stored from wreg
  1295  0025F6  0100               	movlb	0	; () banked
  1296  0025F8  6F68               	movwf	sendPedestrianLight@trafficLight& (0+255),b
  1297                           
  1298                           ;main.c: 142: messageTx.identifier = ((1<<7) | (trafficLight << 4) | id );
  1299  0025FA  0100               	movlb	0	; () banked
  1300  0025FC  5168               	movf	sendPedestrianLight@trafficLight& (0+255),w,b
  1301  0025FE  0100               	movlb	0	; () banked
  1302  002600  6F66               	movwf	??_sendPedestrianLight& (0+255),b
  1303  002602  6B67               	clrf	(??_sendPedestrianLight+1)& (0+255),b
  1304  002604  0100               	movlb	0	; () banked
  1305  002606  3B66               	swapf	??_sendPedestrianLight& (0+255),f,b
  1306  002608  3B67               	swapf	(??_sendPedestrianLight+1)& (0+255),f,b
  1307  00260A  0EF0               	movlw	240
  1308  00260C  1767               	andwf	(??_sendPedestrianLight+1)& (0+255),f,b
  1309  00260E  5166               	movf	??_sendPedestrianLight& (0+255),w,b
  1310  002610  0B0F               	andlw	15
  1311  002612  1367               	iorwf	(??_sendPedestrianLight+1)& (0+255),f,b
  1312  002614  0EF0               	movlw	240
  1313  002616  1766               	andwf	??_sendPedestrianLight& (0+255),f,b
  1314  002618  0100               	movlb	0	; () banked
  1315  00261A  51AF               	movf	_id& (0+255),w,b
  1316  00261C  0100               	movlb	0	; () banked
  1317  00261E  1366               	iorwf	??_sendPedestrianLight& (0+255),f,b
  1318  002620  0E00               	movlw	0
  1319  002622  1367               	iorwf	(??_sendPedestrianLight+1)& (0+255),f,b
  1320  002624  0100               	movlb	0	; () banked
  1321  002626  8F66               	bsf	??_sendPedestrianLight& (0+255),7,b
  1322  002628  C066  F0B1         	movff	??_sendPedestrianLight,_messageTx+1
  1323  00262C  C067  F0B2         	movff	??_sendPedestrianLight+1,_messageTx+2
  1324  002630  0100               	movlb	0	; () banked
  1325  002632  0E00               	movlw	0
  1326  002634  BFB2               	btfsc	(_messageTx+2)& (0+255),7,b
  1327  002636  0EFF               	movlw	-1
  1328  002638  6FB3               	movwf	(_messageTx+3)& (0+255),b
  1329  00263A  6FB4               	movwf	(_messageTx+4)& (0+255),b
  1330                           
  1331                           ; BSR set to: 0
  1332                           ;main.c: 143: messageTx.rtr = 0;
  1333  00263C  0E00               	movlw	0
  1334  00263E  0100               	movlb	0	; () banked
  1335  002640  6FBE               	movwf	(_messageTx+14)& (0+255),b
  1336                           
  1337                           ; BSR set to: 0
  1338                           ;main.c: 144: messageTx.dta[0] = color;
  1339  002642  C065  F0B6         	movff	sendPedestrianLight@color,_messageTx+6
  1340                           
  1341                           ; BSR set to: 0
  1342                           ;main.c: 145: messageTx.dlc = 1;
  1343  002646  0E01               	movlw	1
  1344  002648  0100               	movlb	0	; () banked
  1345  00264A  6FB5               	movwf	(_messageTx+5)& (0+255),b
  1346                           
  1347                           ; BSR set to: 0
  1348                           ;main.c: 148: Can_PutMessage(&messageTx);
  1349  00264C  0EB0               	movlw	low _messageTx
  1350  00264E  0100               	movlb	0	; () banked
  1351  002650  6F60               	movwf	Can_PutMessage@msgPtr& (0+255),b
  1352  002652  0E00               	movlw	high _messageTx
  1353  002654  0100               	movlb	0	; () banked
  1354  002656  6F61               	movwf	(Can_PutMessage@msgPtr+1)& (0+255),b
  1355  002658  EC77  F00D         	call	_Can_PutMessage	;wreg free
  1356  00265C  0012               	return		;funcret
  1357  00265E                     __end_of_sendPedestrianLight:
  1358                           	opt stack 0
  1359                           tblptru	equ	0xFF8
  1360                           tblptrh	equ	0xFF7
  1361                           tblptrl	equ	0xFF6
  1362                           tablat	equ	0xFF5
  1363                           postinc0	equ	0xFEE
  1364                           wreg	equ	0xFE8
  1365                           postdec1	equ	0xFE5
  1366                           fsr1l	equ	0xFE1
  1367                           
  1368 ;; *************** function _init *****************
  1369 ;; Defined at:
  1370 ;;		line 46 in file "main.c"
  1371 ;; Parameters:    Size  Location     Type
  1372 ;;		None
  1373 ;; Auto vars:     Size  Location     Type
  1374 ;;		None
  1375 ;; Return value:  Size  Location     Type
  1376 ;;                  1    wreg      void 
  1377 ;; Registers used:
  1378 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1379 ;; Tracked objects:
  1380 ;;		On entry : 0/0
  1381 ;;		On exit  : 0/0
  1382 ;;		Unchanged: 0/0
  1383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1387 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1388 ;;Total ram usage:        0 bytes
  1389 ;; Hardware stack levels used:    1
  1390 ;; Hardware stack levels required when called:   13
  1391 ;; This function calls:
  1392 ;;		_Can_Init
  1393 ;;		_readConflictInfo
  1394 ;;		_readID
  1395 ;; This function is called by:
  1396 ;;		_main
  1397 ;; This function uses a non-reentrant model
  1398 ;;
  1399                           
  1400                           	psect	text4
  1401  002498                     __ptext4:
  1402                           	opt stack 0
  1403  002498                     _init:
  1404                           	opt stack 17
  1405                           
  1406                           ;main.c: 47: Can_Init( &canSpeed125k , &filter);
  1407                           
  1408                           ;incstack = 0
  1409  002498  0E39               	movlw	low _canSpeed125k
  1410  00249A  0100               	movlb	0	; () banked
  1411  00249C  6F9C               	movwf	Can_Init@speedCfg& (0+255),b
  1412  00249E  0E10               	movlw	high _canSpeed125k
  1413  0024A0  0100               	movlb	0	; () banked
  1414  0024A2  6F9D               	movwf	(Can_Init@speedCfg+1)& (0+255),b
  1415  0024A4  0E88               	movlw	low _filter
  1416  0024A6  0100               	movlb	0	; () banked
  1417  0024A8  6F9E               	movwf	Can_Init@filterCfg& (0+255),b
  1418  0024AA  0E01               	movlw	high _filter
  1419  0024AC  0100               	movlb	0	; () banked
  1420  0024AE  6F9F               	movwf	(Can_Init@filterCfg+1)& (0+255),b
  1421  0024B0  ECA9  F014         	call	_Can_Init	;wreg free
  1422                           
  1423                           ;main.c: 48: PEIE = 1;
  1424  0024B4  8CF2               	bsf	intcon,6,c	;volatile
  1425                           
  1426                           ;main.c: 49: GIE = 1;
  1427  0024B6  8EF2               	bsf	intcon,7,c	;volatile
  1428                           
  1429                           ;main.c: 50: id = readID();
  1430  0024B8  ECF7  F013         	call	_readID	;wreg free
  1431  0024BC  0100               	movlb	0	; () banked
  1432  0024BE  6FAF               	movwf	_id& (0+255),b
  1433                           
  1434                           ; BSR set to: 0
  1435                           ;main.c: 51: filter.mask0 = 0X00F;
  1436  0024C0  0E0F               	movlw	15
  1437  0024C2  0101               	movlb	1	; () banked
  1438  0024C4  6F88               	movwf	_filter& (0+255),b
  1439  0024C6  0E00               	movlw	0
  1440  0024C8  6F89               	movwf	(_filter+1)& (0+255),b
  1441  0024CA  0E00               	movlw	0
  1442  0024CC  6F8A               	movwf	(_filter+2)& (0+255),b
  1443  0024CE  0E00               	movlw	0
  1444  0024D0  6F8B               	movwf	(_filter+3)& (0+255),b
  1445                           
  1446                           ; BSR set to: 1
  1447                           ;main.c: 52: filter.filter0 = id;
  1448  0024D2  0100               	movlb	0	; () banked
  1449  0024D4  51AF               	movf	_id& (0+255),w,b
  1450  0024D6  0101               	movlb	1	; () banked
  1451  0024D8  6F90               	movwf	(_filter+8)& (0+255),b
  1452  0024DA  6B91               	clrf	(_filter+9)& (0+255),b
  1453  0024DC  6B92               	clrf	(_filter+10)& (0+255),b
  1454  0024DE  6B93               	clrf	(_filter+11)& (0+255),b
  1455                           
  1456                           ; BSR set to: 1
  1457                           ;main.c: 53: Can_Init( &canSpeed125k , &filter);
  1458  0024E0  0E39               	movlw	low _canSpeed125k
  1459  0024E2  0100               	movlb	0	; () banked
  1460  0024E4  6F9C               	movwf	Can_Init@speedCfg& (0+255),b
  1461  0024E6  0E10               	movlw	high _canSpeed125k
  1462  0024E8  0100               	movlb	0	; () banked
  1463  0024EA  6F9D               	movwf	(Can_Init@speedCfg+1)& (0+255),b
  1464  0024EC  0E88               	movlw	low _filter
  1465  0024EE  0100               	movlb	0	; () banked
  1466  0024F0  6F9E               	movwf	Can_Init@filterCfg& (0+255),b
  1467  0024F2  0E01               	movlw	high _filter
  1468  0024F4  0100               	movlb	0	; () banked
  1469  0024F6  6F9F               	movwf	(Can_Init@filterCfg+1)& (0+255),b
  1470  0024F8  ECA9  F014         	call	_Can_Init	;wreg free
  1471                           
  1472                           ;main.c: 54: readConflictInfo();
  1473  0024FC  EC17  F00B         	call	_readConflictInfo	;wreg free
  1474                           
  1475                           ;main.c: 57: T0CONbits.T08BIT = 0;
  1476  002500  9CD5               	bcf	4053,6,c	;volatile
  1477                           
  1478                           ;main.c: 58: T0CONbits.T0CS = 0;
  1479  002502  9AD5               	bcf	4053,5,c	;volatile
  1480                           
  1481                           ;main.c: 59: T0CONbits.PSA = 0;
  1482  002504  96D5               	bcf	4053,3,c	;volatile
  1483                           
  1484                           ;main.c: 60: T0CONbits.T0PS = 0x7;
  1485  002506  80D5               	bsf	4053,0,c	;volatile
  1486  002508  82D5               	bsf	4053,1,c	;volatile
  1487  00250A  84D5               	bsf	4053,2,c	;volatile
  1488                           
  1489                           ;main.c: 61: TMR0 = 0xe17b;
  1490  00250C  0EE1               	movlw	225
  1491  00250E  6ED7               	movwf	4055,c	;volatile
  1492  002510  0E7B               	movlw	123
  1493  002512  6ED6               	movwf	4054,c	;volatile
  1494                           
  1495                           ;main.c: 62: T0CONbits.TMR0ON = 1;
  1496  002514  8ED5               	bsf	4053,7,c	;volatile
  1497  002516  0012               	return		;funcret
  1498  002518                     __end_of_init:
  1499                           	opt stack 0
  1500                           tblptru	equ	0xFF8
  1501                           tblptrh	equ	0xFF7
  1502                           tblptrl	equ	0xFF6
  1503                           tablat	equ	0xFF5
  1504                           intcon	equ	0xFF2
  1505                           postinc0	equ	0xFEE
  1506                           wreg	equ	0xFE8
  1507                           postdec1	equ	0xFE5
  1508                           fsr1l	equ	0xFE1
  1509                           
  1510 ;; *************** function _readID *****************
  1511 ;; Defined at:
  1512 ;;		line 65 in file "main.c"
  1513 ;; Parameters:    Size  Location     Type
  1514 ;;		None
  1515 ;; Auto vars:     Size  Location     Type
  1516 ;;  retVal          1    5[BANK0 ] unsigned char 
  1517 ;; Return value:  Size  Location     Type
  1518 ;;                  1    wreg      unsigned char 
  1519 ;; Registers used:
  1520 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1521 ;; Tracked objects:
  1522 ;;		On entry : 0/0
  1523 ;;		On exit  : 0/0
  1524 ;;		Unchanged: 0/0
  1525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1527 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1529 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1530 ;;Total ram usage:        1 bytes
  1531 ;; Hardware stack levels used:    1
  1532 ;; Hardware stack levels required when called:    9
  1533 ;; This function calls:
  1534 ;;		_Can_GetMessage
  1535 ;;		_Can_PutMessage
  1536 ;;		_resetData
  1537 ;; This function is called by:
  1538 ;;		_init
  1539 ;; This function uses a non-reentrant model
  1540 ;;
  1541                           
  1542                           	psect	text5
  1543  0027EE                     __ptext5:
  1544                           	opt stack 0
  1545  0027EE                     _readID:
  1546                           	opt stack 20
  1547                           
  1548                           ;main.c: 66: uint8_t retVal = 0;
  1549                           
  1550                           ;incstack = 0
  1551  0027EE  0E00               	movlw	0
  1552  0027F0  0100               	movlb	0	; () banked
  1553  0027F2  6F65               	movwf	readID@retVal& (0+255),b
  1554                           
  1555                           ;main.c: 69: messageTx.identifier = ((10<<7) | 0xF) ;
  1556  0027F4  0E0F               	movlw	15
  1557  0027F6  0100               	movlb	0	; () banked
  1558  0027F8  6FB1               	movwf	(_messageTx+1)& (0+255),b
  1559  0027FA  0E05               	movlw	5
  1560  0027FC  6FB2               	movwf	(_messageTx+2)& (0+255),b
  1561  0027FE  0E00               	movlw	0
  1562  002800  6FB3               	movwf	(_messageTx+3)& (0+255),b
  1563  002802  0E00               	movlw	0
  1564  002804  6FB4               	movwf	(_messageTx+4)& (0+255),b
  1565                           
  1566                           ; BSR set to: 0
  1567                           ;main.c: 70: resetData();
  1568  002806  EC8A  F014         	call	_resetData	;wreg free
  1569                           
  1570                           ;main.c: 71: message.rtr = 1;
  1571  00280A  0E01               	movlw	1
  1572  00280C  0100               	movlb	0	; () banked
  1573  00280E  6FCF               	movwf	(_message+14)& (0+255),b
  1574                           
  1575                           ; BSR set to: 0
  1576                           ;main.c: 74: Can_PutMessage(&messageTx);
  1577  002810  0EB0               	movlw	low _messageTx
  1578  002812  0100               	movlb	0	; () banked
  1579  002814  6F60               	movwf	Can_PutMessage@msgPtr& (0+255),b
  1580  002816  0E00               	movlw	high _messageTx
  1581  002818  0100               	movlb	0	; () banked
  1582  00281A  6F61               	movwf	(Can_PutMessage@msgPtr+1)& (0+255),b
  1583  00281C  EC77  F00D         	call	_Can_PutMessage	;wreg free
  1584  002820                     l2249:
  1585  002820  0EC1               	movlw	low _message
  1586  002822  0100               	movlb	0	; () banked
  1587  002824  6F60               	movwf	Can_GetMessage@msgPtr& (0+255),b
  1588  002826  0E00               	movlw	high _message
  1589  002828  0100               	movlb	0	; () banked
  1590  00282A  6F61               	movwf	(Can_GetMessage@msgPtr+1)& (0+255),b
  1591  00282C  EC4A  F00E         	call	_Can_GetMessage	;wreg free
  1592  002830  0900               	iorlw	0
  1593  002832  A4D8               	btfss	status,2,c
  1594  002834  D7F5               	goto	l2249
  1595                           
  1596                           ;main.c: 79: retVal = message.dta[0];
  1597  002836  C0C7  F065         	movff	_message+6,readID@retVal
  1598                           
  1599                           ;main.c: 81: resetData();
  1600  00283A  EC8A  F014         	call	_resetData	;wreg free
  1601                           
  1602                           ;main.c: 83: return retVal;
  1603  00283E  0100               	movlb	0	; () banked
  1604  002840  5165               	movf	readID@retVal& (0+255),w,b
  1605  002842  0012               	return	
  1606  002844                     __end_of_readID:
  1607                           	opt stack 0
  1608                           tblptru	equ	0xFF8
  1609                           tblptrh	equ	0xFF7
  1610                           tblptrl	equ	0xFF6
  1611                           tablat	equ	0xFF5
  1612                           intcon	equ	0xFF2
  1613                           postinc0	equ	0xFEE
  1614                           wreg	equ	0xFE8
  1615                           postdec1	equ	0xFE5
  1616                           fsr1l	equ	0xFE1
  1617                           status	equ	0xFD8
  1618                           
  1619 ;; *************** function _readConflictInfo *****************
  1620 ;; Defined at:
  1621 ;;		line 86 in file "main.c"
  1622 ;; Parameters:    Size  Location     Type
  1623 ;;		None
  1624 ;; Auto vars:     Size  Location     Type
  1625 ;;  j               2   14[BANK0 ] int 
  1626 ;;  i               2   12[BANK0 ] int 
  1627 ;; Return value:  Size  Location     Type
  1628 ;;                  1    wreg      void 
  1629 ;; Registers used:
  1630 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1631 ;; Tracked objects:
  1632 ;;		On entry : 0/0
  1633 ;;		On exit  : 0/0
  1634 ;;		Unchanged: 0/0
  1635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1637 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1638 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1639 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1640 ;;Total ram usage:       10 bytes
  1641 ;; Hardware stack levels used:    1
  1642 ;; Hardware stack levels required when called:    9
  1643 ;; This function calls:
  1644 ;;		_Can_GetMessage
  1645 ;;		_Can_PutMessage
  1646 ;;		___wmul
  1647 ;;		_resetData
  1648 ;; This function is called by:
  1649 ;;		_init
  1650 ;; This function uses a non-reentrant model
  1651 ;;
  1652                           
  1653                           	psect	text6
  1654  00162E                     __ptext6:
  1655                           	opt stack 0
  1656  00162E                     _readConflictInfo:
  1657                           	opt stack 20
  1658                           
  1659                           ;main.c: 89: resetData();
  1660                           
  1661                           ; BSR set to: 0
  1662                           ;incstack = 0
  1663  00162E  EC8A  F014         	call	_resetData	;wreg free
  1664                           
  1665                           ;main.c: 90: messageTx.rtr = 1;
  1666  001632  0E01               	movlw	1
  1667  001634  0100               	movlb	0	; () banked
  1668  001636  6FBE               	movwf	(_messageTx+14)& (0+255),b
  1669                           
  1670                           ; BSR set to: 0
  1671                           ;main.c: 93: int i;
  1672                           ;main.c: 94: int j;
  1673                           ;main.c: 95: for (i = 0 ; i < 12 ; i++){
  1674  001638  0E00               	movlw	0
  1675  00163A  0100               	movlb	0	; () banked
  1676  00163C  6F6D               	movwf	(readConflictInfo@i+1)& (0+255),b
  1677  00163E  0E00               	movlw	0
  1678  001640  6F6C               	movwf	readConflictInfo@i& (0+255),b
  1679                           
  1680                           ; BSR set to: 0
  1681  001642  0100               	movlb	0	; () banked
  1682  001644  BF6D               	btfsc	(readConflictInfo@i+1)& (0+255),7,b
  1683  001646  D00A               	goto	l2267
  1684  001648  0100               	movlb	0	; () banked
  1685  00164A  516D               	movf	(readConflictInfo@i+1)& (0+255),w,b
  1686  00164C  E106               	bnz	u1110
  1687  00164E  0E0C               	movlw	12
  1688  001650  0100               	movlb	0	; () banked
  1689  001652  5D6C               	subwf	readConflictInfo@i& (0+255),w,b
  1690  001654  B0D8               	btfsc	status,0,c
  1691  001656  0012               	return	
  1692  001658  D001               	goto	l2267
  1693  00165A                     u1110:
  1694                           
  1695                           ; BSR set to: 0
  1696  00165A  0012               	return	
  1697  00165C                     l2267:
  1698                           
  1699                           ; BSR set to: 0
  1700                           ;main.c: 97: messageTx.identifier = ((8<<7) | (i << 4) | id);
  1701  00165C  0E00               	movlw	0
  1702  00165E  0100               	movlb	0	; () banked
  1703  001660  6F66               	movwf	??_readConflictInfo& (0+255),b
  1704  001662  0E04               	movlw	4
  1705  001664  0100               	movlb	0	; () banked
  1706  001666  6F67               	movwf	(??_readConflictInfo+1)& (0+255),b
  1707  001668  C06C  F068         	movff	readConflictInfo@i,??_readConflictInfo+2
  1708  00166C  C06D  F069         	movff	readConflictInfo@i+1,??_readConflictInfo+3
  1709  001670  0100               	movlb	0	; () banked
  1710  001672  3B68               	swapf	(??_readConflictInfo+2)& (0+255),f,b
  1711  001674  3B69               	swapf	(??_readConflictInfo+3)& (0+255),f,b
  1712  001676  0EF0               	movlw	240
  1713  001678  1769               	andwf	(??_readConflictInfo+3)& (0+255),f,b
  1714  00167A  5168               	movf	(??_readConflictInfo+2)& (0+255),w,b
  1715  00167C  0B0F               	andlw	15
  1716  00167E  1369               	iorwf	(??_readConflictInfo+3)& (0+255),f,b
  1717  001680  0EF0               	movlw	240
  1718  001682  1768               	andwf	(??_readConflictInfo+2)& (0+255),f,b
  1719  001684  0100               	movlb	0	; () banked
  1720  001686  51AF               	movf	_id& (0+255),w,b
  1721  001688  0100               	movlb	0	; () banked
  1722  00168A  1368               	iorwf	(??_readConflictInfo+2)& (0+255),f,b
  1723  00168C  0E00               	movlw	0
  1724  00168E  1369               	iorwf	(??_readConflictInfo+3)& (0+255),f,b
  1725  001690  0100               	movlb	0	; () banked
  1726  001692  5166               	movf	??_readConflictInfo& (0+255),w,b
  1727  001694  0100               	movlb	0	; () banked
  1728  001696  1368               	iorwf	(??_readConflictInfo+2)& (0+255),f,b
  1729  001698  0100               	movlb	0	; () banked
  1730  00169A  5167               	movf	(??_readConflictInfo+1)& (0+255),w,b
  1731  00169C  0100               	movlb	0	; () banked
  1732  00169E  1369               	iorwf	(??_readConflictInfo+3)& (0+255),f,b
  1733  0016A0  C068  F0B1         	movff	??_readConflictInfo+2,_messageTx+1
  1734  0016A4  C069  F0B2         	movff	??_readConflictInfo+3,_messageTx+2
  1735  0016A8  0100               	movlb	0	; () banked
  1736  0016AA  0E00               	movlw	0
  1737  0016AC  BFB2               	btfsc	(_messageTx+2)& (0+255),7,b
  1738  0016AE  0EFF               	movlw	-1
  1739  0016B0  6FB3               	movwf	(_messageTx+3)& (0+255),b
  1740  0016B2  6FB4               	movwf	(_messageTx+4)& (0+255),b
  1741                           
  1742                           ; BSR set to: 0
  1743                           ;main.c: 100: Can_PutMessage(&messageTx);
  1744  0016B4  0EB0               	movlw	low _messageTx
  1745  0016B6  0100               	movlb	0	; () banked
  1746  0016B8  6F60               	movwf	Can_PutMessage@msgPtr& (0+255),b
  1747  0016BA  0E00               	movlw	high _messageTx
  1748  0016BC  0100               	movlb	0	; () banked
  1749  0016BE  6F61               	movwf	(Can_PutMessage@msgPtr+1)& (0+255),b
  1750  0016C0  EC77  F00D         	call	_Can_PutMessage	;wreg free
  1751  0016C4                     l2271:
  1752  0016C4  0EC1               	movlw	low _message
  1753  0016C6  0100               	movlb	0	; () banked
  1754  0016C8  6F60               	movwf	Can_GetMessage@msgPtr& (0+255),b
  1755  0016CA  0E00               	movlw	high _message
  1756  0016CC  0100               	movlb	0	; () banked
  1757  0016CE  6F61               	movwf	(Can_GetMessage@msgPtr+1)& (0+255),b
  1758  0016D0  EC4A  F00E         	call	_Can_GetMessage	;wreg free
  1759  0016D4  0900               	iorlw	0
  1760  0016D6  A4D8               	btfss	status,2,c
  1761  0016D8  D7F5               	goto	l2271
  1762                           
  1763                           ;main.c: 105: for ( j = 0 ; j < 3 ; j ++){
  1764  0016DA  0E00               	movlw	0
  1765  0016DC  0100               	movlb	0	; () banked
  1766  0016DE  6F6F               	movwf	(readConflictInfo@j+1)& (0+255),b
  1767  0016E0  0E00               	movlw	0
  1768  0016E2  6F6E               	movwf	readConflictInfo@j& (0+255),b
  1769                           
  1770                           ; BSR set to: 0
  1771  0016E4  0100               	movlb	0	; () banked
  1772  0016E6  BF6F               	btfsc	(readConflictInfo@j+1)& (0+255),7,b
  1773  0016E8  D00A               	goto	l2279
  1774  0016EA  0100               	movlb	0	; () banked
  1775  0016EC  516F               	movf	(readConflictInfo@j+1)& (0+255),w,b
  1776  0016EE  E106               	bnz	u1130
  1777  0016F0  0E03               	movlw	3
  1778  0016F2  0100               	movlb	0	; () banked
  1779  0016F4  5D6E               	subwf	readConflictInfo@j& (0+255),w,b
  1780  0016F6  B0D8               	btfsc	status,0,c
  1781  0016F8  D117               	goto	l2285
  1782  0016FA  D001               	goto	l2279
  1783  0016FC                     u1130:
  1784                           
  1785                           ; BSR set to: 0
  1786  0016FC  D115               	goto	l2285
  1787  0016FE                     l2279:
  1788                           
  1789                           ; BSR set to: 0
  1790                           ;main.c: 106: conflictTable[i][(4*j) + 0] = (message.dta[j] & 0x03);
  1791  0016FE  C06C  F060         	movff	readConflictInfo@i,___wmul@multiplier
  1792  001702  C06D  F061         	movff	readConflictInfo@i+1,___wmul@multiplier+1
  1793  001706  0E00               	movlw	0
  1794  001708  0100               	movlb	0	; () banked
  1795  00170A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1796  00170C  0E0C               	movlw	12
  1797  00170E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1798  001710  ECC5  F014         	call	___wmul	;wreg free
  1799  001714  0E00               	movlw	low _conflictTable
  1800  001716  0100               	movlb	0	; () banked
  1801  001718  6F66               	movwf	??_readConflictInfo& (0+255),b
  1802  00171A  0E02               	movlw	high _conflictTable
  1803  00171C  0100               	movlb	0	; () banked
  1804  00171E  6F67               	movwf	(??_readConflictInfo+1)& (0+255),b
  1805  001720  0100               	movlb	0	; () banked
  1806  001722  5160               	movf	?___wmul& (0+255),w,b
  1807  001724  0100               	movlb	0	; () banked
  1808  001726  2766               	addwf	??_readConflictInfo& (0+255),f,b
  1809  001728  0100               	movlb	0	; () banked
  1810  00172A  5161               	movf	(?___wmul+1)& (0+255),w,b
  1811  00172C  0100               	movlb	0	; () banked
  1812  00172E  2367               	addwfc	(??_readConflictInfo+1)& (0+255),f,b
  1813  001730  90D8               	bcf	status,0,c
  1814  001732  0100               	movlb	0	; () banked
  1815  001734  356E               	rlcf	readConflictInfo@j& (0+255),w,b
  1816  001736  6ED9               	movwf	fsr2l,c
  1817  001738  0100               	movlb	0	; () banked
  1818  00173A  356F               	rlcf	(readConflictInfo@j+1)& (0+255),w,b
  1819  00173C  6EDA               	movwf	fsr2h,c
  1820  00173E  90D8               	bcf	status,0,c
  1821  001740  36D9               	rlcf	fsr2l,f,c
  1822  001742  36DA               	rlcf	fsr2h,f,c
  1823  001744  0100               	movlb	0	; () banked
  1824  001746  5166               	movf	??_readConflictInfo& (0+255),w,b
  1825  001748  26D9               	addwf	fsr2l,f,c
  1826  00174A  0100               	movlb	0	; () banked
  1827  00174C  5167               	movf	(??_readConflictInfo+1)& (0+255),w,b
  1828  00174E  22DA               	addwfc	fsr2h,f,c
  1829  001750  0EC7               	movlw	low (_message+6)
  1830  001752  0100               	movlb	0	; () banked
  1831  001754  256E               	addwf	readConflictInfo@j& (0+255),w,b
  1832  001756  6EE1               	movwf	fsr1l,c
  1833  001758  0E00               	movlw	high (_message+6)
  1834  00175A  0100               	movlb	0	; () banked
  1835  00175C  216F               	addwfc	(readConflictInfo@j+1)& (0+255),w,b
  1836  00175E  6EE2               	movwf	fsr1h,c
  1837  001760  50E7               	movf	indf1,w,c
  1838  001762  0B03               	andlw	3
  1839  001764  6EDF               	movwf	indf2,c
  1840                           
  1841                           ;main.c: 107: conflictTable[i][(4*j) + 1] = (message.dta[j] & 0x0c) >> 2;
  1842  001766  C06C  F060         	movff	readConflictInfo@i,___wmul@multiplier
  1843  00176A  C06D  F061         	movff	readConflictInfo@i+1,___wmul@multiplier+1
  1844  00176E  0E00               	movlw	0
  1845  001770  0100               	movlb	0	; () banked
  1846  001772  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1847  001774  0E0C               	movlw	12
  1848  001776  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1849  001778  ECC5  F014         	call	___wmul	;wreg free
  1850  00177C  C06E  F066         	movff	readConflictInfo@j,??_readConflictInfo
  1851  001780  C06F  F067         	movff	readConflictInfo@j+1,??_readConflictInfo+1
  1852  001784  0100               	movlb	0	; () banked
  1853  001786  90D8               	bcf	status,0,c
  1854  001788  3766               	rlcf	??_readConflictInfo& (0+255),f,b
  1855  00178A  3767               	rlcf	(??_readConflictInfo+1)& (0+255),f,b
  1856  00178C  0100               	movlb	0	; () banked
  1857  00178E  90D8               	bcf	status,0,c
  1858  001790  3766               	rlcf	??_readConflictInfo& (0+255),f,b
  1859  001792  3767               	rlcf	(??_readConflictInfo+1)& (0+255),f,b
  1860  001794  0E01               	movlw	1
  1861  001796  0100               	movlb	0	; () banked
  1862  001798  2766               	addwf	??_readConflictInfo& (0+255),f,b
  1863  00179A  0E00               	movlw	0
  1864  00179C  2367               	addwfc	(??_readConflictInfo+1)& (0+255),f,b
  1865  00179E  0E00               	movlw	low _conflictTable
  1866  0017A0  0100               	movlb	0	; () banked
  1867  0017A2  6F68               	movwf	(??_readConflictInfo+2)& (0+255),b
  1868  0017A4  0E02               	movlw	high _conflictTable
  1869  0017A6  0100               	movlb	0	; () banked
  1870  0017A8  6F69               	movwf	(??_readConflictInfo+3)& (0+255),b
  1871  0017AA  0100               	movlb	0	; () banked
  1872  0017AC  5166               	movf	??_readConflictInfo& (0+255),w,b
  1873  0017AE  0100               	movlb	0	; () banked
  1874  0017B0  2768               	addwf	(??_readConflictInfo+2)& (0+255),f,b
  1875  0017B2  0100               	movlb	0	; () banked
  1876  0017B4  5167               	movf	(??_readConflictInfo+1)& (0+255),w,b
  1877  0017B6  0100               	movlb	0	; () banked
  1878  0017B8  2369               	addwfc	(??_readConflictInfo+3)& (0+255),f,b
  1879  0017BA  0100               	movlb	0	; () banked
  1880  0017BC  5160               	movf	?___wmul& (0+255),w,b
  1881  0017BE  0100               	movlb	0	; () banked
  1882  0017C0  2568               	addwf	(??_readConflictInfo+2)& (0+255),w,b
  1883  0017C2  6ED9               	movwf	fsr2l,c
  1884  0017C4  0100               	movlb	0	; () banked
  1885  0017C6  5161               	movf	(?___wmul+1)& (0+255),w,b
  1886  0017C8  0100               	movlb	0	; () banked
  1887  0017CA  2169               	addwfc	(??_readConflictInfo+3)& (0+255),w,b
  1888  0017CC  6EDA               	movwf	fsr2h,c
  1889  0017CE  0EC7               	movlw	low (_message+6)
  1890  0017D0  0100               	movlb	0	; () banked
  1891  0017D2  256E               	addwf	readConflictInfo@j& (0+255),w,b
  1892  0017D4  6EE1               	movwf	fsr1l,c
  1893  0017D6  0E00               	movlw	high (_message+6)
  1894  0017D8  0100               	movlb	0	; () banked
  1895  0017DA  216F               	addwfc	(readConflictInfo@j+1)& (0+255),w,b
  1896  0017DC  6EE2               	movwf	fsr1h,c
  1897  0017DE  50E7               	movf	indf1,w,c
  1898  0017E0  0100               	movlb	0	; () banked
  1899  0017E2  6F6A               	movwf	(??_readConflictInfo+4)& (0+255),b
  1900  0017E4  0100               	movlb	0	; () banked
  1901  0017E6  90D8               	bcf	status,0,c
  1902  0017E8  336A               	rrcf	(??_readConflictInfo+4)& (0+255),f,b
  1903  0017EA  0100               	movlb	0	; () banked
  1904  0017EC  90D8               	bcf	status,0,c
  1905  0017EE  316A               	rrcf	(??_readConflictInfo+4)& (0+255),w,b
  1906  0017F0  0B03               	andlw	3
  1907  0017F2  6EDF               	movwf	indf2,c
  1908                           
  1909                           ;main.c: 108: conflictTable[i][(4*j) + 2] = (message.dta[j] & 0x30) >> 4;
  1910  0017F4  C06C  F060         	movff	readConflictInfo@i,___wmul@multiplier
  1911  0017F8  C06D  F061         	movff	readConflictInfo@i+1,___wmul@multiplier+1
  1912  0017FC  0E00               	movlw	0
  1913  0017FE  0100               	movlb	0	; () banked
  1914  001800  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1915  001802  0E0C               	movlw	12
  1916  001804  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1917  001806  ECC5  F014         	call	___wmul	;wreg free
  1918  00180A  C06E  F066         	movff	readConflictInfo@j,??_readConflictInfo
  1919  00180E  C06F  F067         	movff	readConflictInfo@j+1,??_readConflictInfo+1
  1920  001812  0100               	movlb	0	; () banked
  1921  001814  90D8               	bcf	status,0,c
  1922  001816  3766               	rlcf	??_readConflictInfo& (0+255),f,b
  1923  001818  3767               	rlcf	(??_readConflictInfo+1)& (0+255),f,b
  1924  00181A  0100               	movlb	0	; () banked
  1925  00181C  90D8               	bcf	status,0,c
  1926  00181E  3766               	rlcf	??_readConflictInfo& (0+255),f,b
  1927  001820  3767               	rlcf	(??_readConflictInfo+1)& (0+255),f,b
  1928  001822  0E02               	movlw	2
  1929  001824  0100               	movlb	0	; () banked
  1930  001826  2766               	addwf	??_readConflictInfo& (0+255),f,b
  1931  001828  0E00               	movlw	0
  1932  00182A  2367               	addwfc	(??_readConflictInfo+1)& (0+255),f,b
  1933  00182C  0E00               	movlw	low _conflictTable
  1934  00182E  0100               	movlb	0	; () banked
  1935  001830  6F68               	movwf	(??_readConflictInfo+2)& (0+255),b
  1936  001832  0E02               	movlw	high _conflictTable
  1937  001834  0100               	movlb	0	; () banked
  1938  001836  6F69               	movwf	(??_readConflictInfo+3)& (0+255),b
  1939  001838  0100               	movlb	0	; () banked
  1940  00183A  5166               	movf	??_readConflictInfo& (0+255),w,b
  1941  00183C  0100               	movlb	0	; () banked
  1942  00183E  2768               	addwf	(??_readConflictInfo+2)& (0+255),f,b
  1943  001840  0100               	movlb	0	; () banked
  1944  001842  5167               	movf	(??_readConflictInfo+1)& (0+255),w,b
  1945  001844  0100               	movlb	0	; () banked
  1946  001846  2369               	addwfc	(??_readConflictInfo+3)& (0+255),f,b
  1947  001848  0100               	movlb	0	; () banked
  1948  00184A  5160               	movf	?___wmul& (0+255),w,b
  1949  00184C  0100               	movlb	0	; () banked
  1950  00184E  2568               	addwf	(??_readConflictInfo+2)& (0+255),w,b
  1951  001850  6ED9               	movwf	fsr2l,c
  1952  001852  0100               	movlb	0	; () banked
  1953  001854  5161               	movf	(?___wmul+1)& (0+255),w,b
  1954  001856  0100               	movlb	0	; () banked
  1955  001858  2169               	addwfc	(??_readConflictInfo+3)& (0+255),w,b
  1956  00185A  6EDA               	movwf	fsr2h,c
  1957  00185C  0EC7               	movlw	low (_message+6)
  1958  00185E  0100               	movlb	0	; () banked
  1959  001860  256E               	addwf	readConflictInfo@j& (0+255),w,b
  1960  001862  6EE1               	movwf	fsr1l,c
  1961  001864  0E00               	movlw	high (_message+6)
  1962  001866  0100               	movlb	0	; () banked
  1963  001868  216F               	addwfc	(readConflictInfo@j+1)& (0+255),w,b
  1964  00186A  6EE2               	movwf	fsr1h,c
  1965  00186C  50E7               	movf	indf1,w,c
  1966  00186E  0100               	movlb	0	; () banked
  1967  001870  6F6A               	movwf	(??_readConflictInfo+4)& (0+255),b
  1968  001872  0100               	movlb	0	; () banked
  1969  001874  396A               	swapf	(??_readConflictInfo+4)& (0+255),w,b
  1970  001876  0B0F               	andlw	15
  1971  001878  0B03               	andlw	3
  1972  00187A  6EDF               	movwf	indf2,c
  1973                           
  1974                           ;main.c: 109: conflictTable[i][(4*j) + 3] = (message.dta[j] & 0xc0) >> 6;
  1975  00187C  C06C  F060         	movff	readConflictInfo@i,___wmul@multiplier
  1976  001880  C06D  F061         	movff	readConflictInfo@i+1,___wmul@multiplier+1
  1977  001884  0E00               	movlw	0
  1978  001886  0100               	movlb	0	; () banked
  1979  001888  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1980  00188A  0E0C               	movlw	12
  1981  00188C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1982  00188E  ECC5  F014         	call	___wmul	;wreg free
  1983  001892  C06E  F066         	movff	readConflictInfo@j,??_readConflictInfo
  1984  001896  C06F  F067         	movff	readConflictInfo@j+1,??_readConflictInfo+1
  1985  00189A  0100               	movlb	0	; () banked
  1986  00189C  90D8               	bcf	status,0,c
  1987  00189E  3766               	rlcf	??_readConflictInfo& (0+255),f,b
  1988  0018A0  3767               	rlcf	(??_readConflictInfo+1)& (0+255),f,b
  1989  0018A2  0100               	movlb	0	; () banked
  1990  0018A4  90D8               	bcf	status,0,c
  1991  0018A6  3766               	rlcf	??_readConflictInfo& (0+255),f,b
  1992  0018A8  3767               	rlcf	(??_readConflictInfo+1)& (0+255),f,b
  1993  0018AA  0E03               	movlw	3
  1994  0018AC  0100               	movlb	0	; () banked
  1995  0018AE  2766               	addwf	??_readConflictInfo& (0+255),f,b
  1996  0018B0  0E00               	movlw	0
  1997  0018B2  2367               	addwfc	(??_readConflictInfo+1)& (0+255),f,b
  1998  0018B4  0E00               	movlw	low _conflictTable
  1999  0018B6  0100               	movlb	0	; () banked
  2000  0018B8  6F68               	movwf	(??_readConflictInfo+2)& (0+255),b
  2001  0018BA  0E02               	movlw	high _conflictTable
  2002  0018BC  0100               	movlb	0	; () banked
  2003  0018BE  6F69               	movwf	(??_readConflictInfo+3)& (0+255),b
  2004  0018C0  0100               	movlb	0	; () banked
  2005  0018C2  5166               	movf	??_readConflictInfo& (0+255),w,b
  2006  0018C4  0100               	movlb	0	; () banked
  2007  0018C6  2768               	addwf	(??_readConflictInfo+2)& (0+255),f,b
  2008  0018C8  0100               	movlb	0	; () banked
  2009  0018CA  5167               	movf	(??_readConflictInfo+1)& (0+255),w,b
  2010  0018CC  0100               	movlb	0	; () banked
  2011  0018CE  2369               	addwfc	(??_readConflictInfo+3)& (0+255),f,b
  2012  0018D0  0100               	movlb	0	; () banked
  2013  0018D2  5160               	movf	?___wmul& (0+255),w,b
  2014  0018D4  0100               	movlb	0	; () banked
  2015  0018D6  2568               	addwf	(??_readConflictInfo+2)& (0+255),w,b
  2016  0018D8  6ED9               	movwf	fsr2l,c
  2017  0018DA  0100               	movlb	0	; () banked
  2018  0018DC  5161               	movf	(?___wmul+1)& (0+255),w,b
  2019  0018DE  0100               	movlb	0	; () banked
  2020  0018E0  2169               	addwfc	(??_readConflictInfo+3)& (0+255),w,b
  2021  0018E2  6EDA               	movwf	fsr2h,c
  2022  0018E4  0EC7               	movlw	low (_message+6)
  2023  0018E6  0100               	movlb	0	; () banked
  2024  0018E8  256E               	addwf	readConflictInfo@j& (0+255),w,b
  2025  0018EA  6EE1               	movwf	fsr1l,c
  2026  0018EC  0E00               	movlw	high (_message+6)
  2027  0018EE  0100               	movlb	0	; () banked
  2028  0018F0  216F               	addwfc	(readConflictInfo@j+1)& (0+255),w,b
  2029  0018F2  6EE2               	movwf	fsr1h,c
  2030  0018F4  50E7               	movf	indf1,w,c
  2031  0018F6  0100               	movlb	0	; () banked
  2032  0018F8  6F6A               	movwf	(??_readConflictInfo+4)& (0+255),b
  2033  0018FA  0E06               	movlw	6
  2034  0018FC  0100               	movlb	0	; () banked
  2035  0018FE  6F6B               	movwf	(??_readConflictInfo+5)& (0+255),b
  2036  001900                     u1145:
  2037  001900  0100               	movlb	0	; () banked
  2038  001902  90D8               	bcf	status,0,c
  2039  001904  336A               	rrcf	(??_readConflictInfo+4)& (0+255),f,b
  2040  001906  0100               	movlb	0	; () banked
  2041  001908  2F6B               	decfsz	(??_readConflictInfo+5)& (0+255),f,b
  2042  00190A  D7FA               	goto	u1145
  2043  00190C  0100               	movlb	0	; () banked
  2044  00190E  516A               	movf	(??_readConflictInfo+4)& (0+255),w,b
  2045  001910  0B03               	andlw	3
  2046  001912  6EDF               	movwf	indf2,c
  2047                           
  2048                           ; BSR set to: 0
  2049  001914  0100               	movlb	0	; () banked
  2050  001916  4B6E               	infsnz	readConflictInfo@j& (0+255),f,b
  2051  001918  2B6F               	incf	(readConflictInfo@j+1)& (0+255),f,b
  2052                           
  2053                           ; BSR set to: 0
  2054  00191A  0100               	movlb	0	; () banked
  2055  00191C  BF6F               	btfsc	(readConflictInfo@j+1)& (0+255),7,b
  2056  00191E  D6EF               	goto	l2279
  2057  001920  0100               	movlb	0	; () banked
  2058  001922  516F               	movf	(readConflictInfo@j+1)& (0+255),w,b
  2059  001924  E101               	bnz	l2285
  2060  001926  D6E4               	goto	L1
  2061  001928                     l2285:
  2062                           
  2063                           ; BSR set to: 0
  2064                           ;main.c: 110: }
  2065                           ;main.c: 112: resetData();
  2066  001928  EC8A  F014         	call	_resetData	;wreg free
  2067  00192C  0100               	movlb	0	; () banked
  2068  00192E  4B6C               	infsnz	readConflictInfo@i& (0+255),f,b
  2069  001930  2B6D               	incf	(readConflictInfo@i+1)& (0+255),f,b
  2070                           
  2071                           ; BSR set to: 0
  2072  001932  0100               	movlb	0	; () banked
  2073  001934  BF6D               	btfsc	(readConflictInfo@i+1)& (0+255),7,b
  2074  001936  D692               	goto	l2267
  2075  001938  0100               	movlb	0	; () banked
  2076  00193A  516D               	movf	(readConflictInfo@i+1)& (0+255),w,b
  2077  00193C  E101               	bnz	l59
  2078  00193E  D687               	goto	L2
  2079  001940                     l59:
  2080                           
  2081                           ; BSR set to: 0
  2082  001940  0012               	return		;funcret
  2083  001942                     __end_of_readConflictInfo:
  2084                           	opt stack 0
  2085                           tblptru	equ	0xFF8
  2086                           tblptrh	equ	0xFF7
  2087                           tblptrl	equ	0xFF6
  2088                           tablat	equ	0xFF5
  2089                           intcon	equ	0xFF2
  2090                           postinc0	equ	0xFEE
  2091                           wreg	equ	0xFE8
  2092                           indf1	equ	0xFE7
  2093                           postdec1	equ	0xFE5
  2094                           fsr1h	equ	0xFE2
  2095                           fsr1l	equ	0xFE1
  2096                           indf2	equ	0xFDF
  2097                           fsr2h	equ	0xFDA
  2098                           fsr2l	equ	0xFD9
  2099                           status	equ	0xFD8
  2100                           
  2101 ;; *************** function _resetData *****************
  2102 ;; Defined at:
  2103 ;;		line 165 in file "main.c"
  2104 ;; Parameters:    Size  Location     Type
  2105 ;;		None
  2106 ;; Auto vars:     Size  Location     Type
  2107 ;;  i               2    0[BANK0 ] int 
  2108 ;; Return value:  Size  Location     Type
  2109 ;;                  1    wreg      void 
  2110 ;; Registers used:
  2111 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2112 ;; Tracked objects:
  2113 ;;		On entry : 0/0
  2114 ;;		On exit  : 0/0
  2115 ;;		Unchanged: 0/0
  2116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2118 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2120 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2121 ;;Total ram usage:        2 bytes
  2122 ;; Hardware stack levels used:    1
  2123 ;; Hardware stack levels required when called:    8
  2124 ;; This function calls:
  2125 ;;		Nothing
  2126 ;; This function is called by:
  2127 ;;		_readID
  2128 ;;		_readConflictInfo
  2129 ;; This function uses a non-reentrant model
  2130 ;;
  2131                           
  2132                           	psect	text7
  2133  002914                     __ptext7:
  2134                           	opt stack 0
  2135  002914                     _resetData:
  2136                           	opt stack 20
  2137                           
  2138                           ;main.c: 166: int i;
  2139                           ;main.c: 167: for (i = 0 ; i < 4 ; i++){
  2140                           
  2141                           ; BSR set to: 0
  2142                           ;incstack = 0
  2143  002914  0E00               	movlw	0
  2144  002916  0100               	movlb	0	; () banked
  2145  002918  6F61               	movwf	(resetData@i+1)& (0+255),b
  2146  00291A  0E00               	movlw	0
  2147  00291C  6F60               	movwf	resetData@i& (0+255),b
  2148  00291E                     l1981:
  2149                           
  2150                           ; BSR set to: 0
  2151  00291E  0100               	movlb	0	; () banked
  2152  002920  BF61               	btfsc	(resetData@i+1)& (0+255),7,b
  2153  002922  D008               	goto	l1985
  2154  002924  0100               	movlb	0	; () banked
  2155  002926  5161               	movf	(resetData@i+1)& (0+255),w,b
  2156  002928  E113               	bnz	l73
  2157  00292A  0E04               	movlw	4
  2158  00292C  0100               	movlb	0	; () banked
  2159  00292E  5D60               	subwf	resetData@i& (0+255),w,b
  2160  002930  B0D8               	btfsc	status,0,c
  2161  002932  0012               	return	
  2162  002934                     l1985:
  2163                           
  2164                           ; BSR set to: 0
  2165                           ;main.c: 168: message.dta[i] = 0;
  2166  002934  0EC7               	movlw	low (_message+6)
  2167  002936  0100               	movlb	0	; () banked
  2168  002938  2560               	addwf	resetData@i& (0+255),w,b
  2169  00293A  6ED9               	movwf	fsr2l,c
  2170  00293C  0E00               	movlw	high (_message+6)
  2171  00293E  0100               	movlb	0	; () banked
  2172  002940  2161               	addwfc	(resetData@i+1)& (0+255),w,b
  2173  002942  6EDA               	movwf	fsr2h,c
  2174  002944  0E00               	movlw	0
  2175  002946  6EDF               	movwf	indf2,c
  2176                           
  2177                           ; BSR set to: 0
  2178  002948  0100               	movlb	0	; () banked
  2179  00294A  4B60               	infsnz	resetData@i& (0+255),f,b
  2180  00294C  2B61               	incf	(resetData@i+1)& (0+255),f,b
  2181  00294E  D7E7               	goto	l1981
  2182  002950                     l73:
  2183                           
  2184                           ; BSR set to: 0
  2185  002950  0012               	return		;funcret
  2186  002952                     __end_of_resetData:
  2187                           	opt stack 0
  2188                           tblptru	equ	0xFF8
  2189                           tblptrh	equ	0xFF7
  2190                           tblptrl	equ	0xFF6
  2191                           tablat	equ	0xFF5
  2192                           intcon	equ	0xFF2
  2193                           postinc0	equ	0xFEE
  2194                           wreg	equ	0xFE8
  2195                           indf1	equ	0xFE7
  2196                           postdec1	equ	0xFE5
  2197                           fsr1h	equ	0xFE2
  2198                           fsr1l	equ	0xFE1
  2199                           indf2	equ	0xFDF
  2200                           fsr2h	equ	0xFDA
  2201                           fsr2l	equ	0xFD9
  2202                           status	equ	0xFD8
  2203                           
  2204 ;; *************** function ___wmul *****************
  2205 ;; Defined at:
  2206 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  2207 ;; Parameters:    Size  Location     Type
  2208 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2209 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2210 ;; Auto vars:     Size  Location     Type
  2211 ;;  product         2    4[BANK0 ] unsigned int 
  2212 ;; Return value:  Size  Location     Type
  2213 ;;                  2    0[BANK0 ] unsigned int 
  2214 ;; Registers used:
  2215 ;;		wreg, status,2, status,0, prodl, prodh
  2216 ;; Tracked objects:
  2217 ;;		On entry : 0/0
  2218 ;;		On exit  : 0/0
  2219 ;;		Unchanged: 0/0
  2220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2221 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2222 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2224 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2225 ;;Total ram usage:        6 bytes
  2226 ;; Hardware stack levels used:    1
  2227 ;; Hardware stack levels required when called:    8
  2228 ;; This function calls:
  2229 ;;		Nothing
  2230 ;; This function is called by:
  2231 ;;		_readConflictInfo
  2232 ;; This function uses a non-reentrant model
  2233 ;;
  2234                           
  2235                           	psect	text8
  2236  00298A                     __ptext8:
  2237                           	opt stack 0
  2238  00298A                     ___wmul:
  2239                           	opt stack 20
  2240                           
  2241                           ; BSR set to: 0
  2242                           ;incstack = 0
  2243  00298A  0100               	movlb	0	; () banked
  2244  00298C  5160               	movf	___wmul@multiplier& (0+255),w,b
  2245  00298E  0100               	movlb	0	; () banked
  2246  002990  0362               	mulwf	___wmul@multiplicand& (0+255),b
  2247  002992  CFF3 F064          	movff	prodl,___wmul@product
  2248  002996  CFF4 F065          	movff	prodh,___wmul@product+1
  2249  00299A  0100               	movlb	0	; () banked
  2250  00299C  5160               	movf	___wmul@multiplier& (0+255),w,b
  2251  00299E  0100               	movlb	0	; () banked
  2252  0029A0  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  2253  0029A2  50F3               	movf	prodl,w,c
  2254  0029A4  0100               	movlb	0	; () banked
  2255  0029A6  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  2256  0029A8  0100               	movlb	0	; () banked
  2257  0029AA  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  2258  0029AC  0100               	movlb	0	; () banked
  2259  0029AE  0362               	mulwf	___wmul@multiplicand& (0+255),b
  2260  0029B0  50F3               	movf	prodl,w,c
  2261  0029B2  0100               	movlb	0	; () banked
  2262  0029B4  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  2263                           
  2264                           ; BSR set to: 0
  2265  0029B6  C064  F060         	movff	___wmul@product,?___wmul
  2266  0029BA  C065  F061         	movff	___wmul@product+1,?___wmul+1
  2267  0029BE  0012               	return	
  2268  0029C0                     __end_of___wmul:
  2269                           	opt stack 0
  2270                           tblptru	equ	0xFF8
  2271                           tblptrh	equ	0xFF7
  2272                           tblptrl	equ	0xFF6
  2273                           tablat	equ	0xFF5
  2274                           prodh	equ	0xFF4
  2275                           prodl	equ	0xFF3
  2276                           intcon	equ	0xFF2
  2277                           postinc0	equ	0xFEE
  2278                           wreg	equ	0xFE8
  2279                           indf1	equ	0xFE7
  2280                           postdec1	equ	0xFE5
  2281                           fsr1h	equ	0xFE2
  2282                           fsr1l	equ	0xFE1
  2283                           indf2	equ	0xFDF
  2284                           fsr2h	equ	0xFDA
  2285                           fsr2l	equ	0xFD9
  2286                           status	equ	0xFD8
  2287                           
  2288 ;; *************** function _Can_PutMessage *****************
  2289 ;; Defined at:
  2290 ;;		line 200 in file "can.c"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;  msgPtr          2    0[BANK0 ] PTR struct CANMESSAGE
  2293 ;;		 -> messageTx(17), 
  2294 ;; Auto vars:     Size  Location     Type
  2295 ;;  i               1    4[BANK0 ] unsigned char 
  2296 ;; Return value:  Size  Location     Type
  2297 ;;                  1    wreg      unsigned char 
  2298 ;; Registers used:
  2299 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2300 ;; Tracked objects:
  2301 ;;		On entry : 0/0
  2302 ;;		On exit  : 0/0
  2303 ;;		Unchanged: 0/0
  2304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2305 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2306 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2307 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2308 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2309 ;;Total ram usage:        5 bytes
  2310 ;; Hardware stack levels used:    1
  2311 ;; Hardware stack levels required when called:    8
  2312 ;; This function calls:
  2313 ;;		Nothing
  2314 ;; This function is called by:
  2315 ;;		_readID
  2316 ;;		_readConflictInfo
  2317 ;;		_sendTrafficLight
  2318 ;;		_sendPedestrianLight
  2319 ;;		_sendWarningLight
  2320 ;; This function uses a non-reentrant model
  2321 ;;
  2322                           
  2323                           	psect	text9
  2324  001AEE                     __ptext9:
  2325                           	opt stack 0
  2326  001AEE                     _Can_PutMessage:
  2327                           	opt stack 21
  2328                           
  2329                           ;can.c: 202: uint8_t i;
  2330                           ;can.c: 204: if((txBufferCount) < 4)
  2331                           
  2332                           ; BSR set to: 0
  2333                           ;incstack = 0
  2334  001AEE  0E04               	movlw	4
  2335  001AF0  0100               	movlb	0	; () banked
  2336  001AF2  61AB               	cpfslt	_txBufferCount& (0+255),b
  2337  001AF4  0012               	return	
  2338                           
  2339                           ; BSR set to: 0
  2340                           ;can.c: 205: {
  2341                           ;can.c: 206: txBuffer[txBufferPtrIn].dlc = msgPtr->dlc;
  2342  001AF6  0100               	movlb	0	; () banked
  2343  001AF8  EE20 F005          	lfsr	2,5
  2344  001AFC  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  2345  001AFE  26D9               	addwf	fsr2l,f,c
  2346  001B00  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  2347  001B02  22DA               	addwfc	fsr2h,f,c
  2348  001B04  0100               	movlb	0	; () banked
  2349  001B06  51AC               	movf	_txBufferPtrIn& (0+255),w,b
  2350  001B08  0D11               	mullw	17
  2351  001B0A  0E05               	movlw	5
  2352  001B0C  26F3               	addwf	prodl,f,c
  2353  001B0E  0E00               	movlw	0
  2354  001B10  22F4               	addwfc	prodh,f,c
  2355  001B12  0E00               	movlw	low _txBuffer
  2356  001B14  24F3               	addwf	prodl,w,c
  2357  001B16  6EE1               	movwf	fsr1l,c
  2358  001B18  0E01               	movlw	high _txBuffer
  2359  001B1A  20F4               	addwfc	prodh,w,c
  2360  001B1C  6EE2               	movwf	fsr1h,c
  2361  001B1E  CFDF FFE7          	movff	indf2,indf1
  2362                           
  2363                           ;can.c: 207: txBuffer[txBufferPtrIn].extended_identifier = msgPtr->extended_identifier;
  2364  001B22  C060  FFD9         	movff	Can_PutMessage@msgPtr,fsr2l
  2365  001B26  C061  FFDA         	movff	Can_PutMessage@msgPtr+1,fsr2h
  2366  001B2A  0100               	movlb	0	; () banked
  2367  001B2C  51AC               	movf	_txBufferPtrIn& (0+255),w,b
  2368  001B2E  0D11               	mullw	17
  2369  001B30  0E00               	movlw	low _txBuffer
  2370  001B32  24F3               	addwf	prodl,w,c
  2371  001B34  6EE1               	movwf	fsr1l,c
  2372  001B36  0E01               	movlw	high _txBuffer
  2373  001B38  20F4               	addwfc	prodh,w,c
  2374  001B3A  6EE2               	movwf	fsr1h,c
  2375  001B3C  CFDF FFE7          	movff	indf2,indf1
  2376                           
  2377                           ;can.c: 208: txBuffer[txBufferPtrIn].filhit = msgPtr->filhit;
  2378  001B40  0100               	movlb	0	; () banked
  2379  001B42  EE20 F00F          	lfsr	2,15
  2380  001B46  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  2381  001B48  26D9               	addwf	fsr2l,f,c
  2382  001B4A  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  2383  001B4C  22DA               	addwfc	fsr2h,f,c
  2384  001B4E  0100               	movlb	0	; () banked
  2385  001B50  51AC               	movf	_txBufferPtrIn& (0+255),w,b
  2386  001B52  0D11               	mullw	17
  2387  001B54  0E0F               	movlw	15
  2388  001B56  26F3               	addwf	prodl,f,c
  2389  001B58  0E00               	movlw	0
  2390  001B5A  22F4               	addwfc	prodh,f,c
  2391  001B5C  0E00               	movlw	low _txBuffer
  2392  001B5E  24F3               	addwf	prodl,w,c
  2393  001B60  6EE1               	movwf	fsr1l,c
  2394  001B62  0E01               	movlw	high _txBuffer
  2395  001B64  20F4               	addwfc	prodh,w,c
  2396  001B66  6EE2               	movwf	fsr1h,c
  2397  001B68  CFDF FFE7          	movff	indf2,indf1
  2398                           
  2399                           ;can.c: 209: txBuffer[txBufferPtrIn].identifier = msgPtr->identifier;
  2400  001B6C  0100               	movlb	0	; () banked
  2401  001B6E  EE20 F001          	lfsr	2,1
  2402  001B72  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  2403  001B74  26D9               	addwf	fsr2l,f,c
  2404  001B76  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  2405  001B78  22DA               	addwfc	fsr2h,f,c
  2406  001B7A  0100               	movlb	0	; () banked
  2407  001B7C  51AC               	movf	_txBufferPtrIn& (0+255),w,b
  2408  001B7E  0D11               	mullw	17
  2409  001B80  0E01               	movlw	1
  2410  001B82  26F3               	addwf	prodl,f,c
  2411  001B84  0E00               	movlw	0
  2412  001B86  22F4               	addwfc	prodh,f,c
  2413  001B88  0E00               	movlw	low _txBuffer
  2414  001B8A  24F3               	addwf	prodl,w,c
  2415  001B8C  6EE1               	movwf	fsr1l,c
  2416  001B8E  0E01               	movlw	high _txBuffer
  2417  001B90  20F4               	addwfc	prodh,w,c
  2418  001B92  6EE2               	movwf	fsr1h,c
  2419  001B94  CFDE FFE6          	movff	postinc2,postinc1
  2420  001B98  CFDE FFE6          	movff	postinc2,postinc1
  2421  001B9C  CFDE FFE6          	movff	postinc2,postinc1
  2422  001BA0  CFDE FFE6          	movff	postinc2,postinc1
  2423                           
  2424                           ;can.c: 210: txBuffer[txBufferPtrIn].rtr = msgPtr->rtr;
  2425  001BA4  0100               	movlb	0	; () banked
  2426  001BA6  EE20 F00E          	lfsr	2,14
  2427  001BAA  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  2428  001BAC  26D9               	addwf	fsr2l,f,c
  2429  001BAE  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  2430  001BB0  22DA               	addwfc	fsr2h,f,c
  2431  001BB2  0100               	movlb	0	; () banked
  2432  001BB4  51AC               	movf	_txBufferPtrIn& (0+255),w,b
  2433  001BB6  0D11               	mullw	17
  2434  001BB8  0E0E               	movlw	14
  2435  001BBA  26F3               	addwf	prodl,f,c
  2436  001BBC  0E00               	movlw	0
  2437  001BBE  22F4               	addwfc	prodh,f,c
  2438  001BC0  0E00               	movlw	low _txBuffer
  2439  001BC2  24F3               	addwf	prodl,w,c
  2440  001BC4  6EE1               	movwf	fsr1l,c
  2441  001BC6  0E01               	movlw	high _txBuffer
  2442  001BC8  20F4               	addwfc	prodh,w,c
  2443  001BCA  6EE2               	movwf	fsr1h,c
  2444  001BCC  CFDF FFE7          	movff	indf2,indf1
  2445                           
  2446                           ;can.c: 211: txBuffer[txBufferPtrIn].txPrio = msgPtr->txPrio;
  2447  001BD0  0100               	movlb	0	; () banked
  2448  001BD2  EE20 F010          	lfsr	2,16
  2449  001BD6  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  2450  001BD8  26D9               	addwf	fsr2l,f,c
  2451  001BDA  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  2452  001BDC  22DA               	addwfc	fsr2h,f,c
  2453  001BDE  0100               	movlb	0	; () banked
  2454  001BE0  51AC               	movf	_txBufferPtrIn& (0+255),w,b
  2455  001BE2  0D11               	mullw	17
  2456  001BE4  0E10               	movlw	16
  2457  001BE6  26F3               	addwf	prodl,f,c
  2458  001BE8  0E00               	movlw	0
  2459  001BEA  22F4               	addwfc	prodh,f,c
  2460  001BEC  0E00               	movlw	low _txBuffer
  2461  001BEE  24F3               	addwf	prodl,w,c
  2462  001BF0  6EE1               	movwf	fsr1l,c
  2463  001BF2  0E01               	movlw	high _txBuffer
  2464  001BF4  20F4               	addwfc	prodh,w,c
  2465  001BF6  6EE2               	movwf	fsr1h,c
  2466  001BF8  CFDF FFE7          	movff	indf2,indf1
  2467                           
  2468                           ; BSR set to: 0
  2469                           ;can.c: 212: for(i=0;i< msgPtr->dlc;i++)
  2470  001BFC  0E00               	movlw	0
  2471  001BFE  0100               	movlb	0	; () banked
  2472  001C00  6F64               	movwf	Can_PutMessage@i& (0+255),b
  2473  001C02  D031               	goto	l2001
  2474  001C04                     l1997:
  2475                           
  2476                           ; BSR set to: 0
  2477                           ;can.c: 213: {
  2478                           ;can.c: 214: txBuffer[txBufferPtrIn].dta[i] = msgPtr->dta[i];
  2479  001C04  0100               	movlb	0	; () banked
  2480  001C06  5164               	movf	Can_PutMessage@i& (0+255),w,b
  2481  001C08  0D01               	mullw	1
  2482  001C0A  0E06               	movlw	6
  2483  001C0C  26F3               	addwf	prodl,f,c
  2484  001C0E  0E00               	movlw	0
  2485  001C10  22F4               	addwfc	prodh,f,c
  2486  001C12  50F3               	movf	prodl,w,c
  2487  001C14  0100               	movlb	0	; () banked
  2488  001C16  2560               	addwf	Can_PutMessage@msgPtr& (0+255),w,b
  2489  001C18  6ED9               	movwf	fsr2l,c
  2490  001C1A  50F4               	movf	prodh,w,c
  2491  001C1C  0100               	movlb	0	; () banked
  2492  001C1E  2161               	addwfc	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  2493  001C20  6EDA               	movwf	fsr2h,c
  2494  001C22  0100               	movlb	0	; () banked
  2495  001C24  5164               	movf	Can_PutMessage@i& (0+255),w,b
  2496  001C26  0D01               	mullw	1
  2497  001C28  0E06               	movlw	6
  2498  001C2A  26F3               	addwf	prodl,f,c
  2499  001C2C  0E00               	movlw	0
  2500  001C2E  22F4               	addwfc	prodh,f,c
  2501  001C30  0E00               	movlw	low _txBuffer
  2502  001C32  0100               	movlb	0	; () banked
  2503  001C34  6F62               	movwf	??_Can_PutMessage& (0+255),b
  2504  001C36  0E01               	movlw	high _txBuffer
  2505  001C38  0100               	movlb	0	; () banked
  2506  001C3A  6F63               	movwf	(??_Can_PutMessage+1)& (0+255),b
  2507  001C3C  50F3               	movf	prodl,w,c
  2508  001C3E  0100               	movlb	0	; () banked
  2509  001C40  2762               	addwf	??_Can_PutMessage& (0+255),f,b
  2510  001C42  50F4               	movf	prodh,w,c
  2511  001C44  0100               	movlb	0	; () banked
  2512  001C46  2363               	addwfc	(??_Can_PutMessage+1)& (0+255),f,b
  2513  001C48  0100               	movlb	0	; () banked
  2514  001C4A  51AC               	movf	_txBufferPtrIn& (0+255),w,b
  2515  001C4C  0D11               	mullw	17
  2516  001C4E  50F3               	movf	prodl,w,c
  2517  001C50  0100               	movlb	0	; () banked
  2518  001C52  2562               	addwf	??_Can_PutMessage& (0+255),w,b
  2519  001C54  6EE1               	movwf	fsr1l,c
  2520  001C56  50F4               	movf	prodh,w,c
  2521  001C58  0100               	movlb	0	; () banked
  2522  001C5A  2163               	addwfc	(??_Can_PutMessage+1)& (0+255),w,b
  2523  001C5C  6EE2               	movwf	fsr1h,c
  2524  001C5E  CFDF FFE7          	movff	indf2,indf1
  2525                           
  2526                           ; BSR set to: 0
  2527  001C62  0100               	movlb	0	; () banked
  2528  001C64  2B64               	incf	Can_PutMessage@i& (0+255),f,b
  2529  001C66                     l2001:
  2530                           
  2531                           ; BSR set to: 0
  2532  001C66  0100               	movlb	0	; () banked
  2533  001C68  EE20 F005          	lfsr	2,5
  2534  001C6C  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  2535  001C6E  26D9               	addwf	fsr2l,f,c
  2536  001C70  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  2537  001C72  22DA               	addwfc	fsr2h,f,c
  2538  001C74  50DE               	movf	postinc2,w,c
  2539  001C76  0100               	movlb	0	; () banked
  2540  001C78  5D64               	subwf	Can_PutMessage@i& (0+255),w,b
  2541  001C7A  A0D8               	btfss	status,0,c
  2542  001C7C  D7C3               	goto	l1997
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;can.c: 215: }
  2546                           ;can.c: 216: INT3IE = 0;
  2547  001C7E  9AF0               	bcf	intcon3,5,c	;volatile
  2548                           
  2549                           ; BSR set to: 0
  2550                           ;can.c: 217: txBufferCount++;
  2551  001C80  0100               	movlb	0	; () banked
  2552  001C82  2BAB               	incf	_txBufferCount& (0+255),f,b
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;can.c: 218: txBufferPtrIn = (txBufferPtrIn + 1) % 4;
  2556  001C84  0100               	movlb	0	; () banked
  2557  001C86  29AC               	incf	_txBufferPtrIn& (0+255),w,b
  2558  001C88  0B03               	andlw	3
  2559  001C8A  0100               	movlb	0	; () banked
  2560  001C8C  6FAC               	movwf	_txBufferPtrIn& (0+255),b
  2561                           
  2562                           ; BSR set to: 0
  2563                           ;can.c: 219: INT3IE = 1;
  2564  001C8E  8AF0               	bsf	intcon3,5,c	;volatile
  2565                           
  2566                           ; BSR set to: 0
  2567                           ;can.c: 220: INT3IF = 1;
  2568  001C90  84F0               	bsf	intcon3,2,c	;volatile
  2569                           
  2570                           ; BSR set to: 0
  2571                           ;can.c: 223: else
  2572                           ;can.c: 224: {
  2573                           ;can.c: 225: return 1;
  2574                           ;	Return value of _Can_PutMessage is never used
  2575                           
  2576                           ; BSR set to: 0
  2577                           ;can.c: 222: }
  2578                           
  2579                           ; BSR set to: 0
  2580                           ;can.c: 221: return 0;
  2581                           ;	Return value of _Can_PutMessage is never used
  2582  001C92  0012               	return	
  2583  001C94                     __end_of_Can_PutMessage:
  2584                           	opt stack 0
  2585                           tblptru	equ	0xFF8
  2586                           tblptrh	equ	0xFF7
  2587                           tblptrl	equ	0xFF6
  2588                           tablat	equ	0xFF5
  2589                           prodh	equ	0xFF4
  2590                           prodl	equ	0xFF3
  2591                           intcon	equ	0xFF2
  2592                           intcon3	equ	0xFF0
  2593                           postinc0	equ	0xFEE
  2594                           wreg	equ	0xFE8
  2595                           indf1	equ	0xFE7
  2596                           postinc1	equ	0xFE6
  2597                           postdec1	equ	0xFE5
  2598                           fsr1h	equ	0xFE2
  2599                           fsr1l	equ	0xFE1
  2600                           indf2	equ	0xFDF
  2601                           postinc2	equ	0xFDE
  2602                           fsr2h	equ	0xFDA
  2603                           fsr2l	equ	0xFD9
  2604                           status	equ	0xFD8
  2605                           
  2606 ;; *************** function _Can_GetMessage *****************
  2607 ;; Defined at:
  2608 ;;		line 169 in file "can.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;  msgPtr          2    0[BANK0 ] PTR struct CANMESSAGE
  2611 ;;		 -> message(17), 
  2612 ;; Auto vars:     Size  Location     Type
  2613 ;;  i               1    4[BANK0 ] unsigned char 
  2614 ;; Return value:  Size  Location     Type
  2615 ;;                  1    wreg      unsigned char 
  2616 ;; Registers used:
  2617 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2618 ;; Tracked objects:
  2619 ;;		On entry : 0/0
  2620 ;;		On exit  : 0/0
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2623 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2624 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2625 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2626 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2627 ;;Total ram usage:        5 bytes
  2628 ;; Hardware stack levels used:    1
  2629 ;; Hardware stack levels required when called:    8
  2630 ;; This function calls:
  2631 ;;		Nothing
  2632 ;; This function is called by:
  2633 ;;		_readID
  2634 ;;		_readConflictInfo
  2635 ;; This function uses a non-reentrant model
  2636 ;;
  2637                           
  2638                           	psect	text10
  2639  001C94                     __ptext10:
  2640                           	opt stack 0
  2641  001C94                     _Can_GetMessage:
  2642                           	opt stack 20
  2643                           
  2644                           ;can.c: 171: uint8_t i;
  2645                           ;can.c: 172: if(rxBufferCount > 0)
  2646                           
  2647                           ; BSR set to: 0
  2648                           ;incstack = 0
  2649  001C94  5059               	movf	_rxBufferCount,w,c
  2650  001C96  B4D8               	btfsc	status,2,c
  2651  001C98  D0B8               	goto	l2035
  2652                           
  2653                           ;can.c: 173: {
  2654                           ;can.c: 174: msgPtr->dlc = rxBuffer[rxBufferPtrOut].dlc;
  2655  001C9A  0100               	movlb	0	; () banked
  2656  001C9C  51AD               	movf	_rxBufferPtrOut& (0+255),w,b
  2657  001C9E  0D11               	mullw	17
  2658  001CA0  0E05               	movlw	5
  2659  001CA2  26F3               	addwf	prodl,f,c
  2660  001CA4  0E00               	movlw	0
  2661  001CA6  22F4               	addwfc	prodh,f,c
  2662  001CA8  0E44               	movlw	low _rxBuffer
  2663  001CAA  24F3               	addwf	prodl,w,c
  2664  001CAC  6ED9               	movwf	fsr2l,c
  2665  001CAE  0E01               	movlw	high _rxBuffer
  2666  001CB0  20F4               	addwfc	prodh,w,c
  2667  001CB2  6EDA               	movwf	fsr2h,c
  2668  001CB4  0100               	movlb	0	; () banked
  2669  001CB6  EE10 F005          	lfsr	1,5
  2670  001CBA  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  2671  001CBC  26E1               	addwf	fsr1l,f,c
  2672  001CBE  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  2673  001CC0  22E2               	addwfc	fsr1h,f,c
  2674  001CC2  CFDF FFE7          	movff	indf2,indf1
  2675                           
  2676                           ;can.c: 175: msgPtr->extended_identifier = rxBuffer[rxBufferPtrOut].extended_identifier;
  2677  001CC6  0100               	movlb	0	; () banked
  2678  001CC8  51AD               	movf	_rxBufferPtrOut& (0+255),w,b
  2679  001CCA  0D11               	mullw	17
  2680  001CCC  0E44               	movlw	low _rxBuffer
  2681  001CCE  24F3               	addwf	prodl,w,c
  2682  001CD0  6ED9               	movwf	fsr2l,c
  2683  001CD2  0E01               	movlw	high _rxBuffer
  2684  001CD4  20F4               	addwfc	prodh,w,c
  2685  001CD6  6EDA               	movwf	fsr2h,c
  2686  001CD8  C060  FFE1         	movff	Can_GetMessage@msgPtr,fsr1l
  2687  001CDC  C061  FFE2         	movff	Can_GetMessage@msgPtr+1,fsr1h
  2688  001CE0  CFDF FFE7          	movff	indf2,indf1
  2689                           
  2690                           ;can.c: 176: msgPtr->filhit = rxBuffer[rxBufferPtrOut].filhit;
  2691  001CE4  0100               	movlb	0	; () banked
  2692  001CE6  51AD               	movf	_rxBufferPtrOut& (0+255),w,b
  2693  001CE8  0D11               	mullw	17
  2694  001CEA  0E0F               	movlw	15
  2695  001CEC  26F3               	addwf	prodl,f,c
  2696  001CEE  0E00               	movlw	0
  2697  001CF0  22F4               	addwfc	prodh,f,c
  2698  001CF2  0E44               	movlw	low _rxBuffer
  2699  001CF4  24F3               	addwf	prodl,w,c
  2700  001CF6  6ED9               	movwf	fsr2l,c
  2701  001CF8  0E01               	movlw	high _rxBuffer
  2702  001CFA  20F4               	addwfc	prodh,w,c
  2703  001CFC  6EDA               	movwf	fsr2h,c
  2704  001CFE  0100               	movlb	0	; () banked
  2705  001D00  EE10 F00F          	lfsr	1,15
  2706  001D04  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  2707  001D06  26E1               	addwf	fsr1l,f,c
  2708  001D08  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  2709  001D0A  22E2               	addwfc	fsr1h,f,c
  2710  001D0C  CFDF FFE7          	movff	indf2,indf1
  2711                           
  2712                           ;can.c: 177: msgPtr->identifier = rxBuffer[rxBufferPtrOut].identifier;
  2713  001D10  0100               	movlb	0	; () banked
  2714  001D12  51AD               	movf	_rxBufferPtrOut& (0+255),w,b
  2715  001D14  0D11               	mullw	17
  2716  001D16  0E01               	movlw	1
  2717  001D18  26F3               	addwf	prodl,f,c
  2718  001D1A  0E00               	movlw	0
  2719  001D1C  22F4               	addwfc	prodh,f,c
  2720  001D1E  0E44               	movlw	low _rxBuffer
  2721  001D20  24F3               	addwf	prodl,w,c
  2722  001D22  6ED9               	movwf	fsr2l,c
  2723  001D24  0E01               	movlw	high _rxBuffer
  2724  001D26  20F4               	addwfc	prodh,w,c
  2725  001D28  6EDA               	movwf	fsr2h,c
  2726  001D2A  0100               	movlb	0	; () banked
  2727  001D2C  EE10 F001          	lfsr	1,1
  2728  001D30  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  2729  001D32  26E1               	addwf	fsr1l,f,c
  2730  001D34  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  2731  001D36  22E2               	addwfc	fsr1h,f,c
  2732  001D38  CFDE FFE6          	movff	postinc2,postinc1
  2733  001D3C  CFDE FFE6          	movff	postinc2,postinc1
  2734  001D40  CFDE FFE6          	movff	postinc2,postinc1
  2735  001D44  CFDE FFE6          	movff	postinc2,postinc1
  2736                           
  2737                           ;can.c: 178: msgPtr->rtr = rxBuffer[rxBufferPtrOut].rtr;
  2738  001D48  0100               	movlb	0	; () banked
  2739  001D4A  51AD               	movf	_rxBufferPtrOut& (0+255),w,b
  2740  001D4C  0D11               	mullw	17
  2741  001D4E  0E0E               	movlw	14
  2742  001D50  26F3               	addwf	prodl,f,c
  2743  001D52  0E00               	movlw	0
  2744  001D54  22F4               	addwfc	prodh,f,c
  2745  001D56  0E44               	movlw	low _rxBuffer
  2746  001D58  24F3               	addwf	prodl,w,c
  2747  001D5A  6ED9               	movwf	fsr2l,c
  2748  001D5C  0E01               	movlw	high _rxBuffer
  2749  001D5E  20F4               	addwfc	prodh,w,c
  2750  001D60  6EDA               	movwf	fsr2h,c
  2751  001D62  0100               	movlb	0	; () banked
  2752  001D64  EE10 F00E          	lfsr	1,14
  2753  001D68  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  2754  001D6A  26E1               	addwf	fsr1l,f,c
  2755  001D6C  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  2756  001D6E  22E2               	addwfc	fsr1h,f,c
  2757  001D70  CFDF FFE7          	movff	indf2,indf1
  2758                           
  2759                           ; BSR set to: 0
  2760                           ;can.c: 179: for(i=0;i< msgPtr->dlc;i++)
  2761  001D74  0E00               	movlw	0
  2762  001D76  0100               	movlb	0	; () banked
  2763  001D78  6F64               	movwf	Can_GetMessage@i& (0+255),b
  2764  001D7A  D031               	goto	l2025
  2765  001D7C                     l2021:
  2766                           
  2767                           ; BSR set to: 0
  2768                           ;can.c: 180: {
  2769                           ;can.c: 181: msgPtr->dta[i] = rxBuffer[rxBufferPtrOut].dta[i];
  2770  001D7C  0100               	movlb	0	; () banked
  2771  001D7E  5164               	movf	Can_GetMessage@i& (0+255),w,b
  2772  001D80  0D01               	mullw	1
  2773  001D82  0E06               	movlw	6
  2774  001D84  26F3               	addwf	prodl,f,c
  2775  001D86  0E00               	movlw	0
  2776  001D88  22F4               	addwfc	prodh,f,c
  2777  001D8A  0E44               	movlw	low _rxBuffer
  2778  001D8C  0100               	movlb	0	; () banked
  2779  001D8E  6F62               	movwf	??_Can_GetMessage& (0+255),b
  2780  001D90  0E01               	movlw	high _rxBuffer
  2781  001D92  0100               	movlb	0	; () banked
  2782  001D94  6F63               	movwf	(??_Can_GetMessage+1)& (0+255),b
  2783  001D96  50F3               	movf	prodl,w,c
  2784  001D98  0100               	movlb	0	; () banked
  2785  001D9A  2762               	addwf	??_Can_GetMessage& (0+255),f,b
  2786  001D9C  50F4               	movf	prodh,w,c
  2787  001D9E  0100               	movlb	0	; () banked
  2788  001DA0  2363               	addwfc	(??_Can_GetMessage+1)& (0+255),f,b
  2789  001DA2  0100               	movlb	0	; () banked
  2790  001DA4  51AD               	movf	_rxBufferPtrOut& (0+255),w,b
  2791  001DA6  0D11               	mullw	17
  2792  001DA8  50F3               	movf	prodl,w,c
  2793  001DAA  0100               	movlb	0	; () banked
  2794  001DAC  2562               	addwf	??_Can_GetMessage& (0+255),w,b
  2795  001DAE  6ED9               	movwf	fsr2l,c
  2796  001DB0  50F4               	movf	prodh,w,c
  2797  001DB2  0100               	movlb	0	; () banked
  2798  001DB4  2163               	addwfc	(??_Can_GetMessage+1)& (0+255),w,b
  2799  001DB6  6EDA               	movwf	fsr2h,c
  2800  001DB8  0100               	movlb	0	; () banked
  2801  001DBA  5164               	movf	Can_GetMessage@i& (0+255),w,b
  2802  001DBC  0D01               	mullw	1
  2803  001DBE  0E06               	movlw	6
  2804  001DC0  26F3               	addwf	prodl,f,c
  2805  001DC2  0E00               	movlw	0
  2806  001DC4  22F4               	addwfc	prodh,f,c
  2807  001DC6  50F3               	movf	prodl,w,c
  2808  001DC8  0100               	movlb	0	; () banked
  2809  001DCA  2560               	addwf	Can_GetMessage@msgPtr& (0+255),w,b
  2810  001DCC  6EE1               	movwf	fsr1l,c
  2811  001DCE  50F4               	movf	prodh,w,c
  2812  001DD0  0100               	movlb	0	; () banked
  2813  001DD2  2161               	addwfc	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  2814  001DD4  6EE2               	movwf	fsr1h,c
  2815  001DD6  CFDF FFE7          	movff	indf2,indf1
  2816                           
  2817                           ; BSR set to: 0
  2818  001DDA  0100               	movlb	0	; () banked
  2819  001DDC  2B64               	incf	Can_GetMessage@i& (0+255),f,b
  2820  001DDE                     l2025:
  2821                           
  2822                           ; BSR set to: 0
  2823  001DDE  0100               	movlb	0	; () banked
  2824  001DE0  EE20 F005          	lfsr	2,5
  2825  001DE4  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  2826  001DE6  26D9               	addwf	fsr2l,f,c
  2827  001DE8  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  2828  001DEA  22DA               	addwfc	fsr2h,f,c
  2829  001DEC  50DE               	movf	postinc2,w,c
  2830  001DEE  0100               	movlb	0	; () banked
  2831  001DF0  5D64               	subwf	Can_GetMessage@i& (0+255),w,b
  2832  001DF2  A0D8               	btfss	status,0,c
  2833  001DF4  D7C3               	goto	l2021
  2834                           
  2835                           ; BSR set to: 0
  2836                           ;can.c: 182: }
  2837                           ;can.c: 183: INT3IE = 0;
  2838  001DF6  9AF0               	bcf	intcon3,5,c	;volatile
  2839                           
  2840                           ; BSR set to: 0
  2841                           ;can.c: 184: rxBufferPtrOut = (rxBufferPtrOut + 1) % 4;
  2842  001DF8  0100               	movlb	0	; () banked
  2843  001DFA  29AD               	incf	_rxBufferPtrOut& (0+255),w,b
  2844  001DFC  0B03               	andlw	3
  2845  001DFE  0100               	movlb	0	; () banked
  2846  001E00  6FAD               	movwf	_rxBufferPtrOut& (0+255),b
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;can.c: 185: rxBufferCount--;
  2850  001E02  0659               	decf	_rxBufferCount,f,c
  2851                           
  2852                           ; BSR set to: 0
  2853                           ;can.c: 186: INT3IE = 1;
  2854  001E04  8AF0               	bsf	intcon3,5,c	;volatile
  2855                           
  2856                           ;can.c: 187: return 0;
  2857  001E06  0E00               	movlw	0
  2858                           
  2859                           ; BSR set to: 0
  2860  001E08  0012               	return	
  2861  001E0A                     l2035:
  2862                           
  2863                           ;can.c: 188: }
  2864                           ;can.c: 189: return 1;
  2865  001E0A  0E01               	movlw	1
  2866  001E0C  0012               	return	
  2867  001E0E                     __end_of_Can_GetMessage:
  2868                           	opt stack 0
  2869                           tblptru	equ	0xFF8
  2870                           tblptrh	equ	0xFF7
  2871                           tblptrl	equ	0xFF6
  2872                           tablat	equ	0xFF5
  2873                           prodh	equ	0xFF4
  2874                           prodl	equ	0xFF3
  2875                           intcon	equ	0xFF2
  2876                           intcon3	equ	0xFF0
  2877                           postinc0	equ	0xFEE
  2878                           wreg	equ	0xFE8
  2879                           indf1	equ	0xFE7
  2880                           postinc1	equ	0xFE6
  2881                           postdec1	equ	0xFE5
  2882                           fsr1h	equ	0xFE2
  2883                           fsr1l	equ	0xFE1
  2884                           indf2	equ	0xFDF
  2885                           postinc2	equ	0xFDE
  2886                           fsr2h	equ	0xFDA
  2887                           fsr2l	equ	0xFD9
  2888                           status	equ	0xFD8
  2889                           
  2890 ;; *************** function _Can_Init *****************
  2891 ;; Defined at:
  2892 ;;		line 237 in file "can.c"
  2893 ;; Parameters:    Size  Location     Type
  2894 ;;  speedCfg        2   60[BANK0 ] PTR const struct CANSPEE
  2895 ;;		 -> canSpeed125k(7), 
  2896 ;;  filterCfg       2   62[BANK0 ] PTR struct CANFILTER
  2897 ;;		 -> filter(33), 
  2898 ;; Auto vars:     Size  Location     Type
  2899 ;;		None
  2900 ;; Return value:  Size  Location     Type
  2901 ;;                  1    wreg      void 
  2902 ;; Registers used:
  2903 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2904 ;; Tracked objects:
  2905 ;;		On entry : 0/0
  2906 ;;		On exit  : 0/0
  2907 ;;		Unchanged: 0/0
  2908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2909 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2912 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2913 ;;Total ram usage:        4 bytes
  2914 ;; Hardware stack levels used:    1
  2915 ;; Hardware stack levels required when called:   12
  2916 ;; This function calls:
  2917 ;;		_Mcp2515_Init
  2918 ;; This function is called by:
  2919 ;;		_init
  2920 ;; This function uses a non-reentrant model
  2921 ;;
  2922                           
  2923                           	psect	text11
  2924  002952                     __ptext11:
  2925                           	opt stack 0
  2926  002952                     _Can_Init:
  2927                           	opt stack 17
  2928                           
  2929                           ;can.c: 240: TRISF6 = 0;
  2930                           
  2931                           ;incstack = 0
  2932  002952  9C97               	bcf	3991,6,c	;volatile
  2933                           
  2934                           ;can.c: 241: TRISF7 = 0;
  2935  002954  9E97               	bcf	3991,7,c	;volatile
  2936                           
  2937                           ;can.c: 242: LATF6 = 1;
  2938  002956  8C8E               	bsf	3982,6,c	;volatile
  2939                           
  2940                           ;can.c: 243: LATF7 = 0;
  2941  002958  9E8E               	bcf	3982,7,c	;volatile
  2942                           
  2943                           ;can.c: 244: TRISC4 = 1;
  2944  00295A  8894               	bsf	3988,4,c	;volatile
  2945                           
  2946                           ;can.c: 245: TRISC5 = 0;
  2947  00295C  9A94               	bcf	3988,5,c	;volatile
  2948                           
  2949                           ;can.c: 246: TRISC3 = 0;
  2950  00295E  9694               	bcf	3988,3,c	;volatile
  2951                           
  2952                           ;can.c: 247: TRISD1 = 0;
  2953  002960  9295               	bcf	3989,1,c	;volatile
  2954                           
  2955                           ;can.c: 251: CKE1 = 0;
  2956  002962  9CC7               	bcf	4039,6,c	;volatile
  2957                           
  2958                           ;can.c: 252: CKP1 = 1;
  2959  002964  88C6               	bsf	4038,4,c	;volatile
  2960                           
  2961                           ;can.c: 253: SSPCON1 = 0b00111010;
  2962  002966  0E3A               	movlw	58
  2963  002968  6EC6               	movwf	4038,c	;volatile
  2964                           
  2965                           ;can.c: 254: SSPEN1 = 1;
  2966  00296A  8AC6               	bsf	4038,5,c	;volatile
  2967                           
  2968                           ;can.c: 258: Mcp2515_Init(speedCfg,filterCfg);
  2969  00296C  C09C  F083         	movff	Can_Init@speedCfg,Mcp2515_Init@speedCfg
  2970  002970  C09D  F084         	movff	Can_Init@speedCfg+1,Mcp2515_Init@speedCfg+1
  2971  002974  C09E  F085         	movff	Can_Init@filterCfg,Mcp2515_Init@filterCfg
  2972  002978  C09F  F086         	movff	Can_Init@filterCfg+1,Mcp2515_Init@filterCfg+1
  2973  00297C  EC21  F008         	call	_Mcp2515_Init	;wreg free
  2974                           
  2975                           ;can.c: 259: INT3IE = 1;
  2976  002980  8AF0               	bsf	intcon3,5,c	;volatile
  2977                           
  2978                           ;can.c: 260: INTEDG3 = 0;
  2979  002982  96F1               	bcf	intcon2,3,c	;volatile
  2980                           
  2981                           ;can.c: 264: PEIE = 1;
  2982  002984  8CF2               	bsf	intcon,6,c	;volatile
  2983                           
  2984                           ;can.c: 265: GIE = 1;
  2985  002986  8EF2               	bsf	intcon,7,c	;volatile
  2986  002988  0012               	return		;funcret
  2987  00298A                     __end_of_Can_Init:
  2988                           	opt stack 0
  2989                           tblptru	equ	0xFF8
  2990                           tblptrh	equ	0xFF7
  2991                           tblptrl	equ	0xFF6
  2992                           tablat	equ	0xFF5
  2993                           prodh	equ	0xFF4
  2994                           prodl	equ	0xFF3
  2995                           intcon	equ	0xFF2
  2996                           intcon2	equ	0xFF1
  2997                           intcon3	equ	0xFF0
  2998                           postinc0	equ	0xFEE
  2999                           wreg	equ	0xFE8
  3000                           indf1	equ	0xFE7
  3001                           postinc1	equ	0xFE6
  3002                           postdec1	equ	0xFE5
  3003                           fsr1h	equ	0xFE2
  3004                           fsr1l	equ	0xFE1
  3005                           indf2	equ	0xFDF
  3006                           postinc2	equ	0xFDE
  3007                           fsr2h	equ	0xFDA
  3008                           fsr2l	equ	0xFD9
  3009                           status	equ	0xFD8
  3010                           
  3011 ;; *************** function _Mcp2515_Init *****************
  3012 ;; Defined at:
  3013 ;;		line 38 in file "mcp2515.c"
  3014 ;; Parameters:    Size  Location     Type
  3015 ;;  speedCfg        2   35[BANK0 ] PTR const struct CANSPEE
  3016 ;;		 -> canSpeed125k(7), 
  3017 ;;  filterCfg       2   37[BANK0 ] PTR struct CANFILTER
  3018 ;;		 -> filter(33), 
  3019 ;; Auto vars:     Size  Location     Type
  3020 ;;  cmdMask4        4   53[BANK0 ] unsigned char [4]
  3021 ;;  cmdWrite3       3   57[BANK0 ] unsigned char [3]
  3022 ;;  i               1   52[BANK0 ] unsigned char 
  3023 ;; Return value:  Size  Location     Type
  3024 ;;                  1    wreg      void 
  3025 ;; Registers used:
  3026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3027 ;; Tracked objects:
  3028 ;;		On entry : 0/0
  3029 ;;		On exit  : 0/0
  3030 ;;		Unchanged: 0/0
  3031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3032 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3033 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3034 ;;      Temps:          0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3035 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3036 ;;Total ram usage:       25 bytes
  3037 ;; Hardware stack levels used:    1
  3038 ;; Hardware stack levels required when called:   11
  3039 ;; This function calls:
  3040 ;;		_Mcp2515WriteCanId
  3041 ;;		_Mcp2515_Reset
  3042 ;;		_Spi_Write
  3043 ;; This function is called by:
  3044 ;;		_Can_Init
  3045 ;; This function uses a non-reentrant model
  3046 ;;
  3047                           
  3048                           	psect	text12
  3049  001042                     __ptext12:
  3050                           	opt stack 0
  3051  001042                     _Mcp2515_Init:
  3052                           	opt stack 17
  3053                           
  3054                           ;mcp2515.c: 40: uint8_t i;
  3055                           ;mcp2515.c: 41: uint8_t cmdMask4[]={0x05,0x0F,0xE0,0x80};
  3056                           
  3057                           ;incstack = 0
  3058  001042  C0D8  F095         	movff	Mcp2515_Init@F8112,Mcp2515_Init@cmdMask4
  3059  001046  C0D9  F096         	movff	Mcp2515_Init@F8112+1,Mcp2515_Init@cmdMask4+1
  3060  00104A  C0DA  F097         	movff	Mcp2515_Init@F8112+2,Mcp2515_Init@cmdMask4+2
  3061  00104E  C0DB  F098         	movff	Mcp2515_Init@F8112+3,Mcp2515_Init@cmdMask4+3
  3062                           
  3063                           ;mcp2515.c: 42: uint8_t cmdWrite3[]={0x02,0,0};
  3064  001052  C0E3  F099         	movff	Mcp2515_Init@F8114,Mcp2515_Init@cmdWrite3
  3065  001056  C0E4  F09A         	movff	Mcp2515_Init@F8114+1,Mcp2515_Init@cmdWrite3+1
  3066  00105A  C0E5  F09B         	movff	Mcp2515_Init@F8114+2,Mcp2515_Init@cmdWrite3+2
  3067                           
  3068                           ;mcp2515.c: 44: Mcp2515_Reset();
  3069  00105E  EC2F  F013         	call	_Mcp2515_Reset	;wreg free
  3070                           
  3071                           ;mcp2515.c: 48: Spi_Write(cmdMask4,sizeof(cmdMask4));
  3072  001062  0E95               	movlw	low Mcp2515_Init@cmdMask4
  3073  001064  0100               	movlb	0	; () banked
  3074  001066  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3075  001068  0E00               	movlw	high Mcp2515_Init@cmdMask4
  3076  00106A  0100               	movlb	0	; () banked
  3077  00106C  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3078  00106E  0E04               	movlw	4
  3079  001070  0100               	movlb	0	; () banked
  3080  001072  6F6E               	movwf	Spi_Write@size& (0+255),b
  3081  001074  0E00               	movlw	0
  3082  001076  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3083  001078  0E00               	movlw	0
  3084  00107A  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3085  00107C  0E00               	movlw	0
  3086  00107E  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3087  001080  ECF5  F014         	call	_Spi_Write	;wreg free
  3088                           
  3089                           ;mcp2515.c: 52: cmdWrite3[1] = 0x2A;
  3090  001084  0E2A               	movlw	42
  3091  001086  0100               	movlb	0	; () banked
  3092  001088  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  3093                           
  3094                           ; BSR set to: 0
  3095                           ;mcp2515.c: 53: cmdWrite3[2] = speedCfg->brp | speedCfg->sjw << 6;
  3096  00108A  C083  FFF6         	movff	Mcp2515_Init@speedCfg,tblptrl
  3097  00108E  C084  FFF7         	movff	Mcp2515_Init@speedCfg+1,tblptrh
  3098  001092                     	if	0	;tblptru may be non-zero
  3099  001092                     	endif
  3100  001092                     	if	0	;tblptru may be non-zero
  3101  001092                     	endif
  3102  001092  0008               	tblrd		*
  3103  001094  CFF5 F087          	movff	tablat,??_Mcp2515_Init
  3104  001098  0E01               	movlw	1
  3105  00109A  0100               	movlb	0	; () banked
  3106  00109C  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  3107  00109E  0100               	movlb	0	; () banked
  3108  0010A0  6F88               	movwf	(??_Mcp2515_Init+1)& (0+255),b
  3109  0010A2  0E00               	movlw	0
  3110  0010A4  0100               	movlb	0	; () banked
  3111  0010A6  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  3112  0010A8  0100               	movlb	0	; () banked
  3113  0010AA  6F89               	movwf	(??_Mcp2515_Init+2)& (0+255),b
  3114  0010AC  C088  FFF6         	movff	??_Mcp2515_Init+1,tblptrl
  3115  0010B0  C089  FFF7         	movff	??_Mcp2515_Init+2,tblptrh
  3116  0010B4                     	if	0	;tblptru may be non-zero
  3117  0010B4                     	endif
  3118  0010B4                     	if	0	;tblptru may be non-zero
  3119  0010B4                     	endif
  3120  0010B4  0008               	tblrd		*
  3121  0010B6  CFF5 F08A          	movff	tablat,??_Mcp2515_Init+3
  3122  0010BA  0E06               	movlw	6
  3123  0010BC  0100               	movlb	0	; () banked
  3124  0010BE  6F8B               	movwf	(??_Mcp2515_Init+4)& (0+255),b
  3125  0010C0                     u1035:
  3126  0010C0  0100               	movlb	0	; () banked
  3127  0010C2  90D8               	bcf	status,0,c
  3128  0010C4  378A               	rlcf	(??_Mcp2515_Init+3)& (0+255),f,b
  3129  0010C6  0100               	movlb	0	; () banked
  3130  0010C8  2F8B               	decfsz	(??_Mcp2515_Init+4)& (0+255),f,b
  3131  0010CA  D7FA               	goto	u1035
  3132  0010CC  0100               	movlb	0	; () banked
  3133  0010CE  518A               	movf	(??_Mcp2515_Init+3)& (0+255),w,b
  3134  0010D0  0100               	movlb	0	; () banked
  3135  0010D2  1187               	iorwf	??_Mcp2515_Init& (0+255),w,b
  3136  0010D4  0100               	movlb	0	; () banked
  3137  0010D6  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  3138                           
  3139                           ; BSR set to: 0
  3140                           ;mcp2515.c: 54: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  3141  0010D8  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  3142  0010DA  0100               	movlb	0	; () banked
  3143  0010DC  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3144  0010DE  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  3145  0010E0  0100               	movlb	0	; () banked
  3146  0010E2  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3147  0010E4  0E03               	movlw	3
  3148  0010E6  0100               	movlb	0	; () banked
  3149  0010E8  6F6E               	movwf	Spi_Write@size& (0+255),b
  3150  0010EA  0E00               	movlw	0
  3151  0010EC  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3152  0010EE  0E00               	movlw	0
  3153  0010F0  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3154  0010F2  0E00               	movlw	0
  3155  0010F4  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3156  0010F6  ECF5  F014         	call	_Spi_Write	;wreg free
  3157                           
  3158                           ;mcp2515.c: 56: cmdWrite3[1] = 0x29;
  3159  0010FA  0E29               	movlw	41
  3160  0010FC  0100               	movlb	0	; () banked
  3161  0010FE  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  3162                           
  3163                           ;mcp2515.c: 57: cmdWrite3[2] = speedCfg->prseg
  3164                           ;mcp2515.c: 58: | speedCfg->phseg1 << 3
  3165                           ;mcp2515.c: 59: | speedCfg->sam << 6
  3166                           ;mcp2515.c: 60: | speedCfg->btlmode << 7;
  3167  001100  0E02               	movlw	2
  3168  001102  0100               	movlb	0	; () banked
  3169  001104  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  3170  001106  0100               	movlb	0	; () banked
  3171  001108  6F87               	movwf	??_Mcp2515_Init& (0+255),b
  3172  00110A  0E00               	movlw	0
  3173  00110C  0100               	movlb	0	; () banked
  3174  00110E  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  3175  001110  0100               	movlb	0	; () banked
  3176  001112  6F88               	movwf	(??_Mcp2515_Init+1)& (0+255),b
  3177  001114  C087  FFF6         	movff	??_Mcp2515_Init,tblptrl
  3178  001118  C088  FFF7         	movff	??_Mcp2515_Init+1,tblptrh
  3179  00111C                     	if	0	;tblptru may be non-zero
  3180  00111C                     	endif
  3181  00111C                     	if	0	;tblptru may be non-zero
  3182  00111C                     	endif
  3183  00111C  0008               	tblrd		*
  3184  00111E  CFF5 F089          	movff	tablat,??_Mcp2515_Init+2
  3185  001122  0E06               	movlw	6
  3186  001124  0100               	movlb	0	; () banked
  3187  001126  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  3188  001128  0100               	movlb	0	; () banked
  3189  00112A  6F8A               	movwf	(??_Mcp2515_Init+3)& (0+255),b
  3190  00112C  0E00               	movlw	0
  3191  00112E  0100               	movlb	0	; () banked
  3192  001130  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  3193  001132  0100               	movlb	0	; () banked
  3194  001134  6F8B               	movwf	(??_Mcp2515_Init+4)& (0+255),b
  3195  001136  C08A  FFF6         	movff	??_Mcp2515_Init+3,tblptrl
  3196  00113A  C08B  FFF7         	movff	??_Mcp2515_Init+4,tblptrh
  3197  00113E                     	if	0	;tblptru may be non-zero
  3198  00113E                     	endif
  3199  00113E                     	if	0	;tblptru may be non-zero
  3200  00113E                     	endif
  3201  00113E  0008               	tblrd		*
  3202  001140  CFF5 F08C          	movff	tablat,??_Mcp2515_Init+5
  3203  001144  0E00               	movlw	0
  3204  001146  B18C               	btfsc	(??_Mcp2515_Init+5)& (0+255),0,b
  3205  001148  0E80               	movlw	128
  3206  00114A  6F8C               	movwf	(??_Mcp2515_Init+5)& (0+255),b
  3207  00114C  0E05               	movlw	5
  3208  00114E  0100               	movlb	0	; () banked
  3209  001150  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  3210  001152  0100               	movlb	0	; () banked
  3211  001154  6F8D               	movwf	(??_Mcp2515_Init+6)& (0+255),b
  3212  001156  0E00               	movlw	0
  3213  001158  0100               	movlb	0	; () banked
  3214  00115A  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  3215  00115C  0100               	movlb	0	; () banked
  3216  00115E  6F8E               	movwf	(??_Mcp2515_Init+7)& (0+255),b
  3217  001160  C08D  FFF6         	movff	??_Mcp2515_Init+6,tblptrl
  3218  001164  C08E  FFF7         	movff	??_Mcp2515_Init+7,tblptrh
  3219  001168                     	if	0	;tblptru may be non-zero
  3220  001168                     	endif
  3221  001168                     	if	0	;tblptru may be non-zero
  3222  001168                     	endif
  3223  001168  0008               	tblrd		*
  3224  00116A  CFF5 F08F          	movff	tablat,??_Mcp2515_Init+8
  3225  00116E  0E06               	movlw	6
  3226  001170  0100               	movlb	0	; () banked
  3227  001172  6F90               	movwf	(??_Mcp2515_Init+9)& (0+255),b
  3228  001174                     u1045:
  3229  001174  0100               	movlb	0	; () banked
  3230  001176  90D8               	bcf	status,0,c
  3231  001178  378F               	rlcf	(??_Mcp2515_Init+8)& (0+255),f,b
  3232  00117A  0100               	movlb	0	; () banked
  3233  00117C  2F90               	decfsz	(??_Mcp2515_Init+9)& (0+255),f,b
  3234  00117E  D7FA               	goto	u1045
  3235  001180  0E03               	movlw	3
  3236  001182  0100               	movlb	0	; () banked
  3237  001184  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  3238  001186  0100               	movlb	0	; () banked
  3239  001188  6F91               	movwf	(??_Mcp2515_Init+10)& (0+255),b
  3240  00118A  0E00               	movlw	0
  3241  00118C  0100               	movlb	0	; () banked
  3242  00118E  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  3243  001190  0100               	movlb	0	; () banked
  3244  001192  6F92               	movwf	(??_Mcp2515_Init+11)& (0+255),b
  3245  001194  C091  FFF6         	movff	??_Mcp2515_Init+10,tblptrl
  3246  001198  C092  FFF7         	movff	??_Mcp2515_Init+11,tblptrh
  3247  00119C                     	if	0	;tblptru may be non-zero
  3248  00119C                     	endif
  3249  00119C                     	if	0	;tblptru may be non-zero
  3250  00119C                     	endif
  3251  00119C  0008               	tblrd		*
  3252  00119E  CFF5 F093          	movff	tablat,??_Mcp2515_Init+12
  3253  0011A2  0100               	movlb	0	; () banked
  3254  0011A4  90D8               	bcf	status,0,c
  3255  0011A6  3793               	rlcf	(??_Mcp2515_Init+12)& (0+255),f,b
  3256  0011A8  0100               	movlb	0	; () banked
  3257  0011AA  90D8               	bcf	status,0,c
  3258  0011AC  3793               	rlcf	(??_Mcp2515_Init+12)& (0+255),f,b
  3259  0011AE  0100               	movlb	0	; () banked
  3260  0011B0  90D8               	bcf	status,0,c
  3261  0011B2  3593               	rlcf	(??_Mcp2515_Init+12)& (0+255),w,b
  3262  0011B4  0100               	movlb	0	; () banked
  3263  0011B6  118F               	iorwf	(??_Mcp2515_Init+8)& (0+255),w,b
  3264  0011B8  0100               	movlb	0	; () banked
  3265  0011BA  118C               	iorwf	(??_Mcp2515_Init+5)& (0+255),w,b
  3266  0011BC  0100               	movlb	0	; () banked
  3267  0011BE  1189               	iorwf	(??_Mcp2515_Init+2)& (0+255),w,b
  3268  0011C0  0100               	movlb	0	; () banked
  3269  0011C2  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  3270                           
  3271                           ; BSR set to: 0
  3272                           ;mcp2515.c: 61: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  3273  0011C4  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  3274  0011C6  0100               	movlb	0	; () banked
  3275  0011C8  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3276  0011CA  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  3277  0011CC  0100               	movlb	0	; () banked
  3278  0011CE  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3279  0011D0  0E03               	movlw	3
  3280  0011D2  0100               	movlb	0	; () banked
  3281  0011D4  6F6E               	movwf	Spi_Write@size& (0+255),b
  3282  0011D6  0E00               	movlw	0
  3283  0011D8  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3284  0011DA  0E00               	movlw	0
  3285  0011DC  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3286  0011DE  0E00               	movlw	0
  3287  0011E0  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3288  0011E2  ECF5  F014         	call	_Spi_Write	;wreg free
  3289                           
  3290                           ;mcp2515.c: 63: cmdWrite3[1] = 0x28;
  3291  0011E6  0E28               	movlw	40
  3292  0011E8  0100               	movlb	0	; () banked
  3293  0011EA  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  3294                           
  3295                           ; BSR set to: 0
  3296                           ;mcp2515.c: 64: cmdWrite3[2] = speedCfg->phseg2 | speedCfg->sjw << 6;
  3297  0011EC  0E04               	movlw	4
  3298  0011EE  0100               	movlb	0	; () banked
  3299  0011F0  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  3300  0011F2  0100               	movlb	0	; () banked
  3301  0011F4  6F87               	movwf	??_Mcp2515_Init& (0+255),b
  3302  0011F6  0E00               	movlw	0
  3303  0011F8  0100               	movlb	0	; () banked
  3304  0011FA  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  3305  0011FC  0100               	movlb	0	; () banked
  3306  0011FE  6F88               	movwf	(??_Mcp2515_Init+1)& (0+255),b
  3307  001200  C087  FFF6         	movff	??_Mcp2515_Init,tblptrl
  3308  001204  C088  FFF7         	movff	??_Mcp2515_Init+1,tblptrh
  3309  001208                     	if	0	;tblptru may be non-zero
  3310  001208                     	endif
  3311  001208                     	if	0	;tblptru may be non-zero
  3312  001208                     	endif
  3313  001208  0008               	tblrd		*
  3314  00120A  CFF5 F089          	movff	tablat,??_Mcp2515_Init+2
  3315  00120E  0E01               	movlw	1
  3316  001210  0100               	movlb	0	; () banked
  3317  001212  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  3318  001214  0100               	movlb	0	; () banked
  3319  001216  6F8A               	movwf	(??_Mcp2515_Init+3)& (0+255),b
  3320  001218  0E00               	movlw	0
  3321  00121A  0100               	movlb	0	; () banked
  3322  00121C  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  3323  00121E  0100               	movlb	0	; () banked
  3324  001220  6F8B               	movwf	(??_Mcp2515_Init+4)& (0+255),b
  3325  001222  C08A  FFF6         	movff	??_Mcp2515_Init+3,tblptrl
  3326  001226  C08B  FFF7         	movff	??_Mcp2515_Init+4,tblptrh
  3327  00122A                     	if	0	;tblptru may be non-zero
  3328  00122A                     	endif
  3329  00122A                     	if	0	;tblptru may be non-zero
  3330  00122A                     	endif
  3331  00122A  0008               	tblrd		*
  3332  00122C  CFF5 F08C          	movff	tablat,??_Mcp2515_Init+5
  3333  001230  0E06               	movlw	6
  3334  001232  0100               	movlb	0	; () banked
  3335  001234  6F8D               	movwf	(??_Mcp2515_Init+6)& (0+255),b
  3336  001236                     u1055:
  3337  001236  0100               	movlb	0	; () banked
  3338  001238  90D8               	bcf	status,0,c
  3339  00123A  378C               	rlcf	(??_Mcp2515_Init+5)& (0+255),f,b
  3340  00123C  0100               	movlb	0	; () banked
  3341  00123E  2F8D               	decfsz	(??_Mcp2515_Init+6)& (0+255),f,b
  3342  001240  D7FA               	goto	u1055
  3343  001242  0100               	movlb	0	; () banked
  3344  001244  518C               	movf	(??_Mcp2515_Init+5)& (0+255),w,b
  3345  001246  0100               	movlb	0	; () banked
  3346  001248  1189               	iorwf	(??_Mcp2515_Init+2)& (0+255),w,b
  3347  00124A  0100               	movlb	0	; () banked
  3348  00124C  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  3349                           
  3350                           ; BSR set to: 0
  3351                           ;mcp2515.c: 65: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  3352  00124E  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  3353  001250  0100               	movlb	0	; () banked
  3354  001252  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3355  001254  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  3356  001256  0100               	movlb	0	; () banked
  3357  001258  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3358  00125A  0E03               	movlw	3
  3359  00125C  0100               	movlb	0	; () banked
  3360  00125E  6F6E               	movwf	Spi_Write@size& (0+255),b
  3361  001260  0E00               	movlw	0
  3362  001262  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3363  001264  0E00               	movlw	0
  3364  001266  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3365  001268  0E00               	movlw	0
  3366  00126A  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3367  00126C  ECF5  F014         	call	_Spi_Write	;wreg free
  3368                           
  3369                           ;mcp2515.c: 69: Mcp2515WriteCanId(0x20,filterCfg->ext,filterCfg->mask0);
  3370  001270  0100               	movlb	0	; () banked
  3371  001272  EE20 F020          	lfsr	2,32
  3372  001276  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3373  001278  26D9               	addwf	fsr2l,f,c
  3374  00127A  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3375  00127C  22DA               	addwfc	fsr2h,f,c
  3376  00127E  50DF               	movf	indf2,w,c
  3377  001280  0100               	movlb	0	; () banked
  3378  001282  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3379  001284  C085  FFD9         	movff	Mcp2515_Init@filterCfg,fsr2l
  3380  001288  C086  FFDA         	movff	Mcp2515_Init@filterCfg+1,fsr2h
  3381  00128C  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3382  001290  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3383  001294  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3384  001298  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3385  00129C  0E20               	movlw	32
  3386  00129E  EC22  F010         	call	_Mcp2515WriteCanId
  3387                           
  3388                           ;mcp2515.c: 70: Mcp2515WriteCanId(0x24,filterCfg->ext,filterCfg->mask1);
  3389  0012A2  0100               	movlb	0	; () banked
  3390  0012A4  EE20 F020          	lfsr	2,32
  3391  0012A8  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3392  0012AA  26D9               	addwf	fsr2l,f,c
  3393  0012AC  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3394  0012AE  22DA               	addwfc	fsr2h,f,c
  3395  0012B0  50DF               	movf	indf2,w,c
  3396  0012B2  0100               	movlb	0	; () banked
  3397  0012B4  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3398  0012B6  0100               	movlb	0	; () banked
  3399  0012B8  EE20 F004          	lfsr	2,4
  3400  0012BC  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3401  0012BE  26D9               	addwf	fsr2l,f,c
  3402  0012C0  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3403  0012C2  22DA               	addwfc	fsr2h,f,c
  3404  0012C4  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3405  0012C8  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3406  0012CC  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3407  0012D0  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3408  0012D4  0E24               	movlw	36
  3409  0012D6  EC22  F010         	call	_Mcp2515WriteCanId
  3410                           
  3411                           ;mcp2515.c: 71: Mcp2515WriteCanId(0x00,filterCfg->ext,filterCfg->filter0);
  3412  0012DA  0100               	movlb	0	; () banked
  3413  0012DC  EE20 F020          	lfsr	2,32
  3414  0012E0  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3415  0012E2  26D9               	addwf	fsr2l,f,c
  3416  0012E4  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3417  0012E6  22DA               	addwfc	fsr2h,f,c
  3418  0012E8  50DF               	movf	indf2,w,c
  3419  0012EA  0100               	movlb	0	; () banked
  3420  0012EC  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3421  0012EE  0100               	movlb	0	; () banked
  3422  0012F0  EE20 F008          	lfsr	2,8
  3423  0012F4  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3424  0012F6  26D9               	addwf	fsr2l,f,c
  3425  0012F8  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3426  0012FA  22DA               	addwfc	fsr2h,f,c
  3427  0012FC  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3428  001300  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3429  001304  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3430  001308  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3431  00130C  0E00               	movlw	0
  3432  00130E  EC22  F010         	call	_Mcp2515WriteCanId
  3433                           
  3434                           ;mcp2515.c: 72: Mcp2515WriteCanId(0x04,filterCfg->ext,filterCfg->filter1);
  3435  001312  0100               	movlb	0	; () banked
  3436  001314  EE20 F020          	lfsr	2,32
  3437  001318  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3438  00131A  26D9               	addwf	fsr2l,f,c
  3439  00131C  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3440  00131E  22DA               	addwfc	fsr2h,f,c
  3441  001320  50DF               	movf	indf2,w,c
  3442  001322  0100               	movlb	0	; () banked
  3443  001324  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3444  001326  0100               	movlb	0	; () banked
  3445  001328  EE20 F00C          	lfsr	2,12
  3446  00132C  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3447  00132E  26D9               	addwf	fsr2l,f,c
  3448  001330  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3449  001332  22DA               	addwfc	fsr2h,f,c
  3450  001334  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3451  001338  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3452  00133C  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3453  001340  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3454  001344  0E04               	movlw	4
  3455  001346  EC22  F010         	call	_Mcp2515WriteCanId
  3456                           
  3457                           ;mcp2515.c: 73: Mcp2515WriteCanId(0x08,filterCfg->ext,filterCfg->filter2);
  3458  00134A  0100               	movlb	0	; () banked
  3459  00134C  EE20 F020          	lfsr	2,32
  3460  001350  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3461  001352  26D9               	addwf	fsr2l,f,c
  3462  001354  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3463  001356  22DA               	addwfc	fsr2h,f,c
  3464  001358  50DF               	movf	indf2,w,c
  3465  00135A  0100               	movlb	0	; () banked
  3466  00135C  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3467  00135E  0100               	movlb	0	; () banked
  3468  001360  EE20 F010          	lfsr	2,16
  3469  001364  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3470  001366  26D9               	addwf	fsr2l,f,c
  3471  001368  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3472  00136A  22DA               	addwfc	fsr2h,f,c
  3473  00136C  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3474  001370  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3475  001374  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3476  001378  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3477  00137C  0E08               	movlw	8
  3478  00137E  EC22  F010         	call	_Mcp2515WriteCanId
  3479                           
  3480                           ;mcp2515.c: 74: Mcp2515WriteCanId(0x10,filterCfg->ext,filterCfg->filter3);
  3481  001382  0100               	movlb	0	; () banked
  3482  001384  EE20 F020          	lfsr	2,32
  3483  001388  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3484  00138A  26D9               	addwf	fsr2l,f,c
  3485  00138C  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3486  00138E  22DA               	addwfc	fsr2h,f,c
  3487  001390  50DF               	movf	indf2,w,c
  3488  001392  0100               	movlb	0	; () banked
  3489  001394  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3490  001396  0100               	movlb	0	; () banked
  3491  001398  EE20 F014          	lfsr	2,20
  3492  00139C  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3493  00139E  26D9               	addwf	fsr2l,f,c
  3494  0013A0  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3495  0013A2  22DA               	addwfc	fsr2h,f,c
  3496  0013A4  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3497  0013A8  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3498  0013AC  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3499  0013B0  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3500  0013B4  0E10               	movlw	16
  3501  0013B6  EC22  F010         	call	_Mcp2515WriteCanId
  3502                           
  3503                           ;mcp2515.c: 75: Mcp2515WriteCanId(0x14,filterCfg->ext,filterCfg->filter4);
  3504  0013BA  0100               	movlb	0	; () banked
  3505  0013BC  EE20 F020          	lfsr	2,32
  3506  0013C0  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3507  0013C2  26D9               	addwf	fsr2l,f,c
  3508  0013C4  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3509  0013C6  22DA               	addwfc	fsr2h,f,c
  3510  0013C8  50DF               	movf	indf2,w,c
  3511  0013CA  0100               	movlb	0	; () banked
  3512  0013CC  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3513  0013CE  0100               	movlb	0	; () banked
  3514  0013D0  EE20 F018          	lfsr	2,24
  3515  0013D4  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3516  0013D6  26D9               	addwf	fsr2l,f,c
  3517  0013D8  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3518  0013DA  22DA               	addwfc	fsr2h,f,c
  3519  0013DC  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3520  0013E0  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3521  0013E4  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3522  0013E8  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3523  0013EC  0E14               	movlw	20
  3524  0013EE  EC22  F010         	call	_Mcp2515WriteCanId
  3525                           
  3526                           ;mcp2515.c: 76: Mcp2515WriteCanId(0x18,filterCfg->ext,filterCfg->filter5);
  3527  0013F2  0100               	movlb	0	; () banked
  3528  0013F4  EE20 F020          	lfsr	2,32
  3529  0013F8  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3530  0013FA  26D9               	addwf	fsr2l,f,c
  3531  0013FC  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3532  0013FE  22DA               	addwfc	fsr2h,f,c
  3533  001400  50DF               	movf	indf2,w,c
  3534  001402  0100               	movlb	0	; () banked
  3535  001404  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3536  001406  0100               	movlb	0	; () banked
  3537  001408  EE20 F01C          	lfsr	2,28
  3538  00140C  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3539  00140E  26D9               	addwf	fsr2l,f,c
  3540  001410  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3541  001412  22DA               	addwfc	fsr2h,f,c
  3542  001414  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3543  001418  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3544  00141C  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3545  001420  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3546  001424  0E18               	movlw	24
  3547  001426  EC22  F010         	call	_Mcp2515WriteCanId
  3548                           
  3549                           ;mcp2515.c: 80: cmdWrite3[2] = 0;
  3550  00142A  0E00               	movlw	0
  3551  00142C  0100               	movlb	0	; () banked
  3552  00142E  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  3553                           
  3554                           ;mcp2515.c: 81: for (i = 0; i < 14; i++)
  3555  001430  0E00               	movlw	0
  3556  001432  0100               	movlb	0	; () banked
  3557  001434  6F94               	movwf	Mcp2515_Init@i& (0+255),b
  3558  001436                     l2159:
  3559                           
  3560                           ; BSR set to: 0
  3561  001436  0E0D               	movlw	13
  3562  001438  0100               	movlb	0	; () banked
  3563  00143A  6594               	cpfsgt	Mcp2515_Init@i& (0+255),b
  3564  00143C  D001               	goto	l2163
  3565  00143E  D045               	goto	l2177
  3566  001440                     l2163:
  3567                           
  3568                           ; BSR set to: 0
  3569                           ;mcp2515.c: 82: {
  3570                           ;mcp2515.c: 83: cmdWrite3[1] = 0x30 + i;
  3571  001440  0100               	movlb	0	; () banked
  3572  001442  5194               	movf	Mcp2515_Init@i& (0+255),w,b
  3573  001444  0F30               	addlw	48
  3574  001446  0100               	movlb	0	; () banked
  3575  001448  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  3576                           
  3577                           ; BSR set to: 0
  3578                           ;mcp2515.c: 84: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  3579  00144A  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  3580  00144C  0100               	movlb	0	; () banked
  3581  00144E  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3582  001450  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  3583  001452  0100               	movlb	0	; () banked
  3584  001454  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3585  001456  0E03               	movlw	3
  3586  001458  0100               	movlb	0	; () banked
  3587  00145A  6F6E               	movwf	Spi_Write@size& (0+255),b
  3588  00145C  0E00               	movlw	0
  3589  00145E  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3590  001460  0E00               	movlw	0
  3591  001462  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3592  001464  0E00               	movlw	0
  3593  001466  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3594  001468  ECF5  F014         	call	_Spi_Write	;wreg free
  3595                           
  3596                           ;mcp2515.c: 85: cmdWrite3[1] = 0x40 + i;
  3597  00146C  0100               	movlb	0	; () banked
  3598  00146E  5194               	movf	Mcp2515_Init@i& (0+255),w,b
  3599  001470  0F40               	addlw	64
  3600  001472  0100               	movlb	0	; () banked
  3601  001474  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  3602                           
  3603                           ;mcp2515.c: 86: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  3604  001476  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  3605  001478  0100               	movlb	0	; () banked
  3606  00147A  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3607  00147C  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  3608  00147E  0100               	movlb	0	; () banked
  3609  001480  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3610  001482  0E03               	movlw	3
  3611  001484  0100               	movlb	0	; () banked
  3612  001486  6F6E               	movwf	Spi_Write@size& (0+255),b
  3613  001488  0E00               	movlw	0
  3614  00148A  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3615  00148C  0E00               	movlw	0
  3616  00148E  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3617  001490  0E00               	movlw	0
  3618  001492  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3619  001494  ECF5  F014         	call	_Spi_Write	;wreg free
  3620                           
  3621                           ;mcp2515.c: 87: cmdWrite3[1] = 0x50 + i;
  3622  001498  0100               	movlb	0	; () banked
  3623  00149A  5194               	movf	Mcp2515_Init@i& (0+255),w,b
  3624  00149C  0F50               	addlw	80
  3625  00149E  0100               	movlb	0	; () banked
  3626  0014A0  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  3627                           
  3628                           ; BSR set to: 0
  3629                           ;mcp2515.c: 88: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  3630  0014A2  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  3631  0014A4  0100               	movlb	0	; () banked
  3632  0014A6  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3633  0014A8  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  3634  0014AA  0100               	movlb	0	; () banked
  3635  0014AC  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3636  0014AE  0E03               	movlw	3
  3637  0014B0  0100               	movlb	0	; () banked
  3638  0014B2  6F6E               	movwf	Spi_Write@size& (0+255),b
  3639  0014B4  0E00               	movlw	0
  3640  0014B6  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3641  0014B8  0E00               	movlw	0
  3642  0014BA  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3643  0014BC  0E00               	movlw	0
  3644  0014BE  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3645  0014C0  ECF5  F014         	call	_Spi_Write	;wreg free
  3646  0014C4  0100               	movlb	0	; () banked
  3647  0014C6  2B94               	incf	Mcp2515_Init@i& (0+255),f,b
  3648  0014C8  D7B6               	goto	l2159
  3649  0014CA                     l2177:
  3650                           
  3651                           ; BSR set to: 0
  3652                           ;mcp2515.c: 89: }
  3653                           ;mcp2515.c: 93: cmdWrite3[2] = 0;
  3654  0014CA  0E00               	movlw	0
  3655  0014CC  0100               	movlb	0	; () banked
  3656  0014CE  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  3657                           
  3658                           ;mcp2515.c: 94: cmdWrite3[1] = 0x60;
  3659  0014D0  0E60               	movlw	96
  3660  0014D2  0100               	movlb	0	; () banked
  3661  0014D4  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  3662                           
  3663                           ; BSR set to: 0
  3664                           ;mcp2515.c: 95: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  3665  0014D6  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  3666  0014D8  0100               	movlb	0	; () banked
  3667  0014DA  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3668  0014DC  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  3669  0014DE  0100               	movlb	0	; () banked
  3670  0014E0  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3671  0014E2  0E03               	movlw	3
  3672  0014E4  0100               	movlb	0	; () banked
  3673  0014E6  6F6E               	movwf	Spi_Write@size& (0+255),b
  3674  0014E8  0E00               	movlw	0
  3675  0014EA  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3676  0014EC  0E00               	movlw	0
  3677  0014EE  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3678  0014F0  0E00               	movlw	0
  3679  0014F2  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3680  0014F4  ECF5  F014         	call	_Spi_Write	;wreg free
  3681                           
  3682                           ;mcp2515.c: 96: cmdWrite3[1] = 0x70;
  3683  0014F8  0E70               	movlw	112
  3684  0014FA  0100               	movlb	0	; () banked
  3685  0014FC  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  3686                           
  3687                           ;mcp2515.c: 97: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  3688  0014FE  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  3689  001500  0100               	movlb	0	; () banked
  3690  001502  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3691  001504  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  3692  001506  0100               	movlb	0	; () banked
  3693  001508  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3694  00150A  0E03               	movlw	3
  3695  00150C  0100               	movlb	0	; () banked
  3696  00150E  6F6E               	movwf	Spi_Write@size& (0+255),b
  3697  001510  0E00               	movlw	0
  3698  001512  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3699  001514  0E00               	movlw	0
  3700  001516  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3701  001518  0E00               	movlw	0
  3702  00151A  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3703  00151C  ECF5  F014         	call	_Spi_Write	;wreg free
  3704                           
  3705                           ;mcp2515.c: 101: cmdMask4[1] = 0x60;
  3706  001520  0E60               	movlw	96
  3707  001522  0100               	movlb	0	; () banked
  3708  001524  6F96               	movwf	(Mcp2515_Init@cmdMask4+1)& (0+255),b
  3709                           
  3710                           ; BSR set to: 0
  3711                           ;mcp2515.c: 102: cmdMask4[2] = 0x60 | (1<<2);
  3712  001526  0E64               	movlw	100
  3713  001528  0100               	movlb	0	; () banked
  3714  00152A  6F97               	movwf	(Mcp2515_Init@cmdMask4+2)& (0+255),b
  3715                           
  3716                           ; BSR set to: 0
  3717                           ;mcp2515.c: 103: if(filterCfg->ext == 0)
  3718  00152C  0100               	movlb	0	; () banked
  3719  00152E  EE20 F020          	lfsr	2,32
  3720  001532  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3721  001534  26D9               	addwf	fsr2l,f,c
  3722  001536  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3723  001538  22DA               	addwfc	fsr2h,f,c
  3724  00153A  50DF               	movf	indf2,w,c
  3725  00153C  A4D8               	btfss	status,2,c
  3726  00153E  D002               	goto	l2191
  3727                           
  3728                           ; BSR set to: 0
  3729                           ;mcp2515.c: 104: {
  3730                           ;mcp2515.c: 105: cmdMask4[3] = 0x20 | (1<<2);
  3731  001540  0E24               	movlw	36
  3732  001542  D001               	goto	L3
  3733  001544                     l2191:
  3734                           
  3735                           ; BSR set to: 0
  3736                           ;mcp2515.c: 107: else
  3737                           ;mcp2515.c: 108: {
  3738                           ;mcp2515.c: 109: cmdMask4[3] = 0x40 | (1<<2);
  3739  001544  0E44               	movlw	68
  3740  001546                     L3:
  3741  001546  0100               	movlb	0	; () banked
  3742  001548  6F98               	movwf	(Mcp2515_Init@cmdMask4+3)& (0+255),b
  3743                           
  3744                           ; BSR set to: 0
  3745                           ;mcp2515.c: 110: }
  3746                           ;mcp2515.c: 111: Spi_Write(cmdMask4,sizeof(cmdMask4));
  3747                           
  3748                           ; BSR set to: 0
  3749  00154A  0E95               	movlw	low Mcp2515_Init@cmdMask4
  3750  00154C  0100               	movlb	0	; () banked
  3751  00154E  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3752  001550  0E00               	movlw	high Mcp2515_Init@cmdMask4
  3753  001552  0100               	movlb	0	; () banked
  3754  001554  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3755  001556  0E04               	movlw	4
  3756  001558  0100               	movlb	0	; () banked
  3757  00155A  6F6E               	movwf	Spi_Write@size& (0+255),b
  3758  00155C  0E00               	movlw	0
  3759  00155E  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3760  001560  0E00               	movlw	0
  3761  001562  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3762  001564  0E00               	movlw	0
  3763  001566  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3764  001568  ECF5  F014         	call	_Spi_Write	;wreg free
  3765                           
  3766                           ;mcp2515.c: 115: cmdMask4[1] = 0x70;
  3767  00156C  0E70               	movlw	112
  3768  00156E  0100               	movlb	0	; () banked
  3769  001570  6F96               	movwf	(Mcp2515_Init@cmdMask4+1)& (0+255),b
  3770                           
  3771                           ; BSR set to: 0
  3772                           ;mcp2515.c: 116: cmdMask4[2] = 0x60;
  3773  001572  0E60               	movlw	96
  3774  001574  0100               	movlb	0	; () banked
  3775  001576  6F97               	movwf	(Mcp2515_Init@cmdMask4+2)& (0+255),b
  3776                           
  3777                           ; BSR set to: 0
  3778                           ;mcp2515.c: 117: if(filterCfg->ext == 0)
  3779  001578  0100               	movlb	0	; () banked
  3780  00157A  EE20 F020          	lfsr	2,32
  3781  00157E  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3782  001580  26D9               	addwf	fsr2l,f,c
  3783  001582  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3784  001584  22DA               	addwfc	fsr2h,f,c
  3785  001586  50DF               	movf	indf2,w,c
  3786  001588  A4D8               	btfss	status,2,c
  3787  00158A  D002               	goto	l2203
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;mcp2515.c: 118: {
  3791                           ;mcp2515.c: 119: cmdMask4[3] = 0x20;
  3792  00158C  0E20               	movlw	32
  3793  00158E  D001               	goto	L4
  3794  001590                     l2203:
  3795                           
  3796                           ; BSR set to: 0
  3797                           ;mcp2515.c: 121: else
  3798                           ;mcp2515.c: 122: {
  3799                           ;mcp2515.c: 123: cmdMask4[3] = 0x40;
  3800  001590  0E40               	movlw	64
  3801  001592                     L4:
  3802  001592  0100               	movlb	0	; () banked
  3803  001594  6F98               	movwf	(Mcp2515_Init@cmdMask4+3)& (0+255),b
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;mcp2515.c: 124: }
  3807                           ;mcp2515.c: 125: Spi_Write(cmdMask4,sizeof(cmdMask4));
  3808                           
  3809                           ; BSR set to: 0
  3810  001596  0E95               	movlw	low Mcp2515_Init@cmdMask4
  3811  001598  0100               	movlb	0	; () banked
  3812  00159A  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3813  00159C  0E00               	movlw	high Mcp2515_Init@cmdMask4
  3814  00159E  0100               	movlb	0	; () banked
  3815  0015A0  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3816  0015A2  0E04               	movlw	4
  3817  0015A4  0100               	movlb	0	; () banked
  3818  0015A6  6F6E               	movwf	Spi_Write@size& (0+255),b
  3819  0015A8  0E00               	movlw	0
  3820  0015AA  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3821  0015AC  0E00               	movlw	0
  3822  0015AE  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3823  0015B0  0E00               	movlw	0
  3824  0015B2  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3825  0015B4  ECF5  F014         	call	_Spi_Write	;wreg free
  3826                           
  3827                           ;mcp2515.c: 129: cmdMask4[0] = 0x05;
  3828  0015B8  0E05               	movlw	5
  3829  0015BA  0100               	movlb	0	; () banked
  3830  0015BC  6F95               	movwf	Mcp2515_Init@cmdMask4& (0+255),b
  3831                           
  3832                           ; BSR set to: 0
  3833                           ;mcp2515.c: 130: cmdMask4[1] = 0x2B;
  3834  0015BE  0E2B               	movlw	43
  3835  0015C0  0100               	movlb	0	; () banked
  3836  0015C2  6F96               	movwf	(Mcp2515_Init@cmdMask4+1)& (0+255),b
  3837                           
  3838                           ; BSR set to: 0
  3839                           ;mcp2515.c: 131: cmdMask4[2] = 0x1F;
  3840  0015C4  0E1F               	movlw	31
  3841  0015C6  0100               	movlb	0	; () banked
  3842  0015C8  6F97               	movwf	(Mcp2515_Init@cmdMask4+2)& (0+255),b
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;mcp2515.c: 132: cmdMask4[3] = 0x1F;
  3846  0015CA  0E1F               	movlw	31
  3847  0015CC  0100               	movlb	0	; () banked
  3848  0015CE  6F98               	movwf	(Mcp2515_Init@cmdMask4+3)& (0+255),b
  3849                           
  3850                           ; BSR set to: 0
  3851                           ;mcp2515.c: 133: Spi_Write(cmdMask4,sizeof(cmdMask4));
  3852  0015D0  0E95               	movlw	low Mcp2515_Init@cmdMask4
  3853  0015D2  0100               	movlb	0	; () banked
  3854  0015D4  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3855  0015D6  0E00               	movlw	high Mcp2515_Init@cmdMask4
  3856  0015D8  0100               	movlb	0	; () banked
  3857  0015DA  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3858  0015DC  0E04               	movlw	4
  3859  0015DE  0100               	movlb	0	; () banked
  3860  0015E0  6F6E               	movwf	Spi_Write@size& (0+255),b
  3861  0015E2  0E00               	movlw	0
  3862  0015E4  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3863  0015E6  0E00               	movlw	0
  3864  0015E8  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3865  0015EA  0E00               	movlw	0
  3866  0015EC  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3867  0015EE  ECF5  F014         	call	_Spi_Write	;wreg free
  3868                           
  3869                           ;mcp2515.c: 137: cmdMask4[0] = 0x05;
  3870  0015F2  0E05               	movlw	5
  3871  0015F4  0100               	movlb	0	; () banked
  3872  0015F6  6F95               	movwf	Mcp2515_Init@cmdMask4& (0+255),b
  3873                           
  3874                           ;mcp2515.c: 138: cmdMask4[1] = 0x0F;
  3875  0015F8  0E0F               	movlw	15
  3876  0015FA  0100               	movlb	0	; () banked
  3877  0015FC  6F96               	movwf	(Mcp2515_Init@cmdMask4+1)& (0+255),b
  3878                           
  3879                           ;mcp2515.c: 139: cmdMask4[2] = 0xE0;
  3880  0015FE  0EE0               	movlw	224
  3881  001600  0100               	movlb	0	; () banked
  3882  001602  6F97               	movwf	(Mcp2515_Init@cmdMask4+2)& (0+255),b
  3883                           
  3884                           ;mcp2515.c: 140: cmdMask4[3] = 0x00;
  3885  001604  0E00               	movlw	0
  3886  001606  0100               	movlb	0	; () banked
  3887  001608  6F98               	movwf	(Mcp2515_Init@cmdMask4+3)& (0+255),b
  3888                           
  3889                           ; BSR set to: 0
  3890                           ;mcp2515.c: 141: Spi_Write(cmdMask4,sizeof(cmdMask4));
  3891  00160A  0E95               	movlw	low Mcp2515_Init@cmdMask4
  3892  00160C  0100               	movlb	0	; () banked
  3893  00160E  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3894  001610  0E00               	movlw	high Mcp2515_Init@cmdMask4
  3895  001612  0100               	movlb	0	; () banked
  3896  001614  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3897  001616  0E04               	movlw	4
  3898  001618  0100               	movlb	0	; () banked
  3899  00161A  6F6E               	movwf	Spi_Write@size& (0+255),b
  3900  00161C  0E00               	movlw	0
  3901  00161E  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3902  001620  0E00               	movlw	0
  3903  001622  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3904  001624  0E00               	movlw	0
  3905  001626  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3906  001628  ECF5  F014         	call	_Spi_Write	;wreg free
  3907  00162C  0012               	return		;funcret
  3908  00162E                     __end_of_Mcp2515_Init:
  3909                           	opt stack 0
  3910                           tblptru	equ	0xFF8
  3911                           tblptrh	equ	0xFF7
  3912                           tblptrl	equ	0xFF6
  3913                           tablat	equ	0xFF5
  3914                           prodh	equ	0xFF4
  3915                           prodl	equ	0xFF3
  3916                           intcon	equ	0xFF2
  3917                           intcon2	equ	0xFF1
  3918                           intcon3	equ	0xFF0
  3919                           postinc0	equ	0xFEE
  3920                           wreg	equ	0xFE8
  3921                           indf1	equ	0xFE7
  3922                           postinc1	equ	0xFE6
  3923                           postdec1	equ	0xFE5
  3924                           fsr1h	equ	0xFE2
  3925                           fsr1l	equ	0xFE1
  3926                           indf2	equ	0xFDF
  3927                           postinc2	equ	0xFDE
  3928                           fsr2h	equ	0xFDA
  3929                           fsr2l	equ	0xFD9
  3930                           status	equ	0xFD8
  3931                           
  3932 ;; *************** function _Mcp2515_Reset *****************
  3933 ;; Defined at:
  3934 ;;		line 21 in file "mcp2515.c"
  3935 ;; Parameters:    Size  Location     Type
  3936 ;;		None
  3937 ;; Auto vars:     Size  Location     Type
  3938 ;;  i               4   19[BANK0 ] unsigned long 
  3939 ;;  cmd             1   18[BANK0 ] unsigned char 
  3940 ;; Return value:  Size  Location     Type
  3941 ;;                  1    wreg      void 
  3942 ;; Registers used:
  3943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3944 ;; Tracked objects:
  3945 ;;		On entry : 0/0
  3946 ;;		On exit  : 0/0
  3947 ;;		Unchanged: 0/0
  3948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3950 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3952 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3953 ;;Total ram usage:        5 bytes
  3954 ;; Hardware stack levels used:    1
  3955 ;; Hardware stack levels required when called:   10
  3956 ;; This function calls:
  3957 ;;		_Spi_Write
  3958 ;; This function is called by:
  3959 ;;		_Mcp2515_Init
  3960 ;; This function uses a non-reentrant model
  3961 ;;
  3962                           
  3963                           	psect	text13
  3964  00265E                     __ptext13:
  3965                           	opt stack 0
  3966  00265E                     _Mcp2515_Reset:
  3967                           	opt stack 17
  3968                           
  3969                           ;mcp2515.c: 23: uint32_t i;
  3970                           ;mcp2515.c: 24: uint8_t cmd = 0xC0;
  3971                           
  3972                           ;incstack = 0
  3973  00265E  0EC0               	movlw	192
  3974  002660  0100               	movlb	0	; () banked
  3975  002662  6F72               	movwf	Mcp2515_Reset@cmd& (0+255),b
  3976                           
  3977                           ; BSR set to: 0
  3978                           ;mcp2515.c: 26: Spi_Write(&cmd,sizeof(cmd));
  3979  002664  0E72               	movlw	low Mcp2515_Reset@cmd
  3980  002666  0100               	movlb	0	; () banked
  3981  002668  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3982  00266A  0E00               	movlw	high Mcp2515_Reset@cmd
  3983  00266C  0100               	movlb	0	; () banked
  3984  00266E  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3985  002670  0E01               	movlw	1
  3986  002672  0100               	movlb	0	; () banked
  3987  002674  6F6E               	movwf	Spi_Write@size& (0+255),b
  3988  002676  0E00               	movlw	0
  3989  002678  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3990  00267A  0E00               	movlw	0
  3991  00267C  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3992  00267E  0E00               	movlw	0
  3993  002680  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3994  002682  ECF5  F014         	call	_Spi_Write	;wreg free
  3995                           
  3996                           ;mcp2515.c: 27: for(i=0;i<10000;i++){}
  3997  002686  0E00               	movlw	0
  3998  002688  0100               	movlb	0	; () banked
  3999  00268A  6F73               	movwf	Mcp2515_Reset@i& (0+255),b
  4000  00268C  0E00               	movlw	0
  4001  00268E  6F74               	movwf	(Mcp2515_Reset@i+1)& (0+255),b
  4002  002690  0E00               	movlw	0
  4003  002692  6F75               	movwf	(Mcp2515_Reset@i+2)& (0+255),b
  4004  002694  0E00               	movlw	0
  4005  002696  6F76               	movwf	(Mcp2515_Reset@i+3)& (0+255),b
  4006  002698                     l1943:
  4007                           
  4008                           ; BSR set to: 0
  4009  002698  0100               	movlb	0	; () banked
  4010  00269A  5176               	movf	(Mcp2515_Reset@i+3)& (0+255),w,b
  4011  00269C  0100               	movlb	0	; () banked
  4012  00269E  1175               	iorwf	(Mcp2515_Reset@i+2)& (0+255),w,b
  4013  0026A0  E110               	bnz	l309
  4014  0026A2  0E10               	movlw	16
  4015  0026A4  0100               	movlb	0	; () banked
  4016  0026A6  5D73               	subwf	Mcp2515_Reset@i& (0+255),w,b
  4017  0026A8  0E27               	movlw	39
  4018  0026AA  0100               	movlb	0	; () banked
  4019  0026AC  5974               	subwfb	(Mcp2515_Reset@i+1)& (0+255),w,b
  4020  0026AE  B0D8               	btfsc	status,0,c
  4021  0026B0  0012               	return	
  4022                           
  4023                           ; BSR set to: 0
  4024                           
  4025                           ; BSR set to: 0
  4026                           
  4027                           ; BSR set to: 0
  4028  0026B2  0E01               	movlw	1
  4029  0026B4  0100               	movlb	0	; () banked
  4030  0026B6  2773               	addwf	Mcp2515_Reset@i& (0+255),f,b
  4031  0026B8  0E00               	movlw	0
  4032  0026BA  2374               	addwfc	(Mcp2515_Reset@i+1)& (0+255),f,b
  4033  0026BC  2375               	addwfc	(Mcp2515_Reset@i+2)& (0+255),f,b
  4034  0026BE  2376               	addwfc	(Mcp2515_Reset@i+3)& (0+255),f,b
  4035  0026C0  D7EB               	goto	l1943
  4036  0026C2                     l309:
  4037                           
  4038                           ; BSR set to: 0
  4039  0026C2  0012               	return		;funcret
  4040  0026C4                     __end_of_Mcp2515_Reset:
  4041                           	opt stack 0
  4042                           tblptru	equ	0xFF8
  4043                           tblptrh	equ	0xFF7
  4044                           tblptrl	equ	0xFF6
  4045                           tablat	equ	0xFF5
  4046                           prodh	equ	0xFF4
  4047                           prodl	equ	0xFF3
  4048                           intcon	equ	0xFF2
  4049                           intcon2	equ	0xFF1
  4050                           intcon3	equ	0xFF0
  4051                           postinc0	equ	0xFEE
  4052                           wreg	equ	0xFE8
  4053                           indf1	equ	0xFE7
  4054                           postinc1	equ	0xFE6
  4055                           postdec1	equ	0xFE5
  4056                           fsr1h	equ	0xFE2
  4057                           fsr1l	equ	0xFE1
  4058                           indf2	equ	0xFDF
  4059                           postinc2	equ	0xFDE
  4060                           fsr2h	equ	0xFDA
  4061                           fsr2l	equ	0xFD9
  4062                           status	equ	0xFD8
  4063                           
  4064 ;; *************** function _Mcp2515WriteCanId *****************
  4065 ;; Defined at:
  4066 ;;		line 233 in file "mcp2515.c"
  4067 ;; Parameters:    Size  Location     Type
  4068 ;;  mcp_addr        1    wreg     unsigned char 
  4069 ;;  ext             1   18[BANK0 ] unsigned char 
  4070 ;;  can_id          4   19[BANK0 ] unsigned long 
  4071 ;; Auto vars:     Size  Location     Type
  4072 ;;  mcp_addr        1   26[BANK0 ] unsigned char 
  4073 ;;  buf             6   27[BANK0 ] unsigned char [6]
  4074 ;;  canid           2   33[BANK0 ] unsigned int 
  4075 ;; Return value:  Size  Location     Type
  4076 ;;                  1    wreg      void 
  4077 ;; Registers used:
  4078 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4079 ;; Tracked objects:
  4080 ;;		On entry : 0/0
  4081 ;;		On exit  : 0/0
  4082 ;;		Unchanged: 0/0
  4083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4084 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4085 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4086 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4087 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4088 ;;Total ram usage:       17 bytes
  4089 ;; Hardware stack levels used:    1
  4090 ;; Hardware stack levels required when called:   10
  4091 ;; This function calls:
  4092 ;;		_Spi_Write
  4093 ;; This function is called by:
  4094 ;;		_Mcp2515_Init
  4095 ;; This function uses a non-reentrant model
  4096 ;;
  4097                           
  4098                           	psect	text14
  4099  002044                     __ptext14:
  4100                           	opt stack 0
  4101  002044                     _Mcp2515WriteCanId:
  4102                           	opt stack 17
  4103                           
  4104                           ; BSR set to: 0
  4105                           ;incstack = 0
  4106                           ;Mcp2515WriteCanId@mcp_addr stored from wreg
  4107  002044  0100               	movlb	0	; () banked
  4108  002046  6F7A               	movwf	Mcp2515WriteCanId@mcp_addr& (0+255),b
  4109                           
  4110                           ;mcp2515.c: 235: uint16_t canid;
  4111                           ;mcp2515.c: 236: uint8_t buf[6];
  4112                           ;mcp2515.c: 238: canid = (uint16_t)(can_id & 0x0FFFF);
  4113  002048  C073  F081         	movff	Mcp2515WriteCanId@can_id,Mcp2515WriteCanId@canid
  4114  00204C  C074  F082         	movff	Mcp2515WriteCanId@can_id+1,Mcp2515WriteCanId@canid+1
  4115                           
  4116                           ;mcp2515.c: 240: buf[0] = 0x02;
  4117  002050  0E02               	movlw	2
  4118  002052  0100               	movlb	0	; () banked
  4119  002054  6F7B               	movwf	Mcp2515WriteCanId@buf& (0+255),b
  4120                           
  4121                           ; BSR set to: 0
  4122                           ;mcp2515.c: 241: buf[1] = mcp_addr;
  4123  002056  C07A  F07C         	movff	Mcp2515WriteCanId@mcp_addr,Mcp2515WriteCanId@buf+1
  4124                           
  4125                           ; BSR set to: 0
  4126                           ;mcp2515.c: 243: if ( ext == 1)
  4127  00205A  0100               	movlb	0	; () banked
  4128  00205C  0572               	decf	Mcp2515WriteCanId@ext& (0+255),w,b
  4129  00205E  A4D8               	btfss	status,2,c
  4130  002060  D034               	goto	l1971
  4131                           
  4132                           ; BSR set to: 0
  4133                           ;mcp2515.c: 244: {
  4134                           ;mcp2515.c: 245: buf[3+2] = (uint8_t) (canid & 0xFF);
  4135  002062  C081  F080         	movff	Mcp2515WriteCanId@canid,Mcp2515WriteCanId@buf+5
  4136                           
  4137                           ; BSR set to: 0
  4138                           ;mcp2515.c: 246: buf[2+2] = (uint8_t) (canid >> 8);
  4139  002066  0100               	movlb	0	; () banked
  4140  002068  5182               	movf	(Mcp2515WriteCanId@canid+1)& (0+255),w,b
  4141  00206A  0100               	movlb	0	; () banked
  4142  00206C  6F7F               	movwf	(Mcp2515WriteCanId@buf+4)& (0+255),b
  4143                           
  4144                           ; BSR set to: 0
  4145                           ;mcp2515.c: 247: canid = (uint16_t)( can_id / 0x10000L );
  4146  00206E  C075  F081         	movff	Mcp2515WriteCanId@can_id+2,Mcp2515WriteCanId@canid
  4147  002072  C076  F082         	movff	Mcp2515WriteCanId@can_id+3,Mcp2515WriteCanId@canid+1
  4148                           
  4149                           ; BSR set to: 0
  4150                           ;mcp2515.c: 248: buf[1+2] = (uint8_t) (canid & 0x03);
  4151  002076  0100               	movlb	0	; () banked
  4152  002078  5181               	movf	Mcp2515WriteCanId@canid& (0+255),w,b
  4153  00207A  0B03               	andlw	3
  4154  00207C  0100               	movlb	0	; () banked
  4155  00207E  6F7E               	movwf	(Mcp2515WriteCanId@buf+3)& (0+255),b
  4156                           
  4157                           ; BSR set to: 0
  4158                           ;mcp2515.c: 249: buf[1+2] += (uint8_t) ((canid & 0x1C )*8);
  4159  002080  C081  F077         	movff	Mcp2515WriteCanId@canid,??_Mcp2515WriteCanId
  4160  002084  0E1C               	movlw	28
  4161  002086  0100               	movlb	0	; () banked
  4162  002088  1777               	andwf	??_Mcp2515WriteCanId& (0+255),f,b
  4163  00208A  0100               	movlb	0	; () banked
  4164  00208C  90D8               	bcf	status,0,c
  4165  00208E  3777               	rlcf	??_Mcp2515WriteCanId& (0+255),f,b
  4166  002090  0100               	movlb	0	; () banked
  4167  002092  90D8               	bcf	status,0,c
  4168  002094  3777               	rlcf	??_Mcp2515WriteCanId& (0+255),f,b
  4169  002096  0100               	movlb	0	; () banked
  4170  002098  90D8               	bcf	status,0,c
  4171  00209A  3577               	rlcf	??_Mcp2515WriteCanId& (0+255),w,b
  4172  00209C  0100               	movlb	0	; () banked
  4173  00209E  277E               	addwf	(Mcp2515WriteCanId@buf+3)& (0+255),f,b
  4174                           
  4175                           ; BSR set to: 0
  4176                           ;mcp2515.c: 250: buf[1+2] |= 0x08;
  4177  0020A0  0100               	movlb	0	; () banked
  4178  0020A2  877E               	bsf	(Mcp2515WriteCanId@buf+3)& (0+255),3,b
  4179                           
  4180                           ; BSR set to: 0
  4181                           ;mcp2515.c: 251: buf[0+2] = (uint8_t) (canid / 32 );
  4182  0020A4  C081  F077         	movff	Mcp2515WriteCanId@canid,??_Mcp2515WriteCanId
  4183  0020A8  C082  F078         	movff	Mcp2515WriteCanId@canid+1,??_Mcp2515WriteCanId+1
  4184  0020AC  0E05               	movlw	5
  4185  0020AE  0100               	movlb	0	; () banked
  4186  0020B0  6F79               	movwf	(??_Mcp2515WriteCanId+2)& (0+255),b
  4187  0020B2                     u915:
  4188  0020B2  0100               	movlb	0	; () banked
  4189  0020B4  90D8               	bcf	status,0,c
  4190  0020B6  3378               	rrcf	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  4191  0020B8  3377               	rrcf	??_Mcp2515WriteCanId& (0+255),f,b
  4192  0020BA  0100               	movlb	0	; () banked
  4193  0020BC  2F79               	decfsz	(??_Mcp2515WriteCanId+2)& (0+255),f,b
  4194  0020BE  D7F9               	goto	u915
  4195  0020C0  0100               	movlb	0	; () banked
  4196  0020C2  5177               	movf	??_Mcp2515WriteCanId& (0+255),w,b
  4197  0020C4  0100               	movlb	0	; () banked
  4198  0020C6  6F7D               	movwf	(Mcp2515WriteCanId@buf+2)& (0+255),b
  4199                           
  4200                           ;mcp2515.c: 252: }
  4201  0020C8  D02C               	goto	l1977
  4202  0020CA                     l1971:
  4203                           
  4204                           ; BSR set to: 0
  4205                           ;mcp2515.c: 254: else
  4206                           ;mcp2515.c: 255: {
  4207                           ;mcp2515.c: 256: buf[0+2] = (uint8_t) (canid >> 3);
  4208  0020CA  C081  F077         	movff	Mcp2515WriteCanId@canid,??_Mcp2515WriteCanId
  4209  0020CE  C082  F078         	movff	Mcp2515WriteCanId@canid+1,??_Mcp2515WriteCanId+1
  4210  0020D2  0100               	movlb	0	; () banked
  4211  0020D4  90D8               	bcf	status,0,c
  4212  0020D6  3378               	rrcf	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  4213  0020D8  3377               	rrcf	??_Mcp2515WriteCanId& (0+255),f,b
  4214  0020DA  0100               	movlb	0	; () banked
  4215  0020DC  90D8               	bcf	status,0,c
  4216  0020DE  3378               	rrcf	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  4217  0020E0  3377               	rrcf	??_Mcp2515WriteCanId& (0+255),f,b
  4218  0020E2  0100               	movlb	0	; () banked
  4219  0020E4  90D8               	bcf	status,0,c
  4220  0020E6  3378               	rrcf	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  4221  0020E8  3377               	rrcf	??_Mcp2515WriteCanId& (0+255),f,b
  4222  0020EA  0100               	movlb	0	; () banked
  4223  0020EC  5177               	movf	??_Mcp2515WriteCanId& (0+255),w,b
  4224  0020EE  0100               	movlb	0	; () banked
  4225  0020F0  6F7D               	movwf	(Mcp2515WriteCanId@buf+2)& (0+255),b
  4226                           
  4227                           ;mcp2515.c: 257: buf[1+2] = (uint8_t) ((canid & 0x07 )*32);
  4228  0020F2  C081  F077         	movff	Mcp2515WriteCanId@canid,??_Mcp2515WriteCanId
  4229  0020F6  0E07               	movlw	7
  4230  0020F8  0100               	movlb	0	; () banked
  4231  0020FA  1777               	andwf	??_Mcp2515WriteCanId& (0+255),f,b
  4232  0020FC  0E05               	movlw	5
  4233  0020FE  0100               	movlb	0	; () banked
  4234  002100  6F78               	movwf	(??_Mcp2515WriteCanId+1)& (0+255),b
  4235  002102                     u925:
  4236  002102  0100               	movlb	0	; () banked
  4237  002104  90D8               	bcf	status,0,c
  4238  002106  3777               	rlcf	??_Mcp2515WriteCanId& (0+255),f,b
  4239  002108  0100               	movlb	0	; () banked
  4240  00210A  2F78               	decfsz	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  4241  00210C  D7FA               	goto	u925
  4242  00210E  0100               	movlb	0	; () banked
  4243  002110  5177               	movf	??_Mcp2515WriteCanId& (0+255),w,b
  4244  002112  0100               	movlb	0	; () banked
  4245  002114  6F7E               	movwf	(Mcp2515WriteCanId@buf+3)& (0+255),b
  4246                           
  4247                           ; BSR set to: 0
  4248                           ;mcp2515.c: 258: buf[3+2] = 0;
  4249  002116  0E00               	movlw	0
  4250  002118  0100               	movlb	0	; () banked
  4251  00211A  6F80               	movwf	(Mcp2515WriteCanId@buf+5)& (0+255),b
  4252                           
  4253                           ; BSR set to: 0
  4254                           ;mcp2515.c: 259: buf[2+2] = 0;
  4255  00211C  0E00               	movlw	0
  4256  00211E  0100               	movlb	0	; () banked
  4257  002120  6F7F               	movwf	(Mcp2515WriteCanId@buf+4)& (0+255),b
  4258  002122                     l1977:
  4259                           
  4260                           ; BSR set to: 0
  4261                           ;mcp2515.c: 260: }
  4262                           ;mcp2515.c: 261: Spi_Write(buf,6);
  4263  002122  0E7B               	movlw	low Mcp2515WriteCanId@buf
  4264  002124  0100               	movlb	0	; () banked
  4265  002126  6F6C               	movwf	Spi_Write@tx& (0+255),b
  4266  002128  0E00               	movlw	high Mcp2515WriteCanId@buf
  4267  00212A  0100               	movlb	0	; () banked
  4268  00212C  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  4269  00212E  0E06               	movlw	6
  4270  002130  0100               	movlb	0	; () banked
  4271  002132  6F6E               	movwf	Spi_Write@size& (0+255),b
  4272  002134  0E00               	movlw	0
  4273  002136  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  4274  002138  0E00               	movlw	0
  4275  00213A  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  4276  00213C  0E00               	movlw	0
  4277  00213E  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  4278  002140  ECF5  F014         	call	_Spi_Write	;wreg free
  4279  002144  0012               	return		;funcret
  4280  002146                     __end_of_Mcp2515WriteCanId:
  4281                           	opt stack 0
  4282                           tblptru	equ	0xFF8
  4283                           tblptrh	equ	0xFF7
  4284                           tblptrl	equ	0xFF6
  4285                           tablat	equ	0xFF5
  4286                           prodh	equ	0xFF4
  4287                           prodl	equ	0xFF3
  4288                           intcon	equ	0xFF2
  4289                           intcon2	equ	0xFF1
  4290                           intcon3	equ	0xFF0
  4291                           postinc0	equ	0xFEE
  4292                           wreg	equ	0xFE8
  4293                           indf1	equ	0xFE7
  4294                           postinc1	equ	0xFE6
  4295                           postdec1	equ	0xFE5
  4296                           fsr1h	equ	0xFE2
  4297                           fsr1l	equ	0xFE1
  4298                           indf2	equ	0xFDF
  4299                           postinc2	equ	0xFDE
  4300                           fsr2h	equ	0xFDA
  4301                           fsr2l	equ	0xFD9
  4302                           status	equ	0xFD8
  4303                           
  4304 ;; *************** function _Spi_Write *****************
  4305 ;; Defined at:
  4306 ;;		line 332 in file "can.c"
  4307 ;; Parameters:    Size  Location     Type
  4308 ;;  tx              2   12[BANK0 ] PTR unsigned char 
  4309 ;;		 -> Mcp2515WriteCanMsg@buf(10), Mcp2515WriteCanId@buf(6), Mcp2515Sleep@cmdMask4(3), Mcp2515_Init@cmdWrite3(3), 
  4310 ;;		 -> Mcp2515_Init@cmdMask4(4), Mcp2515_Reset@cmd(1), Can_SendMessage@buf(4), Can_ReadMessage@buf(4), 
  4311 ;;  size            4   14[BANK0 ] unsigned long 
  4312 ;; Auto vars:     Size  Location     Type
  4313 ;;		None
  4314 ;; Return value:  Size  Location     Type
  4315 ;;                  1    wreg      void 
  4316 ;; Registers used:
  4317 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4318 ;; Tracked objects:
  4319 ;;		On entry : 0/0
  4320 ;;		On exit  : 0/0
  4321 ;;		Unchanged: 0/0
  4322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4323 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4326 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4327 ;;Total ram usage:        6 bytes
  4328 ;; Hardware stack levels used:    1
  4329 ;; Hardware stack levels required when called:    9
  4330 ;; This function calls:
  4331 ;;		_SPIRW
  4332 ;; This function is called by:
  4333 ;;		_Mcp2515_Reset
  4334 ;;		_Mcp2515_Init
  4335 ;;		_Mcp2515WriteCanId
  4336 ;;		_Mcp2515Sleep
  4337 ;; This function uses a non-reentrant model
  4338 ;;
  4339                           
  4340                           	psect	text15
  4341  0029EA                     __ptext15:
  4342                           	opt stack 0
  4343  0029EA                     _Spi_Write:
  4344                           	opt stack 18
  4345                           
  4346                           ;can.c: 334: SPIRW(tx, 0, size);
  4347                           
  4348                           ;incstack = 0
  4349  0029EA  C06C  F060         	movff	Spi_Write@tx,SPIRW@tx
  4350  0029EE  C06D  F061         	movff	Spi_Write@tx+1,SPIRW@tx+1
  4351  0029F2  0E00               	movlw	0
  4352  0029F4  0100               	movlb	0	; () banked
  4353  0029F6  6F62               	movwf	SPIRW@rx& (0+255),b
  4354  0029F8  0E00               	movlw	0
  4355  0029FA  0100               	movlb	0	; () banked
  4356  0029FC  6F63               	movwf	(SPIRW@rx+1)& (0+255),b
  4357  0029FE  C06E  F064         	movff	Spi_Write@size,SPIRW@size
  4358  002A02  C06F  F065         	movff	Spi_Write@size+1,SPIRW@size+1
  4359  002A06  C070  F066         	movff	Spi_Write@size+2,SPIRW@size+2
  4360  002A0A  C071  F067         	movff	Spi_Write@size+3,SPIRW@size+3
  4361  002A0E  EC7F  F011         	call	_SPIRW	;wreg free
  4362  002A12  0012               	return		;funcret
  4363  002A14                     __end_of_Spi_Write:
  4364                           	opt stack 0
  4365                           tblptru	equ	0xFF8
  4366                           tblptrh	equ	0xFF7
  4367                           tblptrl	equ	0xFF6
  4368                           tablat	equ	0xFF5
  4369                           prodh	equ	0xFF4
  4370                           prodl	equ	0xFF3
  4371                           intcon	equ	0xFF2
  4372                           intcon2	equ	0xFF1
  4373                           intcon3	equ	0xFF0
  4374                           postinc0	equ	0xFEE
  4375                           wreg	equ	0xFE8
  4376                           indf1	equ	0xFE7
  4377                           postinc1	equ	0xFE6
  4378                           postdec1	equ	0xFE5
  4379                           fsr1h	equ	0xFE2
  4380                           fsr1l	equ	0xFE1
  4381                           indf2	equ	0xFDF
  4382                           postinc2	equ	0xFDE
  4383                           fsr2h	equ	0xFDA
  4384                           fsr2l	equ	0xFD9
  4385                           status	equ	0xFD8
  4386                           
  4387 ;; *************** function _SPIRW *****************
  4388 ;; Defined at:
  4389 ;;		line 293 in file "can.c"
  4390 ;; Parameters:    Size  Location     Type
  4391 ;;  tx              2    0[BANK0 ] PTR const unsigned char 
  4392 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515WriteCanMsg@buf(10), Mcp2515WriteCanId@buf(6), Mcp2515ReadCanMsg@cmd(10),
      + 
  4393 ;;		 -> Mcp2515ReadCanId@msg(6), Mcp2515Sleep@cmdMask4(3), Mcp2515_Init@cmdWrite3(3), Mcp2515_Init@cmdMask4(4), 
  4394 ;;		 -> Mcp2515_Reset@cmd(1), Can_SendMessage@buf(4), Can_ReadMessage@buf(4), Can_GetStatus@msg4(4), 
  4395 ;;		 -> Can_GetStatus@msg(3), 
  4396 ;;  rx              2    2[BANK0 ] PTR unsigned char 
  4397 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515ReadCanMsg@cmd(10), Mcp2515ReadCanId@msg(6), Can_ReadMessage@buf(4), 
  4398 ;;		 -> Can_GetStatus@msg4(4), Can_GetStatus@msg(3), NULL(0), 
  4399 ;;  size            4    4[BANK0 ] unsigned long 
  4400 ;; Auto vars:     Size  Location     Type
  4401 ;;  i               4    8[BANK0 ] unsigned long 
  4402 ;; Return value:  Size  Location     Type
  4403 ;;                  1    wreg      void 
  4404 ;; Registers used:
  4405 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4406 ;; Tracked objects:
  4407 ;;		On entry : 0/0
  4408 ;;		On exit  : 0/0
  4409 ;;		Unchanged: 0/0
  4410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4411 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4412 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4414 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4415 ;;Total ram usage:       12 bytes
  4416 ;; Hardware stack levels used:    1
  4417 ;; Hardware stack levels required when called:    8
  4418 ;; This function calls:
  4419 ;;		Nothing
  4420 ;; This function is called by:
  4421 ;;		_Spi_Write
  4422 ;; This function uses a non-reentrant model
  4423 ;;
  4424                           
  4425                           	psect	text16
  4426  0022FE                     __ptext16:
  4427                           	opt stack 0
  4428  0022FE                     _SPIRW:
  4429                           	opt stack 18
  4430                           
  4431                           ;can.c: 295: uint32_t i;
  4432                           ;can.c: 297: SSPCON1 = 0b00111010;
  4433                           
  4434                           ;incstack = 0
  4435  0022FE  0E3A               	movlw	58
  4436  002300  6EC6               	movwf	4038,c	;volatile
  4437                           
  4438                           ;can.c: 299: LATD1 = 0;
  4439  002302  928C               	bcf	3980,1,c	;volatile
  4440                           
  4441                           ;can.c: 300: for(i=0;i<size;i++)
  4442  002304  0E00               	movlw	0
  4443  002306  0100               	movlb	0	; () banked
  4444  002308  6F68               	movwf	SPIRW@i& (0+255),b
  4445  00230A  0E00               	movlw	0
  4446  00230C  6F69               	movwf	(SPIRW@i+1)& (0+255),b
  4447  00230E  0E00               	movlw	0
  4448  002310  6F6A               	movwf	(SPIRW@i+2)& (0+255),b
  4449  002312  0E00               	movlw	0
  4450  002314  6F6B               	movwf	(SPIRW@i+3)& (0+255),b
  4451  002316  D028               	goto	l1781
  4452  002318                     l1773:
  4453                           
  4454                           ; BSR set to: 0
  4455                           ;can.c: 301: {
  4456                           ;can.c: 302: SSPBUF = tx[i];
  4457  002318  0100               	movlb	0	; () banked
  4458  00231A  5168               	movf	SPIRW@i& (0+255),w,b
  4459  00231C  0100               	movlb	0	; () banked
  4460  00231E  2560               	addwf	SPIRW@tx& (0+255),w,b
  4461  002320  6ED9               	movwf	fsr2l,c
  4462  002322  0100               	movlb	0	; () banked
  4463  002324  5169               	movf	(SPIRW@i+1)& (0+255),w,b
  4464  002326  0100               	movlb	0	; () banked
  4465  002328  2161               	addwfc	(SPIRW@tx+1)& (0+255),w,b
  4466  00232A  6EDA               	movwf	fsr2h,c
  4467  00232C  50DF               	movf	indf2,w,c
  4468  00232E  6EC9               	movwf	4041,c	;volatile
  4469  002330                     l243:
  4470  002330  A69E               	btfss	3998,3,c	;volatile
  4471  002332  D7FE               	goto	l243
  4472                           
  4473                           ;can.c: 304: SSP1IF = 0;
  4474  002334  969E               	bcf	3998,3,c	;volatile
  4475                           
  4476                           ;can.c: 305: if(rx != 0)
  4477  002336  0100               	movlb	0	; () banked
  4478  002338  5162               	movf	SPIRW@rx& (0+255),w,b
  4479  00233A  0100               	movlb	0	; () banked
  4480  00233C  1163               	iorwf	(SPIRW@rx+1)& (0+255),w,b
  4481  00233E  B4D8               	btfsc	status,2,c
  4482  002340  D00C               	goto	l1779
  4483                           
  4484                           ; BSR set to: 0
  4485                           ;can.c: 306: rx[i] = SSPBUF;
  4486  002342  0100               	movlb	0	; () banked
  4487  002344  5168               	movf	SPIRW@i& (0+255),w,b
  4488  002346  0100               	movlb	0	; () banked
  4489  002348  2562               	addwf	SPIRW@rx& (0+255),w,b
  4490  00234A  6ED9               	movwf	fsr2l,c
  4491  00234C  0100               	movlb	0	; () banked
  4492  00234E  5169               	movf	(SPIRW@i+1)& (0+255),w,b
  4493  002350  0100               	movlb	0	; () banked
  4494  002352  2163               	addwfc	(SPIRW@rx+1)& (0+255),w,b
  4495  002354  6EDA               	movwf	fsr2h,c
  4496  002356  CFC9 FFDF          	movff	4041,indf2	;volatile
  4497  00235A                     l1779:
  4498                           
  4499                           ; BSR set to: 0
  4500  00235A  0E01               	movlw	1
  4501  00235C  0100               	movlb	0	; () banked
  4502  00235E  2768               	addwf	SPIRW@i& (0+255),f,b
  4503  002360  0E00               	movlw	0
  4504  002362  2369               	addwfc	(SPIRW@i+1)& (0+255),f,b
  4505  002364  236A               	addwfc	(SPIRW@i+2)& (0+255),f,b
  4506  002366  236B               	addwfc	(SPIRW@i+3)& (0+255),f,b
  4507  002368                     l1781:
  4508                           
  4509                           ; BSR set to: 0
  4510  002368  0100               	movlb	0	; () banked
  4511  00236A  5164               	movf	SPIRW@size& (0+255),w,b
  4512  00236C  0100               	movlb	0	; () banked
  4513  00236E  5D68               	subwf	SPIRW@i& (0+255),w,b
  4514  002370  0100               	movlb	0	; () banked
  4515  002372  5165               	movf	(SPIRW@size+1)& (0+255),w,b
  4516  002374  0100               	movlb	0	; () banked
  4517  002376  5969               	subwfb	(SPIRW@i+1)& (0+255),w,b
  4518  002378  0100               	movlb	0	; () banked
  4519  00237A  5166               	movf	(SPIRW@size+2)& (0+255),w,b
  4520  00237C  0100               	movlb	0	; () banked
  4521  00237E  596A               	subwfb	(SPIRW@i+2)& (0+255),w,b
  4522  002380  0100               	movlb	0	; () banked
  4523  002382  5167               	movf	(SPIRW@size+3)& (0+255),w,b
  4524  002384  0100               	movlb	0	; () banked
  4525  002386  596B               	subwfb	(SPIRW@i+3)& (0+255),w,b
  4526  002388  A0D8               	btfss	status,0,c
  4527  00238A  D7C6               	goto	l1773
  4528                           
  4529                           ; BSR set to: 0
  4530                           ;can.c: 307: }
  4531                           ;can.c: 308: LATD1 = 1;
  4532  00238C  828C               	bsf	3980,1,c	;volatile
  4533                           
  4534                           ; BSR set to: 0
  4535  00238E  0012               	return		;funcret
  4536  002390                     __end_of_SPIRW:
  4537                           	opt stack 0
  4538                           tblptru	equ	0xFF8
  4539                           tblptrh	equ	0xFF7
  4540                           tblptrl	equ	0xFF6
  4541                           tablat	equ	0xFF5
  4542                           prodh	equ	0xFF4
  4543                           prodl	equ	0xFF3
  4544                           intcon	equ	0xFF2
  4545                           intcon2	equ	0xFF1
  4546                           intcon3	equ	0xFF0
  4547                           postinc0	equ	0xFEE
  4548                           wreg	equ	0xFE8
  4549                           indf1	equ	0xFE7
  4550                           postinc1	equ	0xFE6
  4551                           postdec1	equ	0xFE5
  4552                           fsr1h	equ	0xFE2
  4553                           fsr1l	equ	0xFE1
  4554                           indf2	equ	0xFDF
  4555                           postinc2	equ	0xFDE
  4556                           fsr2h	equ	0xFDA
  4557                           fsr2l	equ	0xFD9
  4558                           status	equ	0xFD8
  4559                           
  4560 ;; *************** function _high_isr *****************
  4561 ;; Defined at:
  4562 ;;		line 3 in file "interrupt.c"
  4563 ;; Parameters:    Size  Location     Type
  4564 ;;		None
  4565 ;; Auto vars:     Size  Location     Type
  4566 ;;		None
  4567 ;; Return value:  Size  Location     Type
  4568 ;;                  1    wreg      void 
  4569 ;; Registers used:
  4570 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4571 ;; Tracked objects:
  4572 ;;		On entry : 0/0
  4573 ;;		On exit  : 0/0
  4574 ;;		Unchanged: 0/0
  4575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4578 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4579 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4580 ;;Total ram usage:       14 bytes
  4581 ;; Hardware stack levels used:    1
  4582 ;; Hardware stack levels required when called:    7
  4583 ;; This function calls:
  4584 ;;		_Can_Isr
  4585 ;; This function is called by:
  4586 ;;		Interrupt level 2
  4587 ;; This function uses a non-reentrant model
  4588 ;;
  4589                           
  4590                           	psect	intcode
  4591  000008                     __pintcode:
  4592                           	opt stack 0
  4593  000008                     _high_isr:
  4594                           	opt stack 17
  4595                           
  4596                           ; BSR set to: 0
  4597                           ;incstack = 0
  4598  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4599  00000A  CFFA F04A          	movff	pclath,??_high_isr
  4600  00000E  CFFB F04B          	movff	pclatu,??_high_isr+1
  4601  000012  CFE9 F04C          	movff	fsr0l,??_high_isr+2
  4602  000016  CFEA F04D          	movff	fsr0h,??_high_isr+3
  4603  00001A  CFE1 F04E          	movff	fsr1l,??_high_isr+4
  4604  00001E  CFE2 F04F          	movff	fsr1h,??_high_isr+5
  4605  000022  CFD9 F050          	movff	fsr2l,??_high_isr+6
  4606  000026  CFDA F051          	movff	fsr2h,??_high_isr+7
  4607  00002A  CFF3 F052          	movff	prodl,??_high_isr+8
  4608  00002E  CFF4 F053          	movff	prodh,??_high_isr+9
  4609  000032  CFF6 F054          	movff	tblptrl,??_high_isr+10
  4610  000036  CFF7 F055          	movff	tblptrh,??_high_isr+11
  4611  00003A  CFF8 F056          	movff	tblptru,??_high_isr+12
  4612  00003E  CFF5 F057          	movff	tablat,??_high_isr+13
  4613                           
  4614                           ;interrupt.c: 4: if((INT3IF == 1)&&(INT3IE == 1))
  4615  000042  B4F0               	btfsc	intcon3,2,c	;volatile
  4616  000044  AAF0               	btfss	intcon3,5,c	;volatile
  4617  000046  D005               	goto	i2l293
  4618                           
  4619                           ;interrupt.c: 5: {
  4620                           ;interrupt.c: 6: INT3IF = 0;
  4621  000048  94F0               	bcf	intcon3,2,c	;volatile
  4622                           
  4623                           ;interrupt.c: 7: Can_Isr();
  4624  00004A  EC22  F014         	call	_Can_Isr	;wreg free
  4625                           
  4626                           ;interrupt.c: 8: if(RB3 == 0)
  4627  00004E  A681               	btfss	3969,3,c	;volatile
  4628                           
  4629                           ;interrupt.c: 9: {
  4630                           ;interrupt.c: 10: INT3IF = 1;
  4631  000050  84F0               	bsf	intcon3,2,c	;volatile
  4632  000052                     i2l293:
  4633                           
  4634                           ;interrupt.c: 11: }
  4635                           ;interrupt.c: 13: }
  4636                           ;interrupt.c: 14: if(TMR0IF == 1){
  4637  000052  A4F2               	btfss	intcon,2,c	;volatile
  4638  000054  D007               	goto	i2l296
  4639                           
  4640                           ;interrupt.c: 16: T0CONbits.TMR0ON = 1;
  4641  000056  8ED5               	bsf	4053,7,c	;volatile
  4642                           
  4643                           ;interrupt.c: 22: TMR0IF = 0;
  4644  000058  94F2               	bcf	intcon,2,c	;volatile
  4645                           
  4646                           ;interrupt.c: 23: TMR0 = 0xe17b;
  4647  00005A  0EE1               	movlw	225
  4648  00005C  6ED7               	movwf	4055,c	;volatile
  4649  00005E  0E7B               	movlw	123
  4650  000060  6ED6               	movwf	4054,c	;volatile
  4651                           
  4652                           ;interrupt.c: 24: T0CONbits.TMR0ON = 1;
  4653  000062  8ED5               	bsf	4053,7,c	;volatile
  4654  000064                     i2l296:
  4655  000064  C057  FFF5         	movff	??_high_isr+13,tablat
  4656  000068  C056  FFF8         	movff	??_high_isr+12,tblptru
  4657  00006C  C055  FFF7         	movff	??_high_isr+11,tblptrh
  4658  000070  C054  FFF6         	movff	??_high_isr+10,tblptrl
  4659  000074  C053  FFF4         	movff	??_high_isr+9,prodh
  4660  000078  C052  FFF3         	movff	??_high_isr+8,prodl
  4661  00007C  C051  FFDA         	movff	??_high_isr+7,fsr2h
  4662  000080  C050  FFD9         	movff	??_high_isr+6,fsr2l
  4663  000084  C04F  FFE2         	movff	??_high_isr+5,fsr1h
  4664  000088  C04E  FFE1         	movff	??_high_isr+4,fsr1l
  4665  00008C  C04D  FFEA         	movff	??_high_isr+3,fsr0h
  4666  000090  C04C  FFE9         	movff	??_high_isr+2,fsr0l
  4667  000094  C04B  FFFB         	movff	??_high_isr+1,pclatu
  4668  000098  C04A  FFFA         	movff	??_high_isr,pclath
  4669  00009C  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4670  00009E  0011               	retfie		f
  4671  0000A0                     __end_of_high_isr:
  4672                           	opt stack 0
  4673                           pclatu	equ	0xFFB
  4674                           pclath	equ	0xFFA
  4675                           tblptru	equ	0xFF8
  4676                           tblptrh	equ	0xFF7
  4677                           tblptrl	equ	0xFF6
  4678                           tablat	equ	0xFF5
  4679                           prodh	equ	0xFF4
  4680                           prodl	equ	0xFF3
  4681                           intcon	equ	0xFF2
  4682                           intcon2	equ	0xFF1
  4683                           intcon3	equ	0xFF0
  4684                           postinc0	equ	0xFEE
  4685                           fsr0h	equ	0xFEA
  4686                           fsr0l	equ	0xFE9
  4687                           wreg	equ	0xFE8
  4688                           indf1	equ	0xFE7
  4689                           postinc1	equ	0xFE6
  4690                           postdec1	equ	0xFE5
  4691                           fsr1h	equ	0xFE2
  4692                           fsr1l	equ	0xFE1
  4693                           indf2	equ	0xFDF
  4694                           postinc2	equ	0xFDE
  4695                           fsr2h	equ	0xFDA
  4696                           fsr2l	equ	0xFD9
  4697                           status	equ	0xFD8
  4698                           
  4699 ;; *************** function _Can_Isr *****************
  4700 ;; Defined at:
  4701 ;;		line 50 in file "can.c"
  4702 ;; Parameters:    Size  Location     Type
  4703 ;;		None
  4704 ;; Auto vars:     Size  Location     Type
  4705 ;;  retCode         1   72[COMRAM] unsigned char 
  4706 ;; Return value:  Size  Location     Type
  4707 ;;                  1    wreg      void 
  4708 ;; Registers used:
  4709 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4710 ;; Tracked objects:
  4711 ;;		On entry : 0/0
  4712 ;;		On exit  : 0/0
  4713 ;;		Unchanged: 0/0
  4714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4716 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4717 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4718 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4719 ;;Total ram usage:        2 bytes
  4720 ;; Hardware stack levels used:    1
  4721 ;; Hardware stack levels required when called:    6
  4722 ;; This function calls:
  4723 ;;		_Can_GetStatus
  4724 ;;		_Can_OutBufferStatus
  4725 ;;		_Can_ReadInBuffer
  4726 ;;		_Can_WriteOutBuffer
  4727 ;; This function is called by:
  4728 ;;		_high_isr
  4729 ;; This function uses a non-reentrant model
  4730 ;;
  4731                           
  4732                           	psect	text18
  4733  002844                     __ptext18:
  4734                           	opt stack 0
  4735  002844                     _Can_Isr:
  4736                           	opt stack 17
  4737                           
  4738                           ;can.c: 52: static uint8_t nbTxBuf=3;
  4739                           ;can.c: 53: uint8_t retCode;
  4740                           ;can.c: 55: retCode = Can_GetStatus();
  4741                           
  4742                           ;incstack = 0
  4743  002844  ECC6  F013         	call	_Can_GetStatus	;wreg free
  4744  002848  6E49               	movwf	Can_Isr@retCode,c
  4745                           
  4746                           ;can.c: 57: if((retCode & 0x03) != 0)
  4747  00284A  C049  F048         	movff	Can_Isr@retCode,??_Can_Isr
  4748  00284E  0E03               	movlw	3
  4749  002850  1648               	andwf	??_Can_Isr,f,c
  4750  002852  A4D8               	btfss	status,2,c
  4751                           
  4752                           ;can.c: 58: {
  4753                           ;can.c: 59: Can_ReadInBuffer();
  4754  002854  EC46  F014         	call	_Can_ReadInBuffer	;wreg free
  4755                           
  4756                           ;can.c: 60: }
  4757                           ;can.c: 62: if((retCode & 0x1C) != 0)
  4758  002858  C049  F048         	movff	Can_Isr@retCode,??_Can_Isr
  4759  00285C  0E1C               	movlw	28
  4760  00285E  1648               	andwf	??_Can_Isr,f,c
  4761  002860  B4D8               	btfsc	status,2,c
  4762  002862  D00B               	goto	i2l2419
  4763                           
  4764                           ;can.c: 63: {
  4765                           ;can.c: 64: if((retCode & 0x10) != 0)
  4766  002864  B849               	btfsc	Can_Isr@retCode,4,c
  4767                           
  4768                           ;can.c: 65: {
  4769                           ;can.c: 66: nbTxBuf++;
  4770  002866  2A5E               	incf	Can_Isr@nbTxBuf,f,c
  4771                           
  4772                           ;can.c: 67: }
  4773                           ;can.c: 68: if((retCode & 0x08) != 0)
  4774  002868  B649               	btfsc	Can_Isr@retCode,3,c
  4775                           
  4776                           ;can.c: 69: {
  4777                           ;can.c: 70: nbTxBuf++;
  4778  00286A  2A5E               	incf	Can_Isr@nbTxBuf,f,c
  4779                           
  4780                           ;can.c: 71: }
  4781                           ;can.c: 72: if((retCode & 0x04) != 0)
  4782  00286C  A449               	btfss	Can_Isr@retCode,2,c
  4783  00286E  D005               	goto	i2l2419
  4784                           
  4785                           ;can.c: 73: {
  4786                           ;can.c: 74: nbTxBuf++;
  4787  002870  2A5E               	incf	Can_Isr@nbTxBuf,f,c
  4788                           
  4789                           ;can.c: 75: }
  4790                           ;can.c: 76: }
  4791                           ;can.c: 78: while((Can_OutBufferStatus() != 0) && (nbTxBuf != 0))
  4792  002872  D003               	goto	i2l2419
  4793  002874                     i2l2415:
  4794                           
  4795                           ;can.c: 79: {
  4796                           ;can.c: 80: Can_WriteOutBuffer();
  4797  002874  EC30  F015         	call	_Can_WriteOutBuffer	;wreg free
  4798                           
  4799                           ;can.c: 81: nbTxBuf--;
  4800  002878  065E               	decf	Can_Isr@nbTxBuf,f,c
  4801  00287A                     i2l2419:
  4802  00287A  EC4C  F015         	call	_Can_OutBufferStatus	;wreg free
  4803  00287E  0900               	iorlw	0
  4804  002880  B4D8               	btfsc	status,2,c
  4805  002882  0012               	return	
  4806  002884  505E               	movf	Can_Isr@nbTxBuf,w,c
  4807  002886  B4D8               	btfsc	status,2,c
  4808  002888  0012               	return	
  4809  00288A  D7F4               	goto	i2l2415
  4810  00288C                     __end_of_Can_Isr:
  4811                           	opt stack 0
  4812                           pclatu	equ	0xFFB
  4813                           pclath	equ	0xFFA
  4814                           tblptru	equ	0xFF8
  4815                           tblptrh	equ	0xFF7
  4816                           tblptrl	equ	0xFF6
  4817                           tablat	equ	0xFF5
  4818                           prodh	equ	0xFF4
  4819                           prodl	equ	0xFF3
  4820                           intcon	equ	0xFF2
  4821                           intcon2	equ	0xFF1
  4822                           intcon3	equ	0xFF0
  4823                           postinc0	equ	0xFEE
  4824                           fsr0h	equ	0xFEA
  4825                           fsr0l	equ	0xFE9
  4826                           wreg	equ	0xFE8
  4827                           indf1	equ	0xFE7
  4828                           postinc1	equ	0xFE6
  4829                           postdec1	equ	0xFE5
  4830                           fsr1h	equ	0xFE2
  4831                           fsr1l	equ	0xFE1
  4832                           indf2	equ	0xFDF
  4833                           postinc2	equ	0xFDE
  4834                           fsr2h	equ	0xFDA
  4835                           fsr2l	equ	0xFD9
  4836                           status	equ	0xFD8
  4837                           
  4838 ;; *************** function _Can_WriteOutBuffer *****************
  4839 ;; Defined at:
  4840 ;;		line 127 in file "can.c"
  4841 ;; Parameters:    Size  Location     Type
  4842 ;;		None
  4843 ;; Auto vars:     Size  Location     Type
  4844 ;;		None
  4845 ;; Return value:  Size  Location     Type
  4846 ;;                  1    wreg      unsigned char 
  4847 ;; Registers used:
  4848 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4849 ;; Tracked objects:
  4850 ;;		On entry : 0/0
  4851 ;;		On exit  : 0/0
  4852 ;;		Unchanged: 0/0
  4853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4857 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4858 ;;Total ram usage:        0 bytes
  4859 ;; Hardware stack levels used:    1
  4860 ;; Hardware stack levels required when called:    5
  4861 ;; This function calls:
  4862 ;;		_Can_SendMessage
  4863 ;; This function is called by:
  4864 ;;		_Can_Isr
  4865 ;; This function uses a non-reentrant model
  4866 ;;
  4867                           
  4868                           	psect	text19
  4869  002A60                     __ptext19:
  4870                           	opt stack 0
  4871  002A60                     _Can_WriteOutBuffer:
  4872                           	opt stack 17
  4873                           
  4874                           ;can.c: 129: Can_SendMessage(&txBuffer[txBufferPtrOut]);
  4875                           
  4876                           ;incstack = 0
  4877  002A60  5058               	movf	_txBufferPtrOut,w,c
  4878  002A62  0D11               	mullw	17
  4879  002A64  0E00               	movlw	low _txBuffer
  4880  002A66  24F3               	addwf	prodl,w,c
  4881  002A68  6E36               	movwf	Can_SendMessage@msg,c
  4882  002A6A  0E01               	movlw	high _txBuffer
  4883  002A6C  20F4               	addwfc	prodh,w,c
  4884  002A6E  6E37               	movwf	Can_SendMessage@msg+1,c
  4885  002A70  EC94  F013         	call	_Can_SendMessage	;wreg free
  4886                           
  4887                           ;can.c: 130: txBufferPtrOut = (txBufferPtrOut + 1) % 4;
  4888  002A74  2858               	incf	_txBufferPtrOut,w,c
  4889  002A76  0B03               	andlw	3
  4890  002A78  6E58               	movwf	_txBufferPtrOut,c
  4891                           
  4892                           ;can.c: 131: txBufferCount--;
  4893  002A7A  0100               	movlb	0	; () banked
  4894  002A7C  07AB               	decf	_txBufferCount& (0+255),f,b
  4895  002A7E  0012               	return	
  4896  002A80                     __end_of_Can_WriteOutBuffer:
  4897                           	opt stack 0
  4898                           pclatu	equ	0xFFB
  4899                           pclath	equ	0xFFA
  4900                           tblptru	equ	0xFF8
  4901                           tblptrh	equ	0xFF7
  4902                           tblptrl	equ	0xFF6
  4903                           tablat	equ	0xFF5
  4904                           prodh	equ	0xFF4
  4905                           prodl	equ	0xFF3
  4906                           intcon	equ	0xFF2
  4907                           intcon2	equ	0xFF1
  4908                           intcon3	equ	0xFF0
  4909                           postinc0	equ	0xFEE
  4910                           fsr0h	equ	0xFEA
  4911                           fsr0l	equ	0xFE9
  4912                           wreg	equ	0xFE8
  4913                           indf1	equ	0xFE7
  4914                           postinc1	equ	0xFE6
  4915                           postdec1	equ	0xFE5
  4916                           fsr1h	equ	0xFE2
  4917                           fsr1l	equ	0xFE1
  4918                           indf2	equ	0xFDF
  4919                           postinc2	equ	0xFDE
  4920                           fsr2h	equ	0xFDA
  4921                           fsr2l	equ	0xFD9
  4922                           status	equ	0xFD8
  4923                           
  4924 ;; *************** function _Can_SendMessage *****************
  4925 ;; Defined at:
  4926 ;;		line 426 in file "can.c"
  4927 ;; Parameters:    Size  Location     Type
  4928 ;;  msg             2   53[COMRAM] PTR const struct CANMESS
  4929 ;;		 -> txBuffer(68), 
  4930 ;; Auto vars:     Size  Location     Type
  4931 ;;  buf             4   55[COMRAM] unsigned char [4]
  4932 ;;  txbuf_n         1   60[COMRAM] unsigned char 
  4933 ;;  res             1   59[COMRAM] unsigned char 
  4934 ;; Return value:  Size  Location     Type
  4935 ;;                  1    wreg      unsigned char 
  4936 ;; Registers used:
  4937 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4938 ;; Tracked objects:
  4939 ;;		On entry : 0/0
  4940 ;;		On exit  : 0/0
  4941 ;;		Unchanged: 0/0
  4942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4943 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4944 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4946 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4947 ;;Total ram usage:        8 bytes
  4948 ;; Hardware stack levels used:    1
  4949 ;; Hardware stack levels required when called:    4
  4950 ;; This function calls:
  4951 ;;		_Mcp2515GetNextFreeTXBuf
  4952 ;;		_Mcp2515WriteCanMsg
  4953 ;;		i2_Spi_Write
  4954 ;; This function is called by:
  4955 ;;		_Can_WriteOutBuffer
  4956 ;; This function uses a non-reentrant model
  4957 ;;
  4958                           
  4959                           	psect	text20
  4960  002728                     __ptext20:
  4961                           	opt stack 0
  4962  002728                     _Can_SendMessage:
  4963                           	opt stack 17
  4964  002728                     
  4965                           ;can.c: 433: {
  4966                           ;can.c: 434: res = Mcp2515GetNextFreeTXBuf(&txbuf_n);
  4967  002728  0E3D               	movlw	low Can_SendMessage@txbuf_n
  4968  00272A  6E13               	movwf	Mcp2515GetNextFreeTXBuf@txbuf_n,c
  4969  00272C  0E00               	movlw	high Can_SendMessage@txbuf_n
  4970  00272E  6E14               	movwf	Mcp2515GetNextFreeTXBuf@txbuf_n+1,c
  4971  002730  ECC8  F011         	call	_Mcp2515GetNextFreeTXBuf	;wreg free
  4972  002734  6E3C               	movwf	Can_SendMessage@res,c
  4973                           
  4974                           ;can.c: 436: } while (res == (2));
  4975  002736  0E02               	movlw	2
  4976  002738  183C               	xorwf	Can_SendMessage@res,w,c
  4977  00273A  B4D8               	btfsc	status,2,c
  4978  00273C  D7F5               	goto	i2l2103
  4979                           
  4980                           ;can.c: 438: if (res != (2))
  4981  00273E  0E02               	movlw	2
  4982  002740  183C               	xorwf	Can_SendMessage@res,w,c
  4983  002742  B4D8               	btfsc	status,2,c
  4984  002744  0012               	return	
  4985                           
  4986                           ;can.c: 439: {
  4987                           ;can.c: 440: Mcp2515WriteCanMsg( txbuf_n, msg);
  4988  002746  C036  F024         	movff	Can_SendMessage@msg,Mcp2515WriteCanMsg@msg
  4989  00274A  C037  F025         	movff	Can_SendMessage@msg+1,Mcp2515WriteCanMsg@msg+1
  4990  00274E  503D               	movf	Can_SendMessage@txbuf_n,w,c
  4991  002750  EC07  F00F         	call	_Mcp2515WriteCanMsg
  4992                           
  4993                           ;can.c: 441: buf[0] = 0x02;
  4994  002754  0E02               	movlw	2
  4995  002756  6E38               	movwf	Can_SendMessage@buf,c
  4996                           
  4997                           ;can.c: 442: buf[1] = txbuf_n-1;
  4998  002758  043D               	decf	Can_SendMessage@txbuf_n,w,c
  4999  00275A  6E39               	movwf	Can_SendMessage@buf+1,c
  5000                           
  5001                           ;can.c: 443: buf[2] = 0x08 | msg->txPrio;
  5002  00275C  EE20 F010          	lfsr	2,16
  5003  002760  5036               	movf	Can_SendMessage@msg,w,c
  5004  002762  26D9               	addwf	fsr2l,f,c
  5005  002764  5037               	movf	Can_SendMessage@msg+1,w,c
  5006  002766  22DA               	addwfc	fsr2h,f,c
  5007  002768  50DF               	movf	indf2,w,c
  5008  00276A  0908               	iorlw	8
  5009  00276C  6E3A               	movwf	Can_SendMessage@buf+2,c
  5010                           
  5011                           ;can.c: 444: Spi_Write(buf,3);
  5012  00276E  0E38               	movlw	low Can_SendMessage@buf
  5013  002770  6E0D               	movwf	i2Spi_Write@tx,c
  5014  002772  0E00               	movlw	high Can_SendMessage@buf
  5015  002774  6E0E               	movwf	i2Spi_Write@tx+1,c
  5016  002776  0E03               	movlw	3
  5017  002778  6E0F               	movwf	i2Spi_Write@size,c
  5018  00277A  0E00               	movlw	0
  5019  00277C  6E10               	movwf	i2Spi_Write@size+1,c
  5020  00277E  0E00               	movlw	0
  5021  002780  6E11               	movwf	i2Spi_Write@size+2,c
  5022  002782  0E00               	movlw	0
  5023  002784  6E12               	movwf	i2Spi_Write@size+3,c
  5024  002786  EC0A  F015         	call	i2_Spi_Write	;wreg free
  5025                           
  5026                           ;can.c: 447: else
  5027                           ;can.c: 448: {
  5028                           ;can.c: 449: return (2);
  5029                           ;	Return value of _Can_SendMessage is never used
  5030                           
  5031                           ;can.c: 446: }
  5032                           
  5033                           ;can.c: 445: return (0);
  5034                           ;	Return value of _Can_SendMessage is never used
  5035  00278A  0012               	return	
  5036  00278C                     __end_of_Can_SendMessage:
  5037                           	opt stack 0
  5038                           pclatu	equ	0xFFB
  5039                           pclath	equ	0xFFA
  5040                           tblptru	equ	0xFF8
  5041                           tblptrh	equ	0xFF7
  5042                           tblptrl	equ	0xFF6
  5043                           tablat	equ	0xFF5
  5044                           prodh	equ	0xFF4
  5045                           prodl	equ	0xFF3
  5046                           intcon	equ	0xFF2
  5047                           intcon2	equ	0xFF1
  5048                           intcon3	equ	0xFF0
  5049                           postinc0	equ	0xFEE
  5050                           fsr0h	equ	0xFEA
  5051                           fsr0l	equ	0xFE9
  5052                           wreg	equ	0xFE8
  5053                           indf1	equ	0xFE7
  5054                           postinc1	equ	0xFE6
  5055                           postdec1	equ	0xFE5
  5056                           fsr1h	equ	0xFE2
  5057                           fsr1l	equ	0xFE1
  5058                           indf2	equ	0xFDF
  5059                           postinc2	equ	0xFDE
  5060                           fsr2h	equ	0xFDA
  5061                           fsr2l	equ	0xFD9
  5062                           status	equ	0xFD8
  5063                           
  5064 ;; *************** function _Mcp2515WriteCanMsg *****************
  5065 ;; Defined at:
  5066 ;;		line 272 in file "mcp2515.c"
  5067 ;; Parameters:    Size  Location     Type
  5068 ;;  buffer_sidh_    1    wreg     const unsigned char 
  5069 ;;  msg             2   35[COMRAM] PTR const struct CANMESS
  5070 ;;		 -> txBuffer(68), 
  5071 ;; Auto vars:     Size  Location     Type
  5072 ;;  buffer_sidh_    1   49[COMRAM] const unsigned char 
  5073 ;;  buf            10   39[COMRAM] unsigned char [10]
  5074 ;;  i               1   52[COMRAM] unsigned char 
  5075 ;;  mcp_addr        1   51[COMRAM] unsigned char 
  5076 ;;  dlc             1   50[COMRAM] unsigned char 
  5077 ;; Return value:  Size  Location     Type
  5078 ;;                  1    wreg      void 
  5079 ;; Registers used:
  5080 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5081 ;; Tracked objects:
  5082 ;;		On entry : 0/0
  5083 ;;		On exit  : 0/0
  5084 ;;		Unchanged: 0/0
  5085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5086 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5087 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5088 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5089 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5090 ;;Total ram usage:       18 bytes
  5091 ;; Hardware stack levels used:    1
  5092 ;; Hardware stack levels required when called:    3
  5093 ;; This function calls:
  5094 ;;		i2_Mcp2515WriteCanId
  5095 ;;		i2_Spi_Write
  5096 ;; This function is called by:
  5097 ;;		_Can_SendMessage
  5098 ;; This function uses a non-reentrant model
  5099 ;;
  5100                           
  5101                           	psect	text21
  5102  001E0E                     __ptext21:
  5103                           	opt stack 0
  5104  001E0E                     _Mcp2515WriteCanMsg:
  5105                           	opt stack 17
  5106                           
  5107                           ;incstack = 0
  5108                           ;Mcp2515WriteCanMsg@buffer_sidh_addr stored from wreg
  5109  001E0E  6E32               	movwf	Mcp2515WriteCanMsg@buffer_sidh_addr,c
  5110                           
  5111                           ;mcp2515.c: 275: uint8_t mcp_addr, i, dlc;
  5112                           ;mcp2515.c: 276: uint8_t buf[10];
  5113                           ;mcp2515.c: 277: mcp_addr = buffer_sidh_addr;
  5114  001E10  C032  F034         	movff	Mcp2515WriteCanMsg@buffer_sidh_addr,Mcp2515WriteCanMsg@mcp_addr
  5115                           
  5116                           ;mcp2515.c: 279: buf[0] = 0x02;
  5117  001E14  0E02               	movlw	2
  5118  001E16  6E28               	movwf	Mcp2515WriteCanMsg@buf,c
  5119                           
  5120                           ;mcp2515.c: 280: buf[1] = mcp_addr+5;
  5121  001E18  5034               	movf	Mcp2515WriteCanMsg@mcp_addr,w,c
  5122  001E1A  0F05               	addlw	5
  5123  001E1C  6E29               	movwf	Mcp2515WriteCanMsg@buf+1,c
  5124                           
  5125                           ;mcp2515.c: 282: for(i=0;i<msg->dlc;i++)
  5126  001E1E  0E00               	movlw	0
  5127  001E20  6E35               	movwf	Mcp2515WriteCanMsg@i,c
  5128  001E22  D01C               	goto	i2l1919
  5129  001E24                     i2l1915:
  5130                           
  5131                           ;mcp2515.c: 283: {
  5132                           ;mcp2515.c: 284: buf[i+2] = msg->dta[i];
  5133  001E24  5035               	movf	Mcp2515WriteCanMsg@i,w,c
  5134  001E26  0D01               	mullw	1
  5135  001E28  0E06               	movlw	6
  5136  001E2A  26F3               	addwf	prodl,f,c
  5137  001E2C  0E00               	movlw	0
  5138  001E2E  22F4               	addwfc	prodh,f,c
  5139  001E30  50F3               	movf	prodl,w,c
  5140  001E32  2424               	addwf	Mcp2515WriteCanMsg@msg,w,c
  5141  001E34  6ED9               	movwf	fsr2l,c
  5142  001E36  50F4               	movf	prodh,w,c
  5143  001E38  2025               	addwfc	Mcp2515WriteCanMsg@msg+1,w,c
  5144  001E3A  6EDA               	movwf	fsr2h,c
  5145  001E3C  5035               	movf	Mcp2515WriteCanMsg@i,w,c
  5146  001E3E  6E26               	movwf	??_Mcp2515WriteCanMsg& (0+255),c
  5147  001E40  6A27               	clrf	(??_Mcp2515WriteCanMsg+1)& (0+255),c
  5148  001E42  0E02               	movlw	2
  5149  001E44  2626               	addwf	??_Mcp2515WriteCanMsg,f,c
  5150  001E46  0E00               	movlw	0
  5151  001E48  2227               	addwfc	??_Mcp2515WriteCanMsg+1,f,c
  5152  001E4A  0E28               	movlw	low Mcp2515WriteCanMsg@buf
  5153  001E4C  2426               	addwf	??_Mcp2515WriteCanMsg,w,c
  5154  001E4E  6EE1               	movwf	fsr1l,c
  5155  001E50  0E00               	movlw	high Mcp2515WriteCanMsg@buf
  5156  001E52  2027               	addwfc	??_Mcp2515WriteCanMsg+1,w,c
  5157  001E54  6EE2               	movwf	fsr1h,c
  5158  001E56  CFDF FFE7          	movff	indf2,indf1
  5159  001E5A  2A35               	incf	Mcp2515WriteCanMsg@i,f,c
  5160  001E5C                     i2l1919:
  5161  001E5C  EE20 F005          	lfsr	2,5
  5162  001E60  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  5163  001E62  26D9               	addwf	fsr2l,f,c
  5164  001E64  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  5165  001E66  22DA               	addwfc	fsr2h,f,c
  5166  001E68  50DE               	movf	postinc2,w,c
  5167  001E6A  5C35               	subwf	Mcp2515WriteCanMsg@i,w,c
  5168  001E6C  A0D8               	btfss	status,0,c
  5169  001E6E  D7DA               	goto	i2l1915
  5170                           
  5171                           ;mcp2515.c: 285: }
  5172                           ;mcp2515.c: 286: Spi_Write(buf,msg->dlc + 2);
  5173  001E70  0E28               	movlw	low Mcp2515WriteCanMsg@buf
  5174  001E72  6E0D               	movwf	i2Spi_Write@tx,c
  5175  001E74  0E00               	movlw	high Mcp2515WriteCanMsg@buf
  5176  001E76  6E0E               	movwf	i2Spi_Write@tx+1,c
  5177  001E78  EE20 F005          	lfsr	2,5
  5178  001E7C  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  5179  001E7E  26D9               	addwf	fsr2l,f,c
  5180  001E80  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  5181  001E82  22DA               	addwfc	fsr2h,f,c
  5182  001E84  50DF               	movf	indf2,w,c
  5183  001E86  6E26               	movwf	??_Mcp2515WriteCanMsg& (0+255),c
  5184  001E88  6A27               	clrf	(??_Mcp2515WriteCanMsg+1)& (0+255),c
  5185  001E8A  0E02               	movlw	2
  5186  001E8C  2626               	addwf	??_Mcp2515WriteCanMsg,f,c
  5187  001E8E  0E00               	movlw	0
  5188  001E90  2227               	addwfc	??_Mcp2515WriteCanMsg+1,f,c
  5189  001E92  C026  F00F         	movff	??_Mcp2515WriteCanMsg,i2Spi_Write@size
  5190  001E96  C027  F010         	movff	??_Mcp2515WriteCanMsg+1,i2Spi_Write@size+1
  5191  001E9A  0E00               	movlw	0
  5192  001E9C  BE10               	btfsc	i2Spi_Write@size+1,7,c
  5193  001E9E  0EFF               	movlw	-1
  5194  001EA0  6E11               	movwf	i2Spi_Write@size+2,c
  5195  001EA2  6E12               	movwf	i2Spi_Write@size+3,c
  5196  001EA4  EC0A  F015         	call	i2_Spi_Write	;wreg free
  5197                           
  5198                           ;mcp2515.c: 288: Mcp2515WriteCanId( mcp_addr,
  5199                           ;mcp2515.c: 289: msg->extended_identifier,
  5200                           ;mcp2515.c: 290: msg->identifier );
  5201  001EA8  C024  FFD9         	movff	Mcp2515WriteCanMsg@msg,fsr2l
  5202  001EAC  C025  FFDA         	movff	Mcp2515WriteCanMsg@msg+1,fsr2h
  5203  001EB0  50DF               	movf	indf2,w,c
  5204  001EB2  6E13               	movwf	i2Mcp2515WriteCanId@ext,c
  5205  001EB4  EE20 F001          	lfsr	2,1
  5206  001EB8  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  5207  001EBA  26D9               	addwf	fsr2l,f,c
  5208  001EBC  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  5209  001EBE  22DA               	addwfc	fsr2h,f,c
  5210  001EC0  CFDE F014          	movff	postinc2,i2Mcp2515WriteCanId@can_id
  5211  001EC4  CFDE F015          	movff	postinc2,i2Mcp2515WriteCanId@can_id+1
  5212  001EC8  CFDE F016          	movff	postinc2,i2Mcp2515WriteCanId@can_id+2
  5213  001ECC  CFDE F017          	movff	postinc2,i2Mcp2515WriteCanId@can_id+3
  5214  001ED0  5034               	movf	Mcp2515WriteCanMsg@mcp_addr,w,c
  5215  001ED2  EC20  F011         	call	i2_Mcp2515WriteCanId
  5216                           
  5217                           ;mcp2515.c: 291: dlc = msg->dlc;
  5218  001ED6  EE20 F005          	lfsr	2,5
  5219  001EDA  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  5220  001EDC  26D9               	addwf	fsr2l,f,c
  5221  001EDE  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  5222  001EE0  22DA               	addwfc	fsr2h,f,c
  5223  001EE2  50DF               	movf	indf2,w,c
  5224  001EE4  6E33               	movwf	Mcp2515WriteCanMsg@dlc,c
  5225                           
  5226                           ;mcp2515.c: 293: if ( msg->rtr == 1)
  5227  001EE6  EE20 F00E          	lfsr	2,14
  5228  001EEA  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  5229  001EEC  26D9               	addwf	fsr2l,f,c
  5230  001EEE  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  5231  001EF0  22DA               	addwfc	fsr2h,f,c
  5232  001EF2  04DE               	decf	postinc2,w,c
  5233  001EF4  A4D8               	btfss	status,2,c
  5234  001EF6  D009               	goto	i2l1929
  5235                           
  5236                           ;mcp2515.c: 294: {
  5237                           ;mcp2515.c: 295: dlc = msg->dlc | 0x40;
  5238  001EF8  EE20 F005          	lfsr	2,5
  5239  001EFC  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  5240  001EFE  26D9               	addwf	fsr2l,f,c
  5241  001F00  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  5242  001F02  22DA               	addwfc	fsr2h,f,c
  5243  001F04  50DF               	movf	indf2,w,c
  5244  001F06  0940               	iorlw	64
  5245  001F08  6E33               	movwf	Mcp2515WriteCanMsg@dlc,c
  5246  001F0A                     i2l1929:
  5247                           
  5248                           ;mcp2515.c: 296: }
  5249                           ;mcp2515.c: 297: buf[0] = 0x02;
  5250  001F0A  0E02               	movlw	2
  5251  001F0C  6E28               	movwf	Mcp2515WriteCanMsg@buf,c
  5252                           
  5253                           ;mcp2515.c: 298: buf[1] = mcp_addr+4;
  5254  001F0E  5034               	movf	Mcp2515WriteCanMsg@mcp_addr,w,c
  5255  001F10  0F04               	addlw	4
  5256  001F12  6E29               	movwf	Mcp2515WriteCanMsg@buf+1,c
  5257                           
  5258                           ;mcp2515.c: 299: buf[2] = dlc;
  5259  001F14  C033  F02A         	movff	Mcp2515WriteCanMsg@dlc,Mcp2515WriteCanMsg@buf+2
  5260                           
  5261                           ;mcp2515.c: 300: Spi_Write(buf,3);
  5262  001F18  0E28               	movlw	low Mcp2515WriteCanMsg@buf
  5263  001F1A  6E0D               	movwf	i2Spi_Write@tx,c
  5264  001F1C  0E00               	movlw	high Mcp2515WriteCanMsg@buf
  5265  001F1E  6E0E               	movwf	i2Spi_Write@tx+1,c
  5266  001F20  0E03               	movlw	3
  5267  001F22  6E0F               	movwf	i2Spi_Write@size,c
  5268  001F24  0E00               	movlw	0
  5269  001F26  6E10               	movwf	i2Spi_Write@size+1,c
  5270  001F28  0E00               	movlw	0
  5271  001F2A  6E11               	movwf	i2Spi_Write@size+2,c
  5272  001F2C  0E00               	movlw	0
  5273  001F2E  6E12               	movwf	i2Spi_Write@size+3,c
  5274  001F30  EC0A  F015         	call	i2_Spi_Write	;wreg free
  5275  001F34  0012               	return		;funcret
  5276  001F36                     __end_of_Mcp2515WriteCanMsg:
  5277                           	opt stack 0
  5278                           pclatu	equ	0xFFB
  5279                           pclath	equ	0xFFA
  5280                           tblptru	equ	0xFF8
  5281                           tblptrh	equ	0xFF7
  5282                           tblptrl	equ	0xFF6
  5283                           tablat	equ	0xFF5
  5284                           prodh	equ	0xFF4
  5285                           prodl	equ	0xFF3
  5286                           intcon	equ	0xFF2
  5287                           intcon2	equ	0xFF1
  5288                           intcon3	equ	0xFF0
  5289                           postinc0	equ	0xFEE
  5290                           fsr0h	equ	0xFEA
  5291                           fsr0l	equ	0xFE9
  5292                           wreg	equ	0xFE8
  5293                           indf1	equ	0xFE7
  5294                           postinc1	equ	0xFE6
  5295                           postdec1	equ	0xFE5
  5296                           fsr1h	equ	0xFE2
  5297                           fsr1l	equ	0xFE1
  5298                           indf2	equ	0xFDF
  5299                           postinc2	equ	0xFDE
  5300                           fsr2h	equ	0xFDA
  5301                           fsr2l	equ	0xFD9
  5302                           status	equ	0xFD8
  5303                           
  5304 ;; *************** function i2_Mcp2515WriteCanId *****************
  5305 ;; Defined at:
  5306 ;;		line 233 in file "mcp2515.c"
  5307 ;; Parameters:    Size  Location     Type
  5308 ;;  mcp_addr        1    wreg     unsigned char 
  5309 ;;  ext             1   18[COMRAM] unsigned char 
  5310 ;;  can_id          4   19[COMRAM] unsigned long 
  5311 ;; Auto vars:     Size  Location     Type
  5312 ;;  mcp_addr        1   26[COMRAM] unsigned char 
  5313 ;;  Mcp2515Write    6   27[COMRAM] unsigned char [6]
  5314 ;;  Mcp2515Write    2   33[COMRAM] unsigned int 
  5315 ;; Return value:  Size  Location     Type
  5316 ;;                  1    wreg      void 
  5317 ;; Registers used:
  5318 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5319 ;; Tracked objects:
  5320 ;;		On entry : 0/0
  5321 ;;		On exit  : 0/0
  5322 ;;		Unchanged: 0/0
  5323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5324 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5325 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5326 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5327 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5328 ;;Total ram usage:       17 bytes
  5329 ;; Hardware stack levels used:    1
  5330 ;; Hardware stack levels required when called:    2
  5331 ;; This function calls:
  5332 ;;		i2_Spi_Write
  5333 ;; This function is called by:
  5334 ;;		_Mcp2515WriteCanMsg
  5335 ;; This function uses a non-reentrant model
  5336 ;;
  5337                           
  5338                           	psect	text22
  5339  002240                     __ptext22:
  5340                           	opt stack 0
  5341  002240                     i2_Mcp2515WriteCanId:
  5342                           	opt stack 17
  5343                           
  5344                           ;incstack = 0
  5345                           ;i2Mcp2515WriteCanId@mcp_addr stored from wreg
  5346  002240  6E1B               	movwf	i2Mcp2515WriteCanId@mcp_addr,c
  5347                           
  5348                           ;mcp2515.c: 235: uint16_t canid;
  5349                           ;mcp2515.c: 236: uint8_t buf[6];
  5350                           ;mcp2515.c: 238: canid = (uint16_t)(can_id & 0x0FFFF);
  5351  002242  C014  F022         	movff	i2Mcp2515WriteCanId@can_id,i2Mcp2515WriteCanId@canid
  5352  002246  C015  F023         	movff	i2Mcp2515WriteCanId@can_id+1,i2Mcp2515WriteCanId@canid+1
  5353                           
  5354                           ;mcp2515.c: 240: buf[0] = 0x02;
  5355  00224A  0E02               	movlw	2
  5356  00224C  6E1C               	movwf	i2Mcp2515WriteCanId@buf,c
  5357                           
  5358                           ;mcp2515.c: 241: buf[1] = mcp_addr;
  5359  00224E  C01B  F01D         	movff	i2Mcp2515WriteCanId@mcp_addr,i2Mcp2515WriteCanId@buf+1
  5360                           
  5361                           ;mcp2515.c: 243: if ( ext == 1)
  5362  002252  0413               	decf	i2Mcp2515WriteCanId@ext,w,c
  5363  002254  A4D8               	btfss	status,2,c
  5364  002256  D025               	goto	i2l1841
  5365                           
  5366                           ;mcp2515.c: 244: {
  5367                           ;mcp2515.c: 245: buf[3+2] = (uint8_t) (canid & 0xFF);
  5368  002258  C022  F021         	movff	i2Mcp2515WriteCanId@canid,i2Mcp2515WriteCanId@buf+5
  5369                           
  5370                           ;mcp2515.c: 246: buf[2+2] = (uint8_t) (canid >> 8);
  5371  00225C  5023               	movf	i2Mcp2515WriteCanId@canid+1,w,c
  5372  00225E  6E20               	movwf	i2Mcp2515WriteCanId@buf+4,c
  5373                           
  5374                           ;mcp2515.c: 247: canid = (uint16_t)( can_id / 0x10000L );
  5375  002260  C016  F022         	movff	i2Mcp2515WriteCanId@can_id+2,i2Mcp2515WriteCanId@canid
  5376  002264  C017  F023         	movff	i2Mcp2515WriteCanId@can_id+3,i2Mcp2515WriteCanId@canid+1
  5377                           
  5378                           ;mcp2515.c: 248: buf[1+2] = (uint8_t) (canid & 0x03);
  5379  002268  5022               	movf	i2Mcp2515WriteCanId@canid,w,c
  5380  00226A  0B03               	andlw	3
  5381  00226C  6E1F               	movwf	i2Mcp2515WriteCanId@buf+3,c
  5382                           
  5383                           ;mcp2515.c: 249: buf[1+2] += (uint8_t) ((canid & 0x1C )*8);
  5384  00226E  C022  F018         	movff	i2Mcp2515WriteCanId@canid,??i2_Mcp2515WriteCanId
  5385  002272  0E1C               	movlw	28
  5386  002274  1618               	andwf	??i2_Mcp2515WriteCanId,f,c
  5387  002276  90D8               	bcf	status,0,c
  5388  002278  3618               	rlcf	??i2_Mcp2515WriteCanId,f,c
  5389  00227A  90D8               	bcf	status,0,c
  5390  00227C  3618               	rlcf	??i2_Mcp2515WriteCanId,f,c
  5391  00227E  90D8               	bcf	status,0,c
  5392  002280  3418               	rlcf	??i2_Mcp2515WriteCanId,w,c
  5393  002282  261F               	addwf	i2Mcp2515WriteCanId@buf+3,f,c
  5394                           
  5395                           ;mcp2515.c: 250: buf[1+2] |= 0x08;
  5396  002284  861F               	bsf	i2Mcp2515WriteCanId@buf+3,3,c
  5397                           
  5398                           ;mcp2515.c: 251: buf[0+2] = (uint8_t) (canid / 32 );
  5399  002286  C022  F018         	movff	i2Mcp2515WriteCanId@canid,??i2_Mcp2515WriteCanId
  5400  00228A  C023  F019         	movff	i2Mcp2515WriteCanId@canid+1,??i2_Mcp2515WriteCanId+1
  5401  00228E  0E05               	movlw	5
  5402  002290  6E1A               	movwf	(??i2_Mcp2515WriteCanId+2)& (0+255),c
  5403  002292                     i2u80_45:
  5404  002292  90D8               	bcf	status,0,c
  5405  002294  3219               	rrcf	??i2_Mcp2515WriteCanId+1,f,c
  5406  002296  3218               	rrcf	??i2_Mcp2515WriteCanId,f,c
  5407  002298  2E1A               	decfsz	(??i2_Mcp2515WriteCanId+2)& (0+255),f,c
  5408  00229A  D7FB               	goto	i2u80_45
  5409  00229C  5018               	movf	??i2_Mcp2515WriteCanId,w,c
  5410  00229E  6E1E               	movwf	i2Mcp2515WriteCanId@buf+2,c
  5411                           
  5412                           ;mcp2515.c: 252: }
  5413  0022A0  D01F               	goto	i2l1847
  5414  0022A2                     i2l1841:
  5415                           
  5416                           ;mcp2515.c: 254: else
  5417                           ;mcp2515.c: 255: {
  5418                           ;mcp2515.c: 256: buf[0+2] = (uint8_t) (canid >> 3);
  5419  0022A2  C022  F018         	movff	i2Mcp2515WriteCanId@canid,??i2_Mcp2515WriteCanId
  5420  0022A6  C023  F019         	movff	i2Mcp2515WriteCanId@canid+1,??i2_Mcp2515WriteCanId+1
  5421  0022AA  90D8               	bcf	status,0,c
  5422  0022AC  3219               	rrcf	??i2_Mcp2515WriteCanId+1,f,c
  5423  0022AE  3218               	rrcf	??i2_Mcp2515WriteCanId,f,c
  5424  0022B0  90D8               	bcf	status,0,c
  5425  0022B2  3219               	rrcf	??i2_Mcp2515WriteCanId+1,f,c
  5426  0022B4  3218               	rrcf	??i2_Mcp2515WriteCanId,f,c
  5427  0022B6  90D8               	bcf	status,0,c
  5428  0022B8  3219               	rrcf	??i2_Mcp2515WriteCanId+1,f,c
  5429  0022BA  3218               	rrcf	??i2_Mcp2515WriteCanId,f,c
  5430  0022BC  5018               	movf	??i2_Mcp2515WriteCanId,w,c
  5431  0022BE  6E1E               	movwf	i2Mcp2515WriteCanId@buf+2,c
  5432                           
  5433                           ;mcp2515.c: 257: buf[1+2] = (uint8_t) ((canid & 0x07 )*32);
  5434  0022C0  C022  F018         	movff	i2Mcp2515WriteCanId@canid,??i2_Mcp2515WriteCanId
  5435  0022C4  0E07               	movlw	7
  5436  0022C6  1618               	andwf	??i2_Mcp2515WriteCanId,f,c
  5437  0022C8  0E05               	movlw	5
  5438  0022CA  6E19               	movwf	(??i2_Mcp2515WriteCanId+1)& (0+255),c
  5439  0022CC                     i2u81_45:
  5440  0022CC  90D8               	bcf	status,0,c
  5441  0022CE  3618               	rlcf	??i2_Mcp2515WriteCanId,f,c
  5442  0022D0  2E19               	decfsz	(??i2_Mcp2515WriteCanId+1)& (0+255),f,c
  5443  0022D2  D7FC               	goto	i2u81_45
  5444  0022D4  5018               	movf	??i2_Mcp2515WriteCanId,w,c
  5445  0022D6  6E1F               	movwf	i2Mcp2515WriteCanId@buf+3,c
  5446                           
  5447                           ;mcp2515.c: 258: buf[3+2] = 0;
  5448  0022D8  0E00               	movlw	0
  5449  0022DA  6E21               	movwf	i2Mcp2515WriteCanId@buf+5,c
  5450                           
  5451                           ;mcp2515.c: 259: buf[2+2] = 0;
  5452  0022DC  0E00               	movlw	0
  5453  0022DE  6E20               	movwf	i2Mcp2515WriteCanId@buf+4,c
  5454  0022E0                     i2l1847:
  5455                           
  5456                           ;mcp2515.c: 260: }
  5457                           ;mcp2515.c: 261: Spi_Write(buf,6);
  5458  0022E0  0E1C               	movlw	low i2Mcp2515WriteCanId@buf
  5459  0022E2  6E0D               	movwf	i2Spi_Write@tx,c
  5460  0022E4  0E00               	movlw	high i2Mcp2515WriteCanId@buf
  5461  0022E6  6E0E               	movwf	i2Spi_Write@tx+1,c
  5462  0022E8  0E06               	movlw	6
  5463  0022EA  6E0F               	movwf	i2Spi_Write@size,c
  5464  0022EC  0E00               	movlw	0
  5465  0022EE  6E10               	movwf	i2Spi_Write@size+1,c
  5466  0022F0  0E00               	movlw	0
  5467  0022F2  6E11               	movwf	i2Spi_Write@size+2,c
  5468  0022F4  0E00               	movlw	0
  5469  0022F6  6E12               	movwf	i2Spi_Write@size+3,c
  5470  0022F8  EC0A  F015         	call	i2_Spi_Write	;wreg free
  5471  0022FC  0012               	return		;funcret
  5472  0022FE                     __end_ofi2_Mcp2515WriteCanId:
  5473                           	opt stack 0
  5474                           pclatu	equ	0xFFB
  5475                           pclath	equ	0xFFA
  5476                           tblptru	equ	0xFF8
  5477                           tblptrh	equ	0xFF7
  5478                           tblptrl	equ	0xFF6
  5479                           tablat	equ	0xFF5
  5480                           prodh	equ	0xFF4
  5481                           prodl	equ	0xFF3
  5482                           intcon	equ	0xFF2
  5483                           intcon2	equ	0xFF1
  5484                           intcon3	equ	0xFF0
  5485                           postinc0	equ	0xFEE
  5486                           fsr0h	equ	0xFEA
  5487                           fsr0l	equ	0xFE9
  5488                           wreg	equ	0xFE8
  5489                           indf1	equ	0xFE7
  5490                           postinc1	equ	0xFE6
  5491                           postdec1	equ	0xFE5
  5492                           fsr1h	equ	0xFE2
  5493                           fsr1l	equ	0xFE1
  5494                           indf2	equ	0xFDF
  5495                           postinc2	equ	0xFDE
  5496                           fsr2h	equ	0xFDA
  5497                           fsr2l	equ	0xFD9
  5498                           status	equ	0xFD8
  5499                           
  5500 ;; *************** function _Mcp2515GetNextFreeTXBuf *****************
  5501 ;; Defined at:
  5502 ;;		line 311 in file "mcp2515.c"
  5503 ;; Parameters:    Size  Location     Type
  5504 ;;  txbuf_n         2   18[COMRAM] PTR unsigned char 
  5505 ;;		 -> Can_SendMessage@txbuf_n(1), 
  5506 ;; Auto vars:     Size  Location     Type
  5507 ;;  buf             3   24[COMRAM] unsigned char [3]
  5508 ;;  ctrlregs        3   21[COMRAM] unsigned char [3]
  5509 ;;  i               1   27[COMRAM] unsigned char 
  5510 ;; Return value:  Size  Location     Type
  5511 ;;                  1    wreg      unsigned char 
  5512 ;; Registers used:
  5513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5514 ;; Tracked objects:
  5515 ;;		On entry : 0/0
  5516 ;;		On exit  : 0/0
  5517 ;;		Unchanged: 0/0
  5518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5519 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5520 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5521 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5522 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5523 ;;Total ram usage:       10 bytes
  5524 ;; Hardware stack levels used:    1
  5525 ;; Hardware stack levels required when called:    2
  5526 ;; This function calls:
  5527 ;;		_Spi_ReadWrite
  5528 ;; This function is called by:
  5529 ;;		_Can_SendMessage
  5530 ;; This function uses a non-reentrant model
  5531 ;;
  5532                           
  5533                           	psect	text23
  5534  002390                     __ptext23:
  5535                           	opt stack 0
  5536  002390                     _Mcp2515GetNextFreeTXBuf:
  5537                           	opt stack 18
  5538                           
  5539                           ;mcp2515.c: 313: uint8_t i;
  5540                           ;mcp2515.c: 314: uint8_t ctrlregs[(3)] = {0x30,0x40,0x50};
  5541                           
  5542                           ;incstack = 0
  5543  002390  C0E0  F016         	movff	Mcp2515GetNextFreeTXBuf@F8153,Mcp2515GetNextFreeTXBuf@ctrlregs
  5544  002394  C0E1  F017         	movff	Mcp2515GetNextFreeTXBuf@F8153+1,Mcp2515GetNextFreeTXBuf@ctrlregs+1
  5545  002398  C0E2  F018         	movff	Mcp2515GetNextFreeTXBuf@F8153+2,Mcp2515GetNextFreeTXBuf@ctrlregs+2
  5546                           
  5547                           ;mcp2515.c: 315: uint8_t buf[3];
  5548                           ;mcp2515.c: 316: *txbuf_n = 0x00;
  5549  00239C  C013  FFD9         	movff	Mcp2515GetNextFreeTXBuf@txbuf_n,fsr2l
  5550  0023A0  C014  FFDA         	movff	Mcp2515GetNextFreeTXBuf@txbuf_n+1,fsr2h
  5551  0023A4  0E00               	movlw	0
  5552  0023A6  6EDF               	movwf	indf2,c
  5553                           
  5554                           ;mcp2515.c: 319: for (i=0; i<(3); i++)
  5555  0023A8  0E00               	movlw	0
  5556  0023AA  6E1C               	movwf	Mcp2515GetNextFreeTXBuf@i,c
  5557  0023AC                     i2l1881:
  5558  0023AC  0E02               	movlw	2
  5559  0023AE  641C               	cpfsgt	Mcp2515GetNextFreeTXBuf@i,c
  5560  0023B0  D001               	goto	i2l1885
  5561  0023B2  D030               	goto	i2l1903
  5562  0023B4                     i2l1885:
  5563                           
  5564                           ;mcp2515.c: 320: {
  5565                           ;mcp2515.c: 321: buf[0] = 0x03;
  5566  0023B4  0E03               	movlw	3
  5567  0023B6  6E19               	movwf	Mcp2515GetNextFreeTXBuf@buf,c
  5568                           
  5569                           ;mcp2515.c: 322: buf[1] = ctrlregs[i];
  5570  0023B8  501C               	movf	Mcp2515GetNextFreeTXBuf@i,w,c
  5571  0023BA  0D01               	mullw	1
  5572  0023BC  0E16               	movlw	low Mcp2515GetNextFreeTXBuf@ctrlregs
  5573  0023BE  24F3               	addwf	prodl,w,c
  5574  0023C0  6ED9               	movwf	fsr2l,c
  5575  0023C2  0E00               	movlw	high Mcp2515GetNextFreeTXBuf@ctrlregs
  5576  0023C4  20F4               	addwfc	prodh,w,c
  5577  0023C6  6EDA               	movwf	fsr2h,c
  5578  0023C8  50DF               	movf	indf2,w,c
  5579  0023CA  6E1A               	movwf	Mcp2515GetNextFreeTXBuf@buf+1,c
  5580                           
  5581                           ;mcp2515.c: 323: Spi_ReadWrite(buf,3);
  5582  0023CC  0E19               	movlw	low Mcp2515GetNextFreeTXBuf@buf
  5583  0023CE  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  5584  0023D0  0E00               	movlw	high Mcp2515GetNextFreeTXBuf@buf
  5585  0023D2  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  5586  0023D4  0E03               	movlw	3
  5587  0023D6  6E0F               	movwf	Spi_ReadWrite@size,c
  5588  0023D8  0E00               	movlw	0
  5589  0023DA  6E10               	movwf	Spi_ReadWrite@size+1,c
  5590  0023DC  0E00               	movlw	0
  5591  0023DE  6E11               	movwf	Spi_ReadWrite@size+2,c
  5592  0023E0  0E00               	movlw	0
  5593  0023E2  6E12               	movwf	Spi_ReadWrite@size+3,c
  5594  0023E4  EC1D  F015         	call	_Spi_ReadWrite	;wreg free
  5595                           
  5596                           ;mcp2515.c: 325: if ( (buf[2] & 0x08) == 0 )
  5597  0023E8  B61B               	btfsc	Mcp2515GetNextFreeTXBuf@buf+2,3,c
  5598  0023EA  D012               	goto	i2l1899
  5599                           
  5600                           ;mcp2515.c: 326: {
  5601                           ;mcp2515.c: 327: *txbuf_n = ctrlregs[i]+1;
  5602  0023EC  501C               	movf	Mcp2515GetNextFreeTXBuf@i,w,c
  5603  0023EE  0D01               	mullw	1
  5604  0023F0  0E16               	movlw	low Mcp2515GetNextFreeTXBuf@ctrlregs
  5605  0023F2  24F3               	addwf	prodl,w,c
  5606  0023F4  6ED9               	movwf	fsr2l,c
  5607  0023F6  0E00               	movlw	high Mcp2515GetNextFreeTXBuf@ctrlregs
  5608  0023F8  20F4               	addwfc	prodh,w,c
  5609  0023FA  6EDA               	movwf	fsr2h,c
  5610  0023FC  50DF               	movf	indf2,w,c
  5611  0023FE  6E15               	movwf	??_Mcp2515GetNextFreeTXBuf& (0+255),c
  5612  002400  2815               	incf	??_Mcp2515GetNextFreeTXBuf,w,c
  5613  002402  C013  FFD9         	movff	Mcp2515GetNextFreeTXBuf@txbuf_n,fsr2l
  5614  002406  C014  FFDA         	movff	Mcp2515GetNextFreeTXBuf@txbuf_n+1,fsr2h
  5615  00240A  6EDF               	movwf	indf2,c
  5616                           
  5617                           ;mcp2515.c: 328: return (0);
  5618  00240C  0E00               	movlw	0
  5619  00240E  0012               	return	
  5620  002410                     i2l1899:
  5621  002410  2A1C               	incf	Mcp2515GetNextFreeTXBuf@i,f,c
  5622  002412  D7CC               	goto	i2l1881
  5623  002414                     i2l1903:
  5624                           
  5625                           ;mcp2515.c: 329: }
  5626                           ;mcp2515.c: 330: }
  5627                           ;mcp2515.c: 331: return (2);
  5628  002414  0E02               	movlw	2
  5629  002416  0012               	return	
  5630  002418                     __end_of_Mcp2515GetNextFreeTXBuf:
  5631                           	opt stack 0
  5632                           pclatu	equ	0xFFB
  5633                           pclath	equ	0xFFA
  5634                           tblptru	equ	0xFF8
  5635                           tblptrh	equ	0xFF7
  5636                           tblptrl	equ	0xFF6
  5637                           tablat	equ	0xFF5
  5638                           prodh	equ	0xFF4
  5639                           prodl	equ	0xFF3
  5640                           intcon	equ	0xFF2
  5641                           intcon2	equ	0xFF1
  5642                           intcon3	equ	0xFF0
  5643                           postinc0	equ	0xFEE
  5644                           fsr0h	equ	0xFEA
  5645                           fsr0l	equ	0xFE9
  5646                           wreg	equ	0xFE8
  5647                           indf1	equ	0xFE7
  5648                           postinc1	equ	0xFE6
  5649                           postdec1	equ	0xFE5
  5650                           fsr1h	equ	0xFE2
  5651                           fsr1l	equ	0xFE1
  5652                           indf2	equ	0xFDF
  5653                           postinc2	equ	0xFDE
  5654                           fsr2h	equ	0xFDA
  5655                           fsr2l	equ	0xFD9
  5656                           status	equ	0xFD8
  5657                           
  5658 ;; *************** function _Can_ReadInBuffer *****************
  5659 ;; Defined at:
  5660 ;;		line 94 in file "can.c"
  5661 ;; Parameters:    Size  Location     Type
  5662 ;;		None
  5663 ;; Auto vars:     Size  Location     Type
  5664 ;;  i               1   70[COMRAM] unsigned char 
  5665 ;;  rdStatus        1   69[COMRAM] unsigned char 
  5666 ;;  error           1   68[COMRAM] unsigned char 
  5667 ;; Return value:  Size  Location     Type
  5668 ;;                  1    wreg      unsigned char 
  5669 ;; Registers used:
  5670 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5671 ;; Tracked objects:
  5672 ;;		On entry : 0/0
  5673 ;;		On exit  : 0/0
  5674 ;;		Unchanged: 0/0
  5675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5677 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5679 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5680 ;;Total ram usage:        3 bytes
  5681 ;; Hardware stack levels used:    1
  5682 ;; Hardware stack levels required when called:    5
  5683 ;; This function calls:
  5684 ;;		_Can_ReadMessage
  5685 ;; This function is called by:
  5686 ;;		_Can_Isr
  5687 ;; This function uses a non-reentrant model
  5688 ;;
  5689                           
  5690                           	psect	text24
  5691  00288C                     __ptext24:
  5692                           	opt stack 0
  5693  00288C                     _Can_ReadInBuffer:
  5694                           	opt stack 17
  5695                           
  5696                           ;can.c: 96: uint8_t i;
  5697                           ;can.c: 97: uint8_t error=0;
  5698                           
  5699                           ;incstack = 0
  5700  00288C  0E00               	movlw	0
  5701  00288E  6E45               	movwf	Can_ReadInBuffer@error,c
  5702                           
  5703                           ;can.c: 98: uint8_t rdStatus;
  5704                           ;can.c: 100: for(i=0;i<2;i++)
  5705  002890  0E00               	movlw	0
  5706  002892  6E47               	movwf	Can_ReadInBuffer@i,c
  5707  002894                     i2l2307:
  5708  002894  0E01               	movlw	1
  5709  002896  6447               	cpfsgt	Can_ReadInBuffer@i,c
  5710  002898  D001               	goto	i2l2311
  5711  00289A  0012               	return	
  5712  00289C                     i2l2311:
  5713                           
  5714                           ;can.c: 101: {
  5715                           ;can.c: 102: rdStatus = Can_ReadMessage(&rxBuffer[rxBufferPtrIn]);
  5716  00289C  505A               	movf	_rxBufferPtrIn,w,c
  5717  00289E  0D11               	mullw	17
  5718  0028A0  0E44               	movlw	low _rxBuffer
  5719  0028A2  24F3               	addwf	prodl,w,c
  5720  0028A4  6E3F               	movwf	Can_ReadMessage@msg,c
  5721  0028A6  0E01               	movlw	high _rxBuffer
  5722  0028A8  20F4               	addwfc	prodh,w,c
  5723  0028AA  6E40               	movwf	Can_ReadMessage@msg+1,c
  5724  0028AC  ECA3  F010         	call	_Can_ReadMessage	;wreg free
  5725  0028B0  6E46               	movwf	Can_ReadInBuffer@rdStatus,c
  5726                           
  5727                           ;can.c: 103: if((rxBufferCount) < 4)
  5728  0028B2  0E04               	movlw	4
  5729  0028B4  6059               	cpfslt	_rxBufferCount,c
  5730  0028B6  D008               	goto	i2l2321
  5731                           
  5732                           ;can.c: 104: {
  5733                           ;can.c: 105: if(rdStatus == (0))
  5734  0028B8  5046               	movf	Can_ReadInBuffer@rdStatus,w,c
  5735  0028BA  A4D8               	btfss	status,2,c
  5736  0028BC  D007               	goto	i2l2323
  5737                           
  5738                           ;can.c: 106: {
  5739                           ;can.c: 107: rxBufferCount++;
  5740  0028BE  2A59               	incf	_rxBufferCount,f,c
  5741                           
  5742                           ;can.c: 108: rxBufferPtrIn = (rxBufferPtrIn + 1) % 4;
  5743  0028C0  285A               	incf	_rxBufferPtrIn,w,c
  5744  0028C2  0B03               	andlw	3
  5745  0028C4  6E5A               	movwf	_rxBufferPtrIn,c
  5746                           
  5747                           ;can.c: 109: }
  5748                           ;can.c: 110: }
  5749  0028C6  D002               	goto	i2l2323
  5750  0028C8                     i2l2321:
  5751                           
  5752                           ;can.c: 111: else
  5753                           ;can.c: 112: {
  5754                           ;can.c: 113: error = 1;
  5755  0028C8  0E01               	movlw	1
  5756  0028CA  6E45               	movwf	Can_ReadInBuffer@error,c
  5757  0028CC                     i2l2323:
  5758  0028CC  2A47               	incf	Can_ReadInBuffer@i,f,c
  5759  0028CE  D7E2               	goto	i2l2307
  5760  0028D0                     __end_of_Can_ReadInBuffer:
  5761                           	opt stack 0
  5762                           pclatu	equ	0xFFB
  5763                           pclath	equ	0xFFA
  5764                           tblptru	equ	0xFF8
  5765                           tblptrh	equ	0xFF7
  5766                           tblptrl	equ	0xFF6
  5767                           tablat	equ	0xFF5
  5768                           prodh	equ	0xFF4
  5769                           prodl	equ	0xFF3
  5770                           intcon	equ	0xFF2
  5771                           intcon2	equ	0xFF1
  5772                           intcon3	equ	0xFF0
  5773                           postinc0	equ	0xFEE
  5774                           fsr0h	equ	0xFEA
  5775                           fsr0l	equ	0xFE9
  5776                           wreg	equ	0xFE8
  5777                           indf1	equ	0xFE7
  5778                           postinc1	equ	0xFE6
  5779                           postdec1	equ	0xFE5
  5780                           fsr1h	equ	0xFE2
  5781                           fsr1l	equ	0xFE1
  5782                           indf2	equ	0xFDF
  5783                           postinc2	equ	0xFDE
  5784                           fsr2h	equ	0xFDA
  5785                           fsr2l	equ	0xFD9
  5786                           status	equ	0xFD8
  5787                           
  5788 ;; *************** function _Can_ReadMessage *****************
  5789 ;; Defined at:
  5790 ;;		line 372 in file "can.c"
  5791 ;; Parameters:    Size  Location     Type
  5792 ;;  msg             2   62[COMRAM] PTR struct CANMESSAGE
  5793 ;;		 -> rxBuffer(68), 
  5794 ;; Auto vars:     Size  Location     Type
  5795 ;;  buf             4   64[COMRAM] unsigned char [4]
  5796 ;; Return value:  Size  Location     Type
  5797 ;;                  1    wreg      unsigned char 
  5798 ;; Registers used:
  5799 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5800 ;; Tracked objects:
  5801 ;;		On entry : 0/0
  5802 ;;		On exit  : 0/0
  5803 ;;		Unchanged: 0/0
  5804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5805 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5806 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5808 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5809 ;;Total ram usage:        6 bytes
  5810 ;; Hardware stack levels used:    1
  5811 ;; Hardware stack levels required when called:    4
  5812 ;; This function calls:
  5813 ;;		_Mcp2515ReadCanMsg
  5814 ;;		_Spi_ReadWrite
  5815 ;;		i2_Spi_Write
  5816 ;; This function is called by:
  5817 ;;		_Can_ReadInBuffer
  5818 ;; This function uses a non-reentrant model
  5819 ;;
  5820                           
  5821                           	psect	text25
  5822  002146                     __ptext25:
  5823                           	opt stack 0
  5824  002146                     _Can_ReadMessage:
  5825                           	opt stack 17
  5826                           
  5827                           ;can.c: 374: uint8_t buf[4];
  5828                           ;can.c: 376: buf[0] = 0xA0;
  5829                           
  5830                           ;incstack = 0
  5831  002146  0EA0               	movlw	160
  5832  002148  6E41               	movwf	Can_ReadMessage@buf,c
  5833                           
  5834                           ;can.c: 377: Spi_ReadWrite(buf,2);
  5835  00214A  0E41               	movlw	low Can_ReadMessage@buf
  5836  00214C  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  5837  00214E  0E00               	movlw	high Can_ReadMessage@buf
  5838  002150  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  5839  002152  0E02               	movlw	2
  5840  002154  6E0F               	movwf	Spi_ReadWrite@size,c
  5841  002156  0E00               	movlw	0
  5842  002158  6E10               	movwf	Spi_ReadWrite@size+1,c
  5843  00215A  0E00               	movlw	0
  5844  00215C  6E11               	movwf	Spi_ReadWrite@size+2,c
  5845  00215E  0E00               	movlw	0
  5846  002160  6E12               	movwf	Spi_ReadWrite@size+3,c
  5847  002162  EC1D  F015         	call	_Spi_ReadWrite	;wreg free
  5848                           
  5849                           ;can.c: 379: if ( buf[1] & (1<<0) )
  5850  002166  A042               	btfss	Can_ReadMessage@buf+1,0,c
  5851  002168  D034               	goto	i2l264
  5852                           
  5853                           ;can.c: 380: {
  5854                           ;can.c: 381: Mcp2515ReadCanMsg( (0x61), msg);
  5855  00216A  C03F  F030         	movff	Can_ReadMessage@msg,Mcp2515ReadCanMsg@msg
  5856  00216E  C040  F031         	movff	Can_ReadMessage@msg+1,Mcp2515ReadCanMsg@msg+1
  5857  002172  0E61               	movlw	97
  5858  002174  EC9B  F00F         	call	_Mcp2515ReadCanMsg
  5859                           
  5860                           ;can.c: 382: buf[0] = 0x05;
  5861  002178  0E05               	movlw	5
  5862  00217A  6E41               	movwf	Can_ReadMessage@buf,c
  5863                           
  5864                           ;can.c: 383: buf[1] = 0x2C;
  5865  00217C  0E2C               	movlw	44
  5866  00217E  6E42               	movwf	Can_ReadMessage@buf+1,c
  5867                           
  5868                           ;can.c: 384: buf[2] = 0x01;
  5869  002180  0E01               	movlw	1
  5870  002182  6E43               	movwf	Can_ReadMessage@buf+2,c
  5871                           
  5872                           ;can.c: 385: buf[3] = 0;
  5873  002184  0E00               	movlw	0
  5874  002186  6E44               	movwf	Can_ReadMessage@buf+3,c
  5875                           
  5876                           ;can.c: 386: Spi_Write(buf,4);
  5877  002188  0E41               	movlw	low Can_ReadMessage@buf
  5878  00218A  6E0D               	movwf	i2Spi_Write@tx,c
  5879  00218C  0E00               	movlw	high Can_ReadMessage@buf
  5880  00218E  6E0E               	movwf	i2Spi_Write@tx+1,c
  5881  002190  0E04               	movlw	4
  5882  002192  6E0F               	movwf	i2Spi_Write@size,c
  5883  002194  0E00               	movlw	0
  5884  002196  6E10               	movwf	i2Spi_Write@size+1,c
  5885  002198  0E00               	movlw	0
  5886  00219A  6E11               	movwf	i2Spi_Write@size+2,c
  5887  00219C  0E00               	movlw	0
  5888  00219E  6E12               	movwf	i2Spi_Write@size+3,c
  5889  0021A0  EC0A  F015         	call	i2_Spi_Write	;wreg free
  5890                           
  5891                           ;can.c: 387: buf[0] = 0x05;
  5892  0021A4  0E05               	movlw	5
  5893  0021A6  6E41               	movwf	Can_ReadMessage@buf,c
  5894                           
  5895                           ;can.c: 388: buf[1] = 0x2B;
  5896  0021A8  0E2B               	movlw	43
  5897  0021AA  6E42               	movwf	Can_ReadMessage@buf+1,c
  5898                           
  5899                           ;can.c: 389: buf[2] = 0x01;
  5900  0021AC  0E01               	movlw	1
  5901  0021AE  6E43               	movwf	Can_ReadMessage@buf+2,c
  5902                           
  5903                           ;can.c: 390: buf[3] = 0xFF;
  5904  0021B0  6844               	setf	Can_ReadMessage@buf+3,c
  5905                           
  5906                           ;can.c: 391: Spi_Write(buf,4);
  5907  0021B2  0E41               	movlw	low Can_ReadMessage@buf
  5908  0021B4  6E0D               	movwf	i2Spi_Write@tx,c
  5909  0021B6  0E00               	movlw	high Can_ReadMessage@buf
  5910  0021B8  6E0E               	movwf	i2Spi_Write@tx+1,c
  5911  0021BA  0E04               	movlw	4
  5912  0021BC  6E0F               	movwf	i2Spi_Write@size,c
  5913  0021BE  0E00               	movlw	0
  5914  0021C0  6E10               	movwf	i2Spi_Write@size+1,c
  5915  0021C2  0E00               	movlw	0
  5916  0021C4  6E11               	movwf	i2Spi_Write@size+2,c
  5917  0021C6  0E00               	movlw	0
  5918  0021C8  6E12               	movwf	i2Spi_Write@size+3,c
  5919  0021CA  EC0A  F015         	call	i2_Spi_Write	;wreg free
  5920  0021CE                     i2l2067:
  5921                           
  5922                           ;can.c: 392: return (0);
  5923  0021CE  0E00               	movlw	0
  5924  0021D0  0012               	return	
  5925  0021D2                     i2l264:
  5926                           
  5927                           ;can.c: 395: else if ( buf[1] & (1<<1) )
  5928  0021D2  A242               	btfss	Can_ReadMessage@buf+1,1,c
  5929  0021D4  D033               	goto	i2l2099
  5930                           
  5931                           ;can.c: 396: {
  5932                           ;can.c: 398: Mcp2515ReadCanMsg( (0x71), msg);
  5933  0021D6  C03F  F030         	movff	Can_ReadMessage@msg,Mcp2515ReadCanMsg@msg
  5934  0021DA  C040  F031         	movff	Can_ReadMessage@msg+1,Mcp2515ReadCanMsg@msg+1
  5935  0021DE  0E71               	movlw	113
  5936  0021E0  EC9B  F00F         	call	_Mcp2515ReadCanMsg
  5937                           
  5938                           ;can.c: 399: buf[0] = 0x05;
  5939  0021E4  0E05               	movlw	5
  5940  0021E6  6E41               	movwf	Can_ReadMessage@buf,c
  5941                           
  5942                           ;can.c: 400: buf[1] = 0x2C;
  5943  0021E8  0E2C               	movlw	44
  5944  0021EA  6E42               	movwf	Can_ReadMessage@buf+1,c
  5945                           
  5946                           ;can.c: 401: buf[2] = 0x02;
  5947  0021EC  0E02               	movlw	2
  5948  0021EE  6E43               	movwf	Can_ReadMessage@buf+2,c
  5949                           
  5950                           ;can.c: 402: buf[3] = 0;
  5951  0021F0  0E00               	movlw	0
  5952  0021F2  6E44               	movwf	Can_ReadMessage@buf+3,c
  5953                           
  5954                           ;can.c: 403: Spi_Write(buf,4);
  5955  0021F4  0E41               	movlw	low Can_ReadMessage@buf
  5956  0021F6  6E0D               	movwf	i2Spi_Write@tx,c
  5957  0021F8  0E00               	movlw	high Can_ReadMessage@buf
  5958  0021FA  6E0E               	movwf	i2Spi_Write@tx+1,c
  5959  0021FC  0E04               	movlw	4
  5960  0021FE  6E0F               	movwf	i2Spi_Write@size,c
  5961  002200  0E00               	movlw	0
  5962  002202  6E10               	movwf	i2Spi_Write@size+1,c
  5963  002204  0E00               	movlw	0
  5964  002206  6E11               	movwf	i2Spi_Write@size+2,c
  5965  002208  0E00               	movlw	0
  5966  00220A  6E12               	movwf	i2Spi_Write@size+3,c
  5967  00220C  EC0A  F015         	call	i2_Spi_Write	;wreg free
  5968                           
  5969                           ;can.c: 404: buf[0] = 0x05;
  5970  002210  0E05               	movlw	5
  5971  002212  6E41               	movwf	Can_ReadMessage@buf,c
  5972                           
  5973                           ;can.c: 405: buf[1] = 0x2B;
  5974  002214  0E2B               	movlw	43
  5975  002216  6E42               	movwf	Can_ReadMessage@buf+1,c
  5976                           
  5977                           ;can.c: 406: buf[2] = 0x02;
  5978  002218  0E02               	movlw	2
  5979  00221A  6E43               	movwf	Can_ReadMessage@buf+2,c
  5980                           
  5981                           ;can.c: 407: buf[3] = 0xFF;
  5982  00221C  6844               	setf	Can_ReadMessage@buf+3,c
  5983                           
  5984                           ;can.c: 408: Spi_Write(buf,4);
  5985  00221E  0E41               	movlw	low Can_ReadMessage@buf
  5986  002220  6E0D               	movwf	i2Spi_Write@tx,c
  5987  002222  0E00               	movlw	high Can_ReadMessage@buf
  5988  002224  6E0E               	movwf	i2Spi_Write@tx+1,c
  5989  002226  0E04               	movlw	4
  5990  002228  6E0F               	movwf	i2Spi_Write@size,c
  5991  00222A  0E00               	movlw	0
  5992  00222C  6E10               	movwf	i2Spi_Write@size+1,c
  5993  00222E  0E00               	movlw	0
  5994  002230  6E11               	movwf	i2Spi_Write@size+2,c
  5995  002232  0E00               	movlw	0
  5996  002234  6E12               	movwf	i2Spi_Write@size+3,c
  5997  002236  EC0A  F015         	call	i2_Spi_Write	;wreg free
  5998  00223A  D7C9               	goto	i2l2067
  5999  00223C                     i2l2099:
  6000                           
  6001                           ;can.c: 410: }
  6002                           ;can.c: 412: return (4);
  6003  00223C  0E04               	movlw	4
  6004  00223E  0012               	return	
  6005  002240                     __end_of_Can_ReadMessage:
  6006                           	opt stack 0
  6007                           pclatu	equ	0xFFB
  6008                           pclath	equ	0xFFA
  6009                           tblptru	equ	0xFF8
  6010                           tblptrh	equ	0xFF7
  6011                           tblptrl	equ	0xFF6
  6012                           tablat	equ	0xFF5
  6013                           prodh	equ	0xFF4
  6014                           prodl	equ	0xFF3
  6015                           intcon	equ	0xFF2
  6016                           intcon2	equ	0xFF1
  6017                           intcon3	equ	0xFF0
  6018                           postinc0	equ	0xFEE
  6019                           fsr0h	equ	0xFEA
  6020                           fsr0l	equ	0xFE9
  6021                           wreg	equ	0xFE8
  6022                           indf1	equ	0xFE7
  6023                           postinc1	equ	0xFE6
  6024                           postdec1	equ	0xFE5
  6025                           fsr1h	equ	0xFE2
  6026                           fsr1l	equ	0xFE1
  6027                           indf2	equ	0xFDF
  6028                           postinc2	equ	0xFDE
  6029                           fsr2h	equ	0xFDA
  6030                           fsr2l	equ	0xFD9
  6031                           status	equ	0xFD8
  6032                           
  6033 ;; *************** function i2_Spi_Write *****************
  6034 ;; Defined at:
  6035 ;;		line 332 in file "can.c"
  6036 ;; Parameters:    Size  Location     Type
  6037 ;;  tx              2   12[COMRAM] PTR unsigned char 
  6038 ;;		 -> Mcp2515WriteCanMsg@buf(10), Mcp2515WriteCanId@buf(6), Mcp2515Sleep@cmdMask4(3), Mcp2515_Init@cmdWrite3(3), 
  6039 ;;		 -> Mcp2515_Init@cmdMask4(4), Mcp2515_Reset@cmd(1), Can_SendMessage@buf(4), Can_ReadMessage@buf(4), 
  6040 ;;  size            4   14[COMRAM] unsigned long 
  6041 ;; Auto vars:     Size  Location     Type
  6042 ;;		None
  6043 ;; Return value:  Size  Location     Type
  6044 ;;                  1    wreg      void 
  6045 ;; Registers used:
  6046 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6047 ;; Tracked objects:
  6048 ;;		On entry : 0/0
  6049 ;;		On exit  : 0/0
  6050 ;;		Unchanged: 0/0
  6051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6052 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6055 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6056 ;;Total ram usage:        6 bytes
  6057 ;; Hardware stack levels used:    1
  6058 ;; Hardware stack levels required when called:    1
  6059 ;; This function calls:
  6060 ;;		i2_SPIRW
  6061 ;; This function is called by:
  6062 ;;		_Can_ReadMessage
  6063 ;;		_Can_SendMessage
  6064 ;;		_Mcp2515WriteCanMsg
  6065 ;;		i2_Mcp2515WriteCanId
  6066 ;; This function uses a non-reentrant model
  6067 ;;
  6068                           
  6069                           	psect	text26
  6070  002A14                     __ptext26:
  6071                           	opt stack 0
  6072  002A14                     i2_Spi_Write:
  6073                           	opt stack 19
  6074                           
  6075                           ;can.c: 334: SPIRW(tx, 0, size);
  6076                           
  6077                           ;incstack = 0
  6078  002A14  C00D  F001         	movff	i2Spi_Write@tx,i2SPIRW@tx
  6079  002A18  C00E  F002         	movff	i2Spi_Write@tx+1,i2SPIRW@tx+1
  6080  002A1C  0E00               	movlw	0
  6081  002A1E  6E03               	movwf	i2SPIRW@rx,c
  6082  002A20  0E00               	movlw	0
  6083  002A22  6E04               	movwf	i2SPIRW@rx+1,c
  6084  002A24  C00F  F005         	movff	i2Spi_Write@size,i2SPIRW@size
  6085  002A28  C010  F006         	movff	i2Spi_Write@size+1,i2SPIRW@size+1
  6086  002A2C  C011  F007         	movff	i2Spi_Write@size+2,i2SPIRW@size+2
  6087  002A30  C012  F008         	movff	i2Spi_Write@size+3,i2SPIRW@size+3
  6088  002A34  ECC6  F012         	call	i2_SPIRW	;wreg free
  6089  002A38  0012               	return		;funcret
  6090  002A3A                     __end_ofi2_Spi_Write:
  6091                           	opt stack 0
  6092                           pclatu	equ	0xFFB
  6093                           pclath	equ	0xFFA
  6094                           tblptru	equ	0xFF8
  6095                           tblptrh	equ	0xFF7
  6096                           tblptrl	equ	0xFF6
  6097                           tablat	equ	0xFF5
  6098                           prodh	equ	0xFF4
  6099                           prodl	equ	0xFF3
  6100                           intcon	equ	0xFF2
  6101                           intcon2	equ	0xFF1
  6102                           intcon3	equ	0xFF0
  6103                           postinc0	equ	0xFEE
  6104                           fsr0h	equ	0xFEA
  6105                           fsr0l	equ	0xFE9
  6106                           wreg	equ	0xFE8
  6107                           indf1	equ	0xFE7
  6108                           postinc1	equ	0xFE6
  6109                           postdec1	equ	0xFE5
  6110                           fsr1h	equ	0xFE2
  6111                           fsr1l	equ	0xFE1
  6112                           indf2	equ	0xFDF
  6113                           postinc2	equ	0xFDE
  6114                           fsr2h	equ	0xFDA
  6115                           fsr2l	equ	0xFD9
  6116                           status	equ	0xFD8
  6117                           
  6118 ;; *************** function _Mcp2515ReadCanMsg *****************
  6119 ;; Defined at:
  6120 ;;		line 194 in file "mcp2515.c"
  6121 ;; Parameters:    Size  Location     Type
  6122 ;;  mcp_addr        1    wreg     const unsigned char 
  6123 ;;  msg             2   47[COMRAM] PTR struct CANMESSAGE
  6124 ;;		 -> rxBuffer(68), 
  6125 ;; Auto vars:     Size  Location     Type
  6126 ;;  mcp_addr        1   61[COMRAM] const unsigned char 
  6127 ;;  cmd            10   51[COMRAM] unsigned char [10]
  6128 ;; Return value:  Size  Location     Type
  6129 ;;                  1    wreg      void 
  6130 ;; Registers used:
  6131 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6132 ;; Tracked objects:
  6133 ;;		On entry : 0/0
  6134 ;;		On exit  : 0/0
  6135 ;;		Unchanged: 0/0
  6136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6137 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6138 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6139 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6140 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6141 ;;Total ram usage:       15 bytes
  6142 ;; Hardware stack levels used:    1
  6143 ;; Hardware stack levels required when called:    3
  6144 ;; This function calls:
  6145 ;;		_Mcp2515ReadCanId
  6146 ;;		_Spi_ReadWrite
  6147 ;;		_memcpy
  6148 ;; This function is called by:
  6149 ;;		_Can_ReadMessage
  6150 ;; This function uses a non-reentrant model
  6151 ;;
  6152                           
  6153                           	psect	text27
  6154  001F36                     __ptext27:
  6155                           	opt stack 0
  6156  001F36                     _Mcp2515ReadCanMsg:
  6157                           	opt stack 17
  6158                           
  6159                           ;incstack = 0
  6160                           ;Mcp2515ReadCanMsg@mcp_addr stored from wreg
  6161  001F36  6E3E               	movwf	Mcp2515ReadCanMsg@mcp_addr,c
  6162                           
  6163                           ;mcp2515.c: 197: uint8_t cmd[10];
  6164                           ;mcp2515.c: 202: Mcp2515ReadCanId( mcp_addr, &(msg->extended_identifier),
  6165                           ;mcp2515.c: 203: &(msg->identifier) );
  6166  001F38  C030  F013         	movff	Mcp2515ReadCanMsg@msg,Mcp2515ReadCanId@ext
  6167  001F3C  C031  F014         	movff	Mcp2515ReadCanMsg@msg+1,Mcp2515ReadCanId@ext+1
  6168  001F40  0E01               	movlw	1
  6169  001F42  2430               	addwf	Mcp2515ReadCanMsg@msg,w,c
  6170  001F44  6E15               	movwf	Mcp2515ReadCanId@can_id,c
  6171  001F46  0E00               	movlw	0
  6172  001F48  2031               	addwfc	Mcp2515ReadCanMsg@msg+1,w,c
  6173  001F4A  6E16               	movwf	Mcp2515ReadCanId@can_id+1,c
  6174  001F4C  503E               	movf	Mcp2515ReadCanMsg@mcp_addr,w,c
  6175  001F4E  ECA1  F00C         	call	_Mcp2515ReadCanId
  6176                           
  6177                           ;mcp2515.c: 205: cmd[0] = 0x03;
  6178  001F52  0E03               	movlw	3
  6179  001F54  6E34               	movwf	Mcp2515ReadCanMsg@cmd,c
  6180                           
  6181                           ;mcp2515.c: 206: cmd[1] = mcp_addr-1;
  6182  001F56  043E               	decf	Mcp2515ReadCanMsg@mcp_addr,w,c
  6183  001F58  6E35               	movwf	Mcp2515ReadCanMsg@cmd+1,c
  6184                           
  6185                           ;mcp2515.c: 207: Spi_ReadWrite(cmd,3);
  6186  001F5A  0E34               	movlw	low Mcp2515ReadCanMsg@cmd
  6187  001F5C  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  6188  001F5E  0E00               	movlw	high Mcp2515ReadCanMsg@cmd
  6189  001F60  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  6190  001F62  0E03               	movlw	3
  6191  001F64  6E0F               	movwf	Spi_ReadWrite@size,c
  6192  001F66  0E00               	movlw	0
  6193  001F68  6E10               	movwf	Spi_ReadWrite@size+1,c
  6194  001F6A  0E00               	movlw	0
  6195  001F6C  6E11               	movwf	Spi_ReadWrite@size+2,c
  6196  001F6E  0E00               	movlw	0
  6197  001F70  6E12               	movwf	Spi_ReadWrite@size+3,c
  6198  001F72  EC1D  F015         	call	_Spi_ReadWrite	;wreg free
  6199                           
  6200                           ;mcp2515.c: 208: msg->rtr = 0;
  6201  001F76  EE20 F00E          	lfsr	2,14
  6202  001F7A  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  6203  001F7C  26D9               	addwf	fsr2l,f,c
  6204  001F7E  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  6205  001F80  22DA               	addwfc	fsr2h,f,c
  6206  001F82  0E00               	movlw	0
  6207  001F84  6EDF               	movwf	indf2,c
  6208                           
  6209                           ;mcp2515.c: 209: if (cmd[2] & 0x08)
  6210  001F86  A636               	btfss	Mcp2515ReadCanMsg@cmd+2,3,c
  6211  001F88  D008               	goto	i2l1863
  6212                           
  6213                           ;mcp2515.c: 210: {
  6214                           ;mcp2515.c: 211: msg->rtr = 1;
  6215  001F8A  EE20 F00E          	lfsr	2,14
  6216  001F8E  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  6217  001F90  26D9               	addwf	fsr2l,f,c
  6218  001F92  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  6219  001F94  22DA               	addwfc	fsr2h,f,c
  6220  001F96  0E01               	movlw	1
  6221  001F98  6EDF               	movwf	indf2,c
  6222  001F9A                     i2l1863:
  6223                           
  6224                           ;mcp2515.c: 212: }
  6225                           ;mcp2515.c: 214: cmd[0] = 0x03;
  6226  001F9A  0E03               	movlw	3
  6227  001F9C  6E34               	movwf	Mcp2515ReadCanMsg@cmd,c
  6228                           
  6229                           ;mcp2515.c: 215: cmd[1] = mcp_addr+4;
  6230  001F9E  503E               	movf	Mcp2515ReadCanMsg@mcp_addr,w,c
  6231  001FA0  0F04               	addlw	4
  6232  001FA2  6E35               	movwf	Mcp2515ReadCanMsg@cmd+1,c
  6233                           
  6234                           ;mcp2515.c: 216: Spi_ReadWrite(cmd,3);
  6235  001FA4  0E34               	movlw	low Mcp2515ReadCanMsg@cmd
  6236  001FA6  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  6237  001FA8  0E00               	movlw	high Mcp2515ReadCanMsg@cmd
  6238  001FAA  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  6239  001FAC  0E03               	movlw	3
  6240  001FAE  6E0F               	movwf	Spi_ReadWrite@size,c
  6241  001FB0  0E00               	movlw	0
  6242  001FB2  6E10               	movwf	Spi_ReadWrite@size+1,c
  6243  001FB4  0E00               	movlw	0
  6244  001FB6  6E11               	movwf	Spi_ReadWrite@size+2,c
  6245  001FB8  0E00               	movlw	0
  6246  001FBA  6E12               	movwf	Spi_ReadWrite@size+3,c
  6247  001FBC  EC1D  F015         	call	_Spi_ReadWrite	;wreg free
  6248                           
  6249                           ;mcp2515.c: 217: msg->dlc = cmd[2] & 0x0F;
  6250  001FC0  EE20 F005          	lfsr	2,5
  6251  001FC4  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  6252  001FC6  26D9               	addwf	fsr2l,f,c
  6253  001FC8  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  6254  001FCA  22DA               	addwfc	fsr2h,f,c
  6255  001FCC  5036               	movf	Mcp2515ReadCanMsg@cmd+2,w,c
  6256  001FCE  0B0F               	andlw	15
  6257  001FD0  6EDF               	movwf	indf2,c
  6258                           
  6259                           ;mcp2515.c: 219: cmd[0] = 0x03;
  6260  001FD2  0E03               	movlw	3
  6261  001FD4  6E34               	movwf	Mcp2515ReadCanMsg@cmd,c
  6262                           
  6263                           ;mcp2515.c: 220: cmd[1] = mcp_addr+5;
  6264  001FD6  503E               	movf	Mcp2515ReadCanMsg@mcp_addr,w,c
  6265  001FD8  0F05               	addlw	5
  6266  001FDA  6E35               	movwf	Mcp2515ReadCanMsg@cmd+1,c
  6267                           
  6268                           ;mcp2515.c: 221: Spi_ReadWrite(cmd,msg->dlc + 2);
  6269  001FDC  0E34               	movlw	low Mcp2515ReadCanMsg@cmd
  6270  001FDE  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  6271  001FE0  0E00               	movlw	high Mcp2515ReadCanMsg@cmd
  6272  001FE2  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  6273  001FE4  EE20 F005          	lfsr	2,5
  6274  001FE8  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  6275  001FEA  26D9               	addwf	fsr2l,f,c
  6276  001FEC  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  6277  001FEE  22DA               	addwfc	fsr2h,f,c
  6278  001FF0  50DF               	movf	indf2,w,c
  6279  001FF2  6E32               	movwf	??_Mcp2515ReadCanMsg& (0+255),c
  6280  001FF4  6A33               	clrf	(??_Mcp2515ReadCanMsg+1)& (0+255),c
  6281  001FF6  0E02               	movlw	2
  6282  001FF8  2632               	addwf	??_Mcp2515ReadCanMsg,f,c
  6283  001FFA  0E00               	movlw	0
  6284  001FFC  2233               	addwfc	??_Mcp2515ReadCanMsg+1,f,c
  6285  001FFE  C032  F00F         	movff	??_Mcp2515ReadCanMsg,Spi_ReadWrite@size
  6286  002002  C033  F010         	movff	??_Mcp2515ReadCanMsg+1,Spi_ReadWrite@size+1
  6287  002006  0E00               	movlw	0
  6288  002008  BE10               	btfsc	Spi_ReadWrite@size+1,7,c
  6289  00200A  0EFF               	movlw	-1
  6290  00200C  6E11               	movwf	Spi_ReadWrite@size+2,c
  6291  00200E  6E12               	movwf	Spi_ReadWrite@size+3,c
  6292  002010  EC1D  F015         	call	_Spi_ReadWrite	;wreg free
  6293                           
  6294                           ;mcp2515.c: 222: memcpy((void *)msg->dta,(const void *)&cmd[2],msg->dlc);
  6295  002014  0E06               	movlw	6
  6296  002016  2430               	addwf	Mcp2515ReadCanMsg@msg,w,c
  6297  002018  6E01               	movwf	memcpy@d1,c
  6298  00201A  0E00               	movlw	0
  6299  00201C  2031               	addwfc	Mcp2515ReadCanMsg@msg+1,w,c
  6300  00201E  6E02               	movwf	memcpy@d1+1,c
  6301  002020  0E36               	movlw	low (Mcp2515ReadCanMsg@cmd+2)
  6302  002022  6E03               	movwf	memcpy@s1,c
  6303  002024  0E00               	movlw	high (Mcp2515ReadCanMsg@cmd+2)
  6304  002026  6E04               	movwf	memcpy@s1+1,c
  6305  002028  EE20 F005          	lfsr	2,5
  6306  00202C  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  6307  00202E  26D9               	addwf	fsr2l,f,c
  6308  002030  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  6309  002032  22DA               	addwfc	fsr2h,f,c
  6310  002034  50DF               	movf	indf2,w,c
  6311  002036  6E32               	movwf	??_Mcp2515ReadCanMsg& (0+255),c
  6312  002038  5032               	movf	??_Mcp2515ReadCanMsg,w,c
  6313  00203A  6E05               	movwf	memcpy@n,c
  6314  00203C  6A06               	clrf	memcpy@n+1,c
  6315  00203E  EC68  F014         	call	_memcpy	;wreg free
  6316  002042  0012               	return		;funcret
  6317  002044                     __end_of_Mcp2515ReadCanMsg:
  6318                           	opt stack 0
  6319                           pclatu	equ	0xFFB
  6320                           pclath	equ	0xFFA
  6321                           tblptru	equ	0xFF8
  6322                           tblptrh	equ	0xFF7
  6323                           tblptrl	equ	0xFF6
  6324                           tablat	equ	0xFF5
  6325                           prodh	equ	0xFF4
  6326                           prodl	equ	0xFF3
  6327                           intcon	equ	0xFF2
  6328                           intcon2	equ	0xFF1
  6329                           intcon3	equ	0xFF0
  6330                           postinc0	equ	0xFEE
  6331                           fsr0h	equ	0xFEA
  6332                           fsr0l	equ	0xFE9
  6333                           wreg	equ	0xFE8
  6334                           indf1	equ	0xFE7
  6335                           postinc1	equ	0xFE6
  6336                           postdec1	equ	0xFE5
  6337                           fsr1h	equ	0xFE2
  6338                           fsr1l	equ	0xFE1
  6339                           indf2	equ	0xFDF
  6340                           postinc2	equ	0xFDE
  6341                           fsr2h	equ	0xFDA
  6342                           fsr2l	equ	0xFD9
  6343                           status	equ	0xFD8
  6344                           
  6345 ;; *************** function _memcpy *****************
  6346 ;; Defined at:
  6347 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\memcpy.c"
  6348 ;; Parameters:    Size  Location     Type
  6349 ;;  d1              2    0[COMRAM] PTR void 
  6350 ;;		 -> rxBuffer(68), 
  6351 ;;  s1              2    2[COMRAM] PTR const void 
  6352 ;;		 -> Mcp2515ReadCanMsg@cmd(10), 
  6353 ;;  n               2    4[COMRAM] unsigned int 
  6354 ;; Auto vars:     Size  Location     Type
  6355 ;;  s               2    8[COMRAM] PTR const unsigned char 
  6356 ;;		 -> Mcp2515ReadCanMsg@cmd(10), 
  6357 ;;  d               2    6[COMRAM] PTR unsigned char 
  6358 ;;		 -> rxBuffer(68), 
  6359 ;;  tmp             1   10[COMRAM] unsigned char 
  6360 ;; Return value:  Size  Location     Type
  6361 ;;                  2    0[COMRAM] PTR void 
  6362 ;; Registers used:
  6363 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6364 ;; Tracked objects:
  6365 ;;		On entry : 0/0
  6366 ;;		On exit  : 0/0
  6367 ;;		Unchanged: 0/0
  6368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6369 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6370 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6372 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6373 ;;Total ram usage:       11 bytes
  6374 ;; Hardware stack levels used:    1
  6375 ;; This function calls:
  6376 ;;		Nothing
  6377 ;; This function is called by:
  6378 ;;		_Mcp2515ReadCanMsg
  6379 ;; This function uses a non-reentrant model
  6380 ;;
  6381                           
  6382                           	psect	text28
  6383  0028D0                     __ptext28:
  6384                           	opt stack 0
  6385  0028D0                     _memcpy:
  6386                           	opt stack 19
  6387                           
  6388                           ;incstack = 0
  6389  0028D0  C003  F009         	movff	memcpy@s1,memcpy@s
  6390  0028D4  C004  F00A         	movff	memcpy@s1+1,memcpy@s+1
  6391  0028D8  C001  F007         	movff	memcpy@d1,memcpy@d
  6392  0028DC  C002  F008         	movff	memcpy@d1+1,memcpy@d+1
  6393  0028E0  D010               	goto	i2l1817
  6394  0028E2                     i2l1809:
  6395  0028E2  C009  FFD9         	movff	memcpy@s,fsr2l
  6396  0028E6  C00A  FFDA         	movff	memcpy@s+1,fsr2h
  6397  0028EA  50DF               	movf	indf2,w,c
  6398  0028EC  6E0B               	movwf	memcpy@tmp,c
  6399  0028EE  4A09               	infsnz	memcpy@s,f,c
  6400  0028F0  2A0A               	incf	memcpy@s+1,f,c
  6401  0028F2  C007  FFD9         	movff	memcpy@d,fsr2l
  6402  0028F6  C008  FFDA         	movff	memcpy@d+1,fsr2h
  6403  0028FA  C00B  FFDF         	movff	memcpy@tmp,indf2
  6404  0028FE  4A07               	infsnz	memcpy@d,f,c
  6405  002900  2A08               	incf	memcpy@d+1,f,c
  6406  002902                     i2l1817:
  6407  002902  0605               	decf	memcpy@n,f,c
  6408  002904  A0D8               	btfss	status,0,c
  6409  002906  0606               	decf	memcpy@n+1,f,c
  6410  002908  2805               	incf	memcpy@n,w,c
  6411  00290A  E1EB               	bnz	i2l1809
  6412  00290C  2806               	incf	memcpy@n+1,w,c
  6413  00290E  B4D8               	btfsc	status,2,c
  6414  002910  0012               	return	
  6415  002912  D7E7               	goto	i2l1809
  6416  002914                     __end_of_memcpy:
  6417                           	opt stack 0
  6418                           pclatu	equ	0xFFB
  6419                           pclath	equ	0xFFA
  6420                           tblptru	equ	0xFF8
  6421                           tblptrh	equ	0xFF7
  6422                           tblptrl	equ	0xFF6
  6423                           tablat	equ	0xFF5
  6424                           prodh	equ	0xFF4
  6425                           prodl	equ	0xFF3
  6426                           intcon	equ	0xFF2
  6427                           intcon2	equ	0xFF1
  6428                           intcon3	equ	0xFF0
  6429                           postinc0	equ	0xFEE
  6430                           fsr0h	equ	0xFEA
  6431                           fsr0l	equ	0xFE9
  6432                           wreg	equ	0xFE8
  6433                           indf1	equ	0xFE7
  6434                           postinc1	equ	0xFE6
  6435                           postdec1	equ	0xFE5
  6436                           fsr1h	equ	0xFE2
  6437                           fsr1l	equ	0xFE1
  6438                           indf2	equ	0xFDF
  6439                           postinc2	equ	0xFDE
  6440                           fsr2h	equ	0xFDA
  6441                           fsr2l	equ	0xFD9
  6442                           status	equ	0xFD8
  6443                           
  6444 ;; *************** function _Mcp2515ReadCanId *****************
  6445 ;; Defined at:
  6446 ;;		line 164 in file "mcp2515.c"
  6447 ;; Parameters:    Size  Location     Type
  6448 ;;  mcp_addr        1    wreg     const unsigned char 
  6449 ;;  ext             2   18[COMRAM] PTR unsigned char 
  6450 ;;		 -> rxBuffer(68), 
  6451 ;;  can_id          2   20[COMRAM] PTR unsigned long 
  6452 ;;		 -> rxBuffer(68), 
  6453 ;; Auto vars:     Size  Location     Type
  6454 ;;  mcp_addr        1   40[COMRAM] const unsigned char 
  6455 ;;  msg             6   41[COMRAM] unsigned char [6]
  6456 ;; Return value:  Size  Location     Type
  6457 ;;                  1    wreg      void 
  6458 ;; Registers used:
  6459 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6460 ;; Tracked objects:
  6461 ;;		On entry : 0/0
  6462 ;;		On exit  : 0/0
  6463 ;;		Unchanged: 0/0
  6464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6465 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6466 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6467 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6468 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6469 ;;Total ram usage:       29 bytes
  6470 ;; Hardware stack levels used:    1
  6471 ;; Hardware stack levels required when called:    2
  6472 ;; This function calls:
  6473 ;;		_Spi_ReadWrite
  6474 ;; This function is called by:
  6475 ;;		_Mcp2515ReadCanMsg
  6476 ;; This function uses a non-reentrant model
  6477 ;;
  6478                           
  6479                           	psect	text29
  6480  001942                     __ptext29:
  6481                           	opt stack 0
  6482  001942                     _Mcp2515ReadCanId:
  6483                           	opt stack 17
  6484                           
  6485                           ;incstack = 0
  6486                           ;Mcp2515ReadCanId@mcp_addr stored from wreg
  6487  001942  6E29               	movwf	Mcp2515ReadCanId@mcp_addr,c
  6488                           
  6489                           ;mcp2515.c: 167: uint8_t msg[]={0x03,0,0,0,0,0};
  6490  001944  EE20  F0D2         	lfsr	2,Mcp2515ReadCanId@F8123
  6491  001948  EE10  F02A         	lfsr	1,Mcp2515ReadCanId@msg
  6492  00194C  0E05               	movlw	5
  6493  00194E                     i2u73_41:
  6494  00194E  CFDB FFE3          	movff	plusw2,plusw1
  6495  001952  06E8               	decf	wreg,f,c
  6496  001954  E2FC               	bc	i2u73_41
  6497                           
  6498                           ;mcp2515.c: 169: msg[1] = mcp_addr;
  6499  001956  C029  F02B         	movff	Mcp2515ReadCanId@mcp_addr,Mcp2515ReadCanId@msg+1
  6500                           
  6501                           ;mcp2515.c: 170: *ext = 0;
  6502  00195A  C013  FFD9         	movff	Mcp2515ReadCanId@ext,fsr2l
  6503  00195E  C014  FFDA         	movff	Mcp2515ReadCanId@ext+1,fsr2h
  6504  001962  0E00               	movlw	0
  6505  001964  6EDF               	movwf	indf2,c
  6506                           
  6507                           ;mcp2515.c: 171: *can_id = 0;
  6508  001966  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  6509  00196A  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  6510  00196E  6ADE               	clrf	postinc2,c
  6511  001970  6ADE               	clrf	postinc2,c
  6512  001972  6ADE               	clrf	postinc2,c
  6513  001974  6ADD               	clrf	postdec2,c
  6514                           
  6515                           ;mcp2515.c: 172: Spi_ReadWrite(msg,sizeof(msg));
  6516  001976  0E2A               	movlw	low Mcp2515ReadCanId@msg
  6517  001978  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  6518  00197A  0E00               	movlw	high Mcp2515ReadCanId@msg
  6519  00197C  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  6520  00197E  0E06               	movlw	6
  6521  001980  6E0F               	movwf	Spi_ReadWrite@size,c
  6522  001982  0E00               	movlw	0
  6523  001984  6E10               	movwf	Spi_ReadWrite@size+1,c
  6524  001986  0E00               	movlw	0
  6525  001988  6E11               	movwf	Spi_ReadWrite@size+2,c
  6526  00198A  0E00               	movlw	0
  6527  00198C  6E12               	movwf	Spi_ReadWrite@size+3,c
  6528  00198E  EC1D  F015         	call	_Spi_ReadWrite	;wreg free
  6529                           
  6530                           ;mcp2515.c: 174: *can_id = (msg[0+2]<<3) + (msg[1+2]>>5);
  6531  001992  C02D  F017         	movff	Mcp2515ReadCanId@msg+3,??_Mcp2515ReadCanId
  6532  001996  0E05               	movlw	5
  6533  001998  6E18               	movwf	(??_Mcp2515ReadCanId+1)& (0+255),c
  6534  00199A                     i2u74_45:
  6535  00199A  90D8               	bcf	status,0,c
  6536  00199C  3217               	rrcf	??_Mcp2515ReadCanId,f,c
  6537  00199E  2E18               	decfsz	(??_Mcp2515ReadCanId+1)& (0+255),f,c
  6538  0019A0  D7FC               	goto	i2u74_45
  6539  0019A2  502C               	movf	Mcp2515ReadCanId@msg+2,w,c
  6540  0019A4  6E19               	movwf	(??_Mcp2515ReadCanId+2)& (0+255),c
  6541  0019A6  6A1A               	clrf	(??_Mcp2515ReadCanId+3)& (0+255),c
  6542  0019A8  90D8               	bcf	status,0,c
  6543  0019AA  3619               	rlcf	??_Mcp2515ReadCanId+2,f,c
  6544  0019AC  361A               	rlcf	??_Mcp2515ReadCanId+3,f,c
  6545  0019AE  90D8               	bcf	status,0,c
  6546  0019B0  3619               	rlcf	??_Mcp2515ReadCanId+2,f,c
  6547  0019B2  361A               	rlcf	??_Mcp2515ReadCanId+3,f,c
  6548  0019B4  90D8               	bcf	status,0,c
  6549  0019B6  3619               	rlcf	??_Mcp2515ReadCanId+2,f,c
  6550  0019B8  361A               	rlcf	??_Mcp2515ReadCanId+3,f,c
  6551  0019BA  5017               	movf	??_Mcp2515ReadCanId,w,c
  6552  0019BC  2419               	addwf	??_Mcp2515ReadCanId+2,w,c
  6553  0019BE  6E1B               	movwf	(??_Mcp2515ReadCanId+4)& (0+255),c
  6554  0019C0  0E00               	movlw	0
  6555  0019C2  201A               	addwfc	??_Mcp2515ReadCanId+3,w,c
  6556  0019C4  6E1C               	movwf	(??_Mcp2515ReadCanId+5)& (0+255),c
  6557  0019C6  6A1D               	clrf	(??_Mcp2515ReadCanId+6)& (0+255),c
  6558  0019C8  BE1C               	btfsc	(??_Mcp2515ReadCanId+5)& (0+255),7,c
  6559  0019CA  061D               	decf	(??_Mcp2515ReadCanId+6)& (0+255),f,c
  6560  0019CC  501D               	movf	(??_Mcp2515ReadCanId+6)& (0+255),w,c
  6561  0019CE  6E1E               	movwf	(??_Mcp2515ReadCanId+7)& (0+255),c
  6562  0019D0  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  6563  0019D4  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  6564  0019D8  C01B  FFDE         	movff	??_Mcp2515ReadCanId+4,postinc2
  6565  0019DC  C01C  FFDE         	movff	??_Mcp2515ReadCanId+5,postinc2
  6566  0019E0  C01D  FFDE         	movff	??_Mcp2515ReadCanId+6,postinc2
  6567  0019E4  C01E  FFDE         	movff	??_Mcp2515ReadCanId+7,postinc2
  6568                           
  6569                           ;mcp2515.c: 176: if ( (msg[1+2] & 0x08) == 0x08 )
  6570  0019E8  A62D               	btfss	Mcp2515ReadCanId@msg+3,3,c
  6571  0019EA  0012               	return	
  6572                           
  6573                           ;mcp2515.c: 177: {
  6574                           ;mcp2515.c: 179: *can_id = (*can_id<<2) + (msg[1+2] & 0x03);
  6575  0019EC  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  6576  0019F0  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  6577  0019F4  CFDE F017          	movff	postinc2,??_Mcp2515ReadCanId
  6578  0019F8  CFDE F018          	movff	postinc2,??_Mcp2515ReadCanId+1
  6579  0019FC  CFDE F019          	movff	postinc2,??_Mcp2515ReadCanId+2
  6580  001A00  CFDE F01A          	movff	postinc2,??_Mcp2515ReadCanId+3
  6581  001A04  0E02               	movlw	2
  6582  001A06                     i2u76_45:
  6583  001A06  90D8               	bcf	status,0,c
  6584  001A08  3617               	rlcf	??_Mcp2515ReadCanId,f,c
  6585  001A0A  3618               	rlcf	??_Mcp2515ReadCanId+1,f,c
  6586  001A0C  3619               	rlcf	??_Mcp2515ReadCanId+2,f,c
  6587  001A0E  361A               	rlcf	??_Mcp2515ReadCanId+3,f,c
  6588  001A10  2EE8               	decfsz	wreg,f,c
  6589  001A12  D7F9               	goto	i2u76_45
  6590  001A14  C02D  F01B         	movff	Mcp2515ReadCanId@msg+3,??_Mcp2515ReadCanId+4
  6591  001A18  0E03               	movlw	3
  6592  001A1A  161B               	andwf	??_Mcp2515ReadCanId+4,f,c
  6593  001A1C  501B               	movf	??_Mcp2515ReadCanId+4,w,c
  6594  001A1E  2417               	addwf	??_Mcp2515ReadCanId,w,c
  6595  001A20  6E1C               	movwf	(??_Mcp2515ReadCanId+5)& (0+255),c
  6596  001A22  0E00               	movlw	0
  6597  001A24  2018               	addwfc	??_Mcp2515ReadCanId+1,w,c
  6598  001A26  6E1D               	movwf	(??_Mcp2515ReadCanId+6)& (0+255),c
  6599  001A28  0E00               	movlw	0
  6600  001A2A  2019               	addwfc	??_Mcp2515ReadCanId+2,w,c
  6601  001A2C  6E1E               	movwf	(??_Mcp2515ReadCanId+7)& (0+255),c
  6602  001A2E  0E00               	movlw	0
  6603  001A30  201A               	addwfc	??_Mcp2515ReadCanId+3,w,c
  6604  001A32  6E1F               	movwf	(??_Mcp2515ReadCanId+8)& (0+255),c
  6605  001A34  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  6606  001A38  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  6607  001A3C  C01C  FFDE         	movff	??_Mcp2515ReadCanId+5,postinc2
  6608  001A40  C01D  FFDE         	movff	??_Mcp2515ReadCanId+6,postinc2
  6609  001A44  C01E  FFDE         	movff	??_Mcp2515ReadCanId+7,postinc2
  6610  001A48  C01F  FFDE         	movff	??_Mcp2515ReadCanId+8,postinc2
  6611                           
  6612                           ;mcp2515.c: 180: *can_id <<= 16;
  6613  001A4C  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  6614  001A50  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  6615  001A54  0E10               	movlw	16
  6616  001A56                     i2u77_45:
  6617  001A56  90D8               	bcf	status,0,c
  6618  001A58  36DE               	rlcf	postinc2,f,c
  6619  001A5A  36DE               	rlcf	postinc2,f,c
  6620  001A5C  36DE               	rlcf	postinc2,f,c
  6621  001A5E  36DD               	rlcf	postdec2,f,c
  6622  001A60  06D9               	decf	fsr2l,f,c
  6623  001A62  06D9               	decf	fsr2l,f,c
  6624  001A64  2EE8               	decfsz	wreg,f,c
  6625  001A66  D7F7               	goto	i2u77_45
  6626                           
  6627                           ;mcp2515.c: 181: *can_id = *can_id +(msg[2+2]<<8) + msg[3+2];
  6628  001A68  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  6629  001A6C  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  6630  001A70  CFDE F017          	movff	postinc2,??_Mcp2515ReadCanId
  6631  001A74  CFDE F018          	movff	postinc2,??_Mcp2515ReadCanId+1
  6632  001A78  CFDE F019          	movff	postinc2,??_Mcp2515ReadCanId+2
  6633  001A7C  CFDE F01A          	movff	postinc2,??_Mcp2515ReadCanId+3
  6634  001A80  502E               	movf	Mcp2515ReadCanId@msg+4,w,c
  6635  001A82  6E1C               	movwf	(??_Mcp2515ReadCanId+5)& (0+255),c
  6636  001A84  6A1B               	clrf	(??_Mcp2515ReadCanId+4)& (0+255),c
  6637  001A86  C01B  F01D         	movff	??_Mcp2515ReadCanId+4,??_Mcp2515ReadCanId+6
  6638  001A8A  C01C  F01E         	movff	??_Mcp2515ReadCanId+5,??_Mcp2515ReadCanId+7
  6639  001A8E  0E00               	movlw	0
  6640  001A90  BE1E               	btfsc	(??_Mcp2515ReadCanId+7)& (0+255),7,c
  6641  001A92  0EFF               	movlw	255
  6642  001A94  6E1F               	movwf	(??_Mcp2515ReadCanId+8)& (0+255),c
  6643  001A96  6E20               	movwf	(??_Mcp2515ReadCanId+9)& (0+255),c
  6644  001A98  502F               	movf	Mcp2515ReadCanId@msg+5,w,c
  6645  001A9A  241D               	addwf	??_Mcp2515ReadCanId+6,w,c
  6646  001A9C  6E21               	movwf	(??_Mcp2515ReadCanId+10)& (0+255),c
  6647  001A9E  0E00               	movlw	0
  6648  001AA0  201E               	addwfc	??_Mcp2515ReadCanId+7,w,c
  6649  001AA2  6E22               	movwf	(??_Mcp2515ReadCanId+11)& (0+255),c
  6650  001AA4  0E00               	movlw	0
  6651  001AA6  201F               	addwfc	??_Mcp2515ReadCanId+8,w,c
  6652  001AA8  6E23               	movwf	(??_Mcp2515ReadCanId+12)& (0+255),c
  6653  001AAA  0E00               	movlw	0
  6654  001AAC  2020               	addwfc	??_Mcp2515ReadCanId+9,w,c
  6655  001AAE  6E24               	movwf	(??_Mcp2515ReadCanId+13)& (0+255),c
  6656  001AB0  5017               	movf	??_Mcp2515ReadCanId,w,c
  6657  001AB2  2421               	addwf	??_Mcp2515ReadCanId+10,w,c
  6658  001AB4  6E25               	movwf	(??_Mcp2515ReadCanId+14)& (0+255),c
  6659  001AB6  5018               	movf	??_Mcp2515ReadCanId+1,w,c
  6660  001AB8  2022               	addwfc	??_Mcp2515ReadCanId+11,w,c
  6661  001ABA  6E26               	movwf	(??_Mcp2515ReadCanId+15)& (0+255),c
  6662  001ABC  5019               	movf	??_Mcp2515ReadCanId+2,w,c
  6663  001ABE  2023               	addwfc	??_Mcp2515ReadCanId+12,w,c
  6664  001AC0  6E27               	movwf	(??_Mcp2515ReadCanId+16)& (0+255),c
  6665  001AC2  501A               	movf	??_Mcp2515ReadCanId+3,w,c
  6666  001AC4  2024               	addwfc	??_Mcp2515ReadCanId+13,w,c
  6667  001AC6  6E28               	movwf	(??_Mcp2515ReadCanId+17)& (0+255),c
  6668  001AC8  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  6669  001ACC  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  6670  001AD0  C025  FFDE         	movff	??_Mcp2515ReadCanId+14,postinc2
  6671  001AD4  C026  FFDE         	movff	??_Mcp2515ReadCanId+15,postinc2
  6672  001AD8  C027  FFDE         	movff	??_Mcp2515ReadCanId+16,postinc2
  6673  001ADC  C028  FFDE         	movff	??_Mcp2515ReadCanId+17,postinc2
  6674                           
  6675                           ;mcp2515.c: 182: *ext = 1;
  6676  001AE0  C013  FFD9         	movff	Mcp2515ReadCanId@ext,fsr2l
  6677  001AE4  C014  FFDA         	movff	Mcp2515ReadCanId@ext+1,fsr2h
  6678  001AE8  0E01               	movlw	1
  6679  001AEA  6EDF               	movwf	indf2,c
  6680  001AEC  0012               	return	
  6681  001AEE                     __end_of_Mcp2515ReadCanId:
  6682                           	opt stack 0
  6683                           pclatu	equ	0xFFB
  6684                           pclath	equ	0xFFA
  6685                           tblptru	equ	0xFF8
  6686                           tblptrh	equ	0xFF7
  6687                           tblptrl	equ	0xFF6
  6688                           tablat	equ	0xFF5
  6689                           prodh	equ	0xFF4
  6690                           prodl	equ	0xFF3
  6691                           intcon	equ	0xFF2
  6692                           intcon2	equ	0xFF1
  6693                           intcon3	equ	0xFF0
  6694                           postinc0	equ	0xFEE
  6695                           fsr0h	equ	0xFEA
  6696                           fsr0l	equ	0xFE9
  6697                           wreg	equ	0xFE8
  6698                           indf1	equ	0xFE7
  6699                           postinc1	equ	0xFE6
  6700                           postdec1	equ	0xFE5
  6701                           plusw1	equ	0xFE3
  6702                           fsr1h	equ	0xFE2
  6703                           fsr1l	equ	0xFE1
  6704                           indf2	equ	0xFDF
  6705                           postinc2	equ	0xFDE
  6706                           postdec2	equ	0xFDD
  6707                           plusw2	equ	0xFDB
  6708                           fsr2h	equ	0xFDA
  6709                           fsr2l	equ	0xFD9
  6710                           status	equ	0xFD8
  6711                           
  6712 ;; *************** function _Can_OutBufferStatus *****************
  6713 ;; Defined at:
  6714 ;;		line 156 in file "can.c"
  6715 ;; Parameters:    Size  Location     Type
  6716 ;;		None
  6717 ;; Auto vars:     Size  Location     Type
  6718 ;;		None
  6719 ;; Return value:  Size  Location     Type
  6720 ;;                  1    wreg      unsigned char 
  6721 ;; Registers used:
  6722 ;;		wreg, status,2
  6723 ;; Tracked objects:
  6724 ;;		On entry : 0/0
  6725 ;;		On exit  : 0/0
  6726 ;;		Unchanged: 0/0
  6727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6732 ;;Total ram usage:        0 bytes
  6733 ;; Hardware stack levels used:    1
  6734 ;; This function calls:
  6735 ;;		Nothing
  6736 ;; This function is called by:
  6737 ;;		_Can_Isr
  6738 ;; This function uses a non-reentrant model
  6739 ;;
  6740                           
  6741                           	psect	text30
  6742  002A98                     __ptext30:
  6743                           	opt stack 0
  6744  002A98                     _Can_OutBufferStatus:
  6745                           	opt stack 22
  6746                           
  6747                           ;can.c: 158: return txBufferCount;
  6748                           
  6749                           ;incstack = 0
  6750  002A98  0100               	movlb	0	; () banked
  6751  002A9A  51AB               	movf	_txBufferCount& (0+255),w,b
  6752  002A9C  0012               	return	
  6753  002A9E                     __end_of_Can_OutBufferStatus:
  6754                           	opt stack 0
  6755                           pclatu	equ	0xFFB
  6756                           pclath	equ	0xFFA
  6757                           tblptru	equ	0xFF8
  6758                           tblptrh	equ	0xFF7
  6759                           tblptrl	equ	0xFF6
  6760                           tablat	equ	0xFF5
  6761                           prodh	equ	0xFF4
  6762                           prodl	equ	0xFF3
  6763                           intcon	equ	0xFF2
  6764                           intcon2	equ	0xFF1
  6765                           intcon3	equ	0xFF0
  6766                           postinc0	equ	0xFEE
  6767                           fsr0h	equ	0xFEA
  6768                           fsr0l	equ	0xFE9
  6769                           wreg	equ	0xFE8
  6770                           indf1	equ	0xFE7
  6771                           postinc1	equ	0xFE6
  6772                           postdec1	equ	0xFE5
  6773                           plusw1	equ	0xFE3
  6774                           fsr1h	equ	0xFE2
  6775                           fsr1l	equ	0xFE1
  6776                           indf2	equ	0xFDF
  6777                           postinc2	equ	0xFDE
  6778                           postdec2	equ	0xFDD
  6779                           plusw2	equ	0xFDB
  6780                           fsr2h	equ	0xFDA
  6781                           fsr2l	equ	0xFD9
  6782                           status	equ	0xFD8
  6783                           
  6784 ;; *************** function _Can_GetStatus *****************
  6785 ;; Defined at:
  6786 ;;		line 349 in file "can.c"
  6787 ;; Parameters:    Size  Location     Type
  6788 ;;		None
  6789 ;; Auto vars:     Size  Location     Type
  6790 ;;  msg4            4   18[COMRAM] unsigned char [4]
  6791 ;;  msg             3   22[COMRAM] unsigned char [3]
  6792 ;;  status          1   25[COMRAM] unsigned char 
  6793 ;; Return value:  Size  Location     Type
  6794 ;;                  1    wreg      unsigned char 
  6795 ;; Registers used:
  6796 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6797 ;; Tracked objects:
  6798 ;;		On entry : 0/0
  6799 ;;		On exit  : 0/0
  6800 ;;		Unchanged: 0/0
  6801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6803 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6805 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6806 ;;Total ram usage:        8 bytes
  6807 ;; Hardware stack levels used:    1
  6808 ;; Hardware stack levels required when called:    2
  6809 ;; This function calls:
  6810 ;;		_Spi_ReadWrite
  6811 ;; This function is called by:
  6812 ;;		_Can_Isr
  6813 ;; This function uses a non-reentrant model
  6814 ;;
  6815                           
  6816                           	psect	text31
  6817  00278C                     __ptext31:
  6818                           	opt stack 0
  6819  00278C                     _Can_GetStatus:
  6820                           	opt stack 20
  6821                           
  6822                           ;can.c: 351: uint8_t status;
  6823                           ;can.c: 352: uint8_t msg[]={0x03,0x2C,0};
  6824                           
  6825                           ; BSR set to: 0
  6826                           ;incstack = 0
  6827  00278C  C0E6  F017         	movff	Can_GetStatus@F8262,Can_GetStatus@msg
  6828  002790  C0E7  F018         	movff	Can_GetStatus@F8262+1,Can_GetStatus@msg+1
  6829  002794  C0E8  F019         	movff	Can_GetStatus@F8262+2,Can_GetStatus@msg+2
  6830                           
  6831                           ;can.c: 353: uint8_t msg4[]={0x05,0x2C,0x1C,0};
  6832  002798  C0DC  F013         	movff	Can_GetStatus@F8264,Can_GetStatus@msg4
  6833  00279C  C0DD  F014         	movff	Can_GetStatus@F8264+1,Can_GetStatus@msg4+1
  6834  0027A0  C0DE  F015         	movff	Can_GetStatus@F8264+2,Can_GetStatus@msg4+2
  6835  0027A4  C0DF  F016         	movff	Can_GetStatus@F8264+3,Can_GetStatus@msg4+3
  6836                           
  6837                           ;can.c: 355: Spi_ReadWrite(msg,sizeof(msg));
  6838  0027A8  0E17               	movlw	low Can_GetStatus@msg
  6839  0027AA  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  6840  0027AC  0E00               	movlw	high Can_GetStatus@msg
  6841  0027AE  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  6842  0027B0  0E03               	movlw	3
  6843  0027B2  6E0F               	movwf	Spi_ReadWrite@size,c
  6844  0027B4  0E00               	movlw	0
  6845  0027B6  6E10               	movwf	Spi_ReadWrite@size+1,c
  6846  0027B8  0E00               	movlw	0
  6847  0027BA  6E11               	movwf	Spi_ReadWrite@size+2,c
  6848  0027BC  0E00               	movlw	0
  6849  0027BE  6E12               	movwf	Spi_ReadWrite@size+3,c
  6850  0027C0  EC1D  F015         	call	_Spi_ReadWrite	;wreg free
  6851                           
  6852                           ;can.c: 356: status = msg[2];
  6853  0027C4  C019  F01A         	movff	Can_GetStatus@msg+2,Can_GetStatus@status
  6854                           
  6855                           ;can.c: 357: msg4[2] = status & 0x1C;
  6856  0027C8  501A               	movf	Can_GetStatus@status,w,c
  6857  0027CA  0B1C               	andlw	28
  6858  0027CC  6E15               	movwf	Can_GetStatus@msg4+2,c
  6859                           
  6860                           ;can.c: 358: Spi_ReadWrite(msg4,sizeof(msg4));
  6861  0027CE  0E13               	movlw	low Can_GetStatus@msg4
  6862  0027D0  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  6863  0027D2  0E00               	movlw	high Can_GetStatus@msg4
  6864  0027D4  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  6865  0027D6  0E04               	movlw	4
  6866  0027D8  6E0F               	movwf	Spi_ReadWrite@size,c
  6867  0027DA  0E00               	movlw	0
  6868  0027DC  6E10               	movwf	Spi_ReadWrite@size+1,c
  6869  0027DE  0E00               	movlw	0
  6870  0027E0  6E11               	movwf	Spi_ReadWrite@size+2,c
  6871  0027E2  0E00               	movlw	0
  6872  0027E4  6E12               	movwf	Spi_ReadWrite@size+3,c
  6873  0027E6  EC1D  F015         	call	_Spi_ReadWrite	;wreg free
  6874                           
  6875                           ;can.c: 359: return status;
  6876  0027EA  501A               	movf	Can_GetStatus@status,w,c
  6877  0027EC  0012               	return	
  6878  0027EE                     __end_of_Can_GetStatus:
  6879                           	opt stack 0
  6880                           pclatu	equ	0xFFB
  6881                           pclath	equ	0xFFA
  6882                           tblptru	equ	0xFF8
  6883                           tblptrh	equ	0xFF7
  6884                           tblptrl	equ	0xFF6
  6885                           tablat	equ	0xFF5
  6886                           prodh	equ	0xFF4
  6887                           prodl	equ	0xFF3
  6888                           intcon	equ	0xFF2
  6889                           intcon2	equ	0xFF1
  6890                           intcon3	equ	0xFF0
  6891                           postinc0	equ	0xFEE
  6892                           fsr0h	equ	0xFEA
  6893                           fsr0l	equ	0xFE9
  6894                           wreg	equ	0xFE8
  6895                           indf1	equ	0xFE7
  6896                           postinc1	equ	0xFE6
  6897                           postdec1	equ	0xFE5
  6898                           plusw1	equ	0xFE3
  6899                           fsr1h	equ	0xFE2
  6900                           fsr1l	equ	0xFE1
  6901                           indf2	equ	0xFDF
  6902                           postinc2	equ	0xFDE
  6903                           postdec2	equ	0xFDD
  6904                           plusw2	equ	0xFDB
  6905                           fsr2h	equ	0xFDA
  6906                           fsr2l	equ	0xFD9
  6907                           status	equ	0xFD8
  6908                           
  6909 ;; *************** function _Spi_ReadWrite *****************
  6910 ;; Defined at:
  6911 ;;		line 319 in file "can.c"
  6912 ;; Parameters:    Size  Location     Type
  6913 ;;  rx_tx           2   12[COMRAM] PTR unsigned char 
  6914 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515ReadCanMsg@cmd(10), Mcp2515ReadCanId@msg(6), Can_ReadMessage@buf(4), 
  6915 ;;		 -> Can_GetStatus@msg4(4), Can_GetStatus@msg(3), 
  6916 ;;  size            4   14[COMRAM] unsigned long 
  6917 ;; Auto vars:     Size  Location     Type
  6918 ;;		None
  6919 ;; Return value:  Size  Location     Type
  6920 ;;                  1    wreg      void 
  6921 ;; Registers used:
  6922 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6923 ;; Tracked objects:
  6924 ;;		On entry : 0/0
  6925 ;;		On exit  : 0/0
  6926 ;;		Unchanged: 0/0
  6927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6928 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6931 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6932 ;;Total ram usage:        6 bytes
  6933 ;; Hardware stack levels used:    1
  6934 ;; Hardware stack levels required when called:    1
  6935 ;; This function calls:
  6936 ;;		i2_SPIRW
  6937 ;; This function is called by:
  6938 ;;		_Can_GetStatus
  6939 ;;		_Can_ReadMessage
  6940 ;;		_Mcp2515ReadCanId
  6941 ;;		_Mcp2515ReadCanMsg
  6942 ;;		_Mcp2515GetNextFreeTXBuf
  6943 ;; This function uses a non-reentrant model
  6944 ;;
  6945                           
  6946                           	psect	text32
  6947  002A3A                     __ptext32:
  6948                           	opt stack 0
  6949  002A3A                     _Spi_ReadWrite:
  6950                           	opt stack 18
  6951                           
  6952                           ;can.c: 321: SPIRW(rx_tx, rx_tx, size);
  6953                           
  6954                           ;incstack = 0
  6955  002A3A  C00D  F001         	movff	Spi_ReadWrite@rx_tx,i2SPIRW@tx
  6956  002A3E  C00E  F002         	movff	Spi_ReadWrite@rx_tx+1,i2SPIRW@tx+1
  6957  002A42  C00D  F003         	movff	Spi_ReadWrite@rx_tx,i2SPIRW@rx
  6958  002A46  C00E  F004         	movff	Spi_ReadWrite@rx_tx+1,i2SPIRW@rx+1
  6959  002A4A  C00F  F005         	movff	Spi_ReadWrite@size,i2SPIRW@size
  6960  002A4E  C010  F006         	movff	Spi_ReadWrite@size+1,i2SPIRW@size+1
  6961  002A52  C011  F007         	movff	Spi_ReadWrite@size+2,i2SPIRW@size+2
  6962  002A56  C012  F008         	movff	Spi_ReadWrite@size+3,i2SPIRW@size+3
  6963  002A5A  ECC6  F012         	call	i2_SPIRW	;wreg free
  6964  002A5E  0012               	return		;funcret
  6965  002A60                     __end_of_Spi_ReadWrite:
  6966                           	opt stack 0
  6967                           pclatu	equ	0xFFB
  6968                           pclath	equ	0xFFA
  6969                           tblptru	equ	0xFF8
  6970                           tblptrh	equ	0xFF7
  6971                           tblptrl	equ	0xFF6
  6972                           tablat	equ	0xFF5
  6973                           prodh	equ	0xFF4
  6974                           prodl	equ	0xFF3
  6975                           intcon	equ	0xFF2
  6976                           intcon2	equ	0xFF1
  6977                           intcon3	equ	0xFF0
  6978                           postinc0	equ	0xFEE
  6979                           fsr0h	equ	0xFEA
  6980                           fsr0l	equ	0xFE9
  6981                           wreg	equ	0xFE8
  6982                           indf1	equ	0xFE7
  6983                           postinc1	equ	0xFE6
  6984                           postdec1	equ	0xFE5
  6985                           plusw1	equ	0xFE3
  6986                           fsr1h	equ	0xFE2
  6987                           fsr1l	equ	0xFE1
  6988                           indf2	equ	0xFDF
  6989                           postinc2	equ	0xFDE
  6990                           postdec2	equ	0xFDD
  6991                           plusw2	equ	0xFDB
  6992                           fsr2h	equ	0xFDA
  6993                           fsr2l	equ	0xFD9
  6994                           status	equ	0xFD8
  6995                           
  6996 ;; *************** function i2_SPIRW *****************
  6997 ;; Defined at:
  6998 ;;		line 293 in file "can.c"
  6999 ;; Parameters:    Size  Location     Type
  7000 ;;  tx              2    0[COMRAM] PTR const unsigned char 
  7001 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515WriteCanMsg@buf(10), Mcp2515WriteCanId@buf(6), Mcp2515ReadCanMsg@cmd(10),
      + 
  7002 ;;		 -> Mcp2515ReadCanId@msg(6), Mcp2515Sleep@cmdMask4(3), Mcp2515_Init@cmdWrite3(3), Mcp2515_Init@cmdMask4(4), 
  7003 ;;		 -> Mcp2515_Reset@cmd(1), Can_SendMessage@buf(4), Can_ReadMessage@buf(4), Can_GetStatus@msg4(4), 
  7004 ;;		 -> Can_GetStatus@msg(3), 
  7005 ;;  rx              2    2[COMRAM] PTR unsigned char 
  7006 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515ReadCanMsg@cmd(10), Mcp2515ReadCanId@msg(6), Can_ReadMessage@buf(4), 
  7007 ;;		 -> Can_GetStatus@msg4(4), Can_GetStatus@msg(3), NULL(0), 
  7008 ;;  size            4    4[COMRAM] unsigned long 
  7009 ;; Auto vars:     Size  Location     Type
  7010 ;;  SPIRW           4    8[COMRAM] unsigned long 
  7011 ;; Return value:  Size  Location     Type
  7012 ;;                  1    wreg      void 
  7013 ;; Registers used:
  7014 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7015 ;; Tracked objects:
  7016 ;;		On entry : 0/0
  7017 ;;		On exit  : 0/0
  7018 ;;		Unchanged: 0/0
  7019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7020 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7021 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7023 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7024 ;;Total ram usage:       12 bytes
  7025 ;; Hardware stack levels used:    1
  7026 ;; This function calls:
  7027 ;;		Nothing
  7028 ;; This function is called by:
  7029 ;;		_Spi_ReadWrite
  7030 ;;		i2_Spi_Write
  7031 ;; This function uses a non-reentrant model
  7032 ;;
  7033                           
  7034                           	psect	text33
  7035  00258C                     __ptext33:
  7036                           	opt stack 0
  7037  00258C                     i2_SPIRW:
  7038                           	opt stack 19
  7039                           
  7040                           ;can.c: 295: uint32_t i;
  7041                           ;can.c: 297: SSPCON1 = 0b00111010;
  7042                           
  7043                           ;incstack = 0
  7044  00258C  0E3A               	movlw	58
  7045  00258E  6EC6               	movwf	4038,c	;volatile
  7046                           
  7047                           ;can.c: 299: LATD1 = 0;
  7048  002590  928C               	bcf	3980,1,c	;volatile
  7049                           
  7050                           ;can.c: 300: for(i=0;i<size;i++)
  7051  002592  0E00               	movlw	0
  7052  002594  6E09               	movwf	i2SPIRW@i,c
  7053  002596  0E00               	movlw	0
  7054  002598  6E0A               	movwf	i2SPIRW@i+1,c
  7055  00259A  0E00               	movlw	0
  7056  00259C  6E0B               	movwf	i2SPIRW@i+2,c
  7057  00259E  0E00               	movlw	0
  7058  0025A0  6E0C               	movwf	i2SPIRW@i+3,c
  7059  0025A2  D01D               	goto	i2l1767
  7060  0025A4                     i2l1759:
  7061                           
  7062                           ;can.c: 301: {
  7063                           ;can.c: 302: SSPBUF = tx[i];
  7064  0025A4  5009               	movf	i2SPIRW@i,w,c
  7065  0025A6  2401               	addwf	i2SPIRW@tx,w,c
  7066  0025A8  6ED9               	movwf	fsr2l,c
  7067  0025AA  500A               	movf	i2SPIRW@i+1,w,c
  7068  0025AC  2002               	addwfc	i2SPIRW@tx+1,w,c
  7069  0025AE  6EDA               	movwf	fsr2h,c
  7070  0025B0  50DF               	movf	indf2,w,c
  7071  0025B2  6EC9               	movwf	4041,c	;volatile
  7072  0025B4                     i2l243:
  7073  0025B4  A69E               	btfss	3998,3,c	;volatile
  7074  0025B6  D7FE               	goto	i2l243
  7075                           
  7076                           ;can.c: 304: SSP1IF = 0;
  7077  0025B8  969E               	bcf	3998,3,c	;volatile
  7078                           
  7079                           ;can.c: 305: if(rx != 0)
  7080  0025BA  5003               	movf	i2SPIRW@rx,w,c
  7081  0025BC  1004               	iorwf	i2SPIRW@rx+1,w,c
  7082  0025BE  B4D8               	btfsc	status,2,c
  7083  0025C0  D008               	goto	i2l1765
  7084                           
  7085                           ;can.c: 306: rx[i] = SSPBUF;
  7086  0025C2  5009               	movf	i2SPIRW@i,w,c
  7087  0025C4  2403               	addwf	i2SPIRW@rx,w,c
  7088  0025C6  6ED9               	movwf	fsr2l,c
  7089  0025C8  500A               	movf	i2SPIRW@i+1,w,c
  7090  0025CA  2004               	addwfc	i2SPIRW@rx+1,w,c
  7091  0025CC  6EDA               	movwf	fsr2h,c
  7092  0025CE  CFC9 FFDF          	movff	4041,indf2	;volatile
  7093  0025D2                     i2l1765:
  7094  0025D2  0E01               	movlw	1
  7095  0025D4  2609               	addwf	i2SPIRW@i,f,c
  7096  0025D6  0E00               	movlw	0
  7097  0025D8  220A               	addwfc	i2SPIRW@i+1,f,c
  7098  0025DA  220B               	addwfc	i2SPIRW@i+2,f,c
  7099  0025DC  220C               	addwfc	i2SPIRW@i+3,f,c
  7100  0025DE                     i2l1767:
  7101  0025DE  5005               	movf	i2SPIRW@size,w,c
  7102  0025E0  5C09               	subwf	i2SPIRW@i,w,c
  7103  0025E2  5006               	movf	i2SPIRW@size+1,w,c
  7104  0025E4  580A               	subwfb	i2SPIRW@i+1,w,c
  7105  0025E6  5007               	movf	i2SPIRW@size+2,w,c
  7106  0025E8  580B               	subwfb	i2SPIRW@i+2,w,c
  7107  0025EA  5008               	movf	i2SPIRW@size+3,w,c
  7108  0025EC  580C               	subwfb	i2SPIRW@i+3,w,c
  7109  0025EE  A0D8               	btfss	status,0,c
  7110  0025F0  D7D9               	goto	i2l1759
  7111                           
  7112                           ;can.c: 307: }
  7113                           ;can.c: 308: LATD1 = 1;
  7114  0025F2  828C               	bsf	3980,1,c	;volatile
  7115  0025F4  0012               	return		;funcret
  7116  0025F6                     __end_ofi2_SPIRW:
  7117                           	opt stack 0
  7118                           pclatu	equ	0xFFB
  7119                           pclath	equ	0xFFA
  7120                           tblptru	equ	0xFF8
  7121                           tblptrh	equ	0xFF7
  7122                           tblptrl	equ	0xFF6
  7123                           tablat	equ	0xFF5
  7124                           prodh	equ	0xFF4
  7125                           prodl	equ	0xFF3
  7126                           intcon	equ	0xFF2
  7127                           intcon2	equ	0xFF1
  7128                           intcon3	equ	0xFF0
  7129                           postinc0	equ	0xFEE
  7130                           fsr0h	equ	0xFEA
  7131                           fsr0l	equ	0xFE9
  7132                           wreg	equ	0xFE8
  7133                           indf1	equ	0xFE7
  7134                           postinc1	equ	0xFE6
  7135                           postdec1	equ	0xFE5
  7136                           plusw1	equ	0xFE3
  7137                           fsr1h	equ	0xFE2
  7138                           fsr1l	equ	0xFE1
  7139                           indf2	equ	0xFDF
  7140                           postinc2	equ	0xFDE
  7141                           postdec2	equ	0xFDD
  7142                           plusw2	equ	0xFDB
  7143                           fsr2h	equ	0xFDA
  7144                           fsr2l	equ	0xFD9
  7145                           status	equ	0xFD8
  7146                           pclatu	equ	0xFFB
  7147                           pclath	equ	0xFFA
  7148                           tblptru	equ	0xFF8
  7149                           tblptrh	equ	0xFF7
  7150                           tblptrl	equ	0xFF6
  7151                           tablat	equ	0xFF5
  7152                           prodh	equ	0xFF4
  7153                           prodl	equ	0xFF3
  7154                           intcon	equ	0xFF2
  7155                           intcon2	equ	0xFF1
  7156                           intcon3	equ	0xFF0
  7157                           postinc0	equ	0xFEE
  7158                           fsr0h	equ	0xFEA
  7159                           fsr0l	equ	0xFE9
  7160                           wreg	equ	0xFE8
  7161                           indf1	equ	0xFE7
  7162                           postinc1	equ	0xFE6
  7163                           postdec1	equ	0xFE5
  7164                           plusw1	equ	0xFE3
  7165                           fsr1h	equ	0xFE2
  7166                           fsr1l	equ	0xFE1
  7167                           indf2	equ	0xFDF
  7168                           postinc2	equ	0xFDE
  7169                           postdec2	equ	0xFDD
  7170                           plusw2	equ	0xFDB
  7171                           fsr2h	equ	0xFDA
  7172                           fsr2l	equ	0xFD9
  7173                           status	equ	0xFD8
  7174                           
  7175                           	psect	rparam
  7176  0000                     pclatu	equ	0xFFB
  7177                           pclath	equ	0xFFA
  7178                           tblptru	equ	0xFF8
  7179                           tblptrh	equ	0xFF7
  7180                           tblptrl	equ	0xFF6
  7181                           tablat	equ	0xFF5
  7182                           prodh	equ	0xFF4
  7183                           prodl	equ	0xFF3
  7184                           intcon	equ	0xFF2
  7185                           intcon2	equ	0xFF1
  7186                           intcon3	equ	0xFF0
  7187                           postinc0	equ	0xFEE
  7188                           fsr0h	equ	0xFEA
  7189                           fsr0l	equ	0xFE9
  7190                           wreg	equ	0xFE8
  7191                           indf1	equ	0xFE7
  7192                           postinc1	equ	0xFE6
  7193                           postdec1	equ	0xFE5
  7194                           plusw1	equ	0xFE3
  7195                           fsr1h	equ	0xFE2
  7196                           fsr1l	equ	0xFE1
  7197                           indf2	equ	0xFDF
  7198                           postinc2	equ	0xFDE
  7199                           postdec2	equ	0xFDD
  7200                           plusw2	equ	0xFDB
  7201                           fsr2h	equ	0xFDA
  7202                           fsr2l	equ	0xFD9
  7203                           status	equ	0xFD8
  7204                           
  7205                           	psect	temp
  7206  00005F                     btemp:
  7207                           	opt stack 0
  7208  00005F                     	ds	1
  7209  0000                     int$flags	set	btemp
  7210                           pclatu	equ	0xFFB
  7211                           pclath	equ	0xFFA
  7212                           tblptru	equ	0xFF8
  7213                           tblptrh	equ	0xFF7
  7214                           tblptrl	equ	0xFF6
  7215                           tablat	equ	0xFF5
  7216                           prodh	equ	0xFF4
  7217                           prodl	equ	0xFF3
  7218                           intcon	equ	0xFF2
  7219                           intcon2	equ	0xFF1
  7220                           intcon3	equ	0xFF0
  7221                           postinc0	equ	0xFEE
  7222                           fsr0h	equ	0xFEA
  7223                           fsr0l	equ	0xFE9
  7224                           wreg	equ	0xFE8
  7225                           indf1	equ	0xFE7
  7226                           postinc1	equ	0xFE6
  7227                           postdec1	equ	0xFE5
  7228                           plusw1	equ	0xFE3
  7229                           fsr1h	equ	0xFE2
  7230                           fsr1l	equ	0xFE1
  7231                           indf2	equ	0xFDF
  7232                           postinc2	equ	0xFDE
  7233                           postdec2	equ	0xFDD
  7234                           plusw2	equ	0xFDB
  7235                           fsr2h	equ	0xFDA
  7236                           fsr2l	equ	0xFD9
  7237                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    63
    Data        24
    BSS         364
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     87      94
    BANK0           160     69     137
    BANK1           256      0     169
    BANK2           256      0     144
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           22      0       0

Pointer List with Targets:

    memcpy@d1	PTR void  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    memcpy@s1	PTR const void  size(2) Largest target is 10
		 -> Mcp2515ReadCanMsg@cmd(COMRAM[10]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 10
		 -> Mcp2515ReadCanMsg@cmd(COMRAM[10]), 

    Mcp2515GetNextFreeTXBuf@txbuf_n	PTR unsigned char  size(2) Largest target is 1
		 -> Can_SendMessage@txbuf_n(COMRAM[1]), 

    Mcp2515WriteCanMsg@msg	PTR const struct CANMESSAGE size(2) Largest target is 68
		 -> txBuffer(BANK1[68]), 

    sp__memcpy	PTR void  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Mcp2515ReadCanMsg@msg	PTR struct CANMESSAGE size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Mcp2515ReadCanId@can_id	PTR unsigned long  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Mcp2515ReadCanId@ext	PTR unsigned char  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Mcp2515_Init@filterCfg	PTR struct CANFILTER size(2) Largest target is 33
		 -> filter(BANK1[33]), 

    Mcp2515_Init@speedCfg	PTR const struct CANSPEED size(2) Largest target is 7
		 -> canSpeed125k(CODE[7]), 

    Can_SendMessage@msg	PTR const struct CANMESSAGE size(2) Largest target is 68
		 -> txBuffer(BANK1[68]), 

    Can_ReadMessage@msg	PTR struct CANMESSAGE size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Spi_Write@tx	PTR unsigned char  size(2) Largest target is 10
		 -> Mcp2515WriteCanMsg@buf(COMRAM[10]), Mcp2515WriteCanId@buf(BANK0[6]), Mcp2515Sleep@cmdMask4(COMRAM[3]), Mcp2515_Init@cmdWrite3(BANK0[3]), 
		 -> Mcp2515_Init@cmdMask4(BANK0[4]), Mcp2515_Reset@cmd(BANK0[1]), Can_SendMessage@buf(COMRAM[4]), Can_ReadMessage@buf(COMRAM[4]), 

    Spi_ReadWrite@rx_tx	PTR unsigned char  size(2) Largest target is 10
		 -> Mcp2515GetNextFreeTXBuf@buf(COMRAM[3]), Mcp2515ReadCanMsg@cmd(COMRAM[10]), Mcp2515ReadCanId@msg(COMRAM[6]), Can_ReadMessage@buf(COMRAM[4]), 
		 -> Can_GetStatus@msg4(COMRAM[4]), Can_GetStatus@msg(COMRAM[3]), 

    SPIRW@rx	PTR unsigned char  size(2) Largest target is 10
		 -> Mcp2515GetNextFreeTXBuf@buf(COMRAM[3]), Mcp2515ReadCanMsg@cmd(COMRAM[10]), Mcp2515ReadCanId@msg(COMRAM[6]), Can_ReadMessage@buf(COMRAM[4]), 
		 -> Can_GetStatus@msg4(COMRAM[4]), Can_GetStatus@msg(COMRAM[3]), NULL(NULL[0]), 

    SPIRW@tx	PTR const unsigned char  size(2) Largest target is 10
		 -> Mcp2515GetNextFreeTXBuf@buf(COMRAM[3]), Mcp2515WriteCanMsg@buf(COMRAM[10]), Mcp2515WriteCanId@buf(BANK0[6]), Mcp2515ReadCanMsg@cmd(COMRAM[10]), 
		 -> Mcp2515ReadCanId@msg(COMRAM[6]), Mcp2515Sleep@cmdMask4(COMRAM[3]), Mcp2515_Init@cmdWrite3(BANK0[3]), Mcp2515_Init@cmdMask4(BANK0[4]), 
		 -> Mcp2515_Reset@cmd(BANK0[1]), Can_SendMessage@buf(COMRAM[4]), Can_ReadMessage@buf(COMRAM[4]), Can_GetStatus@msg4(COMRAM[4]), 
		 -> Can_GetStatus@msg(COMRAM[3]), 

    Can_Init@filterCfg	PTR struct CANFILTER size(2) Largest target is 33
		 -> filter(BANK1[33]), 

    Can_Init@speedCfg	PTR const struct CANSPEED size(2) Largest target is 7
		 -> canSpeed125k(CODE[7]), 

    Can_PutMessage@msgPtr	PTR struct CANMESSAGE size(2) Largest target is 17
		 -> messageTx(BANK0[17]), 

    Can_GetMessage@msgPtr	PTR struct CANMESSAGE size(2) Largest target is 17
		 -> message(BANK0[17]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_Can_Isr
    _Can_Isr->_Can_ReadInBuffer
    _Can_WriteOutBuffer->_Can_SendMessage
    _Can_SendMessage->_Mcp2515WriteCanMsg
    _Mcp2515WriteCanMsg->i2_Mcp2515WriteCanId
    i2_Mcp2515WriteCanId->i2_Spi_Write
    _Mcp2515GetNextFreeTXBuf->_Spi_ReadWrite
    _Can_ReadInBuffer->_Can_ReadMessage
    _Can_ReadMessage->_Mcp2515ReadCanMsg
    i2_Spi_Write->i2_SPIRW
    _Mcp2515ReadCanMsg->_Mcp2515ReadCanId
    _Mcp2515ReadCanId->_Spi_ReadWrite
    _Can_GetStatus->_Spi_ReadWrite
    _Spi_ReadWrite->i2_SPIRW

Critical Paths under _main in BANK0

    _sendWarningLight->_Can_PutMessage
    _sendTrafficLight->_Can_PutMessage
    _sendPedestrianLight->_Can_PutMessage
    _init->_Can_Init
    _readID->_Can_GetMessage
    _readID->_Can_PutMessage
    _readConflictInfo->___wmul
    _Can_Init->_Mcp2515_Init
    _Mcp2515_Init->_Mcp2515WriteCanId
    _Mcp2515_Reset->_Spi_Write
    _Mcp2515WriteCanId->_Spi_Write
    _Spi_Write->_SPIRW

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5   20731
                                             64 BANK0      5     0      5
                               _init
                _sendPedestrianLight
                   _sendTrafficLight
                   _sendWarningLight
 ---------------------------------------------------------------------------------
 (1) _sendWarningLight                                     6     5      1     744
                                              5 BANK0      6     5      1
                     _Can_PutMessage
 ---------------------------------------------------------------------------------
 (1) _sendTrafficLight                                     4     3      1     744
                                              5 BANK0      4     3      1
                     _Can_PutMessage
 ---------------------------------------------------------------------------------
 (1) _sendPedestrianLight                                  4     3      1     744
                                              5 BANK0      4     3      1
                     _Can_PutMessage
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0   18499
                           _Can_Init
                   _readConflictInfo
                             _readID
 ---------------------------------------------------------------------------------
 (2) _readID                                               1     1      0    1090
                                              5 BANK0      1     1      0
                     _Can_GetMessage
                     _Can_PutMessage
                          _resetData
 ---------------------------------------------------------------------------------
 (2) _readConflictInfo                                    10    10      0    2211
                                              6 BANK0     10    10      0
                     _Can_GetMessage
                     _Can_PutMessage
                             ___wmul
                          _resetData
 ---------------------------------------------------------------------------------
 (3) _resetData                                            2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     767
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _Can_PutMessage                                       5     3      2     624
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (3) _Can_GetMessage                                       5     3      2     374
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _Can_Init                                             4     0      4   15198
                                             60 BANK0      4     0      4
                       _Mcp2515_Init
 ---------------------------------------------------------------------------------
 (3) _Mcp2515_Init                                        25    21      4   14850
                                             35 BANK0     25    21      4
                  _Mcp2515WriteCanId
                      _Mcp2515_Reset
                          _Spi_Write
 ---------------------------------------------------------------------------------
 (4) _Mcp2515_Reset                                        5     5      0    3781
                                             18 BANK0      5     5      0
                          _Spi_Write
 ---------------------------------------------------------------------------------
 (4) _Mcp2515WriteCanId                                   17    12      5    5581
                                             18 BANK0     17    12      5
                          _Spi_Write
 ---------------------------------------------------------------------------------
 (4) _Spi_Write                                            6     0      6    3710
                                             12 BANK0      6     0      6
                              _SPIRW
 ---------------------------------------------------------------------------------
 (5) _SPIRW                                               12     4      8     534
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _high_isr                                            14    14      0   15316
                                             73 COMRAM    14    14      0
                            _Can_Isr
 ---------------------------------------------------------------------------------
 (8) _Can_Isr                                              2     2      0   15316
                                             71 COMRAM     2     2      0
                      _Can_GetStatus
                _Can_OutBufferStatus
                   _Can_ReadInBuffer
                 _Can_WriteOutBuffer
 ---------------------------------------------------------------------------------
 (9) _Can_WriteOutBuffer                                   0     0      0    5689
                    _Can_SendMessage
 ---------------------------------------------------------------------------------
 (10) _Can_SendMessage                                     8     6      2    5689
                                             53 COMRAM     8     6      2
            _Mcp2515GetNextFreeTXBuf
                 _Mcp2515WriteCanMsg
                        i2_Spi_Write
 ---------------------------------------------------------------------------------
 (11) _Mcp2515WriteCanMsg                                 18    16      2    2682
                                             35 COMRAM    18    16      2
                i2_Mcp2515WriteCanId
                        i2_Spi_Write
 ---------------------------------------------------------------------------------
 (12) i2_Mcp2515WriteCanId                                17    12      5    1333
                                             18 COMRAM    17    12      5
                        i2_Spi_Write
 ---------------------------------------------------------------------------------
 (11) _Mcp2515GetNextFreeTXBuf                            10     8      2    1927
                                             18 COMRAM    10     8      2
                      _Spi_ReadWrite
 ---------------------------------------------------------------------------------
 (9) _Can_ReadInBuffer                                     3     3      0    7772
                                             68 COMRAM     3     3      0
                    _Can_ReadMessage
 ---------------------------------------------------------------------------------
 (10) _Can_ReadMessage                                     6     4      2    7695
                                             62 COMRAM     6     4      2
                  _Mcp2515ReadCanMsg
                      _Spi_ReadWrite
                        i2_Spi_Write
 ---------------------------------------------------------------------------------
 (11) i2_Spi_Write                                         6     0      6     772
                                             12 COMRAM     6     0      6
                            i2_SPIRW
 ---------------------------------------------------------------------------------
 (11) _Mcp2515ReadCanMsg                                  15    13      2    4754
                                             47 COMRAM    15    13      2
                   _Mcp2515ReadCanId
                      _Spi_ReadWrite
                             _memcpy
 ---------------------------------------------------------------------------------
 (12) _memcpy                                             11     5      6     371
                                              0 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (12) _Mcp2515ReadCanId                                   29    25      4    2157
                                             18 COMRAM    29    25      4
                      _Spi_ReadWrite
 ---------------------------------------------------------------------------------
 (9) _Can_OutBufferStatus                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _Can_GetStatus                                        8     8      0    1744
                                             18 COMRAM     8     8      0
                      _Spi_ReadWrite
 ---------------------------------------------------------------------------------
 (12) _Spi_ReadWrite                                       6     0      6    1594
                                             12 COMRAM     6     0      6
                            i2_SPIRW
 ---------------------------------------------------------------------------------
 (12) i2_SPIRW                                            12     4      8     312
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _Can_Init
       _Mcp2515_Init
         _Mcp2515WriteCanId
           _Spi_Write
             _SPIRW
         _Mcp2515_Reset
           _Spi_Write
             _SPIRW
         _Spi_Write
           _SPIRW
     _readConflictInfo
       _Can_GetMessage
       _Can_PutMessage
       ___wmul
       _resetData
     _readID
       _Can_GetMessage
       _Can_PutMessage
       _resetData
   _sendPedestrianLight
     _Can_PutMessage
   _sendTrafficLight
     _Can_PutMessage
   _sendWarningLight
     _Can_PutMessage

 _high_isr (ROOT)
   _Can_Isr
     _Can_GetStatus
       _Spi_ReadWrite
         i2_SPIRW
     _Can_OutBufferStatus
     _Can_ReadInBuffer
       _Can_ReadMessage
         _Mcp2515ReadCanMsg
           _Mcp2515ReadCanId
             _Spi_ReadWrite
               i2_SPIRW
           _Spi_ReadWrite
             i2_SPIRW
           _memcpy
         _Spi_ReadWrite
           i2_SPIRW
         i2_Spi_Write
           i2_SPIRW
     _Can_WriteOutBuffer
       _Can_SendMessage
         _Mcp2515GetNextFreeTXBuf
           _Spi_ReadWrite
             i2_SPIRW
         _Mcp2515WriteCanMsg
           i2_Mcp2515WriteCanId
             i2_Spi_Write
               i2_SPIRW
           i2_Spi_Write
             i2_SPIRW
         i2_Spi_Write
           i2_SPIRW

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F15      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      90       9       56.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A9       7       66.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     45      89       5       85.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     57      5E       1      100.0%
BITBANK15           16      0       0      35        0.0%
BANK15              16      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     220      12        0.0%
DATA                 0      0     220       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue May 22 11:30:18 2018

                       i2_Spi_Write 2A14                                  l73 2950  
                                l59 1940                                  l78 29E8  
                                _id 00AF                 ___wmul@multiplicand 0062  
                       __CFG_BORV$2 000000                       i2Spi_Write@tx 000D  
                      __CFG_CP0$OFF 000000                        __CFG_CP1$OFF 000000  
                      __CFG_CP2$OFF 000000                        __CFG_CP3$OFF 000000  
                      __CFG_CP4$OFF 000000                        __CFG_CP5$OFF 000000  
                      __CFG_CP6$OFF 000000                        __CFG_CP7$OFF 000000  
                               l243 2330                                 l309 26C2  
                               _GIE 007F97                        __CFG_CPB$OFF 000000  
                               _RB3 007C0B                        __CFG_CPD$OFF 000000  
                               u915 20B2                                 u925 2102  
      __size_of_sendPedestrianLight 0068                                 fsr2 000FD9  
                               prod 000FF3                                 wreg 000FE8  
                              l2001 1C66                                l2021 1D7C  
                              l2025 1DDE                                l2203 1590  
                              l2035 1E0A                                l2163 1440  
                              l2191 1544                                l2159 1436  
                              l2271 16C4                                l2177 14CA  
                              l2249 2820                                l2267 165C  
                              l2285 1928                                l2279 16FE  
                              l1773 2318                                l1781 2368  
                              l1943 2698                                l1779 235A  
                              l1971 20CA                                l1981 291E  
                              l1977 2122                                l1985 2934  
                              l1997 1C04                                _CKE1 007E3E  
                              _CKP1 007E34                                u1110 165A  
                              u1130 16FC                                u1035 10C0  
                              u1045 1174                                u1055 1236  
                              u1145 1900                       __CFG_DEBUG$ON 000000  
                              _PEIE 007F96                                _TMR0 000FD6  
                      __CFG_WDTPS$1 000000                                _TXIF 007CF4  
             Mcp2515ReadCanId@F8123 00D2                     __end_ofi2_SPIRW 25F6  
              Mcp2515ReadCanMsg@cmd 0034                Mcp2515ReadCanMsg@msg 0030  
                              _main 29C0                                _init 2498  
                              fsr0h 000FEA                                fsr1h 000FE2  
                              fsr2h 000FDA                                fsr0l 000FE9  
                              indf1 000FE7                                indf2 000FDF  
                              fsr1l 000FE1                                fsr2l 000FD9  
                              btemp 005F                     __end_of_Can_Isr 288C  
                              prodh 000FF4                                prodl 000FF3  
                              start 00A0                       __CFG_IESO$OFF 000000  
          __end_of_Mcp2515ReadCanId 1AEE                       __CFG_MCLRE$ON 000000  
             __size_of_Mcp2515_Init 05EC                        ___param_bank 000000  
                   i2Spi_Write@size 000F            __size_of_Can_ReadMessage 00FA  
                Can_ReadMessage@buf 0041                  Can_ReadMessage@msg 003F  
         Mcp2515WriteCanId@mcp_addr 007A                               ?_main 00A0  
                             ?_init 0001                               _BRGH1 007D62  
                             _CREN1 007D5C                               _LATD1 007C61  
                             _LATG0 007C78                               _LATF6 007C76  
                             _LATF7 007C77                               i2l243 25B4  
                             i2l264 21D2                               i2l293 0052  
                             i2l296 0064                       _Can_GetStatus 278C  
                             _PLLEN 007CDE                               _SPEN1 007D5F  
                             _SPIRW 22FE                               _SSPIF 007CF3  
                             _TXEN1 007D65                               _SYNC1 007D64  
                             _TXREG 000FAD                       __CFG_WRT0$OFF 000000  
                     __CFG_WRT1$OFF 000000                       __CFG_WRT2$OFF 000000  
                     __CFG_WRT3$OFF 000000                       __CFG_WRT4$OFF 000000  
                    __CFG_EBRT0$OFF 000000                       __CFG_WRT5$OFF 000000  
                    __CFG_EBRT1$OFF 000000                       __CFG_WRT6$OFF 000000  
                    __CFG_EBRT2$OFF 000000                       __CFG_WRT7$OFF 000000  
                    __CFG_EBRT3$OFF 000000                      __CFG_EBRT4$OFF 000000  
                    __CFG_FCMEN$OFF 000000                      __CFG_EBRT5$OFF 000000  
                    __CFG_EBRT6$OFF 000000                      __CFG_EBRT7$OFF 000000  
                     __CFG_WRTB$OFF 000000                       __CFG_WRTC$OFF 000000  
                     __CFG_WRTD$OFF 000000                      __CFG_EBRTB$OFF 000000  
                             _nbTx0 00AA                               _nbTx1 00A9  
                             _nbTx2 00A8                      __CFG_BOREN$OFF 000000  
                             pclath 000FFA                               tablat 000FF5  
                  __end_of_Can_Init 298A                        _Mcp2515_Init 1042  
           __size_of_Can_PutMessage 01A6                               plusw1 000FE3  
                             plusw2 000FDB                               status 000FD8  
          __end_of_readConflictInfo 1942            ?_Mcp2515GetNextFreeTXBuf 0013  
                   __initialization 2518              __size_of_Mcp2515_Reset 0066  
            Mcp2515ReadCanId@can_id 0015                        __end_of_main 29EA  
                      __end_of_init 2518            __end_of_Can_ReadInBuffer 28D0  
          __size_of_Can_SendMessage 0064               Can_ReadInBuffer@error 0045  
                      _canSpeed100k 101D                        _canSpeed125k 1039  
                      _canSpeed250k 1016                        _canSpeed500k 100F  
                      _canSpeed800k 1008                              ??_main 00A5  
                            ??_init 00A0            Can_ReadInBuffer@rdStatus 0046  
                    ?_Can_GetStatus 0001               __end_of_Spi_ReadWrite 2A60  
                     __activetblptr 000001                      __CFG_PLLCFG$ON 000000  
                            ?_SPIRW 0060                      __CFG_RETEN$OFF 000000  
                         ??i2_SPIRW 0009                      _Can_GetMessage 1C94  
                            SPIRW@i 0068                              _BRG161 007B2B  
      sendTrafficLight@trafficLight 0068                           ??_Can_Isr 0048  
                            _INT3IE 007F85                              _INT3IF 007F82  
                   __CFG_BBSIZ$BB1K 000000                              i2l2103 2728  
                            i2l2311 289C                              i2l2321 28C8  
                            i2l2067 21CE                              i2l2323 28CC  
                            i2l2307 2894                              i2l2415 2874  
                            i2l2099 223C                              i2l2419 287A  
                    __CFG_WDTEN$OFF 000000                              i2l1903 2414  
                            i2l1809 28E2                              i2l1817 2902  
                            i2l1841 22A2                              i2l1915 1E24  
                            i2l1765 25D2                              i2l1759 25A4  
                            i2l1767 25DE                              i2l1863 1F9A  
                            i2l1847 22E0                              i2l1919 1E5C  
                            i2l1881 23AC                              i2l1929 1F0A  
                            i2l1885 23B4                              i2l1899 2410  
                            _OSCCON 000FD3              Mcp2515WriteCanId@canid 0081  
                            _SPBRG1 000FAF                              _TMR0IF 007F92  
                            _SSP1IF 007CF3                              _TRISC3 007CA3  
                            _TRISD1 007CA9                              _TRISC4 007CA4  
                            _TRISC5 007CA5                              _SSPEN1 007E35  
                            _TRISG0 007CC0                              _TRISF6 007CBE  
                            _TRISF7 007CBF                              _SSPBUF 000FC9  
                 ?_sendTrafficLight 0065                      __CFG_PWRTEN$ON 000000  
                    __CFG_XINST$OFF 000000                   ?_sendWarningLight 0065  
                ??_sendTrafficLight 0066                    __end_of_high_isr 00A0  
             sendTrafficLight@color 0065                  ??_sendWarningLight 0066  
                            ___wmul 298A     Mcp2515GetNextFreeTXBuf@ctrlregs 0016  
                    __CFG_STVREN$ON 000000                              _filter 0188  
                            _readID 27EE                              _memcpy 28D0  
                            clear_0 2550                              clear_1 255C  
                            clear_2 2568                   ??_Can_ReadMessage 0041  
                __size_of_Spi_Write 002A                   Can_GetStatus@msg4 0013  
                      __pdataCOMRAM 005E              __end_of_Can_GetMessage 1E0E  
                Can_SendMessage@buf 0038                  Can_SendMessage@msg 0036  
                Can_SendMessage@res 003C                        __mediumconst 0000  
                            tblptrh 000FF7                              tblptrl 000FF6  
                            tblptru 000FF8                       _Mcp2515_Reset 265E  
                    _rxBufferPtrOut 00AD                     __CFG_BORPWR$LOW 000000  
   __end_of_Mcp2515GetNextFreeTXBuf 2418                          __accesstop 0060  
           __end_of__initialization 257A                       ___rparam_used 000001  
               _sendPedestrianLight 25F6        __size_ofi2_Mcp2515WriteCanId 00BE  
                      readID@retVal 0065                       __end_of_SPIRW 2390  
         Mcp2515ReadCanMsg@mcp_addr 003E                      __pcstackCOMRAM 0001  
                      __pidataBANK0 2A80                        ?i2_Spi_Write 000D  
                   ??_Can_GetStatus 0013                           ?_Can_Init 009C  
                     _canSpeed1000k 1001                ?_sendPedestrianLight 0065  
                 ??_Can_SendMessage 0038                             ??_SPIRW 0068  
                    ?_Mcp2515_Reset 0001                Mcp2515WriteCanId@buf 007B  
                   ?_Can_GetMessage 0060                Mcp2515WriteCanId@ext 0072  
        __end_of_Mcp2515WriteCanMsg 1F36         __size_of_Can_WriteOutBuffer 0020  
      __size_of_Can_OutBufferStatus 0006                          __pbssBANK0 00A5  
                        __pbssBANK1 0100                          __pbssBANK2 0200  
                    _Can_PutMessage 1AEE                   __end_of_Spi_Write 2A14  
                 ?_Mcp2515ReadCanId 0013                  __CFG_CCP2MX$PORTBE 000000  
                   Can_PutMessage@i 0064                  ??_Mcp2515ReadCanId 0017  
                           ?___wmul 0060                             SPIRW@rx 0062  
                           SPIRW@tx 0060                             ?_readID 0001  
                           ?_memcpy 0001                  __size_of_resetData 003E  
                        ??_Can_Init 00A0               ??_sendPedestrianLight 0066  
                           _INTEDG3 007F8B                   Spi_ReadWrite@size 000F  
           Mcp2515WriteCanId@can_id 0073                             i2_SPIRW 258C  
                           i2u80_45 2292                             i2u73_41 194E  
                           i2u81_45 22CC                             i2u74_45 199A  
                           _SPBRGH1 000FD4                             i2u76_45 1A06  
                           i2u77_45 1A56                             _SSPCON1 000FC6  
            __end_of_Can_PutMessage 1C94                           SPIRW@size 0064  
                         ?_high_isr 0001                             _Can_Isr 2844  
              Can_GetMessage@msgPtr 0060                          _bottomLeft 00AE  
                 ?_readConflictInfo 0001                             __Hparam 0000  
                           __Lparam 0000                  ??_readConflictInfo 0066  
                   __size_of___wmul 0036                   ?_Can_ReadInBuffer 0001  
                      __psmallconst 1000                         Spi_Write@tx 006C  
                   __size_of_readID 0056                             __pcinit 2518  
                   __size_of_memcpy 0044                             __ramtop 1000  
                ??_Can_ReadInBuffer 0045                             __ptext0 29C0  
                           __ptext1 2418                             __ptext2 26C4  
                           __ptext3 25F6                             __ptext4 2498  
                           __ptext5 27EE                             __ptext6 162E  
                           __ptext7 2914                             __ptext8 298A  
                           __ptext9 1AEE                           _T0CONbits 000FD5  
                   ??_Mcp2515_Reset 0072    __size_of_Mcp2515GetNextFreeTXBuf 0088  
                Can_GetStatus@F8262 00E6                  Can_GetStatus@F8264 00DC  
                           _message 00C1                   __CFG_MSSPMSK$MSK7 000000  
                           _topLeft 005B                     ?_Can_PutMessage 0060  
                        ??_high_isr 004A                  __CFG_INTOSCSEL$LOW 000000  
             Mcp2515_Init@cmdWrite3 0099                end_of_initialization 257A  
                         i2SPIRW@rx 0003                           i2SPIRW@tx 0001  
                 __end_of_resetData 2952                             memcpy@d 0007  
                           memcpy@n 0005                             memcpy@s 0009  
               __end_of_canSpeed10k 1039                 __end_of_canSpeed20k 1032  
               __end_of_canSpeed50k 102B                     _Can_ReadMessage 2146  
             Mcp2515_Init@filterCfg 0085                             postdec1 000FE5  
                           postdec2 000FDD                      Mcp2515_Reset@i 0073  
                           postinc0 000FEE                             postinc1 000FE6  
                           postinc2 000FDE                __size_ofi2_Spi_Write 0026  
         __size_of_sendTrafficLight 0064                    __CFG_FOSC$INTIO2 000000  
         __size_of_sendWarningLight 0080                 i2_Mcp2515WriteCanId 2240  
                    _txBufferPtrOut 0058        sendWarningLight@trafficLight 006A  
               Mcp2515ReadCanId@ext 0013                 Mcp2515ReadCanId@msg 002A  
              ?i2_Mcp2515WriteCanId 0013              __size_of_Spi_ReadWrite 0026  
      Mcp2515GetNextFreeTXBuf@F8153 00E0                     _Can_SendMessage 2728  
               _Can_OutBufferStatus 2A98         i2Mcp2515WriteCanId@mcp_addr 001B  
             sendWarningLight@state 0065                      __end_of___wmul 29C0  
                     __pidataCOMRAM 2A9E                    ??_Can_GetMessage 0062  
                    __end_of_readID 2844                      __end_of_memcpy 2914  
               start_initialization 2518                   __size_of_Can_Init 0038  
          Mcp2515ReadCanId@mcp_addr 0029            i2Mcp2515WriteCanId@canid 0022  
                       _canSpeed10k 1032                         _canSpeed20k 102B  
                       _canSpeed50k 1024                ?_Can_OutBufferStatus 0001  
           __end_of_Can_ReadMessage 2240               ??i2_Mcp2515WriteCanId 0018  
                _Mcp2515WriteCanMsg 1E0E          Mcp2515GetNextFreeTXBuf@buf 0019  
          Mcp2515GetNextFreeTXBuf@i 001C                           _Spi_Write 29EA  
                          ??___wmul 0064                 ?_Mcp2515WriteCanMsg 0024  
             Mcp2515WriteCanMsg@dlc 0033               Mcp2515WriteCanMsg@buf 0028  
             Mcp2515WriteCanMsg@msg 0024                         __pdataBANK0 00D2  
                          ??_readID 0065                    Can_GetStatus@msg 0017  
                          ??_memcpy 0007                       _rxBufferCount 0059  
                     _rxBufferPtrIn 005A             _Mcp2515GetNextFreeTXBuf 2390  
             __end_of_Can_GetStatus 27EE                       _Spi_ReadWrite 2A3A  
         __size_of_Mcp2515ReadCanId 01AC                         __pbssCOMRAM 0058  
        __end_of_Can_WriteOutBuffer 2A80                       __pcstackBANK0 0060  
                          ?i2_SPIRW 0001               ??_Can_OutBufferStatus 0001  
              ??_Mcp2515WriteCanMsg 0026                            ?_Can_Isr 0001  
                     ?_Mcp2515_Init 0083                       Spi_Write@size 006E  
                 __size_of_high_isr 0098                 Mcp2515WriteCanMsg@i 0035  
           __end_of_Can_SendMessage 278C                   _Mcp2515ReadCanMsg 1F36  
                ?_Mcp2515ReadCanMsg 0030                           __pintcode 0008  
                        ?_Spi_Write 006C         __end_of_sendPedestrianLight 265E  
               ??_Mcp2515ReadCanMsg 0032                    _sendTrafficLight 26C4  
                    ?_Spi_ReadWrite 000D           __size_of_readConflictInfo 0314  
                       __smallconst 1000                    ??_Can_PutMessage 0062  
                  _sendWarningLight 2418                      __size_of_SPIRW 0092  
                 Mcp2515_Init@F8112 00D8                   Mcp2515_Init@F8114 00E3  
                        resetData@i 0060              Can_SendMessage@txbuf_n 003D  
         __size_of_Can_ReadInBuffer 0044          Mcp2515WriteCanMsg@mcp_addr 0034  
                    ??_Mcp2515_Init 0087           __end_of_Mcp2515ReadCanMsg 2044  
                         _messageTx 00B0                Mcp2515_Init@cmdMask4 0095  
                  ?_Can_ReadMessage 003F                      ___wmul@product 0064  
                          i2SPIRW@i 0009                           _resetData 2914  
                Spi_ReadWrite@rx_tx 000D                       Mcp2515_Init@i 0094  
         i2Mcp2515WriteCanId@can_id 0014                   Mcp2515Sleep@F8117 00A5  
         ??_Mcp2515GetNextFreeTXBuf 0015                       _txBufferCount 00AB  
                          _Can_Init 2952                   ___wmul@multiplier 0060  
                     _txBufferPtrIn 00AC                    __CFG_SOSCSEL$LOW 000000  
              Mcp2515_Init@speedCfg 0083                     Can_GetMessage@i 0064  
             __end_of_Mcp2515_Reset 26C4  Mcp2515WriteCanMsg@buffer_sidh_addr 0032  
          sendPedestrianLight@color 0065                    __size_ofi2_SPIRW 006A  
                       _bottomRight 005D                           copy_data0 252C  
                       i2SPIRW@size 0005                    __size_of_Can_Isr 0048  
                  ?_Can_SendMessage 0036                          ?_resetData 0001  
                 _Mcp2515WriteCanId 2044                            __Hrparam 0000  
                         memcpy@tmp 000B                            __Lrparam 0000  
              Can_PutMessage@msgPtr 0060                        __Lsmallconst 1000  
                ?_Mcp2515WriteCanId 0072                       ??i2_Spi_Write 0013  
                       ??_Spi_Write 0072                     ??_Spi_ReadWrite 0013  
               ??_Mcp2515WriteCanId 0077               __end_of_canSpeed1000k 1008  
    Mcp2515GetNextFreeTXBuf@txbuf_n 0013                    _Mcp2515ReadCanId 1942  
                          __ptext10 1C94                            __ptext11 2952  
                          __ptext20 2728                            __ptext12 1042  
                          __ptext21 1E0E                            __ptext13 265E  
                          __ptext30 2A98                            __ptext22 2240  
                          __ptext14 2044                            __ptext31 278C  
                          __ptext23 2390                            __ptext15 29EA  
                          __ptext32 2A3A                            __ptext24 288C  
                          __ptext16 22FE                            __ptext33 258C  
                          __ptext25 2146                            __ptext26 2A14  
                          __ptext18 2844                            __ptext27 1F36  
                          __ptext19 2A60                            __ptext28 28D0  
                          __ptext29 1942                            _high_isr 0008  
        __size_of_Mcp2515ReadCanMsg 010E                   Can_Init@filterCfg 009E  
                     __size_of_main 002A                       __size_of_init 0080  
         __end_of_Mcp2515WriteCanId 2146                 __CFG_RTCOSC$SOSCREF 000000  
                          _rxBuffer 0144                            _txBuffer 0100  
                          int$flags 005F                            _topRight 005C  
                 readConflictInfo@i 006C                   readConflictInfo@j 006E  
                          main@argc 00A0                            main@argv 00A2  
              __end_of_Mcp2515_Init 162E     sendPedestrianLight@trafficLight 0068  
                  Mcp2515_Reset@cmd 0072                 __end_ofi2_Spi_Write 2A3A  
                  _readConflictInfo 162E              i2Mcp2515WriteCanId@buf 001C  
            i2Mcp2515WriteCanId@ext 0013                            memcpy@d1 0001  
                          memcpy@s1 0003                    _Can_ReadInBuffer 288C  
               Can_GetStatus@status 001A         __end_ofi2_Mcp2515WriteCanId 22FE  
              __end_of_canSpeed100k 1024                __end_of_canSpeed125k 1040  
              __end_of_canSpeed250k 101D                __end_of_canSpeed500k 1016  
                          intlevel2 0000                __end_of_canSpeed800k 100F  
                _Can_WriteOutBuffer 2A60            __end_of_sendTrafficLight 2728  
                       ??_resetData 0060            __end_of_sendWarningLight 2498  
               ?_Can_WriteOutBuffer 0001                       _conflictTable 0200  
                 Can_ReadInBuffer@i 0047                    Can_Init@speedCfg 009C  
       __end_of_Can_OutBufferStatus 2A9E                ??_Can_WriteOutBuffer 003E  
           __size_of_Can_GetMessage 017A         __size_of_Mcp2515WriteCanMsg 0128  
        __size_of_Mcp2515WriteCanId 0102                      Can_Isr@nbTxBuf 005E  
            __size_of_Can_GetStatus 0062                      Can_Isr@retCode 0049  
