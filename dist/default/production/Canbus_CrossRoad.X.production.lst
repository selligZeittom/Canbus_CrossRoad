

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Thu May 24 15:50:09 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F87K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    65                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    66                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    67  0000                     
    68                           ; Version 1.42
    69                           ; Generated 13/04/2017 GMT
    70                           ; 
    71                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    72                           ; All rights reserved.
    73                           ; 
    74                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    75                           ; 
    76                           ; Redistribution and use in source and binary forms, with or without modification, are
    77                           ; permitted provided that the following conditions are met:
    78                           ; 
    79                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    80                           ;        conditions and the following disclaimer.
    81                           ; 
    82                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    83                           ;        of conditions and the following disclaimer in the documentation and/or other
    84                           ;        materials provided with the distribution.
    85                           ; 
    86                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    87                           ;        software without specific prior written permission.
    88                           ; 
    89                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    90                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    91                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    92                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    93                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    94                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    95                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    96                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    97                           ; 
    98                           ; 
    99                           ; Code-generator required, PIC18F87K22 Definitions
   100                           ; 
   101                           ; SFR Addresses
   102  0000                     
   103                           	psect	idataCOMRAM
   104  003480                     __pidataCOMRAM:
   105                           	opt stack 0
   106                           
   107                           ;initializer for Can_Isr@nbTxBuf
   108  003480  03                 	db	3
   109                           
   110                           	psect	idataBANK0
   111  003454                     __pidataBANK0:
   112                           	opt stack 0
   113                           
   114                           ;initializer for Mcp2515ReadCanId@F8123
   115  003454  03                 	db	3
   116  003455  00                 	db	0
   117  003456  00                 	db	0
   118  003457  00                 	db	0
   119  003458  00                 	db	0
   120  003459  00                 	db	0
   121                           
   122                           ;initializer for Mcp2515_Init@F8112
   123  00345A  05                 	db	5
   124  00345B  0F                 	db	15
   125  00345C  E0                 	db	224
   126  00345D  80                 	db	128
   127                           
   128                           ;initializer for Can_GetStatus@F8264
   129  00345E  05                 	db	5
   130  00345F  2C                 	db	44
   131  003460  1C                 	db	28
   132  003461  00                 	db	0
   133                           
   134                           ;initializer for Mcp2515GetNextFreeTXBuf@F8153
   135  003462  30                 	db	48
   136  003463  40                 	db	64
   137  003464  50                 	db	80
   138                           
   139                           ;initializer for Mcp2515_Init@F8114
   140  003465  02                 	db	2
   141  003466  00                 	db	0
   142  003467  00                 	db	0
   143                           
   144                           ;initializer for Can_GetStatus@F8262
   145  003468  03                 	db	3
   146  003469  2C                 	db	44
   147  00346A  00                 	db	0
   148                           
   149                           	psect	smallconst
   150  001000                     __psmallconst:
   151                           	opt stack 0
   152  001000  00                 	db	0
   153  001001                     _canSpeed1000k:
   154                           	opt stack 0
   155  001001  00                 	db	0
   156  001002  01                 	db	1
   157  001003  00                 	db	0
   158  001004  03                 	db	3
   159  001005  01                 	db	1
   160  001006  01                 	db	1
   161  001007  01                 	db	1
   162  001008                     __end_of_canSpeed1000k:
   163                           	opt stack 0
   164  001008                     _canSpeed800k:
   165                           	opt stack 0
   166  001008  00                 	db	0
   167  001009  01                 	db	1
   168  00100A  02                 	db	2
   169  00100B  03                 	db	3
   170  00100C  01                 	db	1
   171  00100D  01                 	db	1
   172  00100E  01                 	db	1
   173  00100F                     __end_of_canSpeed800k:
   174                           	opt stack 0
   175  00100F                     _canSpeed500k:
   176                           	opt stack 0
   177  00100F  01                 	db	1
   178  001010  01                 	db	1
   179  001011  00                 	db	0
   180  001012  03                 	db	3
   181  001013  01                 	db	1
   182  001014  01                 	db	1
   183  001015  01                 	db	1
   184  001016                     __end_of_canSpeed500k:
   185                           	opt stack 0
   186  001016                     _canSpeed250k:
   187                           	opt stack 0
   188  001016  03                 	db	3
   189  001017  01                 	db	1
   190  001018  00                 	db	0
   191  001019  03                 	db	3
   192  00101A  01                 	db	1
   193  00101B  01                 	db	1
   194  00101C  01                 	db	1
   195  00101D                     __end_of_canSpeed250k:
   196                           	opt stack 0
   197  00101D                     _canSpeed100k:
   198                           	opt stack 0
   199  00101D  07                 	db	7
   200  00101E  01                 	db	1
   201  00101F  02                 	db	2
   202  001020  03                 	db	3
   203  001021  01                 	db	1
   204  001022  01                 	db	1
   205  001023  01                 	db	1
   206  001024                     __end_of_canSpeed100k:
   207                           	opt stack 0
   208  001024                     _canSpeed50k:
   209                           	opt stack 0
   210  001024  0F                 	db	15
   211  001025  01                 	db	1
   212  001026  02                 	db	2
   213  001027  03                 	db	3
   214  001028  01                 	db	1
   215  001029  01                 	db	1
   216  00102A  01                 	db	1
   217  00102B                     __end_of_canSpeed50k:
   218                           	opt stack 0
   219  00102B                     _canSpeed20k:
   220                           	opt stack 0
   221  00102B  13                 	db	19
   222  00102C  01                 	db	1
   223  00102D  06                 	db	6
   224  00102E  06                 	db	6
   225  00102F  04                 	db	4
   226  001030  01                 	db	1
   227  001031  01                 	db	1
   228  001032                     __end_of_canSpeed20k:
   229                           	opt stack 0
   230  001032                     _canSpeed10k:
   231                           	opt stack 0
   232  001032  1F                 	db	31
   233  001033  01                 	db	1
   234  001034  07                 	db	7
   235  001035  07                 	db	7
   236  001036  07                 	db	7
   237  001037  01                 	db	1
   238  001038  01                 	db	1
   239  001039                     __end_of_canSpeed10k:
   240                           	opt stack 0
   241  001039                     _canSpeed125k:
   242                           	opt stack 0
   243  001039  07                 	db	7
   244  00103A  01                 	db	1
   245  00103B  00                 	db	0
   246  00103C  03                 	db	3
   247  00103D  01                 	db	1
   248  00103E  01                 	db	1
   249  00103F  01                 	db	1
   250  001040                     __end_of_canSpeed125k:
   251                           	opt stack 0
   252  0000                     _TMR0	set	4054
   253  0000                     _SPBRG1	set	4015
   254  0000                     _SPBRGH1	set	4052
   255  0000                     _OSCCON	set	4051
   256  0000                     _TXREG	set	4013
   257  0000                     _T0CONbits	set	4053
   258  0000                     _SSPBUF	set	4041
   259  0000                     _SSPCON1	set	4038
   260  0000                     _TMR0IE	set	32661
   261  0000                     _TXEN1	set	32101
   262  0000                     _CREN1	set	32092
   263  0000                     _SPEN1	set	32095
   264  0000                     _SYNC1	set	32100
   265  0000                     _BRG161	set	31531
   266  0000                     _BRGH1	set	32098
   267  0000                     _LATG0	set	31864
   268  0000                     _TRISG0	set	31936
   269  0000                     _PLLEN	set	31966
   270  0000                     _TXIF	set	31988
   271  0000                     _TMR0IF	set	32658
   272  0000                     _RB3	set	31755
   273  0000                     _SSP1IF	set	31987
   274  0000                     _SSPIF	set	31987
   275  0000                     _LATD1	set	31841
   276  0000                     _GIE	set	32663
   277  0000                     _PEIE	set	32662
   278  0000                     _INTEDG3	set	32651
   279  0000                     _SSPEN1	set	32309
   280  0000                     _CKP1	set	32308
   281  0000                     _CKE1	set	32318
   282  0000                     _TRISD1	set	31913
   283  0000                     _TRISC3	set	31907
   284  0000                     _TRISC5	set	31909
   285  0000                     _TRISC4	set	31908
   286  0000                     _LATF7	set	31863
   287  0000                     _LATF6	set	31862
   288  0000                     _TRISF7	set	31935
   289  0000                     _TRISF6	set	31934
   290  0000                     _INT3IF	set	32642
   291  0000                     _INT3IE	set	32645
   292                           
   293                           ; #config settings
   294  001040  00                 	db	0	; dummy byte at the end
   295  0000                     
   296                           	psect	cinit
   297  002E08                     __pcinit:
   298                           	opt stack 0
   299  002E08                     start_initialization:
   300                           	opt stack 0
   301  002E08                     __initialization:
   302                           	opt stack 0
   303                           
   304                           ; Initialize objects allocated to BANK0 (23 bytes)
   305                           ; load TBLPTR registers with __pidataBANK0
   306  002E08  0E54               	movlw	low __pidataBANK0
   307  002E0A  6EF6               	movwf	tblptrl,c
   308  002E0C  0E34               	movlw	high __pidataBANK0
   309  002E0E  6EF7               	movwf	tblptrh,c
   310  002E10  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   311  002E12  6EF8               	movwf	tblptru,c
   312  002E14  EE00  F0E9         	lfsr	0,__pdataBANK0
   313  002E18  EE10 F017          	lfsr	1,23
   314  002E1C                     copy_data0:
   315  002E1C  0009               	tblrd		*+
   316  002E1E  CFF5 FFEE          	movff	tablat,postinc0
   317  002E22  50E5               	movf	postdec1,w,c
   318  002E24  50E1               	movf	fsr1l,w,c
   319  002E26  E1FA               	bnz	copy_data0
   320                           
   321                           ; Initialize objects allocated to COMRAM (1 bytes)
   322                           ; load TBLPTR registers with __pidataCOMRAM
   323  002E28  0E80               	movlw	low __pidataCOMRAM
   324  002E2A  6EF6               	movwf	tblptrl,c
   325  002E2C  0E34               	movlw	high __pidataCOMRAM
   326  002E2E  6EF7               	movwf	tblptrh,c
   327  002E30  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   328  002E32  6EF8               	movwf	tblptru,c
   329  002E34  0009               	tblrd		*+	;fetch initializer
   330  002E36  CFF5 F05E          	movff	tablat,__pdataCOMRAM
   331                           
   332                           ; Clear objects allocated to BANK2 (144 bytes)
   333  002E3A  EE02  F000         	lfsr	0,__pbssBANK2
   334  002E3E  0E90               	movlw	144
   335  002E40                     clear_0:
   336  002E40  6AEE               	clrf	postinc0,c
   337  002E42  06E8               	decf	wreg,f,c
   338  002E44  E1FD               	bnz	clear_0
   339                           
   340                           ; Clear objects allocated to BANK1 (205 bytes)
   341  002E46  EE01  F000         	lfsr	0,__pbssBANK1
   342  002E4A  0ECD               	movlw	205
   343  002E4C                     clear_1:
   344  002E4C  6AEE               	clrf	postinc0,c
   345  002E4E  06E8               	decf	wreg,f,c
   346  002E50  E1FD               	bnz	clear_1
   347                           
   348                           ; Clear objects allocated to BANK0 (58 bytes)
   349  002E52  EE00  F0AF         	lfsr	0,__pbssBANK0
   350  002E56  0E3A               	movlw	58
   351  002E58                     clear_2:
   352  002E58  6AEE               	clrf	postinc0,c
   353  002E5A  06E8               	decf	wreg,f,c
   354  002E5C  E1FD               	bnz	clear_2
   355                           
   356                           ; Clear objects allocated to COMRAM (6 bytes)
   357  002E5E  6A5D               	clrf	(__pbssCOMRAM+5)& (0+255),c
   358  002E60  6A5C               	clrf	(__pbssCOMRAM+4)& (0+255),c
   359  002E62  6A5B               	clrf	(__pbssCOMRAM+3)& (0+255),c
   360  002E64  6A5A               	clrf	(__pbssCOMRAM+2)& (0+255),c
   361  002E66  6A59               	clrf	(__pbssCOMRAM+1)& (0+255),c
   362  002E68  6A58               	clrf	__pbssCOMRAM& (0+255),c
   363  002E6A                     end_of_initialization:
   364                           	opt stack 0
   365  002E6A                     __end_of__initialization:
   366                           	opt stack 0
   367  002E6A  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   368  002E6C  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   369  002E6E  0100               	movlb	0
   370  002E70  EFB1  F00C         	goto	_main	;jump to C main() function
   371                           tblptru	equ	0xFF8
   372                           tblptrh	equ	0xFF7
   373                           tblptrl	equ	0xFF6
   374                           tablat	equ	0xFF5
   375                           postinc0	equ	0xFEE
   376                           wreg	equ	0xFE8
   377                           postdec1	equ	0xFE5
   378                           fsr1l	equ	0xFE1
   379                           
   380                           	psect	bssCOMRAM
   381  000058                     __pbssCOMRAM:
   382                           	opt stack 0
   383  000058                     _txBufferPtrOut:
   384                           	opt stack 0
   385  000058                     	ds	1
   386  000059                     _rxBufferCount:
   387                           	opt stack 0
   388  000059                     	ds	1
   389  00005A                     _rxBufferPtrIn:
   390                           	opt stack 0
   391  00005A                     	ds	1
   392  00005B                     _topRight:
   393                           	opt stack 0
   394  00005B                     	ds	1
   395  00005C                     _bottomRight:
   396                           	opt stack 0
   397  00005C                     	ds	1
   398  00005D                     _numberWaitingUsers:
   399                           	opt stack 0
   400  00005D                     	ds	1
   401                           tblptru	equ	0xFF8
   402                           tblptrh	equ	0xFF7
   403                           tblptrl	equ	0xFF6
   404                           tablat	equ	0xFF5
   405                           postinc0	equ	0xFEE
   406                           wreg	equ	0xFE8
   407                           postdec1	equ	0xFE5
   408                           fsr1l	equ	0xFE1
   409                           
   410                           	psect	dataCOMRAM
   411  00005E                     __pdataCOMRAM:
   412                           	opt stack 0
   413  00005E                     Can_Isr@nbTxBuf:
   414                           	opt stack 0
   415  00005E                     	ds	1
   416                           tblptru	equ	0xFF8
   417                           tblptrh	equ	0xFF7
   418                           tblptrl	equ	0xFF6
   419                           tablat	equ	0xFF5
   420                           postinc0	equ	0xFEE
   421                           wreg	equ	0xFE8
   422                           postdec1	equ	0xFE5
   423                           fsr1l	equ	0xFE1
   424                           
   425                           	psect	bssBANK0
   426  0000AF                     __pbssBANK0:
   427                           	opt stack 0
   428  0000AF                     _priorityUser:
   429                           	opt stack 0
   430  0000AF                     	ds	12
   431  0000BB                     Mcp2515Sleep@F8117:
   432                           	opt stack 0
   433  0000BB                     	ds	3
   434  0000BE                     _nbTx2:
   435                           	opt stack 0
   436  0000BE                     	ds	1
   437  0000BF                     _nbTx1:
   438                           	opt stack 0
   439  0000BF                     	ds	1
   440  0000C0                     _nbTx0:
   441                           	opt stack 0
   442  0000C0                     	ds	1
   443  0000C1                     _txBufferCount:
   444                           	opt stack 0
   445  0000C1                     	ds	1
   446  0000C2                     _txBufferPtrIn:
   447                           	opt stack 0
   448  0000C2                     	ds	1
   449  0000C3                     _rxBufferPtrOut:
   450                           	opt stack 0
   451  0000C3                     	ds	1
   452  0000C4                     _bottomLeft:
   453                           	opt stack 0
   454  0000C4                     	ds	1
   455  0000C5                     _topLeft:
   456                           	opt stack 0
   457  0000C5                     	ds	1
   458  0000C6                     _id:
   459                           	opt stack 0
   460  0000C6                     	ds	1
   461  0000C7                     _messageTx:
   462                           	opt stack 0
   463  0000C7                     	ds	17
   464  0000D8                     _message:
   465                           	opt stack 0
   466  0000D8                     	ds	17
   467                           tblptru	equ	0xFF8
   468                           tblptrh	equ	0xFF7
   469                           tblptrl	equ	0xFF6
   470                           tablat	equ	0xFF5
   471                           postinc0	equ	0xFEE
   472                           wreg	equ	0xFE8
   473                           postdec1	equ	0xFE5
   474                           fsr1l	equ	0xFE1
   475                           
   476                           	psect	dataBANK0
   477  0000E9                     __pdataBANK0:
   478                           	opt stack 0
   479  0000E9                     Mcp2515ReadCanId@F8123:
   480                           	opt stack 0
   481  0000E9                     	ds	6
   482  0000EF                     Mcp2515_Init@F8112:
   483                           	opt stack 0
   484  0000EF                     	ds	4
   485  0000F3                     Can_GetStatus@F8264:
   486                           	opt stack 0
   487  0000F3                     	ds	4
   488  0000F7                     Mcp2515GetNextFreeTXBuf@F8153:
   489                           	opt stack 0
   490  0000F7                     	ds	3
   491  0000FA                     Mcp2515_Init@F8114:
   492                           	opt stack 0
   493  0000FA                     	ds	3
   494  0000FD                     Can_GetStatus@F8262:
   495                           	opt stack 0
   496  0000FD                     	ds	3
   497                           tblptru	equ	0xFF8
   498                           tblptrh	equ	0xFF7
   499                           tblptrl	equ	0xFF6
   500                           tablat	equ	0xFF5
   501                           postinc0	equ	0xFEE
   502                           wreg	equ	0xFE8
   503                           postdec1	equ	0xFE5
   504                           fsr1l	equ	0xFE1
   505                           
   506                           	psect	bssBANK1
   507  000100                     __pbssBANK1:
   508                           	opt stack 0
   509  000100                     _occupancyPaths:
   510                           	opt stack 0
   511  000100                     	ds	12
   512  00010C                     _colorLights:
   513                           	opt stack 0
   514  00010C                     	ds	12
   515  000118                     _durationLights:
   516                           	opt stack 0
   517  000118                     	ds	12
   518  000124                     _txBuffer:
   519                           	opt stack 0
   520  000124                     	ds	68
   521  000168                     _rxBuffer:
   522                           	opt stack 0
   523  000168                     	ds	68
   524  0001AC                     _filter:
   525                           	opt stack 0
   526  0001AC                     	ds	33
   527                           tblptru	equ	0xFF8
   528                           tblptrh	equ	0xFF7
   529                           tblptrl	equ	0xFF6
   530                           tablat	equ	0xFF5
   531                           postinc0	equ	0xFEE
   532                           wreg	equ	0xFE8
   533                           postdec1	equ	0xFE5
   534                           fsr1l	equ	0xFE1
   535                           
   536                           	psect	bssBANK2
   537  000200                     __pbssBANK2:
   538                           	opt stack 0
   539  000200                     _conflicts:
   540                           	opt stack 0
   541  000200                     	ds	144
   542                           tblptru	equ	0xFF8
   543                           tblptrh	equ	0xFF7
   544                           tblptrl	equ	0xFF6
   545                           tablat	equ	0xFF5
   546                           postinc0	equ	0xFEE
   547                           wreg	equ	0xFE8
   548                           postdec1	equ	0xFE5
   549                           fsr1l	equ	0xFE1
   550                           
   551                           	psect	cstackBANK0
   552  000060                     __pcstackBANK0:
   553                           	opt stack 0
   554  000060                     ??_decrPriority:
   555  000060                     ?___wmul:
   556                           	opt stack 0
   557  000060                     initLogic@i:
   558                           	opt stack 0
   559  000060                     setPriority@carPerson:
   560                           	opt stack 0
   561  000060                     Can_GetMessage@msgPtr:
   562                           	opt stack 0
   563  000060                     Can_PutMessage@msgPtr:
   564                           	opt stack 0
   565  000060                     SPIRW@tx:
   566                           	opt stack 0
   567  000060                     resetData@i:
   568                           	opt stack 0
   569  000060                     ___wmul@multiplier:
   570                           	opt stack 0
   571                           
   572                           ; 2 bytes @ 0x0
   573  000060                     	ds	2
   574  000062                     ??_Can_GetMessage:
   575  000062                     ??_Can_PutMessage:
   576  000062                     decrPriority@user:
   577                           	opt stack 0
   578  000062                     SPIRW@rx:
   579                           	opt stack 0
   580  000062                     ___wmul@multiplicand:
   581                           	opt stack 0
   582                           
   583                           ; 2 bytes @ 0x2
   584  000062                     	ds	1
   585  000063                     decrPriority@modified:
   586                           	opt stack 0
   587                           
   588                           ; 1 bytes @ 0x3
   589  000063                     	ds	1
   590  000064                     Can_GetMessage@i:
   591                           	opt stack 0
   592  000064                     Can_PutMessage@i:
   593                           	opt stack 0
   594  000064                     decrPriority@i:
   595                           	opt stack 0
   596  000064                     ___wmul@product:
   597                           	opt stack 0
   598  000064                     SPIRW@size:
   599                           	opt stack 0
   600                           
   601                           ; 4 bytes @ 0x4
   602  000064                     	ds	1
   603  000065                     readID@retVal:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0x5
   607  000065                     	ds	1
   608  000066                     ??_readConflictInfo:
   609                           
   610                           ; 1 bytes @ 0x6
   611  000066                     	ds	2
   612  000068                     SPIRW@i:
   613                           	opt stack 0
   614                           
   615                           ; 4 bytes @ 0x8
   616  000068                     	ds	4
   617  00006C                     Spi_Write@tx:
   618                           	opt stack 0
   619  00006C                     readConflictInfo@i:
   620                           	opt stack 0
   621                           
   622                           ; 2 bytes @ 0xC
   623  00006C                     	ds	2
   624  00006E                     readConflictInfo@j:
   625                           	opt stack 0
   626  00006E                     Spi_Write@size:
   627                           	opt stack 0
   628                           
   629                           ; 4 bytes @ 0xE
   630  00006E                     	ds	4
   631  000072                     Mcp2515_Reset@cmd:
   632                           	opt stack 0
   633  000072                     Mcp2515WriteCanId@ext:
   634                           	opt stack 0
   635                           
   636                           ; 1 bytes @ 0x12
   637  000072                     	ds	1
   638  000073                     Mcp2515_Reset@i:
   639                           	opt stack 0
   640  000073                     Mcp2515WriteCanId@can_id:
   641                           	opt stack 0
   642                           
   643                           ; 4 bytes @ 0x13
   644  000073                     	ds	4
   645  000077                     ??_Mcp2515WriteCanId:
   646                           
   647                           ; 1 bytes @ 0x17
   648  000077                     	ds	3
   649  00007A                     Mcp2515WriteCanId@mcp_addr:
   650                           	opt stack 0
   651                           
   652                           ; 1 bytes @ 0x1A
   653  00007A                     	ds	1
   654  00007B                     Mcp2515WriteCanId@buf:
   655                           	opt stack 0
   656                           
   657                           ; 6 bytes @ 0x1B
   658  00007B                     	ds	6
   659  000081                     Mcp2515WriteCanId@canid:
   660                           	opt stack 0
   661                           
   662                           ; 2 bytes @ 0x21
   663  000081                     	ds	2
   664  000083                     Mcp2515_Init@speedCfg:
   665                           	opt stack 0
   666                           
   667                           ; 2 bytes @ 0x23
   668  000083                     	ds	2
   669  000085                     Mcp2515_Init@filterCfg:
   670                           	opt stack 0
   671                           
   672                           ; 2 bytes @ 0x25
   673  000085                     	ds	2
   674  000087                     ??_Mcp2515_Init:
   675                           
   676                           ; 1 bytes @ 0x27
   677  000087                     	ds	13
   678  000094                     Mcp2515_Init@i:
   679                           	opt stack 0
   680                           
   681                           ; 1 bytes @ 0x34
   682  000094                     	ds	1
   683  000095                     Mcp2515_Init@cmdMask4:
   684                           	opt stack 0
   685                           
   686                           ; 4 bytes @ 0x35
   687  000095                     	ds	4
   688  000099                     Mcp2515_Init@cmdWrite3:
   689                           	opt stack 0
   690                           
   691                           ; 3 bytes @ 0x39
   692  000099                     	ds	3
   693  00009C                     Can_Init@speedCfg:
   694                           	opt stack 0
   695                           
   696                           ; 2 bytes @ 0x3C
   697  00009C                     	ds	2
   698  00009E                     Can_Init@filterCfg:
   699                           	opt stack 0
   700                           
   701                           ; 2 bytes @ 0x3E
   702  00009E                     	ds	2
   703  0000A0                     
   704                           ; 2 bytes @ 0x40
   705  0000A0                     	ds	2
   706  0000A2                     
   707                           ; 3 bytes @ 0x42
   708  0000A2                     	ds	3
   709  0000A5                     ??_main:
   710                           
   711                           ; 1 bytes @ 0x45
   712  0000A5                     	ds	4
   713  0000A9                     main@cmd:
   714                           	opt stack 0
   715                           
   716                           ; 2 bytes @ 0x49
   717  0000A9                     	ds	2
   718  0000AB                     main@isAlreadyWaiting:
   719                           	opt stack 0
   720                           
   721                           ; 1 bytes @ 0x4B
   722  0000AB                     	ds	1
   723  0000AC                     main@i:
   724                           	opt stack 0
   725                           
   726                           ; 1 bytes @ 0x4C
   727  0000AC                     	ds	1
   728  0000AD                     main@i_120:
   729                           	opt stack 0
   730                           
   731                           ; 1 bytes @ 0x4D
   732  0000AD                     	ds	1
   733  0000AE                     main@user:
   734                           	opt stack 0
   735                           
   736                           ; 1 bytes @ 0x4E
   737  0000AE                     	ds	1
   738                           tblptru	equ	0xFF8
   739                           tblptrh	equ	0xFF7
   740                           tblptrl	equ	0xFF6
   741                           tablat	equ	0xFF5
   742                           postinc0	equ	0xFEE
   743                           wreg	equ	0xFE8
   744                           postdec1	equ	0xFE5
   745                           fsr1l	equ	0xFE1
   746                           
   747                           	psect	cstackCOMRAM
   748  000001                     __pcstackCOMRAM:
   749                           	opt stack 0
   750  000001                     ??_shiftPriority:
   751  000001                     getConflict@carPersonToLookAt:
   752                           	opt stack 0
   753  000001                     memcpy@d1:
   754                           	opt stack 0
   755  000001                     i2Can_GetMessage@msgPtr:
   756                           	opt stack 0
   757  000001                     i2Can_PutMessage@msgPtr:
   758                           	opt stack 0
   759  000001                     i2SPIRW@tx:
   760                           	opt stack 0
   761                           
   762                           ; 2 bytes @ 0x0
   763  000001                     	ds	1
   764  000002                     ??_getConflict:
   765                           
   766                           ; 1 bytes @ 0x1
   767  000002                     	ds	1
   768  000003                     ??i2_Can_GetMessage:
   769  000003                     ??i2_Can_PutMessage:
   770  000003                     memcpy@s1:
   771                           	opt stack 0
   772  000003                     i2SPIRW@rx:
   773                           	opt stack 0
   774                           
   775                           ; 2 bytes @ 0x2
   776  000003                     	ds	1
   777  000004                     getConflict@carPersonConcerned:
   778                           	opt stack 0
   779                           
   780                           ; 1 bytes @ 0x3
   781  000004                     	ds	1
   782  000005                     i2Can_GetMessage@i:
   783                           	opt stack 0
   784  000005                     i2Can_PutMessage@i:
   785                           	opt stack 0
   786  000005                     memcpy@n:
   787                           	opt stack 0
   788  000005                     i2SPIRW@size:
   789                           	opt stack 0
   790                           
   791                           ; 4 bytes @ 0x4
   792  000005                     	ds	1
   793  000006                     ??_requestPed:
   794  000006                     sendTrafficLight@color:
   795                           	opt stack 0
   796  000006                     sendPedestrianLight@color:
   797                           	opt stack 0
   798  000006                     sendWarningLight@state:
   799                           	opt stack 0
   800                           
   801                           ; 1 bytes @ 0x5
   802  000006                     	ds	1
   803  000007                     ??_sendTrafficLight:
   804  000007                     ??_sendPedestrianLight:
   805  000007                     ??_sendWarningLight:
   806  000007                     memcpy@d:
   807                           	opt stack 0
   808                           
   809                           ; 2 bytes @ 0x6
   810  000007                     	ds	1
   811  000008                     shiftPriority@temp:
   812                           	opt stack 0
   813                           
   814                           ; 1 bytes @ 0x7
   815  000008                     	ds	1
   816  000009                     shiftPriority@i:
   817                           	opt stack 0
   818  000009                     sendTrafficLight@trafficLight:
   819                           	opt stack 0
   820  000009                     sendPedestrianLight@trafficLight:
   821                           	opt stack 0
   822  000009                     memcpy@s:
   823                           	opt stack 0
   824  000009                     i2SPIRW@i:
   825                           	opt stack 0
   826                           
   827                           ; 4 bytes @ 0x8
   828  000009                     	ds	1
   829  00000A                     setLight@color:
   830                           	opt stack 0
   831                           
   832                           ; 1 bytes @ 0x9
   833  00000A                     	ds	1
   834  00000B                     setLight@light:
   835                           	opt stack 0
   836  00000B                     sendWarningLight@trafficLight:
   837                           	opt stack 0
   838  00000B                     memcpy@tmp:
   839                           	opt stack 0
   840                           
   841                           ; 1 bytes @ 0xA
   842  00000B                     	ds	1
   843  00000C                     setWarningLight@state:
   844                           	opt stack 0
   845  00000C                     requestPed@ped:
   846                           	opt stack 0
   847                           
   848                           ; 1 bytes @ 0xB
   849  00000C                     	ds	1
   850  00000D                     ??_firstRound:
   851  00000D                     setWarningLight@light:
   852                           	opt stack 0
   853  00000D                     Spi_ReadWrite@rx_tx:
   854                           	opt stack 0
   855  00000D                     i2Spi_Write@tx:
   856                           	opt stack 0
   857                           
   858                           ; 2 bytes @ 0xC
   859  00000D                     	ds	1
   860  00000E                     firstRound@color:
   861                           	opt stack 0
   862                           
   863                           ; 1 bytes @ 0xD
   864  00000E                     	ds	1
   865  00000F                     firstRound@occupancy:
   866                           	opt stack 0
   867  00000F                     secondRound@i:
   868                           	opt stack 0
   869  00000F                     Spi_ReadWrite@size:
   870                           	opt stack 0
   871  00000F                     i2Spi_Write@size:
   872                           	opt stack 0
   873                           
   874                           ; 4 bytes @ 0xE
   875  00000F                     	ds	1
   876  000010                     firstRound@duration:
   877                           	opt stack 0
   878  000010                     secondRound@conflict:
   879                           	opt stack 0
   880                           
   881                           ; 1 bytes @ 0xF
   882  000010                     	ds	1
   883  000011                     firstRound@i:
   884                           	opt stack 0
   885  000011                     secondRound@j:
   886                           	opt stack 0
   887                           
   888                           ; 1 bytes @ 0x10
   889  000011                     	ds	1
   890  000012                     secondRound@waitingUser:
   891                           	opt stack 0
   892                           
   893                           ; 1 bytes @ 0x11
   894  000012                     	ds	1
   895  000013                     onTimeout@i:
   896                           	opt stack 0
   897  000013                     i2Mcp2515WriteCanId@ext:
   898                           	opt stack 0
   899  000013                     Mcp2515ReadCanId@ext:
   900                           	opt stack 0
   901  000013                     Mcp2515GetNextFreeTXBuf@txbuf_n:
   902                           	opt stack 0
   903  000013                     Can_GetStatus@msg4:
   904                           	opt stack 0
   905                           
   906                           ; 4 bytes @ 0x12
   907  000013                     	ds	1
   908  000014                     i2Mcp2515WriteCanId@can_id:
   909                           	opt stack 0
   910                           
   911                           ; 4 bytes @ 0x13
   912  000014                     	ds	1
   913  000015                     ??_Mcp2515GetNextFreeTXBuf:
   914  000015                     Mcp2515ReadCanId@can_id:
   915                           	opt stack 0
   916                           
   917                           ; 2 bytes @ 0x14
   918  000015                     	ds	1
   919  000016                     Mcp2515GetNextFreeTXBuf@ctrlregs:
   920                           	opt stack 0
   921                           
   922                           ; 3 bytes @ 0x15
   923  000016                     	ds	1
   924  000017                     ??_Mcp2515ReadCanId:
   925  000017                     Can_GetStatus@msg:
   926                           	opt stack 0
   927                           
   928                           ; 3 bytes @ 0x16
   929  000017                     	ds	1
   930  000018                     ??i2_Mcp2515WriteCanId:
   931                           
   932                           ; 1 bytes @ 0x17
   933  000018                     	ds	1
   934  000019                     Mcp2515GetNextFreeTXBuf@buf:
   935                           	opt stack 0
   936                           
   937                           ; 3 bytes @ 0x18
   938  000019                     	ds	1
   939  00001A                     Can_GetStatus@status:
   940                           	opt stack 0
   941                           
   942                           ; 1 bytes @ 0x19
   943  00001A                     	ds	1
   944  00001B                     i2Mcp2515WriteCanId@mcp_addr:
   945                           	opt stack 0
   946                           
   947                           ; 1 bytes @ 0x1A
   948  00001B                     	ds	1
   949  00001C                     Mcp2515GetNextFreeTXBuf@i:
   950                           	opt stack 0
   951  00001C                     i2Mcp2515WriteCanId@buf:
   952                           	opt stack 0
   953                           
   954                           ; 6 bytes @ 0x1B
   955  00001C                     	ds	6
   956  000022                     i2Mcp2515WriteCanId@canid:
   957                           	opt stack 0
   958                           
   959                           ; 2 bytes @ 0x21
   960  000022                     	ds	2
   961  000024                     Mcp2515WriteCanMsg@msg:
   962                           	opt stack 0
   963                           
   964                           ; 2 bytes @ 0x23
   965  000024                     	ds	2
   966  000026                     ??_Mcp2515WriteCanMsg:
   967                           
   968                           ; 1 bytes @ 0x25
   969  000026                     	ds	2
   970  000028                     Mcp2515WriteCanMsg@buf:
   971                           	opt stack 0
   972                           
   973                           ; 10 bytes @ 0x27
   974  000028                     	ds	1
   975  000029                     Mcp2515ReadCanId@mcp_addr:
   976                           	opt stack 0
   977                           
   978                           ; 1 bytes @ 0x28
   979  000029                     	ds	1
   980  00002A                     Mcp2515ReadCanId@msg:
   981                           	opt stack 0
   982                           
   983                           ; 6 bytes @ 0x29
   984  00002A                     	ds	6
   985  000030                     Mcp2515ReadCanMsg@msg:
   986                           	opt stack 0
   987                           
   988                           ; 2 bytes @ 0x2F
   989  000030                     	ds	2
   990  000032                     ??_Mcp2515ReadCanMsg:
   991  000032                     Mcp2515WriteCanMsg@buffer_sidh_addr:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0x31
   995  000032                     	ds	1
   996  000033                     Mcp2515WriteCanMsg@dlc:
   997                           	opt stack 0
   998                           
   999                           ; 1 bytes @ 0x32
  1000  000033                     	ds	1
  1001  000034                     Mcp2515WriteCanMsg@mcp_addr:
  1002                           	opt stack 0
  1003  000034                     Mcp2515ReadCanMsg@cmd:
  1004                           	opt stack 0
  1005                           
  1006                           ; 10 bytes @ 0x33
  1007  000034                     	ds	1
  1008  000035                     Mcp2515WriteCanMsg@i:
  1009                           	opt stack 0
  1010                           
  1011                           ; 1 bytes @ 0x34
  1012  000035                     	ds	1
  1013  000036                     Can_SendMessage@msg:
  1014                           	opt stack 0
  1015                           
  1016                           ; 2 bytes @ 0x35
  1017  000036                     	ds	2
  1018  000038                     Can_SendMessage@buf:
  1019                           	opt stack 0
  1020                           
  1021                           ; 4 bytes @ 0x37
  1022  000038                     	ds	4
  1023  00003C                     Can_SendMessage@res:
  1024                           	opt stack 0
  1025                           
  1026                           ; 1 bytes @ 0x3B
  1027  00003C                     	ds	1
  1028  00003D                     Can_SendMessage@txbuf_n:
  1029                           	opt stack 0
  1030                           
  1031                           ; 1 bytes @ 0x3C
  1032  00003D                     	ds	1
  1033  00003E                     Mcp2515ReadCanMsg@mcp_addr:
  1034                           	opt stack 0
  1035                           
  1036                           ; 1 bytes @ 0x3D
  1037  00003E                     	ds	1
  1038  00003F                     Can_ReadMessage@msg:
  1039                           	opt stack 0
  1040                           
  1041                           ; 2 bytes @ 0x3E
  1042  00003F                     	ds	2
  1043  000041                     Can_ReadMessage@buf:
  1044                           	opt stack 0
  1045                           
  1046                           ; 4 bytes @ 0x40
  1047  000041                     	ds	4
  1048  000045                     Can_ReadInBuffer@error:
  1049                           	opt stack 0
  1050                           
  1051                           ; 1 bytes @ 0x44
  1052  000045                     	ds	1
  1053  000046                     Can_ReadInBuffer@rdStatus:
  1054                           	opt stack 0
  1055                           
  1056                           ; 1 bytes @ 0x45
  1057  000046                     	ds	1
  1058  000047                     Can_ReadInBuffer@i:
  1059                           	opt stack 0
  1060                           
  1061                           ; 1 bytes @ 0x46
  1062  000047                     	ds	1
  1063  000048                     ??_Can_Isr:
  1064                           
  1065                           ; 1 bytes @ 0x47
  1066  000048                     	ds	1
  1067  000049                     Can_Isr@retCode:
  1068                           	opt stack 0
  1069                           
  1070                           ; 1 bytes @ 0x48
  1071  000049                     	ds	1
  1072  00004A                     ??_high_isr:
  1073                           
  1074                           ; 1 bytes @ 0x49
  1075  00004A                     	ds	14
  1076                           tblptru	equ	0xFF8
  1077                           tblptrh	equ	0xFF7
  1078                           tblptrl	equ	0xFF6
  1079                           tablat	equ	0xFF5
  1080                           postinc0	equ	0xFEE
  1081                           wreg	equ	0xFE8
  1082                           postdec1	equ	0xFE5
  1083                           fsr1l	equ	0xFE1
  1084                           
  1085 ;;
  1086 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1087 ;;
  1088 ;; *************** function _main *****************
  1089 ;; Defined at:
  1090 ;;		line 14 in file "main.c"
  1091 ;; Parameters:    Size  Location     Type
  1092 ;;  argc            2   64[BANK0 ] int 
  1093 ;;  argv            3   66[BANK0 ] PTR PTR unsigned char 
  1094 ;; Auto vars:     Size  Location     Type
  1095 ;;  i               1   77[BANK0 ] unsigned char 
  1096 ;;  i               1   76[BANK0 ] unsigned char 
  1097 ;;  isAlreadyWai    1   75[BANK0 ] unsigned char 
  1098 ;;  cmd             2   73[BANK0 ] unsigned int 
  1099 ;;  user            1   78[BANK0 ] unsigned char 
  1100 ;; Return value:  Size  Location     Type
  1101 ;;                  2   64[BANK0 ] int 
  1102 ;; Registers used:
  1103 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1104 ;; Tracked objects:
  1105 ;;		On entry : 0/0
  1106 ;;		On exit  : 0/0
  1107 ;;		Unchanged: 0/0
  1108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1109 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1110 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1111 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1112 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1113 ;;Total ram usage:       15 bytes
  1114 ;; Hardware stack levels required when called:   14
  1115 ;; This function calls:
  1116 ;;		_Can_GetMessage
  1117 ;;		_decrPriority
  1118 ;;		_init
  1119 ;;		_initLogic
  1120 ;;		_setPriority
  1121 ;; This function is called by:
  1122 ;;		Startup code after reset
  1123 ;; This function uses a non-reentrant model
  1124 ;;
  1125                           
  1126                           	psect	text0
  1127  001962                     __ptext0:
  1128                           	opt stack 0
  1129  001962                     _main:
  1130                           	opt stack 17
  1131                           
  1132                           ;main.c: 15: init();
  1133                           
  1134                           ;incstack = 0
  1135  001962  EC4A  F016         	call	_init	;wreg free
  1136                           
  1137                           ;main.c: 16: initLogic();
  1138  001966  ECCD  F016         	call	_initLogic	;wreg free
  1139  00196A                     l3252:
  1140                           
  1141                           ;main.c: 27: Can_GetMessage(&message);
  1142  00196A  0ED8               	movlw	low _message
  1143  00196C  0100               	movlb	0	; () banked
  1144  00196E  6F60               	movwf	Can_GetMessage@msgPtr& (0+255),b
  1145  001970  0E00               	movlw	high _message
  1146  001972  0100               	movlb	0	; () banked
  1147  001974  6F61               	movwf	(Can_GetMessage@msgPtr+1)& (0+255),b
  1148  001976  ECB2  F010         	call	_Can_GetMessage	;wreg free
  1149                           
  1150                           ;main.c: 30: uint16_t cmd = (message.identifier & 0b11110000000);
  1151  00197A  0E80               	movlw	128
  1152  00197C  0100               	movlb	0	; () banked
  1153  00197E  15D9               	andwf	(_message+1)& (0+255),w,b
  1154  001980  0100               	movlb	0	; () banked
  1155  001982  6FA9               	movwf	main@cmd& (0+255),b
  1156  001984  0E07               	movlw	7
  1157  001986  0100               	movlb	0	; () banked
  1158  001988  15DA               	andwf	(_message+2)& (0+255),w,b
  1159  00198A  0100               	movlb	0	; () banked
  1160  00198C  6FAA               	movwf	(main@cmd+1)& (0+255),b
  1161                           
  1162                           ; BSR set to: 0
  1163                           ;main.c: 31: uint8_t user = (message.identifier & 0b00001110000) >> 4;
  1164  00198E  C0D9  F0A5         	movff	_message+1,??_main
  1165  001992  C0DA  F0A6         	movff	_message+2,??_main+1
  1166  001996  C0DB  F0A7         	movff	_message+3,??_main+2
  1167  00199A  C0DC  F0A8         	movff	_message+4,??_main+3
  1168  00199E  0E05               	movlw	5
  1169  0019A0  D006               	goto	u2370
  1170  0019A2                     u2375:
  1171  0019A2  0100               	movlb	0	; () banked
  1172  0019A4  90D8               	bcf	status,0,c
  1173  0019A6  33A8               	rrcf	(??_main+3)& (0+255),f,b
  1174  0019A8  33A7               	rrcf	(??_main+2)& (0+255),f,b
  1175  0019AA  33A6               	rrcf	(??_main+1)& (0+255),f,b
  1176  0019AC  33A5               	rrcf	??_main& (0+255),f,b
  1177  0019AE                     u2370:
  1178  0019AE  2EE8               	decfsz	wreg,f,c
  1179  0019B0  D7F8               	goto	u2375
  1180  0019B2  0100               	movlb	0	; () banked
  1181  0019B4  51A5               	movf	??_main& (0+255),w,b
  1182  0019B6  0B07               	andlw	7
  1183  0019B8  0100               	movlb	0	; () banked
  1184  0019BA  6FAE               	movwf	main@user& (0+255),b
  1185                           
  1186                           ;main.c: 33: switch(cmd)
  1187  0019BC  D093               	goto	l3318
  1188  0019BE                     l3258:
  1189                           
  1190                           ; BSR set to: 0
  1191                           ;main.c: 37: if(occupancyPaths[user] == 1 && message.dta[0] == 0)
  1192  0019BE  0100               	movlb	0	; () banked
  1193  0019C0  51AE               	movf	main@user& (0+255),w,b
  1194  0019C2  0D01               	mullw	1
  1195  0019C4  0E00               	movlw	low _occupancyPaths
  1196  0019C6  24F3               	addwf	prodl,w,c
  1197  0019C8  6ED9               	movwf	fsr2l,c
  1198  0019CA  0E01               	movlw	high _occupancyPaths
  1199  0019CC  20F4               	addwfc	prodh,w,c
  1200  0019CE  6EDA               	movwf	fsr2h,c
  1201  0019D0  04DE               	decf	postinc2,w,c
  1202  0019D2  A4D8               	btfss	status,2,c
  1203  0019D4  D008               	goto	l3264
  1204                           
  1205                           ; BSR set to: 0
  1206  0019D6  0100               	movlb	0	; () banked
  1207  0019D8  51DE               	movf	(_message+6)& (0+255),w,b
  1208  0019DA  A4D8               	btfss	status,2,c
  1209  0019DC  D004               	goto	l3264
  1210                           
  1211                           ; BSR set to: 0
  1212                           ;main.c: 38: {
  1213                           ;main.c: 39: decrPriority(user);
  1214  0019DE  0100               	movlb	0	; () banked
  1215  0019E0  51AE               	movf	main@user& (0+255),w,b
  1216  0019E2  ECB4  F014         	call	_decrPriority
  1217  0019E6                     l3264:
  1218                           
  1219                           ;main.c: 40: }
  1220                           ;main.c: 41: occupancyPaths[user] = message.dta[0];
  1221  0019E6  0100               	movlb	0	; () banked
  1222  0019E8  51AE               	movf	main@user& (0+255),w,b
  1223  0019EA  0D01               	mullw	1
  1224  0019EC  0E00               	movlw	low _occupancyPaths
  1225  0019EE  24F3               	addwf	prodl,w,c
  1226  0019F0  6ED9               	movwf	fsr2l,c
  1227  0019F2  0E01               	movlw	high _occupancyPaths
  1228  0019F4  20F4               	addwfc	prodh,w,c
  1229  0019F6  6EDA               	movwf	fsr2h,c
  1230  0019F8  C0DE  FFDF         	movff	_message+6,indf2
  1231                           
  1232                           ; BSR set to: 0
  1233                           ;main.c: 43: uint8_t isAlreadyWaiting = 0;
  1234  0019FC  0E00               	movlw	0
  1235  0019FE  0100               	movlb	0	; () banked
  1236  001A00  6FAB               	movwf	main@isAlreadyWaiting& (0+255),b
  1237                           
  1238                           ; BSR set to: 0
  1239                           ;main.c: 44: for(uint8_t i = 0; i < 12;i++)
  1240  001A02  0E00               	movlw	0
  1241  001A04  0100               	movlb	0	; () banked
  1242  001A06  6FAC               	movwf	main@i& (0+255),b
  1243  001A08                     l3270:
  1244                           
  1245                           ; BSR set to: 0
  1246  001A08  0E0B               	movlw	11
  1247  001A0A  0100               	movlb	0	; () banked
  1248  001A0C  65AC               	cpfsgt	main@i& (0+255),b
  1249  001A0E  D001               	goto	l3274
  1250  001A10  D014               	goto	l3282
  1251  001A12                     l3274:
  1252                           
  1253                           ; BSR set to: 0
  1254                           ;main.c: 45: {
  1255                           ;main.c: 46: if(priorityUser[i] == user)
  1256  001A12  0100               	movlb	0	; () banked
  1257  001A14  51AC               	movf	main@i& (0+255),w,b
  1258  001A16  0D01               	mullw	1
  1259  001A18  0EAF               	movlw	low _priorityUser
  1260  001A1A  24F3               	addwf	prodl,w,c
  1261  001A1C  6ED9               	movwf	fsr2l,c
  1262  001A1E  0E00               	movlw	high _priorityUser
  1263  001A20  20F4               	addwfc	prodh,w,c
  1264  001A22  6EDA               	movwf	fsr2h,c
  1265  001A24  0100               	movlb	0	; () banked
  1266  001A26  51AE               	movf	main@user& (0+255),w,b
  1267  001A28  18DE               	xorwf	postinc2,w,c
  1268  001A2A  A4D8               	btfss	status,2,c
  1269  001A2C  D003               	goto	l3278
  1270                           
  1271                           ; BSR set to: 0
  1272                           ;main.c: 47: {
  1273                           ;main.c: 48: isAlreadyWaiting = 1;
  1274  001A2E  0E01               	movlw	1
  1275  001A30  0100               	movlb	0	; () banked
  1276  001A32  6FAB               	movwf	main@isAlreadyWaiting& (0+255),b
  1277  001A34                     l3278:
  1278                           
  1279                           ; BSR set to: 0
  1280  001A34  0100               	movlb	0	; () banked
  1281  001A36  2BAC               	incf	main@i& (0+255),f,b
  1282  001A38  D7E7               	goto	l3270
  1283  001A3A                     l3282:
  1284                           
  1285                           ; BSR set to: 0
  1286                           ;main.c: 49: }
  1287                           ;main.c: 50: }
  1288                           ;main.c: 52: if(isAlreadyWaiting == 0)
  1289  001A3A  0100               	movlb	0	; () banked
  1290  001A3C  51AB               	movf	main@isAlreadyWaiting& (0+255),w,b
  1291  001A3E  0100               	movlb	0	; () banked
  1292  001A40  A4D8               	btfss	status,2,c
  1293  001A42  D793               	goto	l3252
  1294                           
  1295                           ; BSR set to: 0
  1296                           ;main.c: 53: {
  1297                           ;main.c: 54: setPriority(user);
  1298  001A44  0100               	movlb	0	; () banked
  1299  001A46  51AE               	movf	main@user& (0+255),w,b
  1300  001A48  EC09  F01A         	call	_setPriority
  1301                           
  1302                           ;main.c: 55: }
  1303                           ;main.c: 57: break;
  1304  001A4C  D78E               	goto	l3252
  1305  001A4E                     l3286:
  1306                           
  1307                           ;main.c: 59: user+=8;
  1308  001A4E  0E08               	movlw	8
  1309  001A50  0100               	movlb	0	; () banked
  1310  001A52  27AE               	addwf	main@user& (0+255),f,b
  1311                           
  1312                           ; BSR set to: 0
  1313                           ;main.c: 60: if(occupancyPaths[user] == 1 && message.dta[0] == 0)
  1314  001A54  0100               	movlb	0	; () banked
  1315  001A56  51AE               	movf	main@user& (0+255),w,b
  1316  001A58  0D01               	mullw	1
  1317  001A5A  0E00               	movlw	low _occupancyPaths
  1318  001A5C  24F3               	addwf	prodl,w,c
  1319  001A5E  6ED9               	movwf	fsr2l,c
  1320  001A60  0E01               	movlw	high _occupancyPaths
  1321  001A62  20F4               	addwfc	prodh,w,c
  1322  001A64  6EDA               	movwf	fsr2h,c
  1323  001A66  04DE               	decf	postinc2,w,c
  1324  001A68  A4D8               	btfss	status,2,c
  1325  001A6A  D008               	goto	l3294
  1326                           
  1327                           ; BSR set to: 0
  1328  001A6C  0100               	movlb	0	; () banked
  1329  001A6E  51DE               	movf	(_message+6)& (0+255),w,b
  1330  001A70  A4D8               	btfss	status,2,c
  1331  001A72  D004               	goto	l3294
  1332                           
  1333                           ; BSR set to: 0
  1334                           ;main.c: 61: {
  1335                           ;main.c: 62: decrPriority(user);
  1336  001A74  0100               	movlb	0	; () banked
  1337  001A76  51AE               	movf	main@user& (0+255),w,b
  1338  001A78  ECB4  F014         	call	_decrPriority
  1339  001A7C                     l3294:
  1340                           
  1341                           ;main.c: 63: }
  1342                           ;main.c: 64: occupancyPaths[user] = message.dta[0];
  1343  001A7C  0100               	movlb	0	; () banked
  1344  001A7E  51AE               	movf	main@user& (0+255),w,b
  1345  001A80  0D01               	mullw	1
  1346  001A82  0E00               	movlw	low _occupancyPaths
  1347  001A84  24F3               	addwf	prodl,w,c
  1348  001A86  6ED9               	movwf	fsr2l,c
  1349  001A88  0E01               	movlw	high _occupancyPaths
  1350  001A8A  20F4               	addwfc	prodh,w,c
  1351  001A8C  6EDA               	movwf	fsr2h,c
  1352  001A8E  C0DE  FFDF         	movff	_message+6,indf2
  1353                           
  1354                           ; BSR set to: 0
  1355                           ;main.c: 66: uint8_t isAlreadyWaiting = 0;
  1356  001A92  0E00               	movlw	0
  1357  001A94  0100               	movlb	0	; () banked
  1358  001A96  6FAB               	movwf	main@isAlreadyWaiting& (0+255),b
  1359                           
  1360                           ; BSR set to: 0
  1361                           ;main.c: 67: for(uint8_t i = 0; i < 12;i++)
  1362  001A98  0E00               	movlw	0
  1363  001A9A  0100               	movlb	0	; () banked
  1364  001A9C  6FAD               	movwf	main@i_120& (0+255),b
  1365  001A9E                     l3300:
  1366                           
  1367                           ; BSR set to: 0
  1368  001A9E  0E0B               	movlw	11
  1369  001AA0  0100               	movlb	0	; () banked
  1370  001AA2  65AD               	cpfsgt	main@i_120& (0+255),b
  1371  001AA4  D001               	goto	l3304
  1372  001AA6  D014               	goto	l3312
  1373  001AA8                     l3304:
  1374                           
  1375                           ; BSR set to: 0
  1376                           ;main.c: 68: {
  1377                           ;main.c: 69: if(priorityUser[i] == user)
  1378  001AA8  0100               	movlb	0	; () banked
  1379  001AAA  51AD               	movf	main@i_120& (0+255),w,b
  1380  001AAC  0D01               	mullw	1
  1381  001AAE  0EAF               	movlw	low _priorityUser
  1382  001AB0  24F3               	addwf	prodl,w,c
  1383  001AB2  6ED9               	movwf	fsr2l,c
  1384  001AB4  0E00               	movlw	high _priorityUser
  1385  001AB6  20F4               	addwfc	prodh,w,c
  1386  001AB8  6EDA               	movwf	fsr2h,c
  1387  001ABA  0100               	movlb	0	; () banked
  1388  001ABC  51AE               	movf	main@user& (0+255),w,b
  1389  001ABE  18DE               	xorwf	postinc2,w,c
  1390  001AC0  A4D8               	btfss	status,2,c
  1391  001AC2  D003               	goto	l3308
  1392                           
  1393                           ; BSR set to: 0
  1394                           ;main.c: 70: {
  1395                           ;main.c: 71: isAlreadyWaiting = 1;
  1396  001AC4  0E01               	movlw	1
  1397  001AC6  0100               	movlb	0	; () banked
  1398  001AC8  6FAB               	movwf	main@isAlreadyWaiting& (0+255),b
  1399  001ACA                     l3308:
  1400                           
  1401                           ; BSR set to: 0
  1402  001ACA  0100               	movlb	0	; () banked
  1403  001ACC  2BAD               	incf	main@i_120& (0+255),f,b
  1404  001ACE  D7E7               	goto	l3300
  1405  001AD0                     l3312:
  1406                           
  1407                           ; BSR set to: 0
  1408                           ;main.c: 72: }
  1409                           ;main.c: 73: }
  1410                           ;main.c: 75: if(isAlreadyWaiting == 0)
  1411  001AD0  0100               	movlb	0	; () banked
  1412  001AD2  51AB               	movf	main@isAlreadyWaiting& (0+255),w,b
  1413  001AD4  0100               	movlb	0	; () banked
  1414  001AD6  A4D8               	btfss	status,2,c
  1415  001AD8  D748               	goto	l3252
  1416                           
  1417                           ; BSR set to: 0
  1418                           ;main.c: 76: {
  1419                           ;main.c: 77: setPriority(user);
  1420  001ADA  0100               	movlb	0	; () banked
  1421  001ADC  51AE               	movf	main@user& (0+255),w,b
  1422  001ADE  EC09  F01A         	call	_setPriority
  1423                           
  1424                           ;main.c: 83: }
  1425                           
  1426                           ;main.c: 81: break;
  1427                           
  1428                           ;main.c: 80: default:
  1429                           
  1430                           ;main.c: 78: }
  1431                           ;main.c: 79: break;
  1432  001AE2  D743               	goto	l3252
  1433  001AE4                     l3318:
  1434  001AE4  C0A9  F0A5         	movff	main@cmd,??_main
  1435  001AE8  C0AA  F0A6         	movff	main@cmd+1,??_main+1
  1436                           
  1437                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  1438                           ; Switch size 1, requested type "space"
  1439                           ; Number of cases is 2, Range of values is 1 to 2
  1440                           ; switch strategies available:
  1441                           ; Name         Instructions Cycles
  1442                           ; simple_byte            7     4 (average)
  1443                           ;	Chosen strategy is simple_byte
  1444  001AEC  0100               	movlb	0	; () banked
  1445  001AEE  51A6               	movf	(??_main+1)& (0+255),w,b
  1446  001AF0  0A01               	xorlw	1	; case 1
  1447  001AF2  B4D8               	btfsc	status,2,c
  1448  001AF4  D004               	goto	l3400
  1449  001AF6  0A03               	xorlw	3	; case 2
  1450  001AF8  B4D8               	btfsc	status,2,c
  1451  001AFA  D007               	goto	l3402
  1452  001AFC  D736               	goto	l3252
  1453  001AFE                     l3400:
  1454                           
  1455                           ; BSR set to: 0
  1456                           ; Switch size 1, requested type "space"
  1457                           ; Number of cases is 1, Range of values is 128 to 128
  1458                           ; switch strategies available:
  1459                           ; Name         Instructions Cycles
  1460                           ; simple_byte            4     3 (average)
  1461                           ;	Chosen strategy is simple_byte
  1462  001AFE  0100               	movlb	0	; () banked
  1463  001B00  51A5               	movf	??_main& (0+255),w,b
  1464  001B02  0A80               	xorlw	128	; case 128
  1465  001B04  B4D8               	btfsc	status,2,c
  1466  001B06  D75B               	goto	l3258
  1467  001B08  D730               	goto	l3252
  1468  001B0A                     l3402:
  1469                           
  1470                           ; BSR set to: 0
  1471                           ; Switch size 1, requested type "space"
  1472                           ; Number of cases is 1, Range of values is 0 to 0
  1473                           ; switch strategies available:
  1474                           ; Name         Instructions Cycles
  1475                           ; simple_byte            4     3 (average)
  1476                           ;	Chosen strategy is simple_byte
  1477  001B0A  0100               	movlb	0	; () banked
  1478  001B0C  51A5               	movf	??_main& (0+255),w,b
  1479  001B0E  0A00               	xorlw	0	; case 0
  1480  001B10  B4D8               	btfsc	status,2,c
  1481  001B12  D79D               	goto	l3286
  1482                           
  1483                           ; BSR set to: 0
  1484                           
  1485                           ; BSR set to: 0
  1486                           
  1487                           ; BSR set to: 0
  1488  001B14  D72A               	goto	l3252
  1489  001B16                     __end_of_main:
  1490                           	opt stack 0
  1491                           tblptru	equ	0xFF8
  1492                           tblptrh	equ	0xFF7
  1493                           tblptrl	equ	0xFF6
  1494                           tablat	equ	0xFF5
  1495                           prodh	equ	0xFF4
  1496                           prodl	equ	0xFF3
  1497                           postinc0	equ	0xFEE
  1498                           wreg	equ	0xFE8
  1499                           postdec1	equ	0xFE5
  1500                           fsr1l	equ	0xFE1
  1501                           indf2	equ	0xFDF
  1502                           postinc2	equ	0xFDE
  1503                           fsr2h	equ	0xFDA
  1504                           fsr2l	equ	0xFD9
  1505                           status	equ	0xFD8
  1506                           
  1507 ;; *************** function _setPriority *****************
  1508 ;; Defined at:
  1509 ;;		line 172 in file "logic.c"
  1510 ;; Parameters:    Size  Location     Type
  1511 ;;  carPerson       1    wreg     unsigned char 
  1512 ;; Auto vars:     Size  Location     Type
  1513 ;;  carPerson       1    0[BANK0 ] unsigned char 
  1514 ;; Return value:  Size  Location     Type
  1515 ;;                  1    wreg      void 
  1516 ;; Registers used:
  1517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1518 ;; Tracked objects:
  1519 ;;		On entry : 0/0
  1520 ;;		On exit  : 0/0
  1521 ;;		Unchanged: 0/0
  1522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1524 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1526 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1527 ;;Total ram usage:        1 bytes
  1528 ;; Hardware stack levels used:    1
  1529 ;; Hardware stack levels required when called:    8
  1530 ;; This function calls:
  1531 ;;		Nothing
  1532 ;; This function is called by:
  1533 ;;		_main
  1534 ;; This function uses a non-reentrant model
  1535 ;;
  1536                           
  1537                           	psect	text1
  1538  003412                     __ptext1:
  1539                           	opt stack 0
  1540  003412                     _setPriority:
  1541                           	opt stack 22
  1542                           
  1543                           ; BSR set to: 0
  1544                           ;incstack = 0
  1545                           ;setPriority@carPerson stored from wreg
  1546  003412  0100               	movlb	0	; () banked
  1547  003414  6F60               	movwf	setPriority@carPerson& (0+255),b
  1548                           
  1549                           ;logic.c: 174: if(numberWaitingUsers < 12)
  1550  003416  0E0C               	movlw	12
  1551  003418  605D               	cpfslt	_numberWaitingUsers,c
  1552  00341A  0012               	return	
  1553                           
  1554                           ;logic.c: 175: {
  1555                           ;logic.c: 176: priorityUser[numberWaitingUsers] = carPerson;
  1556  00341C  505D               	movf	_numberWaitingUsers,w,c
  1557  00341E  0D01               	mullw	1
  1558  003420  0EAF               	movlw	low _priorityUser
  1559  003422  24F3               	addwf	prodl,w,c
  1560  003424  6ED9               	movwf	fsr2l,c
  1561  003426  0E00               	movlw	high _priorityUser
  1562  003428  20F4               	addwfc	prodh,w,c
  1563  00342A  6EDA               	movwf	fsr2h,c
  1564  00342C  C060  FFDF         	movff	setPriority@carPerson,indf2
  1565                           
  1566                           ;logic.c: 177: numberWaitingUsers++;
  1567  003430  2A5D               	incf	_numberWaitingUsers,f,c
  1568  003432  0012               	return	
  1569  003434                     __end_of_setPriority:
  1570                           	opt stack 0
  1571                           tblptru	equ	0xFF8
  1572                           tblptrh	equ	0xFF7
  1573                           tblptrl	equ	0xFF6
  1574                           tablat	equ	0xFF5
  1575                           prodh	equ	0xFF4
  1576                           prodl	equ	0xFF3
  1577                           postinc0	equ	0xFEE
  1578                           wreg	equ	0xFE8
  1579                           postdec1	equ	0xFE5
  1580                           fsr1l	equ	0xFE1
  1581                           indf2	equ	0xFDF
  1582                           postinc2	equ	0xFDE
  1583                           fsr2h	equ	0xFDA
  1584                           fsr2l	equ	0xFD9
  1585                           status	equ	0xFD8
  1586                           
  1587 ;; *************** function _initLogic *****************
  1588 ;; Defined at:
  1589 ;;		line 5 in file "logic.c"
  1590 ;; Parameters:    Size  Location     Type
  1591 ;;		None
  1592 ;; Auto vars:     Size  Location     Type
  1593 ;;  i               1    0[BANK0 ] unsigned char 
  1594 ;; Return value:  Size  Location     Type
  1595 ;;                  1    wreg      void 
  1596 ;; Registers used:
  1597 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1598 ;; Tracked objects:
  1599 ;;		On entry : 0/0
  1600 ;;		On exit  : 0/0
  1601 ;;		Unchanged: 0/0
  1602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1604 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1606 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1607 ;;Total ram usage:        1 bytes
  1608 ;; Hardware stack levels used:    1
  1609 ;; Hardware stack levels required when called:    8
  1610 ;; This function calls:
  1611 ;;		Nothing
  1612 ;; This function is called by:
  1613 ;;		_main
  1614 ;; This function uses a non-reentrant model
  1615 ;;
  1616                           
  1617                           	psect	text2
  1618  002D9A                     __ptext2:
  1619                           	opt stack 0
  1620  002D9A                     _initLogic:
  1621                           	opt stack 22
  1622                           
  1623                           ;logic.c: 7: for(uint8_t i = 0; i < 12; i++)
  1624                           
  1625                           ;incstack = 0
  1626  002D9A  0E00               	movlw	0
  1627  002D9C  0100               	movlb	0	; () banked
  1628  002D9E  6F60               	movwf	initLogic@i& (0+255),b
  1629  002DA0                     l3160:
  1630                           
  1631                           ; BSR set to: 0
  1632  002DA0  0E0B               	movlw	11
  1633  002DA2  0100               	movlb	0	; () banked
  1634  002DA4  6560               	cpfsgt	initLogic@i& (0+255),b
  1635  002DA6  D001               	goto	l3164
  1636  002DA8  0012               	return	
  1637  002DAA                     l3164:
  1638                           
  1639                           ; BSR set to: 0
  1640                           ;logic.c: 8: {
  1641                           ;logic.c: 9: durationLights[i] = 0;
  1642  002DAA  0100               	movlb	0	; () banked
  1643  002DAC  5160               	movf	initLogic@i& (0+255),w,b
  1644  002DAE  0D01               	mullw	1
  1645  002DB0  0E18               	movlw	low _durationLights
  1646  002DB2  24F3               	addwf	prodl,w,c
  1647  002DB4  6ED9               	movwf	fsr2l,c
  1648  002DB6  0E01               	movlw	high _durationLights
  1649  002DB8  20F4               	addwfc	prodh,w,c
  1650  002DBA  6EDA               	movwf	fsr2h,c
  1651  002DBC  0E00               	movlw	0
  1652  002DBE  6EDF               	movwf	indf2,c
  1653                           
  1654                           ;logic.c: 10: colorLights[i] = 0;
  1655  002DC0  0100               	movlb	0	; () banked
  1656  002DC2  5160               	movf	initLogic@i& (0+255),w,b
  1657  002DC4  0D01               	mullw	1
  1658  002DC6  0E0C               	movlw	low _colorLights
  1659  002DC8  24F3               	addwf	prodl,w,c
  1660  002DCA  6ED9               	movwf	fsr2l,c
  1661  002DCC  0E01               	movlw	high _colorLights
  1662  002DCE  20F4               	addwfc	prodh,w,c
  1663  002DD0  6EDA               	movwf	fsr2h,c
  1664  002DD2  0E00               	movlw	0
  1665  002DD4  6EDF               	movwf	indf2,c
  1666                           
  1667                           ;logic.c: 11: occupancyPaths[i] = 0;
  1668  002DD6  0100               	movlb	0	; () banked
  1669  002DD8  5160               	movf	initLogic@i& (0+255),w,b
  1670  002DDA  0D01               	mullw	1
  1671  002DDC  0E00               	movlw	low _occupancyPaths
  1672  002DDE  24F3               	addwf	prodl,w,c
  1673  002DE0  6ED9               	movwf	fsr2l,c
  1674  002DE2  0E01               	movlw	high _occupancyPaths
  1675  002DE4  20F4               	addwfc	prodh,w,c
  1676  002DE6  6EDA               	movwf	fsr2h,c
  1677  002DE8  0E00               	movlw	0
  1678  002DEA  6EDF               	movwf	indf2,c
  1679                           
  1680                           ;logic.c: 12: priorityUser[i] = 255;
  1681  002DEC  0100               	movlb	0	; () banked
  1682  002DEE  5160               	movf	initLogic@i& (0+255),w,b
  1683  002DF0  0D01               	mullw	1
  1684  002DF2  0EAF               	movlw	low _priorityUser
  1685  002DF4  24F3               	addwf	prodl,w,c
  1686  002DF6  6ED9               	movwf	fsr2l,c
  1687  002DF8  0E00               	movlw	high _priorityUser
  1688  002DFA  20F4               	addwfc	prodh,w,c
  1689  002DFC  6EDA               	movwf	fsr2h,c
  1690  002DFE  0EFF               	movlw	255
  1691  002E00  6EDF               	movwf	indf2,c
  1692                           
  1693                           ; BSR set to: 0
  1694  002E02  0100               	movlb	0	; () banked
  1695  002E04  2B60               	incf	initLogic@i& (0+255),f,b
  1696  002E06  D7CC               	goto	l3160
  1697  002E08                     __end_of_initLogic:
  1698                           	opt stack 0
  1699                           tblptru	equ	0xFF8
  1700                           tblptrh	equ	0xFF7
  1701                           tblptrl	equ	0xFF6
  1702                           tablat	equ	0xFF5
  1703                           prodh	equ	0xFF4
  1704                           prodl	equ	0xFF3
  1705                           postinc0	equ	0xFEE
  1706                           wreg	equ	0xFE8
  1707                           postdec1	equ	0xFE5
  1708                           fsr1l	equ	0xFE1
  1709                           indf2	equ	0xFDF
  1710                           postinc2	equ	0xFDE
  1711                           fsr2h	equ	0xFDA
  1712                           fsr2l	equ	0xFD9
  1713                           status	equ	0xFD8
  1714                           
  1715 ;; *************** function _init *****************
  1716 ;; Defined at:
  1717 ;;		line 3 in file "function.c"
  1718 ;; Parameters:    Size  Location     Type
  1719 ;;		None
  1720 ;; Auto vars:     Size  Location     Type
  1721 ;;		None
  1722 ;; Return value:  Size  Location     Type
  1723 ;;                  1    wreg      void 
  1724 ;; Registers used:
  1725 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1726 ;; Tracked objects:
  1727 ;;		On entry : 0/0
  1728 ;;		On exit  : 0/0
  1729 ;;		Unchanged: 0/0
  1730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1734 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1735 ;;Total ram usage:        0 bytes
  1736 ;; Hardware stack levels used:    1
  1737 ;; Hardware stack levels required when called:   13
  1738 ;; This function calls:
  1739 ;;		_Can_Init
  1740 ;;		_readConflictInfo
  1741 ;;		_readID
  1742 ;; This function is called by:
  1743 ;;		_main
  1744 ;; This function uses a non-reentrant model
  1745 ;;
  1746                           
  1747                           	psect	text3
  1748  002C94                     __ptext3:
  1749                           	opt stack 0
  1750  002C94                     _init:
  1751                           	opt stack 17
  1752                           
  1753                           ;function.c: 4: Can_Init( &canSpeed125k , &filter);
  1754                           
  1755                           ; BSR set to: 0
  1756                           ;incstack = 0
  1757  002C94  0E39               	movlw	low _canSpeed125k
  1758  002C96  0100               	movlb	0	; () banked
  1759  002C98  6F9C               	movwf	Can_Init@speedCfg& (0+255),b
  1760  002C9A  0E10               	movlw	high _canSpeed125k
  1761  002C9C  0100               	movlb	0	; () banked
  1762  002C9E  6F9D               	movwf	(Can_Init@speedCfg+1)& (0+255),b
  1763  002CA0  0EAC               	movlw	low _filter
  1764  002CA2  0100               	movlb	0	; () banked
  1765  002CA4  6F9E               	movwf	Can_Init@filterCfg& (0+255),b
  1766  002CA6  0E01               	movlw	high _filter
  1767  002CA8  0100               	movlb	0	; () banked
  1768  002CAA  6F9F               	movwf	(Can_Init@filterCfg+1)& (0+255),b
  1769  002CAC  EC6C  F019         	call	_Can_Init	;wreg free
  1770                           
  1771                           ;function.c: 5: PEIE = 1;
  1772  002CB0  8CF2               	bsf	intcon,6,c	;volatile
  1773                           
  1774                           ;function.c: 6: GIE = 1;
  1775  002CB2  8EF2               	bsf	intcon,7,c	;volatile
  1776                           
  1777                           ;function.c: 7: id = readID();
  1778  002CB4  EC64  F018         	call	_readID	;wreg free
  1779  002CB8  0100               	movlb	0	; () banked
  1780  002CBA  6FC6               	movwf	_id& (0+255),b
  1781                           
  1782                           ; BSR set to: 0
  1783                           ;function.c: 8: filter.mask0 = 0X00F;
  1784  002CBC  0E0F               	movlw	15
  1785  002CBE  0101               	movlb	1	; () banked
  1786  002CC0  6FAC               	movwf	_filter& (0+255),b
  1787  002CC2  0E00               	movlw	0
  1788  002CC4  6FAD               	movwf	(_filter+1)& (0+255),b
  1789  002CC6  0E00               	movlw	0
  1790  002CC8  6FAE               	movwf	(_filter+2)& (0+255),b
  1791  002CCA  0E00               	movlw	0
  1792  002CCC  6FAF               	movwf	(_filter+3)& (0+255),b
  1793                           
  1794                           ; BSR set to: 1
  1795                           ;function.c: 9: filter.filter0 = id;
  1796  002CCE  0100               	movlb	0	; () banked
  1797  002CD0  51C6               	movf	_id& (0+255),w,b
  1798  002CD2  0101               	movlb	1	; () banked
  1799  002CD4  6FB4               	movwf	(_filter+8)& (0+255),b
  1800  002CD6  6BB5               	clrf	(_filter+9)& (0+255),b
  1801  002CD8  6BB6               	clrf	(_filter+10)& (0+255),b
  1802  002CDA  6BB7               	clrf	(_filter+11)& (0+255),b
  1803                           
  1804                           ; BSR set to: 1
  1805                           ;function.c: 10: Can_Init( &canSpeed125k , &filter);
  1806  002CDC  0E39               	movlw	low _canSpeed125k
  1807  002CDE  0100               	movlb	0	; () banked
  1808  002CE0  6F9C               	movwf	Can_Init@speedCfg& (0+255),b
  1809  002CE2  0E10               	movlw	high _canSpeed125k
  1810  002CE4  0100               	movlb	0	; () banked
  1811  002CE6  6F9D               	movwf	(Can_Init@speedCfg+1)& (0+255),b
  1812  002CE8  0EAC               	movlw	low _filter
  1813  002CEA  0100               	movlb	0	; () banked
  1814  002CEC  6F9E               	movwf	Can_Init@filterCfg& (0+255),b
  1815  002CEE  0E01               	movlw	high _filter
  1816  002CF0  0100               	movlb	0	; () banked
  1817  002CF2  6F9F               	movwf	(Can_Init@filterCfg+1)& (0+255),b
  1818  002CF4  EC6C  F019         	call	_Can_Init	;wreg free
  1819                           
  1820                           ;function.c: 11: readConflictInfo();
  1821  002CF8  EC27  F00B         	call	_readConflictInfo	;wreg free
  1822                           
  1823                           ;function.c: 15: T0CONbits.T08BIT = 0;
  1824  002CFC  9CD5               	bcf	4053,6,c	;volatile
  1825                           
  1826                           ;function.c: 16: T0CONbits.T0CS = 0;
  1827  002CFE  9AD5               	bcf	4053,5,c	;volatile
  1828                           
  1829                           ;function.c: 17: T0CONbits.PSA = 0;
  1830  002D00  96D5               	bcf	4053,3,c	;volatile
  1831                           
  1832                           ;function.c: 18: T0CONbits.T0PS = 0x7;
  1833  002D02  80D5               	bsf	4053,0,c	;volatile
  1834  002D04  82D5               	bsf	4053,1,c	;volatile
  1835  002D06  84D5               	bsf	4053,2,c	;volatile
  1836                           
  1837                           ;function.c: 19: TMR0IF = 0;
  1838  002D08  94F2               	bcf	intcon,2,c	;volatile
  1839                           
  1840                           ;function.c: 20: TMR0IE = 1;
  1841  002D0A  8AF2               	bsf	intcon,5,c	;volatile
  1842                           
  1843                           ;function.c: 21: TMR0 = 0xe17b;
  1844  002D0C  0EE1               	movlw	225
  1845  002D0E  6ED7               	movwf	4055,c	;volatile
  1846  002D10  0E7B               	movlw	123
  1847  002D12  6ED6               	movwf	4054,c	;volatile
  1848                           
  1849                           ;function.c: 22: T0CONbits.TMR0ON = 1;
  1850  002D14  8ED5               	bsf	4053,7,c	;volatile
  1851  002D16  0012               	return		;funcret
  1852  002D18                     __end_of_init:
  1853                           	opt stack 0
  1854                           tblptru	equ	0xFF8
  1855                           tblptrh	equ	0xFF7
  1856                           tblptrl	equ	0xFF6
  1857                           tablat	equ	0xFF5
  1858                           prodh	equ	0xFF4
  1859                           prodl	equ	0xFF3
  1860                           intcon	equ	0xFF2
  1861                           postinc0	equ	0xFEE
  1862                           wreg	equ	0xFE8
  1863                           postdec1	equ	0xFE5
  1864                           fsr1l	equ	0xFE1
  1865                           indf2	equ	0xFDF
  1866                           postinc2	equ	0xFDE
  1867                           fsr2h	equ	0xFDA
  1868                           fsr2l	equ	0xFD9
  1869                           status	equ	0xFD8
  1870                           
  1871 ;; *************** function _readID *****************
  1872 ;; Defined at:
  1873 ;;		line 25 in file "function.c"
  1874 ;; Parameters:    Size  Location     Type
  1875 ;;		None
  1876 ;; Auto vars:     Size  Location     Type
  1877 ;;  retVal          1    5[BANK0 ] unsigned char 
  1878 ;; Return value:  Size  Location     Type
  1879 ;;                  1    wreg      unsigned char 
  1880 ;; Registers used:
  1881 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1882 ;; Tracked objects:
  1883 ;;		On entry : 0/0
  1884 ;;		On exit  : 0/0
  1885 ;;		Unchanged: 0/0
  1886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1888 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1890 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1891 ;;Total ram usage:        1 bytes
  1892 ;; Hardware stack levels used:    1
  1893 ;; Hardware stack levels required when called:    9
  1894 ;; This function calls:
  1895 ;;		_Can_GetMessage
  1896 ;;		_Can_PutMessage
  1897 ;;		_resetData
  1898 ;; This function is called by:
  1899 ;;		_init
  1900 ;; This function uses a non-reentrant model
  1901 ;;
  1902                           
  1903                           	psect	text4
  1904  0030C8                     __ptext4:
  1905                           	opt stack 0
  1906  0030C8                     _readID:
  1907                           	opt stack 20
  1908                           
  1909                           ;function.c: 26: uint8_t retVal = 0;
  1910                           
  1911                           ;incstack = 0
  1912  0030C8  0E00               	movlw	0
  1913  0030CA  0100               	movlb	0	; () banked
  1914  0030CC  6F65               	movwf	readID@retVal& (0+255),b
  1915                           
  1916                           ;function.c: 29: messageTx.identifier = ((10<<7) | 0xF) ;
  1917  0030CE  0E0F               	movlw	15
  1918  0030D0  0100               	movlb	0	; () banked
  1919  0030D2  6FC8               	movwf	(_messageTx+1)& (0+255),b
  1920  0030D4  0E05               	movlw	5
  1921  0030D6  6FC9               	movwf	(_messageTx+2)& (0+255),b
  1922  0030D8  0E00               	movlw	0
  1923  0030DA  6FCA               	movwf	(_messageTx+3)& (0+255),b
  1924  0030DC  0E00               	movlw	0
  1925  0030DE  6FCB               	movwf	(_messageTx+4)& (0+255),b
  1926                           
  1927                           ; BSR set to: 0
  1928                           ;function.c: 30: resetData();
  1929  0030E0  EC4D  F019         	call	_resetData	;wreg free
  1930                           
  1931                           ;function.c: 31: messageTx.rtr = 1;
  1932  0030E4  0E01               	movlw	1
  1933  0030E6  0100               	movlb	0	; () banked
  1934  0030E8  6FD5               	movwf	(_messageTx+14)& (0+255),b
  1935                           
  1936                           ; BSR set to: 0
  1937                           ;function.c: 34: Can_PutMessage(&messageTx);
  1938  0030EA  0EC7               	movlw	low _messageTx
  1939  0030EC  0100               	movlb	0	; () banked
  1940  0030EE  6F60               	movwf	Can_PutMessage@msgPtr& (0+255),b
  1941  0030F0  0E00               	movlw	high _messageTx
  1942  0030F2  0100               	movlb	0	; () banked
  1943  0030F4  6F61               	movwf	(Can_PutMessage@msgPtr+1)& (0+255),b
  1944  0030F6  EC61  F00E         	call	_Can_PutMessage	;wreg free
  1945  0030FA                     l3086:
  1946  0030FA  0ED8               	movlw	low _message
  1947  0030FC  0100               	movlb	0	; () banked
  1948  0030FE  6F60               	movwf	Can_GetMessage@msgPtr& (0+255),b
  1949  003100  0E00               	movlw	high _message
  1950  003102  0100               	movlb	0	; () banked
  1951  003104  6F61               	movwf	(Can_GetMessage@msgPtr+1)& (0+255),b
  1952  003106  ECB2  F010         	call	_Can_GetMessage	;wreg free
  1953  00310A  0900               	iorlw	0
  1954  00310C  A4D8               	btfss	status,2,c
  1955  00310E  D7F5               	goto	l3086
  1956                           
  1957                           ;function.c: 39: retVal = message.dta[0];
  1958  003110  C0DE  F065         	movff	_message+6,readID@retVal
  1959                           
  1960                           ;function.c: 41: resetData();
  1961  003114  EC4D  F019         	call	_resetData	;wreg free
  1962                           
  1963                           ;function.c: 43: return retVal;
  1964  003118  0100               	movlb	0	; () banked
  1965  00311A  5165               	movf	readID@retVal& (0+255),w,b
  1966  00311C  0012               	return	
  1967  00311E                     __end_of_readID:
  1968                           	opt stack 0
  1969                           tblptru	equ	0xFF8
  1970                           tblptrh	equ	0xFF7
  1971                           tblptrl	equ	0xFF6
  1972                           tablat	equ	0xFF5
  1973                           prodh	equ	0xFF4
  1974                           prodl	equ	0xFF3
  1975                           intcon	equ	0xFF2
  1976                           postinc0	equ	0xFEE
  1977                           wreg	equ	0xFE8
  1978                           postdec1	equ	0xFE5
  1979                           fsr1l	equ	0xFE1
  1980                           indf2	equ	0xFDF
  1981                           postinc2	equ	0xFDE
  1982                           fsr2h	equ	0xFDA
  1983                           fsr2l	equ	0xFD9
  1984                           status	equ	0xFD8
  1985                           
  1986 ;; *************** function _readConflictInfo *****************
  1987 ;; Defined at:
  1988 ;;		line 46 in file "function.c"
  1989 ;; Parameters:    Size  Location     Type
  1990 ;;		None
  1991 ;; Auto vars:     Size  Location     Type
  1992 ;;  j               2   14[BANK0 ] int 
  1993 ;;  i               2   12[BANK0 ] int 
  1994 ;; Return value:  Size  Location     Type
  1995 ;;                  1    wreg      void 
  1996 ;; Registers used:
  1997 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1998 ;; Tracked objects:
  1999 ;;		On entry : 0/0
  2000 ;;		On exit  : 0/0
  2001 ;;		Unchanged: 0/0
  2002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2004 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2005 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2006 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2007 ;;Total ram usage:       10 bytes
  2008 ;; Hardware stack levels used:    1
  2009 ;; Hardware stack levels required when called:    9
  2010 ;; This function calls:
  2011 ;;		_Can_GetMessage
  2012 ;;		_Can_PutMessage
  2013 ;;		___wmul
  2014 ;;		_resetData
  2015 ;; This function is called by:
  2016 ;;		_init
  2017 ;; This function uses a non-reentrant model
  2018 ;;
  2019                           
  2020                           	psect	text5
  2021  00164E                     __ptext5:
  2022                           	opt stack 0
  2023  00164E                     _readConflictInfo:
  2024                           	opt stack 20
  2025                           
  2026                           ;function.c: 49: resetData();
  2027                           
  2028                           ; BSR set to: 0
  2029                           ;incstack = 0
  2030  00164E  EC4D  F019         	call	_resetData	;wreg free
  2031                           
  2032                           ;function.c: 50: messageTx.rtr = 1;
  2033  001652  0E01               	movlw	1
  2034  001654  0100               	movlb	0	; () banked
  2035  001656  6FD5               	movwf	(_messageTx+14)& (0+255),b
  2036                           
  2037                           ; BSR set to: 0
  2038                           ;function.c: 53: int i;
  2039                           ;function.c: 54: int j;
  2040                           ;function.c: 55: for (i = 0 ; i < 12 ; i++){
  2041  001658  0E00               	movlw	0
  2042  00165A  0100               	movlb	0	; () banked
  2043  00165C  6F6D               	movwf	(readConflictInfo@i+1)& (0+255),b
  2044  00165E  0E00               	movlw	0
  2045  001660  6F6C               	movwf	readConflictInfo@i& (0+255),b
  2046                           
  2047                           ; BSR set to: 0
  2048  001662  0100               	movlb	0	; () banked
  2049  001664  BF6D               	btfsc	(readConflictInfo@i+1)& (0+255),7,b
  2050  001666  D00A               	goto	l3104
  2051  001668  0100               	movlb	0	; () banked
  2052  00166A  516D               	movf	(readConflictInfo@i+1)& (0+255),w,b
  2053  00166C  E106               	bnz	u2110
  2054  00166E  0E0C               	movlw	12
  2055  001670  0100               	movlb	0	; () banked
  2056  001672  5D6C               	subwf	readConflictInfo@i& (0+255),w,b
  2057  001674  B0D8               	btfsc	status,0,c
  2058  001676  0012               	return	
  2059  001678  D001               	goto	l3104
  2060  00167A                     u2110:
  2061                           
  2062                           ; BSR set to: 0
  2063  00167A  0012               	return	
  2064  00167C                     l3104:
  2065                           
  2066                           ; BSR set to: 0
  2067                           ;function.c: 57: messageTx.identifier = ((8<<7) | (i << 4) | id);
  2068  00167C  0E00               	movlw	0
  2069  00167E  0100               	movlb	0	; () banked
  2070  001680  6F66               	movwf	??_readConflictInfo& (0+255),b
  2071  001682  0E04               	movlw	4
  2072  001684  0100               	movlb	0	; () banked
  2073  001686  6F67               	movwf	(??_readConflictInfo+1)& (0+255),b
  2074  001688  C06C  F068         	movff	readConflictInfo@i,??_readConflictInfo+2
  2075  00168C  C06D  F069         	movff	readConflictInfo@i+1,??_readConflictInfo+3
  2076  001690  0100               	movlb	0	; () banked
  2077  001692  3B68               	swapf	(??_readConflictInfo+2)& (0+255),f,b
  2078  001694  3B69               	swapf	(??_readConflictInfo+3)& (0+255),f,b
  2079  001696  0EF0               	movlw	240
  2080  001698  1769               	andwf	(??_readConflictInfo+3)& (0+255),f,b
  2081  00169A  5168               	movf	(??_readConflictInfo+2)& (0+255),w,b
  2082  00169C  0B0F               	andlw	15
  2083  00169E  1369               	iorwf	(??_readConflictInfo+3)& (0+255),f,b
  2084  0016A0  0EF0               	movlw	240
  2085  0016A2  1768               	andwf	(??_readConflictInfo+2)& (0+255),f,b
  2086  0016A4  0100               	movlb	0	; () banked
  2087  0016A6  51C6               	movf	_id& (0+255),w,b
  2088  0016A8  0100               	movlb	0	; () banked
  2089  0016AA  1368               	iorwf	(??_readConflictInfo+2)& (0+255),f,b
  2090  0016AC  0E00               	movlw	0
  2091  0016AE  1369               	iorwf	(??_readConflictInfo+3)& (0+255),f,b
  2092  0016B0  0100               	movlb	0	; () banked
  2093  0016B2  5166               	movf	??_readConflictInfo& (0+255),w,b
  2094  0016B4  0100               	movlb	0	; () banked
  2095  0016B6  1368               	iorwf	(??_readConflictInfo+2)& (0+255),f,b
  2096  0016B8  0100               	movlb	0	; () banked
  2097  0016BA  5167               	movf	(??_readConflictInfo+1)& (0+255),w,b
  2098  0016BC  0100               	movlb	0	; () banked
  2099  0016BE  1369               	iorwf	(??_readConflictInfo+3)& (0+255),f,b
  2100  0016C0  C068  F0C8         	movff	??_readConflictInfo+2,_messageTx+1
  2101  0016C4  C069  F0C9         	movff	??_readConflictInfo+3,_messageTx+2
  2102  0016C8  0100               	movlb	0	; () banked
  2103  0016CA  0E00               	movlw	0
  2104  0016CC  BFC9               	btfsc	(_messageTx+2)& (0+255),7,b
  2105  0016CE  0EFF               	movlw	-1
  2106  0016D0  6FCA               	movwf	(_messageTx+3)& (0+255),b
  2107  0016D2  6FCB               	movwf	(_messageTx+4)& (0+255),b
  2108                           
  2109                           ; BSR set to: 0
  2110                           ;function.c: 60: Can_PutMessage(&messageTx);
  2111  0016D4  0EC7               	movlw	low _messageTx
  2112  0016D6  0100               	movlb	0	; () banked
  2113  0016D8  6F60               	movwf	Can_PutMessage@msgPtr& (0+255),b
  2114  0016DA  0E00               	movlw	high _messageTx
  2115  0016DC  0100               	movlb	0	; () banked
  2116  0016DE  6F61               	movwf	(Can_PutMessage@msgPtr+1)& (0+255),b
  2117  0016E0  EC61  F00E         	call	_Can_PutMessage	;wreg free
  2118  0016E4                     l3108:
  2119  0016E4  0ED8               	movlw	low _message
  2120  0016E6  0100               	movlb	0	; () banked
  2121  0016E8  6F60               	movwf	Can_GetMessage@msgPtr& (0+255),b
  2122  0016EA  0E00               	movlw	high _message
  2123  0016EC  0100               	movlb	0	; () banked
  2124  0016EE  6F61               	movwf	(Can_GetMessage@msgPtr+1)& (0+255),b
  2125  0016F0  ECB2  F010         	call	_Can_GetMessage	;wreg free
  2126  0016F4  0900               	iorlw	0
  2127  0016F6  A4D8               	btfss	status,2,c
  2128  0016F8  D7F5               	goto	l3108
  2129                           
  2130                           ;function.c: 65: for ( j = 0 ; j < 3 ; j ++){
  2131  0016FA  0E00               	movlw	0
  2132  0016FC  0100               	movlb	0	; () banked
  2133  0016FE  6F6F               	movwf	(readConflictInfo@j+1)& (0+255),b
  2134  001700  0E00               	movlw	0
  2135  001702  6F6E               	movwf	readConflictInfo@j& (0+255),b
  2136                           
  2137                           ; BSR set to: 0
  2138  001704  0100               	movlb	0	; () banked
  2139  001706  BF6F               	btfsc	(readConflictInfo@j+1)& (0+255),7,b
  2140  001708  D00A               	goto	l3116
  2141  00170A  0100               	movlb	0	; () banked
  2142  00170C  516F               	movf	(readConflictInfo@j+1)& (0+255),w,b
  2143  00170E  E106               	bnz	u2130
  2144  001710  0E03               	movlw	3
  2145  001712  0100               	movlb	0	; () banked
  2146  001714  5D6E               	subwf	readConflictInfo@j& (0+255),w,b
  2147  001716  B0D8               	btfsc	status,0,c
  2148  001718  D117               	goto	l3122
  2149  00171A  D001               	goto	l3116
  2150  00171C                     u2130:
  2151                           
  2152                           ; BSR set to: 0
  2153  00171C  D115               	goto	l3122
  2154  00171E                     l3116:
  2155                           
  2156                           ; BSR set to: 0
  2157                           ;function.c: 66: conflicts[i][(4*j) + 0] = (message.dta[j] & 0x03);
  2158  00171E  C06C  F060         	movff	readConflictInfo@i,___wmul@multiplier
  2159  001722  C06D  F061         	movff	readConflictInfo@i+1,___wmul@multiplier+1
  2160  001726  0E00               	movlw	0
  2161  001728  0100               	movlb	0	; () banked
  2162  00172A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2163  00172C  0E0C               	movlw	12
  2164  00172E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2165  001730  EC88  F019         	call	___wmul	;wreg free
  2166  001734  0E00               	movlw	low _conflicts
  2167  001736  0100               	movlb	0	; () banked
  2168  001738  6F66               	movwf	??_readConflictInfo& (0+255),b
  2169  00173A  0E02               	movlw	high _conflicts
  2170  00173C  0100               	movlb	0	; () banked
  2171  00173E  6F67               	movwf	(??_readConflictInfo+1)& (0+255),b
  2172  001740  0100               	movlb	0	; () banked
  2173  001742  5160               	movf	?___wmul& (0+255),w,b
  2174  001744  0100               	movlb	0	; () banked
  2175  001746  2766               	addwf	??_readConflictInfo& (0+255),f,b
  2176  001748  0100               	movlb	0	; () banked
  2177  00174A  5161               	movf	(?___wmul+1)& (0+255),w,b
  2178  00174C  0100               	movlb	0	; () banked
  2179  00174E  2367               	addwfc	(??_readConflictInfo+1)& (0+255),f,b
  2180  001750  90D8               	bcf	status,0,c
  2181  001752  0100               	movlb	0	; () banked
  2182  001754  356E               	rlcf	readConflictInfo@j& (0+255),w,b
  2183  001756  6ED9               	movwf	fsr2l,c
  2184  001758  0100               	movlb	0	; () banked
  2185  00175A  356F               	rlcf	(readConflictInfo@j+1)& (0+255),w,b
  2186  00175C  6EDA               	movwf	fsr2h,c
  2187  00175E  90D8               	bcf	status,0,c
  2188  001760  36D9               	rlcf	fsr2l,f,c
  2189  001762  36DA               	rlcf	fsr2h,f,c
  2190  001764  0100               	movlb	0	; () banked
  2191  001766  5166               	movf	??_readConflictInfo& (0+255),w,b
  2192  001768  26D9               	addwf	fsr2l,f,c
  2193  00176A  0100               	movlb	0	; () banked
  2194  00176C  5167               	movf	(??_readConflictInfo+1)& (0+255),w,b
  2195  00176E  22DA               	addwfc	fsr2h,f,c
  2196  001770  0EDE               	movlw	low (_message+6)
  2197  001772  0100               	movlb	0	; () banked
  2198  001774  256E               	addwf	readConflictInfo@j& (0+255),w,b
  2199  001776  6EE1               	movwf	fsr1l,c
  2200  001778  0E00               	movlw	high (_message+6)
  2201  00177A  0100               	movlb	0	; () banked
  2202  00177C  216F               	addwfc	(readConflictInfo@j+1)& (0+255),w,b
  2203  00177E  6EE2               	movwf	fsr1h,c
  2204  001780  50E7               	movf	indf1,w,c
  2205  001782  0B03               	andlw	3
  2206  001784  6EDF               	movwf	indf2,c
  2207                           
  2208                           ;function.c: 67: conflicts[i][(4*j) + 1] = (message.dta[j] & 0x0c) >> 2;
  2209  001786  C06C  F060         	movff	readConflictInfo@i,___wmul@multiplier
  2210  00178A  C06D  F061         	movff	readConflictInfo@i+1,___wmul@multiplier+1
  2211  00178E  0E00               	movlw	0
  2212  001790  0100               	movlb	0	; () banked
  2213  001792  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2214  001794  0E0C               	movlw	12
  2215  001796  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2216  001798  EC88  F019         	call	___wmul	;wreg free
  2217  00179C  C06E  F066         	movff	readConflictInfo@j,??_readConflictInfo
  2218  0017A0  C06F  F067         	movff	readConflictInfo@j+1,??_readConflictInfo+1
  2219  0017A4  0100               	movlb	0	; () banked
  2220  0017A6  90D8               	bcf	status,0,c
  2221  0017A8  3766               	rlcf	??_readConflictInfo& (0+255),f,b
  2222  0017AA  3767               	rlcf	(??_readConflictInfo+1)& (0+255),f,b
  2223  0017AC  0100               	movlb	0	; () banked
  2224  0017AE  90D8               	bcf	status,0,c
  2225  0017B0  3766               	rlcf	??_readConflictInfo& (0+255),f,b
  2226  0017B2  3767               	rlcf	(??_readConflictInfo+1)& (0+255),f,b
  2227  0017B4  0E01               	movlw	1
  2228  0017B6  0100               	movlb	0	; () banked
  2229  0017B8  2766               	addwf	??_readConflictInfo& (0+255),f,b
  2230  0017BA  0E00               	movlw	0
  2231  0017BC  2367               	addwfc	(??_readConflictInfo+1)& (0+255),f,b
  2232  0017BE  0E00               	movlw	low _conflicts
  2233  0017C0  0100               	movlb	0	; () banked
  2234  0017C2  6F68               	movwf	(??_readConflictInfo+2)& (0+255),b
  2235  0017C4  0E02               	movlw	high _conflicts
  2236  0017C6  0100               	movlb	0	; () banked
  2237  0017C8  6F69               	movwf	(??_readConflictInfo+3)& (0+255),b
  2238  0017CA  0100               	movlb	0	; () banked
  2239  0017CC  5166               	movf	??_readConflictInfo& (0+255),w,b
  2240  0017CE  0100               	movlb	0	; () banked
  2241  0017D0  2768               	addwf	(??_readConflictInfo+2)& (0+255),f,b
  2242  0017D2  0100               	movlb	0	; () banked
  2243  0017D4  5167               	movf	(??_readConflictInfo+1)& (0+255),w,b
  2244  0017D6  0100               	movlb	0	; () banked
  2245  0017D8  2369               	addwfc	(??_readConflictInfo+3)& (0+255),f,b
  2246  0017DA  0100               	movlb	0	; () banked
  2247  0017DC  5160               	movf	?___wmul& (0+255),w,b
  2248  0017DE  0100               	movlb	0	; () banked
  2249  0017E0  2568               	addwf	(??_readConflictInfo+2)& (0+255),w,b
  2250  0017E2  6ED9               	movwf	fsr2l,c
  2251  0017E4  0100               	movlb	0	; () banked
  2252  0017E6  5161               	movf	(?___wmul+1)& (0+255),w,b
  2253  0017E8  0100               	movlb	0	; () banked
  2254  0017EA  2169               	addwfc	(??_readConflictInfo+3)& (0+255),w,b
  2255  0017EC  6EDA               	movwf	fsr2h,c
  2256  0017EE  0EDE               	movlw	low (_message+6)
  2257  0017F0  0100               	movlb	0	; () banked
  2258  0017F2  256E               	addwf	readConflictInfo@j& (0+255),w,b
  2259  0017F4  6EE1               	movwf	fsr1l,c
  2260  0017F6  0E00               	movlw	high (_message+6)
  2261  0017F8  0100               	movlb	0	; () banked
  2262  0017FA  216F               	addwfc	(readConflictInfo@j+1)& (0+255),w,b
  2263  0017FC  6EE2               	movwf	fsr1h,c
  2264  0017FE  50E7               	movf	indf1,w,c
  2265  001800  0100               	movlb	0	; () banked
  2266  001802  6F6A               	movwf	(??_readConflictInfo+4)& (0+255),b
  2267  001804  0100               	movlb	0	; () banked
  2268  001806  90D8               	bcf	status,0,c
  2269  001808  336A               	rrcf	(??_readConflictInfo+4)& (0+255),f,b
  2270  00180A  0100               	movlb	0	; () banked
  2271  00180C  90D8               	bcf	status,0,c
  2272  00180E  316A               	rrcf	(??_readConflictInfo+4)& (0+255),w,b
  2273  001810  0B03               	andlw	3
  2274  001812  6EDF               	movwf	indf2,c
  2275                           
  2276                           ;function.c: 68: conflicts[i][(4*j) + 2] = (message.dta[j] & 0x30) >> 4;
  2277  001814  C06C  F060         	movff	readConflictInfo@i,___wmul@multiplier
  2278  001818  C06D  F061         	movff	readConflictInfo@i+1,___wmul@multiplier+1
  2279  00181C  0E00               	movlw	0
  2280  00181E  0100               	movlb	0	; () banked
  2281  001820  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2282  001822  0E0C               	movlw	12
  2283  001824  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2284  001826  EC88  F019         	call	___wmul	;wreg free
  2285  00182A  C06E  F066         	movff	readConflictInfo@j,??_readConflictInfo
  2286  00182E  C06F  F067         	movff	readConflictInfo@j+1,??_readConflictInfo+1
  2287  001832  0100               	movlb	0	; () banked
  2288  001834  90D8               	bcf	status,0,c
  2289  001836  3766               	rlcf	??_readConflictInfo& (0+255),f,b
  2290  001838  3767               	rlcf	(??_readConflictInfo+1)& (0+255),f,b
  2291  00183A  0100               	movlb	0	; () banked
  2292  00183C  90D8               	bcf	status,0,c
  2293  00183E  3766               	rlcf	??_readConflictInfo& (0+255),f,b
  2294  001840  3767               	rlcf	(??_readConflictInfo+1)& (0+255),f,b
  2295  001842  0E02               	movlw	2
  2296  001844  0100               	movlb	0	; () banked
  2297  001846  2766               	addwf	??_readConflictInfo& (0+255),f,b
  2298  001848  0E00               	movlw	0
  2299  00184A  2367               	addwfc	(??_readConflictInfo+1)& (0+255),f,b
  2300  00184C  0E00               	movlw	low _conflicts
  2301  00184E  0100               	movlb	0	; () banked
  2302  001850  6F68               	movwf	(??_readConflictInfo+2)& (0+255),b
  2303  001852  0E02               	movlw	high _conflicts
  2304  001854  0100               	movlb	0	; () banked
  2305  001856  6F69               	movwf	(??_readConflictInfo+3)& (0+255),b
  2306  001858  0100               	movlb	0	; () banked
  2307  00185A  5166               	movf	??_readConflictInfo& (0+255),w,b
  2308  00185C  0100               	movlb	0	; () banked
  2309  00185E  2768               	addwf	(??_readConflictInfo+2)& (0+255),f,b
  2310  001860  0100               	movlb	0	; () banked
  2311  001862  5167               	movf	(??_readConflictInfo+1)& (0+255),w,b
  2312  001864  0100               	movlb	0	; () banked
  2313  001866  2369               	addwfc	(??_readConflictInfo+3)& (0+255),f,b
  2314  001868  0100               	movlb	0	; () banked
  2315  00186A  5160               	movf	?___wmul& (0+255),w,b
  2316  00186C  0100               	movlb	0	; () banked
  2317  00186E  2568               	addwf	(??_readConflictInfo+2)& (0+255),w,b
  2318  001870  6ED9               	movwf	fsr2l,c
  2319  001872  0100               	movlb	0	; () banked
  2320  001874  5161               	movf	(?___wmul+1)& (0+255),w,b
  2321  001876  0100               	movlb	0	; () banked
  2322  001878  2169               	addwfc	(??_readConflictInfo+3)& (0+255),w,b
  2323  00187A  6EDA               	movwf	fsr2h,c
  2324  00187C  0EDE               	movlw	low (_message+6)
  2325  00187E  0100               	movlb	0	; () banked
  2326  001880  256E               	addwf	readConflictInfo@j& (0+255),w,b
  2327  001882  6EE1               	movwf	fsr1l,c
  2328  001884  0E00               	movlw	high (_message+6)
  2329  001886  0100               	movlb	0	; () banked
  2330  001888  216F               	addwfc	(readConflictInfo@j+1)& (0+255),w,b
  2331  00188A  6EE2               	movwf	fsr1h,c
  2332  00188C  50E7               	movf	indf1,w,c
  2333  00188E  0100               	movlb	0	; () banked
  2334  001890  6F6A               	movwf	(??_readConflictInfo+4)& (0+255),b
  2335  001892  0100               	movlb	0	; () banked
  2336  001894  396A               	swapf	(??_readConflictInfo+4)& (0+255),w,b
  2337  001896  0B0F               	andlw	15
  2338  001898  0B03               	andlw	3
  2339  00189A  6EDF               	movwf	indf2,c
  2340                           
  2341                           ;function.c: 69: conflicts[i][(4*j) + 3] = (message.dta[j] & 0xc0) >> 6;
  2342  00189C  C06C  F060         	movff	readConflictInfo@i,___wmul@multiplier
  2343  0018A0  C06D  F061         	movff	readConflictInfo@i+1,___wmul@multiplier+1
  2344  0018A4  0E00               	movlw	0
  2345  0018A6  0100               	movlb	0	; () banked
  2346  0018A8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2347  0018AA  0E0C               	movlw	12
  2348  0018AC  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2349  0018AE  EC88  F019         	call	___wmul	;wreg free
  2350  0018B2  C06E  F066         	movff	readConflictInfo@j,??_readConflictInfo
  2351  0018B6  C06F  F067         	movff	readConflictInfo@j+1,??_readConflictInfo+1
  2352  0018BA  0100               	movlb	0	; () banked
  2353  0018BC  90D8               	bcf	status,0,c
  2354  0018BE  3766               	rlcf	??_readConflictInfo& (0+255),f,b
  2355  0018C0  3767               	rlcf	(??_readConflictInfo+1)& (0+255),f,b
  2356  0018C2  0100               	movlb	0	; () banked
  2357  0018C4  90D8               	bcf	status,0,c
  2358  0018C6  3766               	rlcf	??_readConflictInfo& (0+255),f,b
  2359  0018C8  3767               	rlcf	(??_readConflictInfo+1)& (0+255),f,b
  2360  0018CA  0E03               	movlw	3
  2361  0018CC  0100               	movlb	0	; () banked
  2362  0018CE  2766               	addwf	??_readConflictInfo& (0+255),f,b
  2363  0018D0  0E00               	movlw	0
  2364  0018D2  2367               	addwfc	(??_readConflictInfo+1)& (0+255),f,b
  2365  0018D4  0E00               	movlw	low _conflicts
  2366  0018D6  0100               	movlb	0	; () banked
  2367  0018D8  6F68               	movwf	(??_readConflictInfo+2)& (0+255),b
  2368  0018DA  0E02               	movlw	high _conflicts
  2369  0018DC  0100               	movlb	0	; () banked
  2370  0018DE  6F69               	movwf	(??_readConflictInfo+3)& (0+255),b
  2371  0018E0  0100               	movlb	0	; () banked
  2372  0018E2  5166               	movf	??_readConflictInfo& (0+255),w,b
  2373  0018E4  0100               	movlb	0	; () banked
  2374  0018E6  2768               	addwf	(??_readConflictInfo+2)& (0+255),f,b
  2375  0018E8  0100               	movlb	0	; () banked
  2376  0018EA  5167               	movf	(??_readConflictInfo+1)& (0+255),w,b
  2377  0018EC  0100               	movlb	0	; () banked
  2378  0018EE  2369               	addwfc	(??_readConflictInfo+3)& (0+255),f,b
  2379  0018F0  0100               	movlb	0	; () banked
  2380  0018F2  5160               	movf	?___wmul& (0+255),w,b
  2381  0018F4  0100               	movlb	0	; () banked
  2382  0018F6  2568               	addwf	(??_readConflictInfo+2)& (0+255),w,b
  2383  0018F8  6ED9               	movwf	fsr2l,c
  2384  0018FA  0100               	movlb	0	; () banked
  2385  0018FC  5161               	movf	(?___wmul+1)& (0+255),w,b
  2386  0018FE  0100               	movlb	0	; () banked
  2387  001900  2169               	addwfc	(??_readConflictInfo+3)& (0+255),w,b
  2388  001902  6EDA               	movwf	fsr2h,c
  2389  001904  0EDE               	movlw	low (_message+6)
  2390  001906  0100               	movlb	0	; () banked
  2391  001908  256E               	addwf	readConflictInfo@j& (0+255),w,b
  2392  00190A  6EE1               	movwf	fsr1l,c
  2393  00190C  0E00               	movlw	high (_message+6)
  2394  00190E  0100               	movlb	0	; () banked
  2395  001910  216F               	addwfc	(readConflictInfo@j+1)& (0+255),w,b
  2396  001912  6EE2               	movwf	fsr1h,c
  2397  001914  50E7               	movf	indf1,w,c
  2398  001916  0100               	movlb	0	; () banked
  2399  001918  6F6A               	movwf	(??_readConflictInfo+4)& (0+255),b
  2400  00191A  0E06               	movlw	6
  2401  00191C  0100               	movlb	0	; () banked
  2402  00191E  6F6B               	movwf	(??_readConflictInfo+5)& (0+255),b
  2403  001920                     u2145:
  2404  001920  0100               	movlb	0	; () banked
  2405  001922  90D8               	bcf	status,0,c
  2406  001924  336A               	rrcf	(??_readConflictInfo+4)& (0+255),f,b
  2407  001926  0100               	movlb	0	; () banked
  2408  001928  2F6B               	decfsz	(??_readConflictInfo+5)& (0+255),f,b
  2409  00192A  D7FA               	goto	u2145
  2410  00192C  0100               	movlb	0	; () banked
  2411  00192E  516A               	movf	(??_readConflictInfo+4)& (0+255),w,b
  2412  001930  0B03               	andlw	3
  2413  001932  6EDF               	movwf	indf2,c
  2414                           
  2415                           ; BSR set to: 0
  2416  001934  0100               	movlb	0	; () banked
  2417  001936  4B6E               	infsnz	readConflictInfo@j& (0+255),f,b
  2418  001938  2B6F               	incf	(readConflictInfo@j+1)& (0+255),f,b
  2419                           
  2420                           ; BSR set to: 0
  2421  00193A  0100               	movlb	0	; () banked
  2422  00193C  BF6F               	btfsc	(readConflictInfo@j+1)& (0+255),7,b
  2423  00193E  D6EF               	goto	l3116
  2424  001940  0100               	movlb	0	; () banked
  2425  001942  516F               	movf	(readConflictInfo@j+1)& (0+255),w,b
  2426  001944  E101               	bnz	l3122
  2427  001946  D6E4               	goto	L1
  2428  001948                     l3122:
  2429                           
  2430                           ; BSR set to: 0
  2431                           ;function.c: 70: }
  2432                           ;function.c: 72: resetData();
  2433  001948  EC4D  F019         	call	_resetData	;wreg free
  2434  00194C  0100               	movlb	0	; () banked
  2435  00194E  4B6C               	infsnz	readConflictInfo@i& (0+255),f,b
  2436  001950  2B6D               	incf	(readConflictInfo@i+1)& (0+255),f,b
  2437                           
  2438                           ; BSR set to: 0
  2439  001952  0100               	movlb	0	; () banked
  2440  001954  BF6D               	btfsc	(readConflictInfo@i+1)& (0+255),7,b
  2441  001956  D692               	goto	l3104
  2442  001958  0100               	movlb	0	; () banked
  2443  00195A  516D               	movf	(readConflictInfo@i+1)& (0+255),w,b
  2444  00195C  E101               	bnz	l578
  2445  00195E  D687               	goto	L2
  2446  001960                     l578:
  2447                           
  2448                           ; BSR set to: 0
  2449  001960  0012               	return		;funcret
  2450  001962                     __end_of_readConflictInfo:
  2451                           	opt stack 0
  2452                           tblptru	equ	0xFF8
  2453                           tblptrh	equ	0xFF7
  2454                           tblptrl	equ	0xFF6
  2455                           tablat	equ	0xFF5
  2456                           prodh	equ	0xFF4
  2457                           prodl	equ	0xFF3
  2458                           intcon	equ	0xFF2
  2459                           postinc0	equ	0xFEE
  2460                           wreg	equ	0xFE8
  2461                           indf1	equ	0xFE7
  2462                           postdec1	equ	0xFE5
  2463                           fsr1h	equ	0xFE2
  2464                           fsr1l	equ	0xFE1
  2465                           indf2	equ	0xFDF
  2466                           postinc2	equ	0xFDE
  2467                           fsr2h	equ	0xFDA
  2468                           fsr2l	equ	0xFD9
  2469                           status	equ	0xFD8
  2470                           
  2471 ;; *************** function _resetData *****************
  2472 ;; Defined at:
  2473 ;;		line 139 in file "function.c"
  2474 ;; Parameters:    Size  Location     Type
  2475 ;;		None
  2476 ;; Auto vars:     Size  Location     Type
  2477 ;;  i               2    0[BANK0 ] int 
  2478 ;; Return value:  Size  Location     Type
  2479 ;;                  1    wreg      void 
  2480 ;; Registers used:
  2481 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2482 ;; Tracked objects:
  2483 ;;		On entry : 0/0
  2484 ;;		On exit  : 0/0
  2485 ;;		Unchanged: 0/0
  2486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2488 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2490 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2491 ;;Total ram usage:        2 bytes
  2492 ;; Hardware stack levels used:    1
  2493 ;; Hardware stack levels required when called:    8
  2494 ;; This function calls:
  2495 ;;		Nothing
  2496 ;; This function is called by:
  2497 ;;		_readID
  2498 ;;		_readConflictInfo
  2499 ;; This function uses a non-reentrant model
  2500 ;;
  2501                           
  2502                           	psect	text6
  2503  00329A                     __ptext6:
  2504                           	opt stack 0
  2505  00329A                     _resetData:
  2506                           	opt stack 20
  2507                           
  2508                           ;function.c: 140: int i;
  2509                           ;function.c: 141: for (i = 0 ; i < 4 ; i++){
  2510                           
  2511                           ; BSR set to: 0
  2512                           ;incstack = 0
  2513  00329A  0E00               	movlw	0
  2514  00329C  0100               	movlb	0	; () banked
  2515  00329E  6F61               	movwf	(resetData@i+1)& (0+255),b
  2516  0032A0  0E00               	movlw	0
  2517  0032A2  6F60               	movwf	resetData@i& (0+255),b
  2518  0032A4                     l2900:
  2519                           
  2520                           ; BSR set to: 0
  2521  0032A4  0100               	movlb	0	; () banked
  2522  0032A6  BF61               	btfsc	(resetData@i+1)& (0+255),7,b
  2523  0032A8  D008               	goto	l2904
  2524  0032AA  0100               	movlb	0	; () banked
  2525  0032AC  5161               	movf	(resetData@i+1)& (0+255),w,b
  2526  0032AE  E113               	bnz	l598
  2527  0032B0  0E04               	movlw	4
  2528  0032B2  0100               	movlb	0	; () banked
  2529  0032B4  5D60               	subwf	resetData@i& (0+255),w,b
  2530  0032B6  B0D8               	btfsc	status,0,c
  2531  0032B8  0012               	return	
  2532  0032BA                     l2904:
  2533                           
  2534                           ; BSR set to: 0
  2535                           ;function.c: 142: message.dta[i] = 0;
  2536  0032BA  0EDE               	movlw	low (_message+6)
  2537  0032BC  0100               	movlb	0	; () banked
  2538  0032BE  2560               	addwf	resetData@i& (0+255),w,b
  2539  0032C0  6ED9               	movwf	fsr2l,c
  2540  0032C2  0E00               	movlw	high (_message+6)
  2541  0032C4  0100               	movlb	0	; () banked
  2542  0032C6  2161               	addwfc	(resetData@i+1)& (0+255),w,b
  2543  0032C8  6EDA               	movwf	fsr2h,c
  2544  0032CA  0E00               	movlw	0
  2545  0032CC  6EDF               	movwf	indf2,c
  2546                           
  2547                           ; BSR set to: 0
  2548  0032CE  0100               	movlb	0	; () banked
  2549  0032D0  4B60               	infsnz	resetData@i& (0+255),f,b
  2550  0032D2  2B61               	incf	(resetData@i+1)& (0+255),f,b
  2551  0032D4  D7E7               	goto	l2900
  2552  0032D6                     l598:
  2553                           
  2554                           ; BSR set to: 0
  2555  0032D6  0012               	return		;funcret
  2556  0032D8                     __end_of_resetData:
  2557                           	opt stack 0
  2558                           tblptru	equ	0xFF8
  2559                           tblptrh	equ	0xFF7
  2560                           tblptrl	equ	0xFF6
  2561                           tablat	equ	0xFF5
  2562                           prodh	equ	0xFF4
  2563                           prodl	equ	0xFF3
  2564                           intcon	equ	0xFF2
  2565                           postinc0	equ	0xFEE
  2566                           wreg	equ	0xFE8
  2567                           indf1	equ	0xFE7
  2568                           postdec1	equ	0xFE5
  2569                           fsr1h	equ	0xFE2
  2570                           fsr1l	equ	0xFE1
  2571                           indf2	equ	0xFDF
  2572                           postinc2	equ	0xFDE
  2573                           fsr2h	equ	0xFDA
  2574                           fsr2l	equ	0xFD9
  2575                           status	equ	0xFD8
  2576                           
  2577 ;; *************** function ___wmul *****************
  2578 ;; Defined at:
  2579 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  2580 ;; Parameters:    Size  Location     Type
  2581 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2582 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2583 ;; Auto vars:     Size  Location     Type
  2584 ;;  product         2    4[BANK0 ] unsigned int 
  2585 ;; Return value:  Size  Location     Type
  2586 ;;                  2    0[BANK0 ] unsigned int 
  2587 ;; Registers used:
  2588 ;;		wreg, status,2, status,0, prodl, prodh
  2589 ;; Tracked objects:
  2590 ;;		On entry : 0/0
  2591 ;;		On exit  : 0/0
  2592 ;;		Unchanged: 0/0
  2593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2594 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2595 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2597 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2598 ;;Total ram usage:        6 bytes
  2599 ;; Hardware stack levels used:    1
  2600 ;; Hardware stack levels required when called:    8
  2601 ;; This function calls:
  2602 ;;		Nothing
  2603 ;; This function is called by:
  2604 ;;		_readConflictInfo
  2605 ;; This function uses a non-reentrant model
  2606 ;;
  2607                           
  2608                           	psect	text7
  2609  003310                     __ptext7:
  2610                           	opt stack 0
  2611  003310                     ___wmul:
  2612                           	opt stack 20
  2613                           
  2614                           ; BSR set to: 0
  2615                           ;incstack = 0
  2616  003310  0100               	movlb	0	; () banked
  2617  003312  5160               	movf	___wmul@multiplier& (0+255),w,b
  2618  003314  0100               	movlb	0	; () banked
  2619  003316  0362               	mulwf	___wmul@multiplicand& (0+255),b
  2620  003318  CFF3 F064          	movff	prodl,___wmul@product
  2621  00331C  CFF4 F065          	movff	prodh,___wmul@product+1
  2622  003320  0100               	movlb	0	; () banked
  2623  003322  5160               	movf	___wmul@multiplier& (0+255),w,b
  2624  003324  0100               	movlb	0	; () banked
  2625  003326  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  2626  003328  50F3               	movf	prodl,w,c
  2627  00332A  0100               	movlb	0	; () banked
  2628  00332C  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  2629  00332E  0100               	movlb	0	; () banked
  2630  003330  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  2631  003332  0100               	movlb	0	; () banked
  2632  003334  0362               	mulwf	___wmul@multiplicand& (0+255),b
  2633  003336  50F3               	movf	prodl,w,c
  2634  003338  0100               	movlb	0	; () banked
  2635  00333A  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  2636                           
  2637                           ; BSR set to: 0
  2638  00333C  C064  F060         	movff	___wmul@product,?___wmul
  2639  003340  C065  F061         	movff	___wmul@product+1,?___wmul+1
  2640  003344  0012               	return	
  2641  003346                     __end_of___wmul:
  2642                           	opt stack 0
  2643                           tblptru	equ	0xFF8
  2644                           tblptrh	equ	0xFF7
  2645                           tblptrl	equ	0xFF6
  2646                           tablat	equ	0xFF5
  2647                           prodh	equ	0xFF4
  2648                           prodl	equ	0xFF3
  2649                           intcon	equ	0xFF2
  2650                           postinc0	equ	0xFEE
  2651                           wreg	equ	0xFE8
  2652                           indf1	equ	0xFE7
  2653                           postdec1	equ	0xFE5
  2654                           fsr1h	equ	0xFE2
  2655                           fsr1l	equ	0xFE1
  2656                           indf2	equ	0xFDF
  2657                           postinc2	equ	0xFDE
  2658                           fsr2h	equ	0xFDA
  2659                           fsr2l	equ	0xFD9
  2660                           status	equ	0xFD8
  2661                           
  2662 ;; *************** function _Can_PutMessage *****************
  2663 ;; Defined at:
  2664 ;;		line 200 in file "can.c"
  2665 ;; Parameters:    Size  Location     Type
  2666 ;;  msgPtr          2    0[BANK0 ] PTR struct CANMESSAGE
  2667 ;;		 -> messageTx(17), 
  2668 ;; Auto vars:     Size  Location     Type
  2669 ;;  i               1    4[BANK0 ] unsigned char 
  2670 ;; Return value:  Size  Location     Type
  2671 ;;                  1    wreg      unsigned char 
  2672 ;; Registers used:
  2673 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2674 ;; Tracked objects:
  2675 ;;		On entry : 0/0
  2676 ;;		On exit  : 0/0
  2677 ;;		Unchanged: 0/0
  2678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2679 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2680 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2681 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2682 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2683 ;;Total ram usage:        5 bytes
  2684 ;; Hardware stack levels used:    1
  2685 ;; Hardware stack levels required when called:    8
  2686 ;; This function calls:
  2687 ;;		Nothing
  2688 ;; This function is called by:
  2689 ;;		_readID
  2690 ;;		_readConflictInfo
  2691 ;; This function uses a non-reentrant model
  2692 ;;
  2693                           
  2694                           	psect	text8
  2695  001CC2                     __ptext8:
  2696                           	opt stack 0
  2697  001CC2                     _Can_PutMessage:
  2698                           	opt stack 20
  2699                           
  2700                           ;can.c: 202: uint8_t i;
  2701                           ;can.c: 204: if((txBufferCount) < 4)
  2702                           
  2703                           ; BSR set to: 0
  2704                           ;incstack = 0
  2705  001CC2  0E04               	movlw	4
  2706  001CC4  0100               	movlb	0	; () banked
  2707  001CC6  61C1               	cpfslt	_txBufferCount& (0+255),b
  2708  001CC8  0012               	return	
  2709                           
  2710                           ; BSR set to: 0
  2711                           ;can.c: 205: {
  2712                           ;can.c: 206: txBuffer[txBufferPtrIn].dlc = msgPtr->dlc;
  2713  001CCA  0100               	movlb	0	; () banked
  2714  001CCC  EE20 F005          	lfsr	2,5
  2715  001CD0  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  2716  001CD2  26D9               	addwf	fsr2l,f,c
  2717  001CD4  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  2718  001CD6  22DA               	addwfc	fsr2h,f,c
  2719  001CD8  0100               	movlb	0	; () banked
  2720  001CDA  51C2               	movf	_txBufferPtrIn& (0+255),w,b
  2721  001CDC  0D11               	mullw	17
  2722  001CDE  0E05               	movlw	5
  2723  001CE0  26F3               	addwf	prodl,f,c
  2724  001CE2  0E00               	movlw	0
  2725  001CE4  22F4               	addwfc	prodh,f,c
  2726  001CE6  0E24               	movlw	low _txBuffer
  2727  001CE8  24F3               	addwf	prodl,w,c
  2728  001CEA  6EE1               	movwf	fsr1l,c
  2729  001CEC  0E01               	movlw	high _txBuffer
  2730  001CEE  20F4               	addwfc	prodh,w,c
  2731  001CF0  6EE2               	movwf	fsr1h,c
  2732  001CF2  CFDF FFE7          	movff	indf2,indf1
  2733                           
  2734                           ;can.c: 207: txBuffer[txBufferPtrIn].extended_identifier = msgPtr->extended_identifier;
  2735  001CF6  C060  FFD9         	movff	Can_PutMessage@msgPtr,fsr2l
  2736  001CFA  C061  FFDA         	movff	Can_PutMessage@msgPtr+1,fsr2h
  2737  001CFE  0100               	movlb	0	; () banked
  2738  001D00  51C2               	movf	_txBufferPtrIn& (0+255),w,b
  2739  001D02  0D11               	mullw	17
  2740  001D04  0E24               	movlw	low _txBuffer
  2741  001D06  24F3               	addwf	prodl,w,c
  2742  001D08  6EE1               	movwf	fsr1l,c
  2743  001D0A  0E01               	movlw	high _txBuffer
  2744  001D0C  20F4               	addwfc	prodh,w,c
  2745  001D0E  6EE2               	movwf	fsr1h,c
  2746  001D10  CFDF FFE7          	movff	indf2,indf1
  2747                           
  2748                           ;can.c: 208: txBuffer[txBufferPtrIn].filhit = msgPtr->filhit;
  2749  001D14  0100               	movlb	0	; () banked
  2750  001D16  EE20 F00F          	lfsr	2,15
  2751  001D1A  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  2752  001D1C  26D9               	addwf	fsr2l,f,c
  2753  001D1E  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  2754  001D20  22DA               	addwfc	fsr2h,f,c
  2755  001D22  0100               	movlb	0	; () banked
  2756  001D24  51C2               	movf	_txBufferPtrIn& (0+255),w,b
  2757  001D26  0D11               	mullw	17
  2758  001D28  0E0F               	movlw	15
  2759  001D2A  26F3               	addwf	prodl,f,c
  2760  001D2C  0E00               	movlw	0
  2761  001D2E  22F4               	addwfc	prodh,f,c
  2762  001D30  0E24               	movlw	low _txBuffer
  2763  001D32  24F3               	addwf	prodl,w,c
  2764  001D34  6EE1               	movwf	fsr1l,c
  2765  001D36  0E01               	movlw	high _txBuffer
  2766  001D38  20F4               	addwfc	prodh,w,c
  2767  001D3A  6EE2               	movwf	fsr1h,c
  2768  001D3C  CFDF FFE7          	movff	indf2,indf1
  2769                           
  2770                           ;can.c: 209: txBuffer[txBufferPtrIn].identifier = msgPtr->identifier;
  2771  001D40  0100               	movlb	0	; () banked
  2772  001D42  EE20 F001          	lfsr	2,1
  2773  001D46  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  2774  001D48  26D9               	addwf	fsr2l,f,c
  2775  001D4A  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  2776  001D4C  22DA               	addwfc	fsr2h,f,c
  2777  001D4E  0100               	movlb	0	; () banked
  2778  001D50  51C2               	movf	_txBufferPtrIn& (0+255),w,b
  2779  001D52  0D11               	mullw	17
  2780  001D54  0E01               	movlw	1
  2781  001D56  26F3               	addwf	prodl,f,c
  2782  001D58  0E00               	movlw	0
  2783  001D5A  22F4               	addwfc	prodh,f,c
  2784  001D5C  0E24               	movlw	low _txBuffer
  2785  001D5E  24F3               	addwf	prodl,w,c
  2786  001D60  6EE1               	movwf	fsr1l,c
  2787  001D62  0E01               	movlw	high _txBuffer
  2788  001D64  20F4               	addwfc	prodh,w,c
  2789  001D66  6EE2               	movwf	fsr1h,c
  2790  001D68  CFDE FFE6          	movff	postinc2,postinc1
  2791  001D6C  CFDE FFE6          	movff	postinc2,postinc1
  2792  001D70  CFDE FFE6          	movff	postinc2,postinc1
  2793  001D74  CFDE FFE6          	movff	postinc2,postinc1
  2794                           
  2795                           ;can.c: 210: txBuffer[txBufferPtrIn].rtr = msgPtr->rtr;
  2796  001D78  0100               	movlb	0	; () banked
  2797  001D7A  EE20 F00E          	lfsr	2,14
  2798  001D7E  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  2799  001D80  26D9               	addwf	fsr2l,f,c
  2800  001D82  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  2801  001D84  22DA               	addwfc	fsr2h,f,c
  2802  001D86  0100               	movlb	0	; () banked
  2803  001D88  51C2               	movf	_txBufferPtrIn& (0+255),w,b
  2804  001D8A  0D11               	mullw	17
  2805  001D8C  0E0E               	movlw	14
  2806  001D8E  26F3               	addwf	prodl,f,c
  2807  001D90  0E00               	movlw	0
  2808  001D92  22F4               	addwfc	prodh,f,c
  2809  001D94  0E24               	movlw	low _txBuffer
  2810  001D96  24F3               	addwf	prodl,w,c
  2811  001D98  6EE1               	movwf	fsr1l,c
  2812  001D9A  0E01               	movlw	high _txBuffer
  2813  001D9C  20F4               	addwfc	prodh,w,c
  2814  001D9E  6EE2               	movwf	fsr1h,c
  2815  001DA0  CFDF FFE7          	movff	indf2,indf1
  2816                           
  2817                           ;can.c: 211: txBuffer[txBufferPtrIn].txPrio = msgPtr->txPrio;
  2818  001DA4  0100               	movlb	0	; () banked
  2819  001DA6  EE20 F010          	lfsr	2,16
  2820  001DAA  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  2821  001DAC  26D9               	addwf	fsr2l,f,c
  2822  001DAE  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  2823  001DB0  22DA               	addwfc	fsr2h,f,c
  2824  001DB2  0100               	movlb	0	; () banked
  2825  001DB4  51C2               	movf	_txBufferPtrIn& (0+255),w,b
  2826  001DB6  0D11               	mullw	17
  2827  001DB8  0E10               	movlw	16
  2828  001DBA  26F3               	addwf	prodl,f,c
  2829  001DBC  0E00               	movlw	0
  2830  001DBE  22F4               	addwfc	prodh,f,c
  2831  001DC0  0E24               	movlw	low _txBuffer
  2832  001DC2  24F3               	addwf	prodl,w,c
  2833  001DC4  6EE1               	movwf	fsr1l,c
  2834  001DC6  0E01               	movlw	high _txBuffer
  2835  001DC8  20F4               	addwfc	prodh,w,c
  2836  001DCA  6EE2               	movwf	fsr1h,c
  2837  001DCC  CFDF FFE7          	movff	indf2,indf1
  2838                           
  2839                           ; BSR set to: 0
  2840                           ;can.c: 212: for(i=0;i< msgPtr->dlc;i++)
  2841  001DD0  0E00               	movlw	0
  2842  001DD2  0100               	movlb	0	; () banked
  2843  001DD4  6F64               	movwf	Can_PutMessage@i& (0+255),b
  2844  001DD6  D031               	goto	l2746
  2845  001DD8                     l2742:
  2846                           
  2847                           ; BSR set to: 0
  2848                           ;can.c: 213: {
  2849                           ;can.c: 214: txBuffer[txBufferPtrIn].dta[i] = msgPtr->dta[i];
  2850  001DD8  0100               	movlb	0	; () banked
  2851  001DDA  5164               	movf	Can_PutMessage@i& (0+255),w,b
  2852  001DDC  0D01               	mullw	1
  2853  001DDE  0E06               	movlw	6
  2854  001DE0  26F3               	addwf	prodl,f,c
  2855  001DE2  0E00               	movlw	0
  2856  001DE4  22F4               	addwfc	prodh,f,c
  2857  001DE6  50F3               	movf	prodl,w,c
  2858  001DE8  0100               	movlb	0	; () banked
  2859  001DEA  2560               	addwf	Can_PutMessage@msgPtr& (0+255),w,b
  2860  001DEC  6ED9               	movwf	fsr2l,c
  2861  001DEE  50F4               	movf	prodh,w,c
  2862  001DF0  0100               	movlb	0	; () banked
  2863  001DF2  2161               	addwfc	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  2864  001DF4  6EDA               	movwf	fsr2h,c
  2865  001DF6  0100               	movlb	0	; () banked
  2866  001DF8  5164               	movf	Can_PutMessage@i& (0+255),w,b
  2867  001DFA  0D01               	mullw	1
  2868  001DFC  0E06               	movlw	6
  2869  001DFE  26F3               	addwf	prodl,f,c
  2870  001E00  0E00               	movlw	0
  2871  001E02  22F4               	addwfc	prodh,f,c
  2872  001E04  0E24               	movlw	low _txBuffer
  2873  001E06  0100               	movlb	0	; () banked
  2874  001E08  6F62               	movwf	??_Can_PutMessage& (0+255),b
  2875  001E0A  0E01               	movlw	high _txBuffer
  2876  001E0C  0100               	movlb	0	; () banked
  2877  001E0E  6F63               	movwf	(??_Can_PutMessage+1)& (0+255),b
  2878  001E10  50F3               	movf	prodl,w,c
  2879  001E12  0100               	movlb	0	; () banked
  2880  001E14  2762               	addwf	??_Can_PutMessage& (0+255),f,b
  2881  001E16  50F4               	movf	prodh,w,c
  2882  001E18  0100               	movlb	0	; () banked
  2883  001E1A  2363               	addwfc	(??_Can_PutMessage+1)& (0+255),f,b
  2884  001E1C  0100               	movlb	0	; () banked
  2885  001E1E  51C2               	movf	_txBufferPtrIn& (0+255),w,b
  2886  001E20  0D11               	mullw	17
  2887  001E22  50F3               	movf	prodl,w,c
  2888  001E24  0100               	movlb	0	; () banked
  2889  001E26  2562               	addwf	??_Can_PutMessage& (0+255),w,b
  2890  001E28  6EE1               	movwf	fsr1l,c
  2891  001E2A  50F4               	movf	prodh,w,c
  2892  001E2C  0100               	movlb	0	; () banked
  2893  001E2E  2163               	addwfc	(??_Can_PutMessage+1)& (0+255),w,b
  2894  001E30  6EE2               	movwf	fsr1h,c
  2895  001E32  CFDF FFE7          	movff	indf2,indf1
  2896                           
  2897                           ; BSR set to: 0
  2898  001E36  0100               	movlb	0	; () banked
  2899  001E38  2B64               	incf	Can_PutMessage@i& (0+255),f,b
  2900  001E3A                     l2746:
  2901                           
  2902                           ; BSR set to: 0
  2903  001E3A  0100               	movlb	0	; () banked
  2904  001E3C  EE20 F005          	lfsr	2,5
  2905  001E40  5160               	movf	Can_PutMessage@msgPtr& (0+255),w,b
  2906  001E42  26D9               	addwf	fsr2l,f,c
  2907  001E44  5161               	movf	(Can_PutMessage@msgPtr+1)& (0+255),w,b
  2908  001E46  22DA               	addwfc	fsr2h,f,c
  2909  001E48  50DE               	movf	postinc2,w,c
  2910  001E4A  0100               	movlb	0	; () banked
  2911  001E4C  5D64               	subwf	Can_PutMessage@i& (0+255),w,b
  2912  001E4E  A0D8               	btfss	status,0,c
  2913  001E50  D7C3               	goto	l2742
  2914                           
  2915                           ; BSR set to: 0
  2916                           ;can.c: 215: }
  2917                           ;can.c: 216: INT3IE = 0;
  2918  001E52  9AF0               	bcf	intcon3,5,c	;volatile
  2919                           
  2920                           ; BSR set to: 0
  2921                           ;can.c: 217: txBufferCount++;
  2922  001E54  0100               	movlb	0	; () banked
  2923  001E56  2BC1               	incf	_txBufferCount& (0+255),f,b
  2924                           
  2925                           ; BSR set to: 0
  2926                           ;can.c: 218: txBufferPtrIn = (txBufferPtrIn + 1) % 4;
  2927  001E58  0100               	movlb	0	; () banked
  2928  001E5A  29C2               	incf	_txBufferPtrIn& (0+255),w,b
  2929  001E5C  0B03               	andlw	3
  2930  001E5E  0100               	movlb	0	; () banked
  2931  001E60  6FC2               	movwf	_txBufferPtrIn& (0+255),b
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;can.c: 219: INT3IE = 1;
  2935  001E62  8AF0               	bsf	intcon3,5,c	;volatile
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;can.c: 220: INT3IF = 1;
  2939  001E64  84F0               	bsf	intcon3,2,c	;volatile
  2940                           
  2941                           ; BSR set to: 0
  2942                           ;can.c: 223: else
  2943                           ;can.c: 224: {
  2944                           ;can.c: 225: return 1;
  2945                           ;	Return value of _Can_PutMessage is never used
  2946                           
  2947                           ; BSR set to: 0
  2948                           ;can.c: 222: }
  2949                           
  2950                           ; BSR set to: 0
  2951                           ;can.c: 221: return 0;
  2952                           ;	Return value of _Can_PutMessage is never used
  2953  001E66  0012               	return	
  2954  001E68                     __end_of_Can_PutMessage:
  2955                           	opt stack 0
  2956                           tblptru	equ	0xFF8
  2957                           tblptrh	equ	0xFF7
  2958                           tblptrl	equ	0xFF6
  2959                           tablat	equ	0xFF5
  2960                           prodh	equ	0xFF4
  2961                           prodl	equ	0xFF3
  2962                           intcon	equ	0xFF2
  2963                           intcon3	equ	0xFF0
  2964                           postinc0	equ	0xFEE
  2965                           wreg	equ	0xFE8
  2966                           indf1	equ	0xFE7
  2967                           postinc1	equ	0xFE6
  2968                           postdec1	equ	0xFE5
  2969                           fsr1h	equ	0xFE2
  2970                           fsr1l	equ	0xFE1
  2971                           indf2	equ	0xFDF
  2972                           postinc2	equ	0xFDE
  2973                           fsr2h	equ	0xFDA
  2974                           fsr2l	equ	0xFD9
  2975                           status	equ	0xFD8
  2976                           
  2977 ;; *************** function _Can_GetMessage *****************
  2978 ;; Defined at:
  2979 ;;		line 169 in file "can.c"
  2980 ;; Parameters:    Size  Location     Type
  2981 ;;  msgPtr          2    0[BANK0 ] PTR struct CANMESSAGE
  2982 ;;		 -> message(17), 
  2983 ;; Auto vars:     Size  Location     Type
  2984 ;;  i               1    4[BANK0 ] unsigned char 
  2985 ;; Return value:  Size  Location     Type
  2986 ;;                  1    wreg      unsigned char 
  2987 ;; Registers used:
  2988 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2989 ;; Tracked objects:
  2990 ;;		On entry : 0/0
  2991 ;;		On exit  : 0/0
  2992 ;;		Unchanged: 0/0
  2993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2994 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2995 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2996 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2997 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2998 ;;Total ram usage:        5 bytes
  2999 ;; Hardware stack levels used:    1
  3000 ;; Hardware stack levels required when called:    8
  3001 ;; This function calls:
  3002 ;;		Nothing
  3003 ;; This function is called by:
  3004 ;;		_main
  3005 ;;		_readID
  3006 ;;		_readConflictInfo
  3007 ;; This function uses a non-reentrant model
  3008 ;;
  3009                           
  3010                           	psect	text9
  3011  002164                     __ptext9:
  3012                           	opt stack 0
  3013  002164                     _Can_GetMessage:
  3014                           	opt stack 20
  3015                           
  3016                           ;can.c: 171: uint8_t i;
  3017                           ;can.c: 172: if(rxBufferCount > 0)
  3018                           
  3019                           ; BSR set to: 0
  3020                           ;incstack = 0
  3021  002164  5059               	movf	_rxBufferCount,w,c
  3022  002166  B4D8               	btfsc	status,2,c
  3023  002168  D0B8               	goto	l2648
  3024                           
  3025                           ;can.c: 173: {
  3026                           ;can.c: 174: msgPtr->dlc = rxBuffer[rxBufferPtrOut].dlc;
  3027  00216A  0100               	movlb	0	; () banked
  3028  00216C  51C3               	movf	_rxBufferPtrOut& (0+255),w,b
  3029  00216E  0D11               	mullw	17
  3030  002170  0E05               	movlw	5
  3031  002172  26F3               	addwf	prodl,f,c
  3032  002174  0E00               	movlw	0
  3033  002176  22F4               	addwfc	prodh,f,c
  3034  002178  0E68               	movlw	low _rxBuffer
  3035  00217A  24F3               	addwf	prodl,w,c
  3036  00217C  6ED9               	movwf	fsr2l,c
  3037  00217E  0E01               	movlw	high _rxBuffer
  3038  002180  20F4               	addwfc	prodh,w,c
  3039  002182  6EDA               	movwf	fsr2h,c
  3040  002184  0100               	movlb	0	; () banked
  3041  002186  EE10 F005          	lfsr	1,5
  3042  00218A  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  3043  00218C  26E1               	addwf	fsr1l,f,c
  3044  00218E  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  3045  002190  22E2               	addwfc	fsr1h,f,c
  3046  002192  CFDF FFE7          	movff	indf2,indf1
  3047                           
  3048                           ;can.c: 175: msgPtr->extended_identifier = rxBuffer[rxBufferPtrOut].extended_identifier;
  3049  002196  0100               	movlb	0	; () banked
  3050  002198  51C3               	movf	_rxBufferPtrOut& (0+255),w,b
  3051  00219A  0D11               	mullw	17
  3052  00219C  0E68               	movlw	low _rxBuffer
  3053  00219E  24F3               	addwf	prodl,w,c
  3054  0021A0  6ED9               	movwf	fsr2l,c
  3055  0021A2  0E01               	movlw	high _rxBuffer
  3056  0021A4  20F4               	addwfc	prodh,w,c
  3057  0021A6  6EDA               	movwf	fsr2h,c
  3058  0021A8  C060  FFE1         	movff	Can_GetMessage@msgPtr,fsr1l
  3059  0021AC  C061  FFE2         	movff	Can_GetMessage@msgPtr+1,fsr1h
  3060  0021B0  CFDF FFE7          	movff	indf2,indf1
  3061                           
  3062                           ;can.c: 176: msgPtr->filhit = rxBuffer[rxBufferPtrOut].filhit;
  3063  0021B4  0100               	movlb	0	; () banked
  3064  0021B6  51C3               	movf	_rxBufferPtrOut& (0+255),w,b
  3065  0021B8  0D11               	mullw	17
  3066  0021BA  0E0F               	movlw	15
  3067  0021BC  26F3               	addwf	prodl,f,c
  3068  0021BE  0E00               	movlw	0
  3069  0021C0  22F4               	addwfc	prodh,f,c
  3070  0021C2  0E68               	movlw	low _rxBuffer
  3071  0021C4  24F3               	addwf	prodl,w,c
  3072  0021C6  6ED9               	movwf	fsr2l,c
  3073  0021C8  0E01               	movlw	high _rxBuffer
  3074  0021CA  20F4               	addwfc	prodh,w,c
  3075  0021CC  6EDA               	movwf	fsr2h,c
  3076  0021CE  0100               	movlb	0	; () banked
  3077  0021D0  EE10 F00F          	lfsr	1,15
  3078  0021D4  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  3079  0021D6  26E1               	addwf	fsr1l,f,c
  3080  0021D8  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  3081  0021DA  22E2               	addwfc	fsr1h,f,c
  3082  0021DC  CFDF FFE7          	movff	indf2,indf1
  3083                           
  3084                           ;can.c: 177: msgPtr->identifier = rxBuffer[rxBufferPtrOut].identifier;
  3085  0021E0  0100               	movlb	0	; () banked
  3086  0021E2  51C3               	movf	_rxBufferPtrOut& (0+255),w,b
  3087  0021E4  0D11               	mullw	17
  3088  0021E6  0E01               	movlw	1
  3089  0021E8  26F3               	addwf	prodl,f,c
  3090  0021EA  0E00               	movlw	0
  3091  0021EC  22F4               	addwfc	prodh,f,c
  3092  0021EE  0E68               	movlw	low _rxBuffer
  3093  0021F0  24F3               	addwf	prodl,w,c
  3094  0021F2  6ED9               	movwf	fsr2l,c
  3095  0021F4  0E01               	movlw	high _rxBuffer
  3096  0021F6  20F4               	addwfc	prodh,w,c
  3097  0021F8  6EDA               	movwf	fsr2h,c
  3098  0021FA  0100               	movlb	0	; () banked
  3099  0021FC  EE10 F001          	lfsr	1,1
  3100  002200  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  3101  002202  26E1               	addwf	fsr1l,f,c
  3102  002204  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  3103  002206  22E2               	addwfc	fsr1h,f,c
  3104  002208  CFDE FFE6          	movff	postinc2,postinc1
  3105  00220C  CFDE FFE6          	movff	postinc2,postinc1
  3106  002210  CFDE FFE6          	movff	postinc2,postinc1
  3107  002214  CFDE FFE6          	movff	postinc2,postinc1
  3108                           
  3109                           ;can.c: 178: msgPtr->rtr = rxBuffer[rxBufferPtrOut].rtr;
  3110  002218  0100               	movlb	0	; () banked
  3111  00221A  51C3               	movf	_rxBufferPtrOut& (0+255),w,b
  3112  00221C  0D11               	mullw	17
  3113  00221E  0E0E               	movlw	14
  3114  002220  26F3               	addwf	prodl,f,c
  3115  002222  0E00               	movlw	0
  3116  002224  22F4               	addwfc	prodh,f,c
  3117  002226  0E68               	movlw	low _rxBuffer
  3118  002228  24F3               	addwf	prodl,w,c
  3119  00222A  6ED9               	movwf	fsr2l,c
  3120  00222C  0E01               	movlw	high _rxBuffer
  3121  00222E  20F4               	addwfc	prodh,w,c
  3122  002230  6EDA               	movwf	fsr2h,c
  3123  002232  0100               	movlb	0	; () banked
  3124  002234  EE10 F00E          	lfsr	1,14
  3125  002238  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  3126  00223A  26E1               	addwf	fsr1l,f,c
  3127  00223C  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  3128  00223E  22E2               	addwfc	fsr1h,f,c
  3129  002240  CFDF FFE7          	movff	indf2,indf1
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;can.c: 179: for(i=0;i< msgPtr->dlc;i++)
  3133  002244  0E00               	movlw	0
  3134  002246  0100               	movlb	0	; () banked
  3135  002248  6F64               	movwf	Can_GetMessage@i& (0+255),b
  3136  00224A  D031               	goto	l2638
  3137  00224C                     l2634:
  3138                           
  3139                           ; BSR set to: 0
  3140                           ;can.c: 180: {
  3141                           ;can.c: 181: msgPtr->dta[i] = rxBuffer[rxBufferPtrOut].dta[i];
  3142  00224C  0100               	movlb	0	; () banked
  3143  00224E  5164               	movf	Can_GetMessage@i& (0+255),w,b
  3144  002250  0D01               	mullw	1
  3145  002252  0E06               	movlw	6
  3146  002254  26F3               	addwf	prodl,f,c
  3147  002256  0E00               	movlw	0
  3148  002258  22F4               	addwfc	prodh,f,c
  3149  00225A  0E68               	movlw	low _rxBuffer
  3150  00225C  0100               	movlb	0	; () banked
  3151  00225E  6F62               	movwf	??_Can_GetMessage& (0+255),b
  3152  002260  0E01               	movlw	high _rxBuffer
  3153  002262  0100               	movlb	0	; () banked
  3154  002264  6F63               	movwf	(??_Can_GetMessage+1)& (0+255),b
  3155  002266  50F3               	movf	prodl,w,c
  3156  002268  0100               	movlb	0	; () banked
  3157  00226A  2762               	addwf	??_Can_GetMessage& (0+255),f,b
  3158  00226C  50F4               	movf	prodh,w,c
  3159  00226E  0100               	movlb	0	; () banked
  3160  002270  2363               	addwfc	(??_Can_GetMessage+1)& (0+255),f,b
  3161  002272  0100               	movlb	0	; () banked
  3162  002274  51C3               	movf	_rxBufferPtrOut& (0+255),w,b
  3163  002276  0D11               	mullw	17
  3164  002278  50F3               	movf	prodl,w,c
  3165  00227A  0100               	movlb	0	; () banked
  3166  00227C  2562               	addwf	??_Can_GetMessage& (0+255),w,b
  3167  00227E  6ED9               	movwf	fsr2l,c
  3168  002280  50F4               	movf	prodh,w,c
  3169  002282  0100               	movlb	0	; () banked
  3170  002284  2163               	addwfc	(??_Can_GetMessage+1)& (0+255),w,b
  3171  002286  6EDA               	movwf	fsr2h,c
  3172  002288  0100               	movlb	0	; () banked
  3173  00228A  5164               	movf	Can_GetMessage@i& (0+255),w,b
  3174  00228C  0D01               	mullw	1
  3175  00228E  0E06               	movlw	6
  3176  002290  26F3               	addwf	prodl,f,c
  3177  002292  0E00               	movlw	0
  3178  002294  22F4               	addwfc	prodh,f,c
  3179  002296  50F3               	movf	prodl,w,c
  3180  002298  0100               	movlb	0	; () banked
  3181  00229A  2560               	addwf	Can_GetMessage@msgPtr& (0+255),w,b
  3182  00229C  6EE1               	movwf	fsr1l,c
  3183  00229E  50F4               	movf	prodh,w,c
  3184  0022A0  0100               	movlb	0	; () banked
  3185  0022A2  2161               	addwfc	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  3186  0022A4  6EE2               	movwf	fsr1h,c
  3187  0022A6  CFDF FFE7          	movff	indf2,indf1
  3188                           
  3189                           ; BSR set to: 0
  3190  0022AA  0100               	movlb	0	; () banked
  3191  0022AC  2B64               	incf	Can_GetMessage@i& (0+255),f,b
  3192  0022AE                     l2638:
  3193                           
  3194                           ; BSR set to: 0
  3195  0022AE  0100               	movlb	0	; () banked
  3196  0022B0  EE20 F005          	lfsr	2,5
  3197  0022B4  5160               	movf	Can_GetMessage@msgPtr& (0+255),w,b
  3198  0022B6  26D9               	addwf	fsr2l,f,c
  3199  0022B8  5161               	movf	(Can_GetMessage@msgPtr+1)& (0+255),w,b
  3200  0022BA  22DA               	addwfc	fsr2h,f,c
  3201  0022BC  50DE               	movf	postinc2,w,c
  3202  0022BE  0100               	movlb	0	; () banked
  3203  0022C0  5D64               	subwf	Can_GetMessage@i& (0+255),w,b
  3204  0022C2  A0D8               	btfss	status,0,c
  3205  0022C4  D7C3               	goto	l2634
  3206                           
  3207                           ; BSR set to: 0
  3208                           ;can.c: 182: }
  3209                           ;can.c: 183: INT3IE = 0;
  3210  0022C6  9AF0               	bcf	intcon3,5,c	;volatile
  3211                           
  3212                           ; BSR set to: 0
  3213                           ;can.c: 184: rxBufferPtrOut = (rxBufferPtrOut + 1) % 4;
  3214  0022C8  0100               	movlb	0	; () banked
  3215  0022CA  29C3               	incf	_rxBufferPtrOut& (0+255),w,b
  3216  0022CC  0B03               	andlw	3
  3217  0022CE  0100               	movlb	0	; () banked
  3218  0022D0  6FC3               	movwf	_rxBufferPtrOut& (0+255),b
  3219                           
  3220                           ; BSR set to: 0
  3221                           ;can.c: 185: rxBufferCount--;
  3222  0022D2  0659               	decf	_rxBufferCount,f,c
  3223                           
  3224                           ; BSR set to: 0
  3225                           ;can.c: 186: INT3IE = 1;
  3226  0022D4  8AF0               	bsf	intcon3,5,c	;volatile
  3227                           
  3228                           ;can.c: 187: return 0;
  3229  0022D6  0E00               	movlw	0
  3230                           
  3231                           ; BSR set to: 0
  3232  0022D8  0012               	return	
  3233  0022DA                     l2648:
  3234                           
  3235                           ;can.c: 188: }
  3236                           ;can.c: 189: return 1;
  3237  0022DA  0E01               	movlw	1
  3238  0022DC  0012               	return	
  3239  0022DE                     __end_of_Can_GetMessage:
  3240                           	opt stack 0
  3241                           tblptru	equ	0xFF8
  3242                           tblptrh	equ	0xFF7
  3243                           tblptrl	equ	0xFF6
  3244                           tablat	equ	0xFF5
  3245                           prodh	equ	0xFF4
  3246                           prodl	equ	0xFF3
  3247                           intcon	equ	0xFF2
  3248                           intcon3	equ	0xFF0
  3249                           postinc0	equ	0xFEE
  3250                           wreg	equ	0xFE8
  3251                           indf1	equ	0xFE7
  3252                           postinc1	equ	0xFE6
  3253                           postdec1	equ	0xFE5
  3254                           fsr1h	equ	0xFE2
  3255                           fsr1l	equ	0xFE1
  3256                           indf2	equ	0xFDF
  3257                           postinc2	equ	0xFDE
  3258                           fsr2h	equ	0xFDA
  3259                           fsr2l	equ	0xFD9
  3260                           status	equ	0xFD8
  3261                           
  3262 ;; *************** function _Can_Init *****************
  3263 ;; Defined at:
  3264 ;;		line 237 in file "can.c"
  3265 ;; Parameters:    Size  Location     Type
  3266 ;;  speedCfg        2   60[BANK0 ] PTR const struct CANSPEE
  3267 ;;		 -> canSpeed125k(7), 
  3268 ;;  filterCfg       2   62[BANK0 ] PTR struct CANFILTER
  3269 ;;		 -> filter(33), 
  3270 ;; Auto vars:     Size  Location     Type
  3271 ;;		None
  3272 ;; Return value:  Size  Location     Type
  3273 ;;                  1    wreg      void 
  3274 ;; Registers used:
  3275 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3276 ;; Tracked objects:
  3277 ;;		On entry : 0/0
  3278 ;;		On exit  : 0/0
  3279 ;;		Unchanged: 0/0
  3280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3281 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3284 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3285 ;;Total ram usage:        4 bytes
  3286 ;; Hardware stack levels used:    1
  3287 ;; Hardware stack levels required when called:   12
  3288 ;; This function calls:
  3289 ;;		_Mcp2515_Init
  3290 ;; This function is called by:
  3291 ;;		_init
  3292 ;; This function uses a non-reentrant model
  3293 ;;
  3294                           
  3295                           	psect	text10
  3296  0032D8                     __ptext10:
  3297                           	opt stack 0
  3298  0032D8                     _Can_Init:
  3299                           	opt stack 17
  3300                           
  3301                           ;can.c: 240: TRISF6 = 0;
  3302                           
  3303                           ;incstack = 0
  3304  0032D8  9C97               	bcf	3991,6,c	;volatile
  3305                           
  3306                           ;can.c: 241: TRISF7 = 0;
  3307  0032DA  9E97               	bcf	3991,7,c	;volatile
  3308                           
  3309                           ;can.c: 242: LATF6 = 1;
  3310  0032DC  8C8E               	bsf	3982,6,c	;volatile
  3311                           
  3312                           ;can.c: 243: LATF7 = 0;
  3313  0032DE  9E8E               	bcf	3982,7,c	;volatile
  3314                           
  3315                           ;can.c: 244: TRISC4 = 1;
  3316  0032E0  8894               	bsf	3988,4,c	;volatile
  3317                           
  3318                           ;can.c: 245: TRISC5 = 0;
  3319  0032E2  9A94               	bcf	3988,5,c	;volatile
  3320                           
  3321                           ;can.c: 246: TRISC3 = 0;
  3322  0032E4  9694               	bcf	3988,3,c	;volatile
  3323                           
  3324                           ;can.c: 247: TRISD1 = 0;
  3325  0032E6  9295               	bcf	3989,1,c	;volatile
  3326                           
  3327                           ;can.c: 251: CKE1 = 0;
  3328  0032E8  9CC7               	bcf	4039,6,c	;volatile
  3329                           
  3330                           ;can.c: 252: CKP1 = 1;
  3331  0032EA  88C6               	bsf	4038,4,c	;volatile
  3332                           
  3333                           ;can.c: 253: SSPCON1 = 0b00111010;
  3334  0032EC  0E3A               	movlw	58
  3335  0032EE  6EC6               	movwf	4038,c	;volatile
  3336                           
  3337                           ;can.c: 254: SSPEN1 = 1;
  3338  0032F0  8AC6               	bsf	4038,5,c	;volatile
  3339                           
  3340                           ;can.c: 258: Mcp2515_Init(speedCfg,filterCfg);
  3341  0032F2  C09C  F083         	movff	Can_Init@speedCfg,Mcp2515_Init@speedCfg
  3342  0032F6  C09D  F084         	movff	Can_Init@speedCfg+1,Mcp2515_Init@speedCfg+1
  3343  0032FA  C09E  F085         	movff	Can_Init@filterCfg,Mcp2515_Init@filterCfg
  3344  0032FE  C09F  F086         	movff	Can_Init@filterCfg+1,Mcp2515_Init@filterCfg+1
  3345  003302  EC21  F008         	call	_Mcp2515_Init	;wreg free
  3346                           
  3347                           ;can.c: 259: INT3IE = 1;
  3348  003306  8AF0               	bsf	intcon3,5,c	;volatile
  3349                           
  3350                           ;can.c: 260: INTEDG3 = 0;
  3351  003308  96F1               	bcf	intcon2,3,c	;volatile
  3352                           
  3353                           ;can.c: 264: PEIE = 1;
  3354  00330A  8CF2               	bsf	intcon,6,c	;volatile
  3355                           
  3356                           ;can.c: 265: GIE = 1;
  3357  00330C  8EF2               	bsf	intcon,7,c	;volatile
  3358  00330E  0012               	return		;funcret
  3359  003310                     __end_of_Can_Init:
  3360                           	opt stack 0
  3361                           tblptru	equ	0xFF8
  3362                           tblptrh	equ	0xFF7
  3363                           tblptrl	equ	0xFF6
  3364                           tablat	equ	0xFF5
  3365                           prodh	equ	0xFF4
  3366                           prodl	equ	0xFF3
  3367                           intcon	equ	0xFF2
  3368                           intcon2	equ	0xFF1
  3369                           intcon3	equ	0xFF0
  3370                           postinc0	equ	0xFEE
  3371                           wreg	equ	0xFE8
  3372                           indf1	equ	0xFE7
  3373                           postinc1	equ	0xFE6
  3374                           postdec1	equ	0xFE5
  3375                           fsr1h	equ	0xFE2
  3376                           fsr1l	equ	0xFE1
  3377                           indf2	equ	0xFDF
  3378                           postinc2	equ	0xFDE
  3379                           fsr2h	equ	0xFDA
  3380                           fsr2l	equ	0xFD9
  3381                           status	equ	0xFD8
  3382                           
  3383 ;; *************** function _Mcp2515_Init *****************
  3384 ;; Defined at:
  3385 ;;		line 38 in file "mcp2515.c"
  3386 ;; Parameters:    Size  Location     Type
  3387 ;;  speedCfg        2   35[BANK0 ] PTR const struct CANSPEE
  3388 ;;		 -> canSpeed125k(7), 
  3389 ;;  filterCfg       2   37[BANK0 ] PTR struct CANFILTER
  3390 ;;		 -> filter(33), 
  3391 ;; Auto vars:     Size  Location     Type
  3392 ;;  cmdMask4        4   53[BANK0 ] unsigned char [4]
  3393 ;;  cmdWrite3       3   57[BANK0 ] unsigned char [3]
  3394 ;;  i               1   52[BANK0 ] unsigned char 
  3395 ;; Return value:  Size  Location     Type
  3396 ;;                  1    wreg      void 
  3397 ;; Registers used:
  3398 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3399 ;; Tracked objects:
  3400 ;;		On entry : 0/0
  3401 ;;		On exit  : 0/0
  3402 ;;		Unchanged: 0/0
  3403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3404 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3405 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;      Temps:          0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3408 ;;Total ram usage:       25 bytes
  3409 ;; Hardware stack levels used:    1
  3410 ;; Hardware stack levels required when called:   11
  3411 ;; This function calls:
  3412 ;;		_Mcp2515WriteCanId
  3413 ;;		_Mcp2515_Reset
  3414 ;;		_Spi_Write
  3415 ;; This function is called by:
  3416 ;;		_Can_Init
  3417 ;; This function uses a non-reentrant model
  3418 ;;
  3419                           
  3420                           	psect	text11
  3421  001042                     __ptext11:
  3422                           	opt stack 0
  3423  001042                     _Mcp2515_Init:
  3424                           	opt stack 17
  3425                           
  3426                           ;mcp2515.c: 40: uint8_t i;
  3427                           ;mcp2515.c: 41: uint8_t cmdMask4[]={0x05,0x0F,0xE0,0x80};
  3428                           
  3429                           ;incstack = 0
  3430  001042  C0EF  F095         	movff	Mcp2515_Init@F8112,Mcp2515_Init@cmdMask4
  3431  001046  C0F0  F096         	movff	Mcp2515_Init@F8112+1,Mcp2515_Init@cmdMask4+1
  3432  00104A  C0F1  F097         	movff	Mcp2515_Init@F8112+2,Mcp2515_Init@cmdMask4+2
  3433  00104E  C0F2  F098         	movff	Mcp2515_Init@F8112+3,Mcp2515_Init@cmdMask4+3
  3434                           
  3435                           ;mcp2515.c: 42: uint8_t cmdWrite3[]={0x02,0,0};
  3436  001052  C0FA  F099         	movff	Mcp2515_Init@F8114,Mcp2515_Init@cmdWrite3
  3437  001056  C0FB  F09A         	movff	Mcp2515_Init@F8114+1,Mcp2515_Init@cmdWrite3+1
  3438  00105A  C0FC  F09B         	movff	Mcp2515_Init@F8114+2,Mcp2515_Init@cmdWrite3+2
  3439                           
  3440                           ;mcp2515.c: 44: Mcp2515_Reset();
  3441  00105E  EC6F  F017         	call	_Mcp2515_Reset	;wreg free
  3442                           
  3443                           ;mcp2515.c: 48: Spi_Write(cmdMask4,sizeof(cmdMask4));
  3444  001062  0E95               	movlw	low Mcp2515_Init@cmdMask4
  3445  001064  0100               	movlb	0	; () banked
  3446  001066  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3447  001068  0E00               	movlw	high Mcp2515_Init@cmdMask4
  3448  00106A  0100               	movlb	0	; () banked
  3449  00106C  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3450  00106E  0E04               	movlw	4
  3451  001070  0100               	movlb	0	; () banked
  3452  001072  6F6E               	movwf	Spi_Write@size& (0+255),b
  3453  001074  0E00               	movlw	0
  3454  001076  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3455  001078  0E00               	movlw	0
  3456  00107A  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3457  00107C  0E00               	movlw	0
  3458  00107E  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3459  001080  ECB9  F019         	call	_Spi_Write	;wreg free
  3460                           
  3461                           ;mcp2515.c: 52: cmdWrite3[1] = 0x2A;
  3462  001084  0E2A               	movlw	42
  3463  001086  0100               	movlb	0	; () banked
  3464  001088  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  3465                           
  3466                           ; BSR set to: 0
  3467                           ;mcp2515.c: 53: cmdWrite3[2] = speedCfg->brp | speedCfg->sjw << 6;
  3468  00108A  C083  FFF6         	movff	Mcp2515_Init@speedCfg,tblptrl
  3469  00108E  C084  FFF7         	movff	Mcp2515_Init@speedCfg+1,tblptrh
  3470  001092                     	if	0	;tblptru may be non-zero
  3471  001092                     	endif
  3472  001092                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3473  001092  0E00               	movlw	low (__mediumconst shr (0+16))
  3474  001094  6EF8               	movwf	tblptru,c
  3475  001096                     	endif
  3476  001096  0008               	tblrd		*
  3477  001098  CFF5 F087          	movff	tablat,??_Mcp2515_Init
  3478  00109C  0E01               	movlw	1
  3479  00109E  0100               	movlb	0	; () banked
  3480  0010A0  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  3481  0010A2  0100               	movlb	0	; () banked
  3482  0010A4  6F88               	movwf	(??_Mcp2515_Init+1)& (0+255),b
  3483  0010A6  0E00               	movlw	0
  3484  0010A8  0100               	movlb	0	; () banked
  3485  0010AA  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  3486  0010AC  0100               	movlb	0	; () banked
  3487  0010AE  6F89               	movwf	(??_Mcp2515_Init+2)& (0+255),b
  3488  0010B0  C088  FFF6         	movff	??_Mcp2515_Init+1,tblptrl
  3489  0010B4  C089  FFF7         	movff	??_Mcp2515_Init+2,tblptrh
  3490  0010B8                     	if	0	;tblptru may be non-zero
  3491  0010B8                     	endif
  3492  0010B8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3493  0010B8  0E00               	movlw	low (__mediumconst shr (0+16))
  3494  0010BA  6EF8               	movwf	tblptru,c
  3495  0010BC                     	endif
  3496  0010BC  0008               	tblrd		*
  3497  0010BE  CFF5 F08A          	movff	tablat,??_Mcp2515_Init+3
  3498  0010C2  0E06               	movlw	6
  3499  0010C4  0100               	movlb	0	; () banked
  3500  0010C6  6F8B               	movwf	(??_Mcp2515_Init+4)& (0+255),b
  3501  0010C8                     u1665:
  3502  0010C8  0100               	movlb	0	; () banked
  3503  0010CA  90D8               	bcf	status,0,c
  3504  0010CC  378A               	rlcf	(??_Mcp2515_Init+3)& (0+255),f,b
  3505  0010CE  0100               	movlb	0	; () banked
  3506  0010D0  2F8B               	decfsz	(??_Mcp2515_Init+4)& (0+255),f,b
  3507  0010D2  D7FA               	goto	u1665
  3508  0010D4  0100               	movlb	0	; () banked
  3509  0010D6  518A               	movf	(??_Mcp2515_Init+3)& (0+255),w,b
  3510  0010D8  0100               	movlb	0	; () banked
  3511  0010DA  1187               	iorwf	??_Mcp2515_Init& (0+255),w,b
  3512  0010DC  0100               	movlb	0	; () banked
  3513  0010DE  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  3514                           
  3515                           ; BSR set to: 0
  3516                           ;mcp2515.c: 54: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  3517  0010E0  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  3518  0010E2  0100               	movlb	0	; () banked
  3519  0010E4  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3520  0010E6  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  3521  0010E8  0100               	movlb	0	; () banked
  3522  0010EA  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3523  0010EC  0E03               	movlw	3
  3524  0010EE  0100               	movlb	0	; () banked
  3525  0010F0  6F6E               	movwf	Spi_Write@size& (0+255),b
  3526  0010F2  0E00               	movlw	0
  3527  0010F4  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3528  0010F6  0E00               	movlw	0
  3529  0010F8  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3530  0010FA  0E00               	movlw	0
  3531  0010FC  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3532  0010FE  ECB9  F019         	call	_Spi_Write	;wreg free
  3533                           
  3534                           ;mcp2515.c: 56: cmdWrite3[1] = 0x29;
  3535  001102  0E29               	movlw	41
  3536  001104  0100               	movlb	0	; () banked
  3537  001106  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  3538                           
  3539                           ;mcp2515.c: 57: cmdWrite3[2] = speedCfg->prseg
  3540                           ;mcp2515.c: 58: | speedCfg->phseg1 << 3
  3541                           ;mcp2515.c: 59: | speedCfg->sam << 6
  3542                           ;mcp2515.c: 60: | speedCfg->btlmode << 7;
  3543  001108  0E02               	movlw	2
  3544  00110A  0100               	movlb	0	; () banked
  3545  00110C  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  3546  00110E  0100               	movlb	0	; () banked
  3547  001110  6F87               	movwf	??_Mcp2515_Init& (0+255),b
  3548  001112  0E00               	movlw	0
  3549  001114  0100               	movlb	0	; () banked
  3550  001116  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  3551  001118  0100               	movlb	0	; () banked
  3552  00111A  6F88               	movwf	(??_Mcp2515_Init+1)& (0+255),b
  3553  00111C  C087  FFF6         	movff	??_Mcp2515_Init,tblptrl
  3554  001120  C088  FFF7         	movff	??_Mcp2515_Init+1,tblptrh
  3555  001124                     	if	0	;tblptru may be non-zero
  3556  001124                     	endif
  3557  001124                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3558  001124  0E00               	movlw	low (__mediumconst shr (0+16))
  3559  001126  6EF8               	movwf	tblptru,c
  3560  001128                     	endif
  3561  001128  0008               	tblrd		*
  3562  00112A  CFF5 F089          	movff	tablat,??_Mcp2515_Init+2
  3563  00112E  0E06               	movlw	6
  3564  001130  0100               	movlb	0	; () banked
  3565  001132  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  3566  001134  0100               	movlb	0	; () banked
  3567  001136  6F8A               	movwf	(??_Mcp2515_Init+3)& (0+255),b
  3568  001138  0E00               	movlw	0
  3569  00113A  0100               	movlb	0	; () banked
  3570  00113C  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  3571  00113E  0100               	movlb	0	; () banked
  3572  001140  6F8B               	movwf	(??_Mcp2515_Init+4)& (0+255),b
  3573  001142  C08A  FFF6         	movff	??_Mcp2515_Init+3,tblptrl
  3574  001146  C08B  FFF7         	movff	??_Mcp2515_Init+4,tblptrh
  3575  00114A                     	if	0	;tblptru may be non-zero
  3576  00114A                     	endif
  3577  00114A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3578  00114A  0E00               	movlw	low (__mediumconst shr (0+16))
  3579  00114C  6EF8               	movwf	tblptru,c
  3580  00114E                     	endif
  3581  00114E  0008               	tblrd		*
  3582  001150  CFF5 F08C          	movff	tablat,??_Mcp2515_Init+5
  3583  001154  0E00               	movlw	0
  3584  001156  B18C               	btfsc	(??_Mcp2515_Init+5)& (0+255),0,b
  3585  001158  0E80               	movlw	128
  3586  00115A  6F8C               	movwf	(??_Mcp2515_Init+5)& (0+255),b
  3587  00115C  0E05               	movlw	5
  3588  00115E  0100               	movlb	0	; () banked
  3589  001160  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  3590  001162  0100               	movlb	0	; () banked
  3591  001164  6F8D               	movwf	(??_Mcp2515_Init+6)& (0+255),b
  3592  001166  0E00               	movlw	0
  3593  001168  0100               	movlb	0	; () banked
  3594  00116A  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  3595  00116C  0100               	movlb	0	; () banked
  3596  00116E  6F8E               	movwf	(??_Mcp2515_Init+7)& (0+255),b
  3597  001170  C08D  FFF6         	movff	??_Mcp2515_Init+6,tblptrl
  3598  001174  C08E  FFF7         	movff	??_Mcp2515_Init+7,tblptrh
  3599  001178                     	if	0	;tblptru may be non-zero
  3600  001178                     	endif
  3601  001178                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3602  001178  0E00               	movlw	low (__mediumconst shr (0+16))
  3603  00117A  6EF8               	movwf	tblptru,c
  3604  00117C                     	endif
  3605  00117C  0008               	tblrd		*
  3606  00117E  CFF5 F08F          	movff	tablat,??_Mcp2515_Init+8
  3607  001182  0E06               	movlw	6
  3608  001184  0100               	movlb	0	; () banked
  3609  001186  6F90               	movwf	(??_Mcp2515_Init+9)& (0+255),b
  3610  001188                     u1675:
  3611  001188  0100               	movlb	0	; () banked
  3612  00118A  90D8               	bcf	status,0,c
  3613  00118C  378F               	rlcf	(??_Mcp2515_Init+8)& (0+255),f,b
  3614  00118E  0100               	movlb	0	; () banked
  3615  001190  2F90               	decfsz	(??_Mcp2515_Init+9)& (0+255),f,b
  3616  001192  D7FA               	goto	u1675
  3617  001194  0E03               	movlw	3
  3618  001196  0100               	movlb	0	; () banked
  3619  001198  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  3620  00119A  0100               	movlb	0	; () banked
  3621  00119C  6F91               	movwf	(??_Mcp2515_Init+10)& (0+255),b
  3622  00119E  0E00               	movlw	0
  3623  0011A0  0100               	movlb	0	; () banked
  3624  0011A2  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  3625  0011A4  0100               	movlb	0	; () banked
  3626  0011A6  6F92               	movwf	(??_Mcp2515_Init+11)& (0+255),b
  3627  0011A8  C091  FFF6         	movff	??_Mcp2515_Init+10,tblptrl
  3628  0011AC  C092  FFF7         	movff	??_Mcp2515_Init+11,tblptrh
  3629  0011B0                     	if	0	;tblptru may be non-zero
  3630  0011B0                     	endif
  3631  0011B0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3632  0011B0  0E00               	movlw	low (__mediumconst shr (0+16))
  3633  0011B2  6EF8               	movwf	tblptru,c
  3634  0011B4                     	endif
  3635  0011B4  0008               	tblrd		*
  3636  0011B6  CFF5 F093          	movff	tablat,??_Mcp2515_Init+12
  3637  0011BA  0100               	movlb	0	; () banked
  3638  0011BC  90D8               	bcf	status,0,c
  3639  0011BE  3793               	rlcf	(??_Mcp2515_Init+12)& (0+255),f,b
  3640  0011C0  0100               	movlb	0	; () banked
  3641  0011C2  90D8               	bcf	status,0,c
  3642  0011C4  3793               	rlcf	(??_Mcp2515_Init+12)& (0+255),f,b
  3643  0011C6  0100               	movlb	0	; () banked
  3644  0011C8  90D8               	bcf	status,0,c
  3645  0011CA  3593               	rlcf	(??_Mcp2515_Init+12)& (0+255),w,b
  3646  0011CC  0100               	movlb	0	; () banked
  3647  0011CE  118F               	iorwf	(??_Mcp2515_Init+8)& (0+255),w,b
  3648  0011D0  0100               	movlb	0	; () banked
  3649  0011D2  118C               	iorwf	(??_Mcp2515_Init+5)& (0+255),w,b
  3650  0011D4  0100               	movlb	0	; () banked
  3651  0011D6  1189               	iorwf	(??_Mcp2515_Init+2)& (0+255),w,b
  3652  0011D8  0100               	movlb	0	; () banked
  3653  0011DA  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  3654                           
  3655                           ; BSR set to: 0
  3656                           ;mcp2515.c: 61: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  3657  0011DC  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  3658  0011DE  0100               	movlb	0	; () banked
  3659  0011E0  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3660  0011E2  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  3661  0011E4  0100               	movlb	0	; () banked
  3662  0011E6  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3663  0011E8  0E03               	movlw	3
  3664  0011EA  0100               	movlb	0	; () banked
  3665  0011EC  6F6E               	movwf	Spi_Write@size& (0+255),b
  3666  0011EE  0E00               	movlw	0
  3667  0011F0  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3668  0011F2  0E00               	movlw	0
  3669  0011F4  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3670  0011F6  0E00               	movlw	0
  3671  0011F8  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3672  0011FA  ECB9  F019         	call	_Spi_Write	;wreg free
  3673                           
  3674                           ;mcp2515.c: 63: cmdWrite3[1] = 0x28;
  3675  0011FE  0E28               	movlw	40
  3676  001200  0100               	movlb	0	; () banked
  3677  001202  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  3678                           
  3679                           ; BSR set to: 0
  3680                           ;mcp2515.c: 64: cmdWrite3[2] = speedCfg->phseg2 | speedCfg->sjw << 6;
  3681  001204  0E04               	movlw	4
  3682  001206  0100               	movlb	0	; () banked
  3683  001208  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  3684  00120A  0100               	movlb	0	; () banked
  3685  00120C  6F87               	movwf	??_Mcp2515_Init& (0+255),b
  3686  00120E  0E00               	movlw	0
  3687  001210  0100               	movlb	0	; () banked
  3688  001212  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  3689  001214  0100               	movlb	0	; () banked
  3690  001216  6F88               	movwf	(??_Mcp2515_Init+1)& (0+255),b
  3691  001218  C087  FFF6         	movff	??_Mcp2515_Init,tblptrl
  3692  00121C  C088  FFF7         	movff	??_Mcp2515_Init+1,tblptrh
  3693  001220                     	if	0	;tblptru may be non-zero
  3694  001220                     	endif
  3695  001220                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3696  001220  0E00               	movlw	low (__mediumconst shr (0+16))
  3697  001222  6EF8               	movwf	tblptru,c
  3698  001224                     	endif
  3699  001224  0008               	tblrd		*
  3700  001226  CFF5 F089          	movff	tablat,??_Mcp2515_Init+2
  3701  00122A  0E01               	movlw	1
  3702  00122C  0100               	movlb	0	; () banked
  3703  00122E  2583               	addwf	Mcp2515_Init@speedCfg& (0+255),w,b
  3704  001230  0100               	movlb	0	; () banked
  3705  001232  6F8A               	movwf	(??_Mcp2515_Init+3)& (0+255),b
  3706  001234  0E00               	movlw	0
  3707  001236  0100               	movlb	0	; () banked
  3708  001238  2184               	addwfc	(Mcp2515_Init@speedCfg+1)& (0+255),w,b
  3709  00123A  0100               	movlb	0	; () banked
  3710  00123C  6F8B               	movwf	(??_Mcp2515_Init+4)& (0+255),b
  3711  00123E  C08A  FFF6         	movff	??_Mcp2515_Init+3,tblptrl
  3712  001242  C08B  FFF7         	movff	??_Mcp2515_Init+4,tblptrh
  3713  001246                     	if	0	;tblptru may be non-zero
  3714  001246                     	endif
  3715  001246                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3716  001246  0E00               	movlw	low (__mediumconst shr (0+16))
  3717  001248  6EF8               	movwf	tblptru,c
  3718  00124A                     	endif
  3719  00124A  0008               	tblrd		*
  3720  00124C  CFF5 F08C          	movff	tablat,??_Mcp2515_Init+5
  3721  001250  0E06               	movlw	6
  3722  001252  0100               	movlb	0	; () banked
  3723  001254  6F8D               	movwf	(??_Mcp2515_Init+6)& (0+255),b
  3724  001256                     u1685:
  3725  001256  0100               	movlb	0	; () banked
  3726  001258  90D8               	bcf	status,0,c
  3727  00125A  378C               	rlcf	(??_Mcp2515_Init+5)& (0+255),f,b
  3728  00125C  0100               	movlb	0	; () banked
  3729  00125E  2F8D               	decfsz	(??_Mcp2515_Init+6)& (0+255),f,b
  3730  001260  D7FA               	goto	u1685
  3731  001262  0100               	movlb	0	; () banked
  3732  001264  518C               	movf	(??_Mcp2515_Init+5)& (0+255),w,b
  3733  001266  0100               	movlb	0	; () banked
  3734  001268  1189               	iorwf	(??_Mcp2515_Init+2)& (0+255),w,b
  3735  00126A  0100               	movlb	0	; () banked
  3736  00126C  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  3737                           
  3738                           ; BSR set to: 0
  3739                           ;mcp2515.c: 65: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  3740  00126E  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  3741  001270  0100               	movlb	0	; () banked
  3742  001272  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3743  001274  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  3744  001276  0100               	movlb	0	; () banked
  3745  001278  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3746  00127A  0E03               	movlw	3
  3747  00127C  0100               	movlb	0	; () banked
  3748  00127E  6F6E               	movwf	Spi_Write@size& (0+255),b
  3749  001280  0E00               	movlw	0
  3750  001282  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3751  001284  0E00               	movlw	0
  3752  001286  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3753  001288  0E00               	movlw	0
  3754  00128A  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3755  00128C  ECB9  F019         	call	_Spi_Write	;wreg free
  3756                           
  3757                           ;mcp2515.c: 69: Mcp2515WriteCanId(0x20,filterCfg->ext,filterCfg->mask0);
  3758  001290  0100               	movlb	0	; () banked
  3759  001292  EE20 F020          	lfsr	2,32
  3760  001296  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3761  001298  26D9               	addwf	fsr2l,f,c
  3762  00129A  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3763  00129C  22DA               	addwfc	fsr2h,f,c
  3764  00129E  50DF               	movf	indf2,w,c
  3765  0012A0  0100               	movlb	0	; () banked
  3766  0012A2  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3767  0012A4  C085  FFD9         	movff	Mcp2515_Init@filterCfg,fsr2l
  3768  0012A8  C086  FFDA         	movff	Mcp2515_Init@filterCfg+1,fsr2h
  3769  0012AC  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3770  0012B0  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3771  0012B4  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3772  0012B8  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3773  0012BC  0E20               	movlw	32
  3774  0012BE  EC35  F013         	call	_Mcp2515WriteCanId
  3775                           
  3776                           ;mcp2515.c: 70: Mcp2515WriteCanId(0x24,filterCfg->ext,filterCfg->mask1);
  3777  0012C2  0100               	movlb	0	; () banked
  3778  0012C4  EE20 F020          	lfsr	2,32
  3779  0012C8  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3780  0012CA  26D9               	addwf	fsr2l,f,c
  3781  0012CC  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3782  0012CE  22DA               	addwfc	fsr2h,f,c
  3783  0012D0  50DF               	movf	indf2,w,c
  3784  0012D2  0100               	movlb	0	; () banked
  3785  0012D4  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3786  0012D6  0100               	movlb	0	; () banked
  3787  0012D8  EE20 F004          	lfsr	2,4
  3788  0012DC  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3789  0012DE  26D9               	addwf	fsr2l,f,c
  3790  0012E0  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3791  0012E2  22DA               	addwfc	fsr2h,f,c
  3792  0012E4  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3793  0012E8  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3794  0012EC  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3795  0012F0  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3796  0012F4  0E24               	movlw	36
  3797  0012F6  EC35  F013         	call	_Mcp2515WriteCanId
  3798                           
  3799                           ;mcp2515.c: 71: Mcp2515WriteCanId(0x00,filterCfg->ext,filterCfg->filter0);
  3800  0012FA  0100               	movlb	0	; () banked
  3801  0012FC  EE20 F020          	lfsr	2,32
  3802  001300  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3803  001302  26D9               	addwf	fsr2l,f,c
  3804  001304  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3805  001306  22DA               	addwfc	fsr2h,f,c
  3806  001308  50DF               	movf	indf2,w,c
  3807  00130A  0100               	movlb	0	; () banked
  3808  00130C  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3809  00130E  0100               	movlb	0	; () banked
  3810  001310  EE20 F008          	lfsr	2,8
  3811  001314  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3812  001316  26D9               	addwf	fsr2l,f,c
  3813  001318  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3814  00131A  22DA               	addwfc	fsr2h,f,c
  3815  00131C  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3816  001320  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3817  001324  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3818  001328  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3819  00132C  0E00               	movlw	0
  3820  00132E  EC35  F013         	call	_Mcp2515WriteCanId
  3821                           
  3822                           ;mcp2515.c: 72: Mcp2515WriteCanId(0x04,filterCfg->ext,filterCfg->filter1);
  3823  001332  0100               	movlb	0	; () banked
  3824  001334  EE20 F020          	lfsr	2,32
  3825  001338  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3826  00133A  26D9               	addwf	fsr2l,f,c
  3827  00133C  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3828  00133E  22DA               	addwfc	fsr2h,f,c
  3829  001340  50DF               	movf	indf2,w,c
  3830  001342  0100               	movlb	0	; () banked
  3831  001344  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3832  001346  0100               	movlb	0	; () banked
  3833  001348  EE20 F00C          	lfsr	2,12
  3834  00134C  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3835  00134E  26D9               	addwf	fsr2l,f,c
  3836  001350  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3837  001352  22DA               	addwfc	fsr2h,f,c
  3838  001354  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3839  001358  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3840  00135C  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3841  001360  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3842  001364  0E04               	movlw	4
  3843  001366  EC35  F013         	call	_Mcp2515WriteCanId
  3844                           
  3845                           ;mcp2515.c: 73: Mcp2515WriteCanId(0x08,filterCfg->ext,filterCfg->filter2);
  3846  00136A  0100               	movlb	0	; () banked
  3847  00136C  EE20 F020          	lfsr	2,32
  3848  001370  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3849  001372  26D9               	addwf	fsr2l,f,c
  3850  001374  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3851  001376  22DA               	addwfc	fsr2h,f,c
  3852  001378  50DF               	movf	indf2,w,c
  3853  00137A  0100               	movlb	0	; () banked
  3854  00137C  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3855  00137E  0100               	movlb	0	; () banked
  3856  001380  EE20 F010          	lfsr	2,16
  3857  001384  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3858  001386  26D9               	addwf	fsr2l,f,c
  3859  001388  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3860  00138A  22DA               	addwfc	fsr2h,f,c
  3861  00138C  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3862  001390  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3863  001394  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3864  001398  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3865  00139C  0E08               	movlw	8
  3866  00139E  EC35  F013         	call	_Mcp2515WriteCanId
  3867                           
  3868                           ;mcp2515.c: 74: Mcp2515WriteCanId(0x10,filterCfg->ext,filterCfg->filter3);
  3869  0013A2  0100               	movlb	0	; () banked
  3870  0013A4  EE20 F020          	lfsr	2,32
  3871  0013A8  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3872  0013AA  26D9               	addwf	fsr2l,f,c
  3873  0013AC  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3874  0013AE  22DA               	addwfc	fsr2h,f,c
  3875  0013B0  50DF               	movf	indf2,w,c
  3876  0013B2  0100               	movlb	0	; () banked
  3877  0013B4  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3878  0013B6  0100               	movlb	0	; () banked
  3879  0013B8  EE20 F014          	lfsr	2,20
  3880  0013BC  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3881  0013BE  26D9               	addwf	fsr2l,f,c
  3882  0013C0  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3883  0013C2  22DA               	addwfc	fsr2h,f,c
  3884  0013C4  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3885  0013C8  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3886  0013CC  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3887  0013D0  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3888  0013D4  0E10               	movlw	16
  3889  0013D6  EC35  F013         	call	_Mcp2515WriteCanId
  3890                           
  3891                           ;mcp2515.c: 75: Mcp2515WriteCanId(0x14,filterCfg->ext,filterCfg->filter4);
  3892  0013DA  0100               	movlb	0	; () banked
  3893  0013DC  EE20 F020          	lfsr	2,32
  3894  0013E0  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3895  0013E2  26D9               	addwf	fsr2l,f,c
  3896  0013E4  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3897  0013E6  22DA               	addwfc	fsr2h,f,c
  3898  0013E8  50DF               	movf	indf2,w,c
  3899  0013EA  0100               	movlb	0	; () banked
  3900  0013EC  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3901  0013EE  0100               	movlb	0	; () banked
  3902  0013F0  EE20 F018          	lfsr	2,24
  3903  0013F4  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3904  0013F6  26D9               	addwf	fsr2l,f,c
  3905  0013F8  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3906  0013FA  22DA               	addwfc	fsr2h,f,c
  3907  0013FC  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3908  001400  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3909  001404  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3910  001408  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3911  00140C  0E14               	movlw	20
  3912  00140E  EC35  F013         	call	_Mcp2515WriteCanId
  3913                           
  3914                           ;mcp2515.c: 76: Mcp2515WriteCanId(0x18,filterCfg->ext,filterCfg->filter5);
  3915  001412  0100               	movlb	0	; () banked
  3916  001414  EE20 F020          	lfsr	2,32
  3917  001418  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3918  00141A  26D9               	addwf	fsr2l,f,c
  3919  00141C  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3920  00141E  22DA               	addwfc	fsr2h,f,c
  3921  001420  50DF               	movf	indf2,w,c
  3922  001422  0100               	movlb	0	; () banked
  3923  001424  6F72               	movwf	Mcp2515WriteCanId@ext& (0+255),b
  3924  001426  0100               	movlb	0	; () banked
  3925  001428  EE20 F01C          	lfsr	2,28
  3926  00142C  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  3927  00142E  26D9               	addwf	fsr2l,f,c
  3928  001430  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  3929  001432  22DA               	addwfc	fsr2h,f,c
  3930  001434  CFDE F073          	movff	postinc2,Mcp2515WriteCanId@can_id
  3931  001438  CFDE F074          	movff	postinc2,Mcp2515WriteCanId@can_id+1
  3932  00143C  CFDE F075          	movff	postinc2,Mcp2515WriteCanId@can_id+2
  3933  001440  CFDE F076          	movff	postinc2,Mcp2515WriteCanId@can_id+3
  3934  001444  0E18               	movlw	24
  3935  001446  EC35  F013         	call	_Mcp2515WriteCanId
  3936                           
  3937                           ;mcp2515.c: 80: cmdWrite3[2] = 0;
  3938  00144A  0E00               	movlw	0
  3939  00144C  0100               	movlb	0	; () banked
  3940  00144E  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  3941                           
  3942                           ;mcp2515.c: 81: for (i = 0; i < 14; i++)
  3943  001450  0E00               	movlw	0
  3944  001452  0100               	movlb	0	; () banked
  3945  001454  6F94               	movwf	Mcp2515_Init@i& (0+255),b
  3946  001456                     l2796:
  3947                           
  3948                           ; BSR set to: 0
  3949  001456  0E0D               	movlw	13
  3950  001458  0100               	movlb	0	; () banked
  3951  00145A  6594               	cpfsgt	Mcp2515_Init@i& (0+255),b
  3952  00145C  D001               	goto	l2800
  3953  00145E  D045               	goto	l2814
  3954  001460                     l2800:
  3955                           
  3956                           ; BSR set to: 0
  3957                           ;mcp2515.c: 82: {
  3958                           ;mcp2515.c: 83: cmdWrite3[1] = 0x30 + i;
  3959  001460  0100               	movlb	0	; () banked
  3960  001462  5194               	movf	Mcp2515_Init@i& (0+255),w,b
  3961  001464  0F30               	addlw	48
  3962  001466  0100               	movlb	0	; () banked
  3963  001468  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  3964                           
  3965                           ; BSR set to: 0
  3966                           ;mcp2515.c: 84: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  3967  00146A  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  3968  00146C  0100               	movlb	0	; () banked
  3969  00146E  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3970  001470  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  3971  001472  0100               	movlb	0	; () banked
  3972  001474  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3973  001476  0E03               	movlw	3
  3974  001478  0100               	movlb	0	; () banked
  3975  00147A  6F6E               	movwf	Spi_Write@size& (0+255),b
  3976  00147C  0E00               	movlw	0
  3977  00147E  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  3978  001480  0E00               	movlw	0
  3979  001482  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  3980  001484  0E00               	movlw	0
  3981  001486  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  3982  001488  ECB9  F019         	call	_Spi_Write	;wreg free
  3983                           
  3984                           ;mcp2515.c: 85: cmdWrite3[1] = 0x40 + i;
  3985  00148C  0100               	movlb	0	; () banked
  3986  00148E  5194               	movf	Mcp2515_Init@i& (0+255),w,b
  3987  001490  0F40               	addlw	64
  3988  001492  0100               	movlb	0	; () banked
  3989  001494  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  3990                           
  3991                           ;mcp2515.c: 86: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  3992  001496  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  3993  001498  0100               	movlb	0	; () banked
  3994  00149A  6F6C               	movwf	Spi_Write@tx& (0+255),b
  3995  00149C  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  3996  00149E  0100               	movlb	0	; () banked
  3997  0014A0  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  3998  0014A2  0E03               	movlw	3
  3999  0014A4  0100               	movlb	0	; () banked
  4000  0014A6  6F6E               	movwf	Spi_Write@size& (0+255),b
  4001  0014A8  0E00               	movlw	0
  4002  0014AA  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  4003  0014AC  0E00               	movlw	0
  4004  0014AE  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  4005  0014B0  0E00               	movlw	0
  4006  0014B2  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  4007  0014B4  ECB9  F019         	call	_Spi_Write	;wreg free
  4008                           
  4009                           ;mcp2515.c: 87: cmdWrite3[1] = 0x50 + i;
  4010  0014B8  0100               	movlb	0	; () banked
  4011  0014BA  5194               	movf	Mcp2515_Init@i& (0+255),w,b
  4012  0014BC  0F50               	addlw	80
  4013  0014BE  0100               	movlb	0	; () banked
  4014  0014C0  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  4015                           
  4016                           ; BSR set to: 0
  4017                           ;mcp2515.c: 88: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  4018  0014C2  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  4019  0014C4  0100               	movlb	0	; () banked
  4020  0014C6  6F6C               	movwf	Spi_Write@tx& (0+255),b
  4021  0014C8  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  4022  0014CA  0100               	movlb	0	; () banked
  4023  0014CC  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  4024  0014CE  0E03               	movlw	3
  4025  0014D0  0100               	movlb	0	; () banked
  4026  0014D2  6F6E               	movwf	Spi_Write@size& (0+255),b
  4027  0014D4  0E00               	movlw	0
  4028  0014D6  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  4029  0014D8  0E00               	movlw	0
  4030  0014DA  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  4031  0014DC  0E00               	movlw	0
  4032  0014DE  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  4033  0014E0  ECB9  F019         	call	_Spi_Write	;wreg free
  4034  0014E4  0100               	movlb	0	; () banked
  4035  0014E6  2B94               	incf	Mcp2515_Init@i& (0+255),f,b
  4036  0014E8  D7B6               	goto	l2796
  4037  0014EA                     l2814:
  4038                           
  4039                           ; BSR set to: 0
  4040                           ;mcp2515.c: 89: }
  4041                           ;mcp2515.c: 93: cmdWrite3[2] = 0;
  4042  0014EA  0E00               	movlw	0
  4043  0014EC  0100               	movlb	0	; () banked
  4044  0014EE  6F9B               	movwf	(Mcp2515_Init@cmdWrite3+2)& (0+255),b
  4045                           
  4046                           ;mcp2515.c: 94: cmdWrite3[1] = 0x60;
  4047  0014F0  0E60               	movlw	96
  4048  0014F2  0100               	movlb	0	; () banked
  4049  0014F4  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  4050                           
  4051                           ; BSR set to: 0
  4052                           ;mcp2515.c: 95: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  4053  0014F6  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  4054  0014F8  0100               	movlb	0	; () banked
  4055  0014FA  6F6C               	movwf	Spi_Write@tx& (0+255),b
  4056  0014FC  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  4057  0014FE  0100               	movlb	0	; () banked
  4058  001500  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  4059  001502  0E03               	movlw	3
  4060  001504  0100               	movlb	0	; () banked
  4061  001506  6F6E               	movwf	Spi_Write@size& (0+255),b
  4062  001508  0E00               	movlw	0
  4063  00150A  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  4064  00150C  0E00               	movlw	0
  4065  00150E  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  4066  001510  0E00               	movlw	0
  4067  001512  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  4068  001514  ECB9  F019         	call	_Spi_Write	;wreg free
  4069                           
  4070                           ;mcp2515.c: 96: cmdWrite3[1] = 0x70;
  4071  001518  0E70               	movlw	112
  4072  00151A  0100               	movlb	0	; () banked
  4073  00151C  6F9A               	movwf	(Mcp2515_Init@cmdWrite3+1)& (0+255),b
  4074                           
  4075                           ;mcp2515.c: 97: Spi_Write(cmdWrite3,sizeof(cmdWrite3));
  4076  00151E  0E99               	movlw	low Mcp2515_Init@cmdWrite3
  4077  001520  0100               	movlb	0	; () banked
  4078  001522  6F6C               	movwf	Spi_Write@tx& (0+255),b
  4079  001524  0E00               	movlw	high Mcp2515_Init@cmdWrite3
  4080  001526  0100               	movlb	0	; () banked
  4081  001528  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  4082  00152A  0E03               	movlw	3
  4083  00152C  0100               	movlb	0	; () banked
  4084  00152E  6F6E               	movwf	Spi_Write@size& (0+255),b
  4085  001530  0E00               	movlw	0
  4086  001532  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  4087  001534  0E00               	movlw	0
  4088  001536  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  4089  001538  0E00               	movlw	0
  4090  00153A  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  4091  00153C  ECB9  F019         	call	_Spi_Write	;wreg free
  4092                           
  4093                           ;mcp2515.c: 101: cmdMask4[1] = 0x60;
  4094  001540  0E60               	movlw	96
  4095  001542  0100               	movlb	0	; () banked
  4096  001544  6F96               	movwf	(Mcp2515_Init@cmdMask4+1)& (0+255),b
  4097                           
  4098                           ; BSR set to: 0
  4099                           ;mcp2515.c: 102: cmdMask4[2] = 0x60 | (1<<2);
  4100  001546  0E64               	movlw	100
  4101  001548  0100               	movlb	0	; () banked
  4102  00154A  6F97               	movwf	(Mcp2515_Init@cmdMask4+2)& (0+255),b
  4103                           
  4104                           ; BSR set to: 0
  4105                           ;mcp2515.c: 103: if(filterCfg->ext == 0)
  4106  00154C  0100               	movlb	0	; () banked
  4107  00154E  EE20 F020          	lfsr	2,32
  4108  001552  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  4109  001554  26D9               	addwf	fsr2l,f,c
  4110  001556  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  4111  001558  22DA               	addwfc	fsr2h,f,c
  4112  00155A  50DF               	movf	indf2,w,c
  4113  00155C  A4D8               	btfss	status,2,c
  4114  00155E  D002               	goto	l2828
  4115                           
  4116                           ; BSR set to: 0
  4117                           ;mcp2515.c: 104: {
  4118                           ;mcp2515.c: 105: cmdMask4[3] = 0x20 | (1<<2);
  4119  001560  0E24               	movlw	36
  4120  001562  D001               	goto	L3
  4121  001564                     l2828:
  4122                           
  4123                           ; BSR set to: 0
  4124                           ;mcp2515.c: 107: else
  4125                           ;mcp2515.c: 108: {
  4126                           ;mcp2515.c: 109: cmdMask4[3] = 0x40 | (1<<2);
  4127  001564  0E44               	movlw	68
  4128  001566                     L3:
  4129  001566  0100               	movlb	0	; () banked
  4130  001568  6F98               	movwf	(Mcp2515_Init@cmdMask4+3)& (0+255),b
  4131                           
  4132                           ; BSR set to: 0
  4133                           ;mcp2515.c: 110: }
  4134                           ;mcp2515.c: 111: Spi_Write(cmdMask4,sizeof(cmdMask4));
  4135                           
  4136                           ; BSR set to: 0
  4137  00156A  0E95               	movlw	low Mcp2515_Init@cmdMask4
  4138  00156C  0100               	movlb	0	; () banked
  4139  00156E  6F6C               	movwf	Spi_Write@tx& (0+255),b
  4140  001570  0E00               	movlw	high Mcp2515_Init@cmdMask4
  4141  001572  0100               	movlb	0	; () banked
  4142  001574  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  4143  001576  0E04               	movlw	4
  4144  001578  0100               	movlb	0	; () banked
  4145  00157A  6F6E               	movwf	Spi_Write@size& (0+255),b
  4146  00157C  0E00               	movlw	0
  4147  00157E  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  4148  001580  0E00               	movlw	0
  4149  001582  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  4150  001584  0E00               	movlw	0
  4151  001586  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  4152  001588  ECB9  F019         	call	_Spi_Write	;wreg free
  4153                           
  4154                           ;mcp2515.c: 115: cmdMask4[1] = 0x70;
  4155  00158C  0E70               	movlw	112
  4156  00158E  0100               	movlb	0	; () banked
  4157  001590  6F96               	movwf	(Mcp2515_Init@cmdMask4+1)& (0+255),b
  4158                           
  4159                           ; BSR set to: 0
  4160                           ;mcp2515.c: 116: cmdMask4[2] = 0x60;
  4161  001592  0E60               	movlw	96
  4162  001594  0100               	movlb	0	; () banked
  4163  001596  6F97               	movwf	(Mcp2515_Init@cmdMask4+2)& (0+255),b
  4164                           
  4165                           ; BSR set to: 0
  4166                           ;mcp2515.c: 117: if(filterCfg->ext == 0)
  4167  001598  0100               	movlb	0	; () banked
  4168  00159A  EE20 F020          	lfsr	2,32
  4169  00159E  5185               	movf	Mcp2515_Init@filterCfg& (0+255),w,b
  4170  0015A0  26D9               	addwf	fsr2l,f,c
  4171  0015A2  5186               	movf	(Mcp2515_Init@filterCfg+1)& (0+255),w,b
  4172  0015A4  22DA               	addwfc	fsr2h,f,c
  4173  0015A6  50DF               	movf	indf2,w,c
  4174  0015A8  A4D8               	btfss	status,2,c
  4175  0015AA  D002               	goto	l2840
  4176                           
  4177                           ; BSR set to: 0
  4178                           ;mcp2515.c: 118: {
  4179                           ;mcp2515.c: 119: cmdMask4[3] = 0x20;
  4180  0015AC  0E20               	movlw	32
  4181  0015AE  D001               	goto	L4
  4182  0015B0                     l2840:
  4183                           
  4184                           ; BSR set to: 0
  4185                           ;mcp2515.c: 121: else
  4186                           ;mcp2515.c: 122: {
  4187                           ;mcp2515.c: 123: cmdMask4[3] = 0x40;
  4188  0015B0  0E40               	movlw	64
  4189  0015B2                     L4:
  4190  0015B2  0100               	movlb	0	; () banked
  4191  0015B4  6F98               	movwf	(Mcp2515_Init@cmdMask4+3)& (0+255),b
  4192                           
  4193                           ; BSR set to: 0
  4194                           ;mcp2515.c: 124: }
  4195                           ;mcp2515.c: 125: Spi_Write(cmdMask4,sizeof(cmdMask4));
  4196                           
  4197                           ; BSR set to: 0
  4198  0015B6  0E95               	movlw	low Mcp2515_Init@cmdMask4
  4199  0015B8  0100               	movlb	0	; () banked
  4200  0015BA  6F6C               	movwf	Spi_Write@tx& (0+255),b
  4201  0015BC  0E00               	movlw	high Mcp2515_Init@cmdMask4
  4202  0015BE  0100               	movlb	0	; () banked
  4203  0015C0  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  4204  0015C2  0E04               	movlw	4
  4205  0015C4  0100               	movlb	0	; () banked
  4206  0015C6  6F6E               	movwf	Spi_Write@size& (0+255),b
  4207  0015C8  0E00               	movlw	0
  4208  0015CA  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  4209  0015CC  0E00               	movlw	0
  4210  0015CE  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  4211  0015D0  0E00               	movlw	0
  4212  0015D2  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  4213  0015D4  ECB9  F019         	call	_Spi_Write	;wreg free
  4214                           
  4215                           ;mcp2515.c: 129: cmdMask4[0] = 0x05;
  4216  0015D8  0E05               	movlw	5
  4217  0015DA  0100               	movlb	0	; () banked
  4218  0015DC  6F95               	movwf	Mcp2515_Init@cmdMask4& (0+255),b
  4219                           
  4220                           ; BSR set to: 0
  4221                           ;mcp2515.c: 130: cmdMask4[1] = 0x2B;
  4222  0015DE  0E2B               	movlw	43
  4223  0015E0  0100               	movlb	0	; () banked
  4224  0015E2  6F96               	movwf	(Mcp2515_Init@cmdMask4+1)& (0+255),b
  4225                           
  4226                           ; BSR set to: 0
  4227                           ;mcp2515.c: 131: cmdMask4[2] = 0x1F;
  4228  0015E4  0E1F               	movlw	31
  4229  0015E6  0100               	movlb	0	; () banked
  4230  0015E8  6F97               	movwf	(Mcp2515_Init@cmdMask4+2)& (0+255),b
  4231                           
  4232                           ; BSR set to: 0
  4233                           ;mcp2515.c: 132: cmdMask4[3] = 0x1F;
  4234  0015EA  0E1F               	movlw	31
  4235  0015EC  0100               	movlb	0	; () banked
  4236  0015EE  6F98               	movwf	(Mcp2515_Init@cmdMask4+3)& (0+255),b
  4237                           
  4238                           ; BSR set to: 0
  4239                           ;mcp2515.c: 133: Spi_Write(cmdMask4,sizeof(cmdMask4));
  4240  0015F0  0E95               	movlw	low Mcp2515_Init@cmdMask4
  4241  0015F2  0100               	movlb	0	; () banked
  4242  0015F4  6F6C               	movwf	Spi_Write@tx& (0+255),b
  4243  0015F6  0E00               	movlw	high Mcp2515_Init@cmdMask4
  4244  0015F8  0100               	movlb	0	; () banked
  4245  0015FA  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  4246  0015FC  0E04               	movlw	4
  4247  0015FE  0100               	movlb	0	; () banked
  4248  001600  6F6E               	movwf	Spi_Write@size& (0+255),b
  4249  001602  0E00               	movlw	0
  4250  001604  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  4251  001606  0E00               	movlw	0
  4252  001608  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  4253  00160A  0E00               	movlw	0
  4254  00160C  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  4255  00160E  ECB9  F019         	call	_Spi_Write	;wreg free
  4256                           
  4257                           ;mcp2515.c: 137: cmdMask4[0] = 0x05;
  4258  001612  0E05               	movlw	5
  4259  001614  0100               	movlb	0	; () banked
  4260  001616  6F95               	movwf	Mcp2515_Init@cmdMask4& (0+255),b
  4261                           
  4262                           ;mcp2515.c: 138: cmdMask4[1] = 0x0F;
  4263  001618  0E0F               	movlw	15
  4264  00161A  0100               	movlb	0	; () banked
  4265  00161C  6F96               	movwf	(Mcp2515_Init@cmdMask4+1)& (0+255),b
  4266                           
  4267                           ;mcp2515.c: 139: cmdMask4[2] = 0xE0;
  4268  00161E  0EE0               	movlw	224
  4269  001620  0100               	movlb	0	; () banked
  4270  001622  6F97               	movwf	(Mcp2515_Init@cmdMask4+2)& (0+255),b
  4271                           
  4272                           ;mcp2515.c: 140: cmdMask4[3] = 0x00;
  4273  001624  0E00               	movlw	0
  4274  001626  0100               	movlb	0	; () banked
  4275  001628  6F98               	movwf	(Mcp2515_Init@cmdMask4+3)& (0+255),b
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;mcp2515.c: 141: Spi_Write(cmdMask4,sizeof(cmdMask4));
  4279  00162A  0E95               	movlw	low Mcp2515_Init@cmdMask4
  4280  00162C  0100               	movlb	0	; () banked
  4281  00162E  6F6C               	movwf	Spi_Write@tx& (0+255),b
  4282  001630  0E00               	movlw	high Mcp2515_Init@cmdMask4
  4283  001632  0100               	movlb	0	; () banked
  4284  001634  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  4285  001636  0E04               	movlw	4
  4286  001638  0100               	movlb	0	; () banked
  4287  00163A  6F6E               	movwf	Spi_Write@size& (0+255),b
  4288  00163C  0E00               	movlw	0
  4289  00163E  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  4290  001640  0E00               	movlw	0
  4291  001642  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  4292  001644  0E00               	movlw	0
  4293  001646  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  4294  001648  ECB9  F019         	call	_Spi_Write	;wreg free
  4295  00164C  0012               	return		;funcret
  4296  00164E                     __end_of_Mcp2515_Init:
  4297                           	opt stack 0
  4298                           tblptru	equ	0xFF8
  4299                           tblptrh	equ	0xFF7
  4300                           tblptrl	equ	0xFF6
  4301                           tablat	equ	0xFF5
  4302                           prodh	equ	0xFF4
  4303                           prodl	equ	0xFF3
  4304                           intcon	equ	0xFF2
  4305                           intcon2	equ	0xFF1
  4306                           intcon3	equ	0xFF0
  4307                           postinc0	equ	0xFEE
  4308                           wreg	equ	0xFE8
  4309                           indf1	equ	0xFE7
  4310                           postinc1	equ	0xFE6
  4311                           postdec1	equ	0xFE5
  4312                           fsr1h	equ	0xFE2
  4313                           fsr1l	equ	0xFE1
  4314                           indf2	equ	0xFDF
  4315                           postinc2	equ	0xFDE
  4316                           fsr2h	equ	0xFDA
  4317                           fsr2l	equ	0xFD9
  4318                           status	equ	0xFD8
  4319                           
  4320 ;; *************** function _Mcp2515_Reset *****************
  4321 ;; Defined at:
  4322 ;;		line 21 in file "mcp2515.c"
  4323 ;; Parameters:    Size  Location     Type
  4324 ;;		None
  4325 ;; Auto vars:     Size  Location     Type
  4326 ;;  i               4   19[BANK0 ] unsigned long 
  4327 ;;  cmd             1   18[BANK0 ] unsigned char 
  4328 ;; Return value:  Size  Location     Type
  4329 ;;                  1    wreg      void 
  4330 ;; Registers used:
  4331 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4332 ;; Tracked objects:
  4333 ;;		On entry : 0/0
  4334 ;;		On exit  : 0/0
  4335 ;;		Unchanged: 0/0
  4336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4338 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4340 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4341 ;;Total ram usage:        5 bytes
  4342 ;; Hardware stack levels used:    1
  4343 ;; Hardware stack levels required when called:   10
  4344 ;; This function calls:
  4345 ;;		_Spi_Write
  4346 ;; This function is called by:
  4347 ;;		_Mcp2515_Init
  4348 ;; This function uses a non-reentrant model
  4349 ;;
  4350                           
  4351                           	psect	text12
  4352  002EDE                     __ptext12:
  4353                           	opt stack 0
  4354  002EDE                     _Mcp2515_Reset:
  4355                           	opt stack 17
  4356                           
  4357                           ;mcp2515.c: 23: uint32_t i;
  4358                           ;mcp2515.c: 24: uint8_t cmd = 0xC0;
  4359                           
  4360                           ;incstack = 0
  4361  002EDE  0EC0               	movlw	192
  4362  002EE0  0100               	movlb	0	; () banked
  4363  002EE2  6F72               	movwf	Mcp2515_Reset@cmd& (0+255),b
  4364                           
  4365                           ; BSR set to: 0
  4366                           ;mcp2515.c: 26: Spi_Write(&cmd,sizeof(cmd));
  4367  002EE4  0E72               	movlw	low Mcp2515_Reset@cmd
  4368  002EE6  0100               	movlb	0	; () banked
  4369  002EE8  6F6C               	movwf	Spi_Write@tx& (0+255),b
  4370  002EEA  0E00               	movlw	high Mcp2515_Reset@cmd
  4371  002EEC  0100               	movlb	0	; () banked
  4372  002EEE  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  4373  002EF0  0E01               	movlw	1
  4374  002EF2  0100               	movlb	0	; () banked
  4375  002EF4  6F6E               	movwf	Spi_Write@size& (0+255),b
  4376  002EF6  0E00               	movlw	0
  4377  002EF8  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  4378  002EFA  0E00               	movlw	0
  4379  002EFC  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  4380  002EFE  0E00               	movlw	0
  4381  002F00  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  4382  002F02  ECB9  F019         	call	_Spi_Write	;wreg free
  4383                           
  4384                           ;mcp2515.c: 27: for(i=0;i<10000;i++){}
  4385  002F06  0E00               	movlw	0
  4386  002F08  0100               	movlb	0	; () banked
  4387  002F0A  6F73               	movwf	Mcp2515_Reset@i& (0+255),b
  4388  002F0C  0E00               	movlw	0
  4389  002F0E  6F74               	movwf	(Mcp2515_Reset@i+1)& (0+255),b
  4390  002F10  0E00               	movlw	0
  4391  002F12  6F75               	movwf	(Mcp2515_Reset@i+2)& (0+255),b
  4392  002F14  0E00               	movlw	0
  4393  002F16  6F76               	movwf	(Mcp2515_Reset@i+3)& (0+255),b
  4394  002F18                     l2538:
  4395                           
  4396                           ; BSR set to: 0
  4397  002F18  0100               	movlb	0	; () banked
  4398  002F1A  5176               	movf	(Mcp2515_Reset@i+3)& (0+255),w,b
  4399  002F1C  0100               	movlb	0	; () banked
  4400  002F1E  1175               	iorwf	(Mcp2515_Reset@i+2)& (0+255),w,b
  4401  002F20  E110               	bnz	l304
  4402  002F22  0E10               	movlw	16
  4403  002F24  0100               	movlb	0	; () banked
  4404  002F26  5D73               	subwf	Mcp2515_Reset@i& (0+255),w,b
  4405  002F28  0E27               	movlw	39
  4406  002F2A  0100               	movlb	0	; () banked
  4407  002F2C  5974               	subwfb	(Mcp2515_Reset@i+1)& (0+255),w,b
  4408  002F2E  B0D8               	btfsc	status,0,c
  4409  002F30  0012               	return	
  4410                           
  4411                           ; BSR set to: 0
  4412                           
  4413                           ; BSR set to: 0
  4414                           
  4415                           ; BSR set to: 0
  4416  002F32  0E01               	movlw	1
  4417  002F34  0100               	movlb	0	; () banked
  4418  002F36  2773               	addwf	Mcp2515_Reset@i& (0+255),f,b
  4419  002F38  0E00               	movlw	0
  4420  002F3A  2374               	addwfc	(Mcp2515_Reset@i+1)& (0+255),f,b
  4421  002F3C  2375               	addwfc	(Mcp2515_Reset@i+2)& (0+255),f,b
  4422  002F3E  2376               	addwfc	(Mcp2515_Reset@i+3)& (0+255),f,b
  4423  002F40  D7EB               	goto	l2538
  4424  002F42                     l304:
  4425                           
  4426                           ; BSR set to: 0
  4427  002F42  0012               	return		;funcret
  4428  002F44                     __end_of_Mcp2515_Reset:
  4429                           	opt stack 0
  4430                           tblptru	equ	0xFF8
  4431                           tblptrh	equ	0xFF7
  4432                           tblptrl	equ	0xFF6
  4433                           tablat	equ	0xFF5
  4434                           prodh	equ	0xFF4
  4435                           prodl	equ	0xFF3
  4436                           intcon	equ	0xFF2
  4437                           intcon2	equ	0xFF1
  4438                           intcon3	equ	0xFF0
  4439                           postinc0	equ	0xFEE
  4440                           wreg	equ	0xFE8
  4441                           indf1	equ	0xFE7
  4442                           postinc1	equ	0xFE6
  4443                           postdec1	equ	0xFE5
  4444                           fsr1h	equ	0xFE2
  4445                           fsr1l	equ	0xFE1
  4446                           indf2	equ	0xFDF
  4447                           postinc2	equ	0xFDE
  4448                           fsr2h	equ	0xFDA
  4449                           fsr2l	equ	0xFD9
  4450                           status	equ	0xFD8
  4451                           
  4452 ;; *************** function _Mcp2515WriteCanId *****************
  4453 ;; Defined at:
  4454 ;;		line 233 in file "mcp2515.c"
  4455 ;; Parameters:    Size  Location     Type
  4456 ;;  mcp_addr        1    wreg     unsigned char 
  4457 ;;  ext             1   18[BANK0 ] unsigned char 
  4458 ;;  can_id          4   19[BANK0 ] unsigned long 
  4459 ;; Auto vars:     Size  Location     Type
  4460 ;;  mcp_addr        1   26[BANK0 ] unsigned char 
  4461 ;;  buf             6   27[BANK0 ] unsigned char [6]
  4462 ;;  canid           2   33[BANK0 ] unsigned int 
  4463 ;; Return value:  Size  Location     Type
  4464 ;;                  1    wreg      void 
  4465 ;; Registers used:
  4466 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4467 ;; Tracked objects:
  4468 ;;		On entry : 0/0
  4469 ;;		On exit  : 0/0
  4470 ;;		Unchanged: 0/0
  4471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4472 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4473 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4474 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4475 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4476 ;;Total ram usage:       17 bytes
  4477 ;; Hardware stack levels used:    1
  4478 ;; Hardware stack levels required when called:   10
  4479 ;; This function calls:
  4480 ;;		_Spi_Write
  4481 ;; This function is called by:
  4482 ;;		_Mcp2515_Init
  4483 ;; This function uses a non-reentrant model
  4484 ;;
  4485                           
  4486                           	psect	text13
  4487  00266A                     __ptext13:
  4488                           	opt stack 0
  4489  00266A                     _Mcp2515WriteCanId:
  4490                           	opt stack 17
  4491                           
  4492                           ; BSR set to: 0
  4493                           ;incstack = 0
  4494                           ;Mcp2515WriteCanId@mcp_addr stored from wreg
  4495  00266A  0100               	movlb	0	; () banked
  4496  00266C  6F7A               	movwf	Mcp2515WriteCanId@mcp_addr& (0+255),b
  4497                           
  4498                           ;mcp2515.c: 235: uint16_t canid;
  4499                           ;mcp2515.c: 236: uint8_t buf[6];
  4500                           ;mcp2515.c: 238: canid = (uint16_t)(can_id & 0x0FFFF);
  4501  00266E  C073  F081         	movff	Mcp2515WriteCanId@can_id,Mcp2515WriteCanId@canid
  4502  002672  C074  F082         	movff	Mcp2515WriteCanId@can_id+1,Mcp2515WriteCanId@canid+1
  4503                           
  4504                           ;mcp2515.c: 240: buf[0] = 0x02;
  4505  002676  0E02               	movlw	2
  4506  002678  0100               	movlb	0	; () banked
  4507  00267A  6F7B               	movwf	Mcp2515WriteCanId@buf& (0+255),b
  4508                           
  4509                           ; BSR set to: 0
  4510                           ;mcp2515.c: 241: buf[1] = mcp_addr;
  4511  00267C  C07A  F07C         	movff	Mcp2515WriteCanId@mcp_addr,Mcp2515WriteCanId@buf+1
  4512                           
  4513                           ; BSR set to: 0
  4514                           ;mcp2515.c: 243: if ( ext == 1)
  4515  002680  0100               	movlb	0	; () banked
  4516  002682  0572               	decf	Mcp2515WriteCanId@ext& (0+255),w,b
  4517  002684  A4D8               	btfss	status,2,c
  4518  002686  D034               	goto	l2566
  4519                           
  4520                           ; BSR set to: 0
  4521                           ;mcp2515.c: 244: {
  4522                           ;mcp2515.c: 245: buf[3+2] = (uint8_t) (canid & 0xFF);
  4523  002688  C081  F080         	movff	Mcp2515WriteCanId@canid,Mcp2515WriteCanId@buf+5
  4524                           
  4525                           ; BSR set to: 0
  4526                           ;mcp2515.c: 246: buf[2+2] = (uint8_t) (canid >> 8);
  4527  00268C  0100               	movlb	0	; () banked
  4528  00268E  5182               	movf	(Mcp2515WriteCanId@canid+1)& (0+255),w,b
  4529  002690  0100               	movlb	0	; () banked
  4530  002692  6F7F               	movwf	(Mcp2515WriteCanId@buf+4)& (0+255),b
  4531                           
  4532                           ; BSR set to: 0
  4533                           ;mcp2515.c: 247: canid = (uint16_t)( can_id / 0x10000L );
  4534  002694  C075  F081         	movff	Mcp2515WriteCanId@can_id+2,Mcp2515WriteCanId@canid
  4535  002698  C076  F082         	movff	Mcp2515WriteCanId@can_id+3,Mcp2515WriteCanId@canid+1
  4536                           
  4537                           ; BSR set to: 0
  4538                           ;mcp2515.c: 248: buf[1+2] = (uint8_t) (canid & 0x03);
  4539  00269C  0100               	movlb	0	; () banked
  4540  00269E  5181               	movf	Mcp2515WriteCanId@canid& (0+255),w,b
  4541  0026A0  0B03               	andlw	3
  4542  0026A2  0100               	movlb	0	; () banked
  4543  0026A4  6F7E               	movwf	(Mcp2515WriteCanId@buf+3)& (0+255),b
  4544                           
  4545                           ; BSR set to: 0
  4546                           ;mcp2515.c: 249: buf[1+2] += (uint8_t) ((canid & 0x1C )*8);
  4547  0026A6  C081  F077         	movff	Mcp2515WriteCanId@canid,??_Mcp2515WriteCanId
  4548  0026AA  0E1C               	movlw	28
  4549  0026AC  0100               	movlb	0	; () banked
  4550  0026AE  1777               	andwf	??_Mcp2515WriteCanId& (0+255),f,b
  4551  0026B0  0100               	movlb	0	; () banked
  4552  0026B2  90D8               	bcf	status,0,c
  4553  0026B4  3777               	rlcf	??_Mcp2515WriteCanId& (0+255),f,b
  4554  0026B6  0100               	movlb	0	; () banked
  4555  0026B8  90D8               	bcf	status,0,c
  4556  0026BA  3777               	rlcf	??_Mcp2515WriteCanId& (0+255),f,b
  4557  0026BC  0100               	movlb	0	; () banked
  4558  0026BE  90D8               	bcf	status,0,c
  4559  0026C0  3577               	rlcf	??_Mcp2515WriteCanId& (0+255),w,b
  4560  0026C2  0100               	movlb	0	; () banked
  4561  0026C4  277E               	addwf	(Mcp2515WriteCanId@buf+3)& (0+255),f,b
  4562                           
  4563                           ; BSR set to: 0
  4564                           ;mcp2515.c: 250: buf[1+2] |= 0x08;
  4565  0026C6  0100               	movlb	0	; () banked
  4566  0026C8  877E               	bsf	(Mcp2515WriteCanId@buf+3)& (0+255),3,b
  4567                           
  4568                           ; BSR set to: 0
  4569                           ;mcp2515.c: 251: buf[0+2] = (uint8_t) (canid / 32 );
  4570  0026CA  C081  F077         	movff	Mcp2515WriteCanId@canid,??_Mcp2515WriteCanId
  4571  0026CE  C082  F078         	movff	Mcp2515WriteCanId@canid+1,??_Mcp2515WriteCanId+1
  4572  0026D2  0E05               	movlw	5
  4573  0026D4  0100               	movlb	0	; () banked
  4574  0026D6  6F79               	movwf	(??_Mcp2515WriteCanId+2)& (0+255),b
  4575  0026D8                     u1545:
  4576  0026D8  0100               	movlb	0	; () banked
  4577  0026DA  90D8               	bcf	status,0,c
  4578  0026DC  3378               	rrcf	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  4579  0026DE  3377               	rrcf	??_Mcp2515WriteCanId& (0+255),f,b
  4580  0026E0  0100               	movlb	0	; () banked
  4581  0026E2  2F79               	decfsz	(??_Mcp2515WriteCanId+2)& (0+255),f,b
  4582  0026E4  D7F9               	goto	u1545
  4583  0026E6  0100               	movlb	0	; () banked
  4584  0026E8  5177               	movf	??_Mcp2515WriteCanId& (0+255),w,b
  4585  0026EA  0100               	movlb	0	; () banked
  4586  0026EC  6F7D               	movwf	(Mcp2515WriteCanId@buf+2)& (0+255),b
  4587                           
  4588                           ;mcp2515.c: 252: }
  4589  0026EE  D02C               	goto	l2572
  4590  0026F0                     l2566:
  4591                           
  4592                           ; BSR set to: 0
  4593                           ;mcp2515.c: 254: else
  4594                           ;mcp2515.c: 255: {
  4595                           ;mcp2515.c: 256: buf[0+2] = (uint8_t) (canid >> 3);
  4596  0026F0  C081  F077         	movff	Mcp2515WriteCanId@canid,??_Mcp2515WriteCanId
  4597  0026F4  C082  F078         	movff	Mcp2515WriteCanId@canid+1,??_Mcp2515WriteCanId+1
  4598  0026F8  0100               	movlb	0	; () banked
  4599  0026FA  90D8               	bcf	status,0,c
  4600  0026FC  3378               	rrcf	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  4601  0026FE  3377               	rrcf	??_Mcp2515WriteCanId& (0+255),f,b
  4602  002700  0100               	movlb	0	; () banked
  4603  002702  90D8               	bcf	status,0,c
  4604  002704  3378               	rrcf	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  4605  002706  3377               	rrcf	??_Mcp2515WriteCanId& (0+255),f,b
  4606  002708  0100               	movlb	0	; () banked
  4607  00270A  90D8               	bcf	status,0,c
  4608  00270C  3378               	rrcf	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  4609  00270E  3377               	rrcf	??_Mcp2515WriteCanId& (0+255),f,b
  4610  002710  0100               	movlb	0	; () banked
  4611  002712  5177               	movf	??_Mcp2515WriteCanId& (0+255),w,b
  4612  002714  0100               	movlb	0	; () banked
  4613  002716  6F7D               	movwf	(Mcp2515WriteCanId@buf+2)& (0+255),b
  4614                           
  4615                           ;mcp2515.c: 257: buf[1+2] = (uint8_t) ((canid & 0x07 )*32);
  4616  002718  C081  F077         	movff	Mcp2515WriteCanId@canid,??_Mcp2515WriteCanId
  4617  00271C  0E07               	movlw	7
  4618  00271E  0100               	movlb	0	; () banked
  4619  002720  1777               	andwf	??_Mcp2515WriteCanId& (0+255),f,b
  4620  002722  0E05               	movlw	5
  4621  002724  0100               	movlb	0	; () banked
  4622  002726  6F78               	movwf	(??_Mcp2515WriteCanId+1)& (0+255),b
  4623  002728                     u1555:
  4624  002728  0100               	movlb	0	; () banked
  4625  00272A  90D8               	bcf	status,0,c
  4626  00272C  3777               	rlcf	??_Mcp2515WriteCanId& (0+255),f,b
  4627  00272E  0100               	movlb	0	; () banked
  4628  002730  2F78               	decfsz	(??_Mcp2515WriteCanId+1)& (0+255),f,b
  4629  002732  D7FA               	goto	u1555
  4630  002734  0100               	movlb	0	; () banked
  4631  002736  5177               	movf	??_Mcp2515WriteCanId& (0+255),w,b
  4632  002738  0100               	movlb	0	; () banked
  4633  00273A  6F7E               	movwf	(Mcp2515WriteCanId@buf+3)& (0+255),b
  4634                           
  4635                           ; BSR set to: 0
  4636                           ;mcp2515.c: 258: buf[3+2] = 0;
  4637  00273C  0E00               	movlw	0
  4638  00273E  0100               	movlb	0	; () banked
  4639  002740  6F80               	movwf	(Mcp2515WriteCanId@buf+5)& (0+255),b
  4640                           
  4641                           ; BSR set to: 0
  4642                           ;mcp2515.c: 259: buf[2+2] = 0;
  4643  002742  0E00               	movlw	0
  4644  002744  0100               	movlb	0	; () banked
  4645  002746  6F7F               	movwf	(Mcp2515WriteCanId@buf+4)& (0+255),b
  4646  002748                     l2572:
  4647                           
  4648                           ; BSR set to: 0
  4649                           ;mcp2515.c: 260: }
  4650                           ;mcp2515.c: 261: Spi_Write(buf,6);
  4651  002748  0E7B               	movlw	low Mcp2515WriteCanId@buf
  4652  00274A  0100               	movlb	0	; () banked
  4653  00274C  6F6C               	movwf	Spi_Write@tx& (0+255),b
  4654  00274E  0E00               	movlw	high Mcp2515WriteCanId@buf
  4655  002750  0100               	movlb	0	; () banked
  4656  002752  6F6D               	movwf	(Spi_Write@tx+1)& (0+255),b
  4657  002754  0E06               	movlw	6
  4658  002756  0100               	movlb	0	; () banked
  4659  002758  6F6E               	movwf	Spi_Write@size& (0+255),b
  4660  00275A  0E00               	movlw	0
  4661  00275C  6F6F               	movwf	(Spi_Write@size+1)& (0+255),b
  4662  00275E  0E00               	movlw	0
  4663  002760  6F70               	movwf	(Spi_Write@size+2)& (0+255),b
  4664  002762  0E00               	movlw	0
  4665  002764  6F71               	movwf	(Spi_Write@size+3)& (0+255),b
  4666  002766  ECB9  F019         	call	_Spi_Write	;wreg free
  4667  00276A  0012               	return		;funcret
  4668  00276C                     __end_of_Mcp2515WriteCanId:
  4669                           	opt stack 0
  4670                           tblptru	equ	0xFF8
  4671                           tblptrh	equ	0xFF7
  4672                           tblptrl	equ	0xFF6
  4673                           tablat	equ	0xFF5
  4674                           prodh	equ	0xFF4
  4675                           prodl	equ	0xFF3
  4676                           intcon	equ	0xFF2
  4677                           intcon2	equ	0xFF1
  4678                           intcon3	equ	0xFF0
  4679                           postinc0	equ	0xFEE
  4680                           wreg	equ	0xFE8
  4681                           indf1	equ	0xFE7
  4682                           postinc1	equ	0xFE6
  4683                           postdec1	equ	0xFE5
  4684                           fsr1h	equ	0xFE2
  4685                           fsr1l	equ	0xFE1
  4686                           indf2	equ	0xFDF
  4687                           postinc2	equ	0xFDE
  4688                           fsr2h	equ	0xFDA
  4689                           fsr2l	equ	0xFD9
  4690                           status	equ	0xFD8
  4691                           
  4692 ;; *************** function _Spi_Write *****************
  4693 ;; Defined at:
  4694 ;;		line 332 in file "can.c"
  4695 ;; Parameters:    Size  Location     Type
  4696 ;;  tx              2   12[BANK0 ] PTR unsigned char 
  4697 ;;		 -> Mcp2515WriteCanMsg@buf(10), Mcp2515WriteCanId@buf(6), Mcp2515Sleep@cmdMask4(3), Mcp2515_Init@cmdWrite3(3), 
  4698 ;;		 -> Mcp2515_Init@cmdMask4(4), Mcp2515_Reset@cmd(1), Can_SendMessage@buf(4), Can_ReadMessage@buf(4), 
  4699 ;;  size            4   14[BANK0 ] unsigned long 
  4700 ;; Auto vars:     Size  Location     Type
  4701 ;;		None
  4702 ;; Return value:  Size  Location     Type
  4703 ;;                  1    wreg      void 
  4704 ;; Registers used:
  4705 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4706 ;; Tracked objects:
  4707 ;;		On entry : 0/0
  4708 ;;		On exit  : 0/0
  4709 ;;		Unchanged: 0/0
  4710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4711 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4714 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4715 ;;Total ram usage:        6 bytes
  4716 ;; Hardware stack levels used:    1
  4717 ;; Hardware stack levels required when called:    9
  4718 ;; This function calls:
  4719 ;;		_SPIRW
  4720 ;; This function is called by:
  4721 ;;		_Mcp2515_Reset
  4722 ;;		_Mcp2515_Init
  4723 ;;		_Mcp2515WriteCanId
  4724 ;;		_Mcp2515Sleep
  4725 ;; This function uses a non-reentrant model
  4726 ;;
  4727                           
  4728                           	psect	text14
  4729  003372                     __ptext14:
  4730                           	opt stack 0
  4731  003372                     _Spi_Write:
  4732                           	opt stack 18
  4733                           
  4734                           ;can.c: 334: SPIRW(tx, 0, size);
  4735                           
  4736                           ;incstack = 0
  4737  003372  C06C  F060         	movff	Spi_Write@tx,SPIRW@tx
  4738  003376  C06D  F061         	movff	Spi_Write@tx+1,SPIRW@tx+1
  4739  00337A  0E00               	movlw	0
  4740  00337C  0100               	movlb	0	; () banked
  4741  00337E  6F62               	movwf	SPIRW@rx& (0+255),b
  4742  003380  0E00               	movlw	0
  4743  003382  0100               	movlb	0	; () banked
  4744  003384  6F63               	movwf	(SPIRW@rx+1)& (0+255),b
  4745  003386  C06E  F064         	movff	Spi_Write@size,SPIRW@size
  4746  00338A  C06F  F065         	movff	Spi_Write@size+1,SPIRW@size+1
  4747  00338E  C070  F066         	movff	Spi_Write@size+2,SPIRW@size+2
  4748  003392  C071  F067         	movff	Spi_Write@size+3,SPIRW@size+3
  4749  003396  EC74  F015         	call	_SPIRW	;wreg free
  4750  00339A  0012               	return		;funcret
  4751  00339C                     __end_of_Spi_Write:
  4752                           	opt stack 0
  4753                           tblptru	equ	0xFF8
  4754                           tblptrh	equ	0xFF7
  4755                           tblptrl	equ	0xFF6
  4756                           tablat	equ	0xFF5
  4757                           prodh	equ	0xFF4
  4758                           prodl	equ	0xFF3
  4759                           intcon	equ	0xFF2
  4760                           intcon2	equ	0xFF1
  4761                           intcon3	equ	0xFF0
  4762                           postinc0	equ	0xFEE
  4763                           wreg	equ	0xFE8
  4764                           indf1	equ	0xFE7
  4765                           postinc1	equ	0xFE6
  4766                           postdec1	equ	0xFE5
  4767                           fsr1h	equ	0xFE2
  4768                           fsr1l	equ	0xFE1
  4769                           indf2	equ	0xFDF
  4770                           postinc2	equ	0xFDE
  4771                           fsr2h	equ	0xFDA
  4772                           fsr2l	equ	0xFD9
  4773                           status	equ	0xFD8
  4774                           
  4775 ;; *************** function _SPIRW *****************
  4776 ;; Defined at:
  4777 ;;		line 293 in file "can.c"
  4778 ;; Parameters:    Size  Location     Type
  4779 ;;  tx              2    0[BANK0 ] PTR const unsigned char 
  4780 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515WriteCanMsg@buf(10), Mcp2515WriteCanId@buf(6), Mcp2515ReadCanMsg@cmd(10),
      + 
  4781 ;;		 -> Mcp2515ReadCanId@msg(6), Mcp2515Sleep@cmdMask4(3), Mcp2515_Init@cmdWrite3(3), Mcp2515_Init@cmdMask4(4), 
  4782 ;;		 -> Mcp2515_Reset@cmd(1), Can_SendMessage@buf(4), Can_ReadMessage@buf(4), Can_GetStatus@msg4(4), 
  4783 ;;		 -> Can_GetStatus@msg(3), 
  4784 ;;  rx              2    2[BANK0 ] PTR unsigned char 
  4785 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515ReadCanMsg@cmd(10), Mcp2515ReadCanId@msg(6), Can_ReadMessage@buf(4), 
  4786 ;;		 -> Can_GetStatus@msg4(4), Can_GetStatus@msg(3), NULL(0), 
  4787 ;;  size            4    4[BANK0 ] unsigned long 
  4788 ;; Auto vars:     Size  Location     Type
  4789 ;;  i               4    8[BANK0 ] unsigned long 
  4790 ;; Return value:  Size  Location     Type
  4791 ;;                  1    wreg      void 
  4792 ;; Registers used:
  4793 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4794 ;; Tracked objects:
  4795 ;;		On entry : 0/0
  4796 ;;		On exit  : 0/0
  4797 ;;		Unchanged: 0/0
  4798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4799 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4800 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4802 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4803 ;;Total ram usage:       12 bytes
  4804 ;; Hardware stack levels used:    1
  4805 ;; Hardware stack levels required when called:    8
  4806 ;; This function calls:
  4807 ;;		Nothing
  4808 ;; This function is called by:
  4809 ;;		_Spi_Write
  4810 ;; This function uses a non-reentrant model
  4811 ;;
  4812                           
  4813                           	psect	text15
  4814  002AE8                     __ptext15:
  4815                           	opt stack 0
  4816  002AE8                     _SPIRW:
  4817                           	opt stack 18
  4818                           
  4819                           ;can.c: 295: uint32_t i;
  4820                           ;can.c: 297: SSPCON1 = 0b00111010;
  4821                           
  4822                           ;incstack = 0
  4823  002AE8  0E3A               	movlw	58
  4824  002AEA  6EC6               	movwf	4038,c	;volatile
  4825                           
  4826                           ;can.c: 299: LATD1 = 0;
  4827  002AEC  928C               	bcf	3980,1,c	;volatile
  4828                           
  4829                           ;can.c: 300: for(i=0;i<size;i++)
  4830  002AEE  0E00               	movlw	0
  4831  002AF0  0100               	movlb	0	; () banked
  4832  002AF2  6F68               	movwf	SPIRW@i& (0+255),b
  4833  002AF4  0E00               	movlw	0
  4834  002AF6  6F69               	movwf	(SPIRW@i+1)& (0+255),b
  4835  002AF8  0E00               	movlw	0
  4836  002AFA  6F6A               	movwf	(SPIRW@i+2)& (0+255),b
  4837  002AFC  0E00               	movlw	0
  4838  002AFE  6F6B               	movwf	(SPIRW@i+3)& (0+255),b
  4839  002B00  D028               	goto	l2352
  4840  002B02                     l2344:
  4841                           
  4842                           ; BSR set to: 0
  4843                           ;can.c: 301: {
  4844                           ;can.c: 302: SSPBUF = tx[i];
  4845  002B02  0100               	movlb	0	; () banked
  4846  002B04  5168               	movf	SPIRW@i& (0+255),w,b
  4847  002B06  0100               	movlb	0	; () banked
  4848  002B08  2560               	addwf	SPIRW@tx& (0+255),w,b
  4849  002B0A  6ED9               	movwf	fsr2l,c
  4850  002B0C  0100               	movlb	0	; () banked
  4851  002B0E  5169               	movf	(SPIRW@i+1)& (0+255),w,b
  4852  002B10  0100               	movlb	0	; () banked
  4853  002B12  2161               	addwfc	(SPIRW@tx+1)& (0+255),w,b
  4854  002B14  6EDA               	movwf	fsr2h,c
  4855  002B16  50DF               	movf	indf2,w,c
  4856  002B18  6EC9               	movwf	4041,c	;volatile
  4857  002B1A                     l226:
  4858  002B1A  A69E               	btfss	3998,3,c	;volatile
  4859  002B1C  D7FE               	goto	l226
  4860                           
  4861                           ;can.c: 304: SSP1IF = 0;
  4862  002B1E  969E               	bcf	3998,3,c	;volatile
  4863                           
  4864                           ;can.c: 305: if(rx != 0)
  4865  002B20  0100               	movlb	0	; () banked
  4866  002B22  5162               	movf	SPIRW@rx& (0+255),w,b
  4867  002B24  0100               	movlb	0	; () banked
  4868  002B26  1163               	iorwf	(SPIRW@rx+1)& (0+255),w,b
  4869  002B28  B4D8               	btfsc	status,2,c
  4870  002B2A  D00C               	goto	l2350
  4871                           
  4872                           ; BSR set to: 0
  4873                           ;can.c: 306: rx[i] = SSPBUF;
  4874  002B2C  0100               	movlb	0	; () banked
  4875  002B2E  5168               	movf	SPIRW@i& (0+255),w,b
  4876  002B30  0100               	movlb	0	; () banked
  4877  002B32  2562               	addwf	SPIRW@rx& (0+255),w,b
  4878  002B34  6ED9               	movwf	fsr2l,c
  4879  002B36  0100               	movlb	0	; () banked
  4880  002B38  5169               	movf	(SPIRW@i+1)& (0+255),w,b
  4881  002B3A  0100               	movlb	0	; () banked
  4882  002B3C  2163               	addwfc	(SPIRW@rx+1)& (0+255),w,b
  4883  002B3E  6EDA               	movwf	fsr2h,c
  4884  002B40  CFC9 FFDF          	movff	4041,indf2	;volatile
  4885  002B44                     l2350:
  4886                           
  4887                           ; BSR set to: 0
  4888  002B44  0E01               	movlw	1
  4889  002B46  0100               	movlb	0	; () banked
  4890  002B48  2768               	addwf	SPIRW@i& (0+255),f,b
  4891  002B4A  0E00               	movlw	0
  4892  002B4C  2369               	addwfc	(SPIRW@i+1)& (0+255),f,b
  4893  002B4E  236A               	addwfc	(SPIRW@i+2)& (0+255),f,b
  4894  002B50  236B               	addwfc	(SPIRW@i+3)& (0+255),f,b
  4895  002B52                     l2352:
  4896                           
  4897                           ; BSR set to: 0
  4898  002B52  0100               	movlb	0	; () banked
  4899  002B54  5164               	movf	SPIRW@size& (0+255),w,b
  4900  002B56  0100               	movlb	0	; () banked
  4901  002B58  5D68               	subwf	SPIRW@i& (0+255),w,b
  4902  002B5A  0100               	movlb	0	; () banked
  4903  002B5C  5165               	movf	(SPIRW@size+1)& (0+255),w,b
  4904  002B5E  0100               	movlb	0	; () banked
  4905  002B60  5969               	subwfb	(SPIRW@i+1)& (0+255),w,b
  4906  002B62  0100               	movlb	0	; () banked
  4907  002B64  5166               	movf	(SPIRW@size+2)& (0+255),w,b
  4908  002B66  0100               	movlb	0	; () banked
  4909  002B68  596A               	subwfb	(SPIRW@i+2)& (0+255),w,b
  4910  002B6A  0100               	movlb	0	; () banked
  4911  002B6C  5167               	movf	(SPIRW@size+3)& (0+255),w,b
  4912  002B6E  0100               	movlb	0	; () banked
  4913  002B70  596B               	subwfb	(SPIRW@i+3)& (0+255),w,b
  4914  002B72  A0D8               	btfss	status,0,c
  4915  002B74  D7C6               	goto	l2344
  4916                           
  4917                           ; BSR set to: 0
  4918                           ;can.c: 307: }
  4919                           ;can.c: 308: LATD1 = 1;
  4920  002B76  828C               	bsf	3980,1,c	;volatile
  4921                           
  4922                           ; BSR set to: 0
  4923  002B78  0012               	return		;funcret
  4924  002B7A                     __end_of_SPIRW:
  4925                           	opt stack 0
  4926                           tblptru	equ	0xFF8
  4927                           tblptrh	equ	0xFF7
  4928                           tblptrl	equ	0xFF6
  4929                           tablat	equ	0xFF5
  4930                           prodh	equ	0xFF4
  4931                           prodl	equ	0xFF3
  4932                           intcon	equ	0xFF2
  4933                           intcon2	equ	0xFF1
  4934                           intcon3	equ	0xFF0
  4935                           postinc0	equ	0xFEE
  4936                           wreg	equ	0xFE8
  4937                           indf1	equ	0xFE7
  4938                           postinc1	equ	0xFE6
  4939                           postdec1	equ	0xFE5
  4940                           fsr1h	equ	0xFE2
  4941                           fsr1l	equ	0xFE1
  4942                           indf2	equ	0xFDF
  4943                           postinc2	equ	0xFDE
  4944                           fsr2h	equ	0xFDA
  4945                           fsr2l	equ	0xFD9
  4946                           status	equ	0xFD8
  4947                           
  4948 ;; *************** function _decrPriority *****************
  4949 ;; Defined at:
  4950 ;;		line 181 in file "logic.c"
  4951 ;; Parameters:    Size  Location     Type
  4952 ;;  user            1    wreg     unsigned char 
  4953 ;; Auto vars:     Size  Location     Type
  4954 ;;  user            1    2[BANK0 ] unsigned char 
  4955 ;;  i               1    4[BANK0 ] unsigned char 
  4956 ;;  modified        1    3[BANK0 ] unsigned char 
  4957 ;; Return value:  Size  Location     Type
  4958 ;;                  1    wreg      void 
  4959 ;; Registers used:
  4960 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4961 ;; Tracked objects:
  4962 ;;		On entry : 0/0
  4963 ;;		On exit  : 0/0
  4964 ;;		Unchanged: 0/0
  4965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4967 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4968 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4969 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4970 ;;Total ram usage:        5 bytes
  4971 ;; Hardware stack levels used:    1
  4972 ;; Hardware stack levels required when called:    8
  4973 ;; This function calls:
  4974 ;;		Nothing
  4975 ;; This function is called by:
  4976 ;;		_main
  4977 ;; This function uses a non-reentrant model
  4978 ;;
  4979                           
  4980                           	psect	text16
  4981  002968                     __ptext16:
  4982                           	opt stack 0
  4983  002968                     _decrPriority:
  4984                           	opt stack 22
  4985                           
  4986                           ; BSR set to: 0
  4987                           ;incstack = 0
  4988                           ;decrPriority@user stored from wreg
  4989  002968  0100               	movlb	0	; () banked
  4990  00296A  6F62               	movwf	decrPriority@user& (0+255),b
  4991                           
  4992                           ;logic.c: 183: uint8_t modified = 0;
  4993  00296C  0E00               	movlw	0
  4994  00296E  0100               	movlb	0	; () banked
  4995  002970  6F63               	movwf	decrPriority@modified& (0+255),b
  4996                           
  4997                           ;logic.c: 186: for(uint8_t i = 0; i < 12; i++)
  4998  002972  0E00               	movlw	0
  4999  002974  0100               	movlb	0	; () banked
  5000  002976  6F64               	movwf	decrPriority@i& (0+255),b
  5001  002978                     l3172:
  5002                           
  5003                           ; BSR set to: 0
  5004  002978  0E0B               	movlw	11
  5005  00297A  0100               	movlb	0	; () banked
  5006  00297C  6564               	cpfsgt	decrPriority@i& (0+255),b
  5007  00297E  D001               	goto	l3176
  5008  002980  D04E               	goto	l3196
  5009  002982                     l3176:
  5010                           
  5011                           ; BSR set to: 0
  5012                           ;logic.c: 187: {
  5013                           ;logic.c: 188: if(priorityUser[i] == user)
  5014  002982  0100               	movlb	0	; () banked
  5015  002984  5164               	movf	decrPriority@i& (0+255),w,b
  5016  002986  0D01               	mullw	1
  5017  002988  0EAF               	movlw	low _priorityUser
  5018  00298A  24F3               	addwf	prodl,w,c
  5019  00298C  6ED9               	movwf	fsr2l,c
  5020  00298E  0E00               	movlw	high _priorityUser
  5021  002990  20F4               	addwfc	prodh,w,c
  5022  002992  6EDA               	movwf	fsr2h,c
  5023  002994  0100               	movlb	0	; () banked
  5024  002996  5162               	movf	decrPriority@user& (0+255),w,b
  5025  002998  18DE               	xorwf	postinc2,w,c
  5026  00299A  A4D8               	btfss	status,2,c
  5027  00299C  D003               	goto	l3180
  5028                           
  5029                           ; BSR set to: 0
  5030                           ;logic.c: 189: {
  5031                           ;logic.c: 190: modified = 1;
  5032  00299E  0E01               	movlw	1
  5033  0029A0  0100               	movlb	0	; () banked
  5034  0029A2  6F63               	movwf	decrPriority@modified& (0+255),b
  5035  0029A4                     l3180:
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;logic.c: 191: }
  5039                           ;logic.c: 192: if(modified == 1 && i < 12-1)
  5040  0029A4  0100               	movlb	0	; () banked
  5041  0029A6  0563               	decf	decrPriority@modified& (0+255),w,b
  5042  0029A8  A4D8               	btfss	status,2,c
  5043  0029AA  D022               	goto	l3186
  5044                           
  5045                           ; BSR set to: 0
  5046  0029AC  0E0B               	movlw	11
  5047  0029AE  0100               	movlb	0	; () banked
  5048  0029B0  6164               	cpfslt	decrPriority@i& (0+255),b
  5049  0029B2  D01E               	goto	l3186
  5050                           
  5051                           ; BSR set to: 0
  5052                           ;logic.c: 193: {
  5053                           ;logic.c: 194: priorityUser[i] = priorityUser[i+1];
  5054  0029B4  0100               	movlb	0	; () banked
  5055  0029B6  5164               	movf	decrPriority@i& (0+255),w,b
  5056  0029B8  0100               	movlb	0	; () banked
  5057  0029BA  6F60               	movwf	??_decrPriority& (0+255),b
  5058  0029BC  6B61               	clrf	(??_decrPriority+1)& (0+255),b
  5059  0029BE  0E01               	movlw	1
  5060  0029C0  0100               	movlb	0	; () banked
  5061  0029C2  2760               	addwf	??_decrPriority& (0+255),f,b
  5062  0029C4  0E00               	movlw	0
  5063  0029C6  2361               	addwfc	(??_decrPriority+1)& (0+255),f,b
  5064  0029C8  0EAF               	movlw	low _priorityUser
  5065  0029CA  0100               	movlb	0	; () banked
  5066  0029CC  2560               	addwf	??_decrPriority& (0+255),w,b
  5067  0029CE  6ED9               	movwf	fsr2l,c
  5068  0029D0  0E00               	movlw	high _priorityUser
  5069  0029D2  0100               	movlb	0	; () banked
  5070  0029D4  2161               	addwfc	(??_decrPriority+1)& (0+255),w,b
  5071  0029D6  6EDA               	movwf	fsr2h,c
  5072  0029D8  0100               	movlb	0	; () banked
  5073  0029DA  5164               	movf	decrPriority@i& (0+255),w,b
  5074  0029DC  0D01               	mullw	1
  5075  0029DE  0EAF               	movlw	low _priorityUser
  5076  0029E0  24F3               	addwf	prodl,w,c
  5077  0029E2  6EE1               	movwf	fsr1l,c
  5078  0029E4  0E00               	movlw	high _priorityUser
  5079  0029E6  20F4               	addwfc	prodh,w,c
  5080  0029E8  6EE2               	movwf	fsr1h,c
  5081  0029EA  CFDF FFE7          	movff	indf2,indf1
  5082                           
  5083                           ;logic.c: 195: }
  5084  0029EE  D014               	goto	l3192
  5085  0029F0                     l3186:
  5086                           
  5087                           ; BSR set to: 0
  5088                           ;logic.c: 196: else if(modified == 1 && i == 11)
  5089  0029F0  0100               	movlb	0	; () banked
  5090  0029F2  0563               	decf	decrPriority@modified& (0+255),w,b
  5091  0029F4  A4D8               	btfss	status,2,c
  5092  0029F6  D010               	goto	l3192
  5093                           
  5094                           ; BSR set to: 0
  5095  0029F8  0E0B               	movlw	11
  5096  0029FA  0100               	movlb	0	; () banked
  5097  0029FC  1964               	xorwf	decrPriority@i& (0+255),w,b
  5098  0029FE  A4D8               	btfss	status,2,c
  5099  002A00  D00B               	goto	l3192
  5100                           
  5101                           ; BSR set to: 0
  5102                           ;logic.c: 197: {
  5103                           ;logic.c: 198: priorityUser[i] = 255;
  5104  002A02  0100               	movlb	0	; () banked
  5105  002A04  5164               	movf	decrPriority@i& (0+255),w,b
  5106  002A06  0D01               	mullw	1
  5107  002A08  0EAF               	movlw	low _priorityUser
  5108  002A0A  24F3               	addwf	prodl,w,c
  5109  002A0C  6ED9               	movwf	fsr2l,c
  5110  002A0E  0E00               	movlw	high _priorityUser
  5111  002A10  20F4               	addwfc	prodh,w,c
  5112  002A12  6EDA               	movwf	fsr2h,c
  5113  002A14  0EFF               	movlw	255
  5114  002A16  6EDF               	movwf	indf2,c
  5115  002A18                     l3192:
  5116                           
  5117                           ; BSR set to: 0
  5118  002A18  0100               	movlb	0	; () banked
  5119  002A1A  2B64               	incf	decrPriority@i& (0+255),f,b
  5120  002A1C  D7AD               	goto	l3172
  5121  002A1E                     l3196:
  5122                           
  5123                           ; BSR set to: 0
  5124                           ;logic.c: 199: }
  5125                           ;logic.c: 200: }
  5126                           ;logic.c: 202: if(modified==1)
  5127  002A1E  0100               	movlb	0	; () banked
  5128  002A20  0563               	decf	decrPriority@modified& (0+255),w,b
  5129  002A22  A4D8               	btfss	status,2,c
  5130  002A24  0012               	return	
  5131                           
  5132                           ; BSR set to: 0
  5133                           ;logic.c: 203: {
  5134                           ;logic.c: 204: numberWaitingUsers--;
  5135  002A26  065D               	decf	_numberWaitingUsers,f,c
  5136  002A28  0012               	return	
  5137  002A2A                     __end_of_decrPriority:
  5138                           	opt stack 0
  5139                           tblptru	equ	0xFF8
  5140                           tblptrh	equ	0xFF7
  5141                           tblptrl	equ	0xFF6
  5142                           tablat	equ	0xFF5
  5143                           prodh	equ	0xFF4
  5144                           prodl	equ	0xFF3
  5145                           intcon	equ	0xFF2
  5146                           intcon2	equ	0xFF1
  5147                           intcon3	equ	0xFF0
  5148                           postinc0	equ	0xFEE
  5149                           wreg	equ	0xFE8
  5150                           indf1	equ	0xFE7
  5151                           postinc1	equ	0xFE6
  5152                           postdec1	equ	0xFE5
  5153                           fsr1h	equ	0xFE2
  5154                           fsr1l	equ	0xFE1
  5155                           indf2	equ	0xFDF
  5156                           postinc2	equ	0xFDE
  5157                           fsr2h	equ	0xFDA
  5158                           fsr2l	equ	0xFD9
  5159                           status	equ	0xFD8
  5160                           
  5161 ;; *************** function _high_isr *****************
  5162 ;; Defined at:
  5163 ;;		line 5 in file "interrupt.c"
  5164 ;; Parameters:    Size  Location     Type
  5165 ;;		None
  5166 ;; Auto vars:     Size  Location     Type
  5167 ;;		None
  5168 ;; Return value:  Size  Location     Type
  5169 ;;                  1    wreg      void 
  5170 ;; Registers used:
  5171 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5172 ;; Tracked objects:
  5173 ;;		On entry : 0/0
  5174 ;;		On exit  : 0/0
  5175 ;;		Unchanged: 0/0
  5176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5179 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5180 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5181 ;;Total ram usage:       14 bytes
  5182 ;; Hardware stack levels used:    1
  5183 ;; Hardware stack levels required when called:    7
  5184 ;; This function calls:
  5185 ;;		_Can_Isr
  5186 ;;		_onTimeout
  5187 ;; This function is called by:
  5188 ;;		Interrupt level 2
  5189 ;; This function uses a non-reentrant model
  5190 ;;
  5191                           
  5192                           	psect	intcode
  5193  000008                     __pintcode:
  5194                           	opt stack 0
  5195  000008                     _high_isr:
  5196                           	opt stack 17
  5197                           
  5198                           ; BSR set to: 0
  5199                           ;incstack = 0
  5200  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5201  00000A  CFFA F04A          	movff	pclath,??_high_isr
  5202  00000E  CFFB F04B          	movff	pclatu,??_high_isr+1
  5203  000012  CFE9 F04C          	movff	fsr0l,??_high_isr+2
  5204  000016  CFEA F04D          	movff	fsr0h,??_high_isr+3
  5205  00001A  CFE1 F04E          	movff	fsr1l,??_high_isr+4
  5206  00001E  CFE2 F04F          	movff	fsr1h,??_high_isr+5
  5207  000022  CFD9 F050          	movff	fsr2l,??_high_isr+6
  5208  000026  CFDA F051          	movff	fsr2h,??_high_isr+7
  5209  00002A  CFF3 F052          	movff	prodl,??_high_isr+8
  5210  00002E  CFF4 F053          	movff	prodh,??_high_isr+9
  5211  000032  CFF6 F054          	movff	tblptrl,??_high_isr+10
  5212  000036  CFF7 F055          	movff	tblptrh,??_high_isr+11
  5213  00003A  CFF8 F056          	movff	tblptru,??_high_isr+12
  5214  00003E  CFF5 F057          	movff	tablat,??_high_isr+13
  5215                           
  5216                           ;interrupt.c: 6: if((INT3IF == 1)&&(INT3IE == 1))
  5217  000042  B4F0               	btfsc	intcon3,2,c	;volatile
  5218  000044  AAF0               	btfss	intcon3,5,c	;volatile
  5219  000046  D005               	goto	i2l288
  5220                           
  5221                           ;interrupt.c: 7: {
  5222                           ;interrupt.c: 8: INT3IF = 0;
  5223  000048  94F0               	bcf	intcon3,2,c	;volatile
  5224                           
  5225                           ;interrupt.c: 9: Can_Isr();
  5226  00004A  ECE5  F018         	call	_Can_Isr	;wreg free
  5227                           
  5228                           ;interrupt.c: 10: if(RB3 == 0)
  5229  00004E  A681               	btfss	3969,3,c	;volatile
  5230                           
  5231                           ;interrupt.c: 11: {
  5232                           ;interrupt.c: 12: INT3IF = 1;
  5233  000050  84F0               	bsf	intcon3,2,c	;volatile
  5234  000052                     i2l288:
  5235                           
  5236                           ;interrupt.c: 13: }
  5237                           ;interrupt.c: 14: }
  5238                           ;interrupt.c: 15: if(TMR0IF == 1){
  5239  000052  A4F2               	btfss	intcon,2,c	;volatile
  5240  000054  D009               	goto	i2l291
  5241                           
  5242                           ;interrupt.c: 17: T0CONbits.TMR0ON = 1;
  5243  000056  8ED5               	bsf	4053,7,c	;volatile
  5244                           
  5245                           ;interrupt.c: 20: onTimeout();
  5246  000058  ECA3  F019         	call	_onTimeout	;wreg free
  5247                           
  5248                           ;interrupt.c: 23: TMR0IF = 0;
  5249  00005C  94F2               	bcf	intcon,2,c	;volatile
  5250                           
  5251                           ;interrupt.c: 24: TMR0 = 0xe17b;
  5252  00005E  0EE1               	movlw	225
  5253  000060  6ED7               	movwf	4055,c	;volatile
  5254  000062  0E7B               	movlw	123
  5255  000064  6ED6               	movwf	4054,c	;volatile
  5256                           
  5257                           ;interrupt.c: 25: T0CONbits.TMR0ON = 1;
  5258  000066  8ED5               	bsf	4053,7,c	;volatile
  5259  000068                     i2l291:
  5260  000068  C057  FFF5         	movff	??_high_isr+13,tablat
  5261  00006C  C056  FFF8         	movff	??_high_isr+12,tblptru
  5262  000070  C055  FFF7         	movff	??_high_isr+11,tblptrh
  5263  000074  C054  FFF6         	movff	??_high_isr+10,tblptrl
  5264  000078  C053  FFF4         	movff	??_high_isr+9,prodh
  5265  00007C  C052  FFF3         	movff	??_high_isr+8,prodl
  5266  000080  C051  FFDA         	movff	??_high_isr+7,fsr2h
  5267  000084  C050  FFD9         	movff	??_high_isr+6,fsr2l
  5268  000088  C04F  FFE2         	movff	??_high_isr+5,fsr1h
  5269  00008C  C04E  FFE1         	movff	??_high_isr+4,fsr1l
  5270  000090  C04D  FFEA         	movff	??_high_isr+3,fsr0h
  5271  000094  C04C  FFE9         	movff	??_high_isr+2,fsr0l
  5272  000098  C04B  FFFB         	movff	??_high_isr+1,pclatu
  5273  00009C  C04A  FFFA         	movff	??_high_isr,pclath
  5274  0000A0  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5275  0000A2  0011               	retfie		f
  5276  0000A4                     __end_of_high_isr:
  5277                           	opt stack 0
  5278                           pclatu	equ	0xFFB
  5279                           pclath	equ	0xFFA
  5280                           tblptru	equ	0xFF8
  5281                           tblptrh	equ	0xFF7
  5282                           tblptrl	equ	0xFF6
  5283                           tablat	equ	0xFF5
  5284                           prodh	equ	0xFF4
  5285                           prodl	equ	0xFF3
  5286                           intcon	equ	0xFF2
  5287                           intcon2	equ	0xFF1
  5288                           intcon3	equ	0xFF0
  5289                           postinc0	equ	0xFEE
  5290                           fsr0h	equ	0xFEA
  5291                           fsr0l	equ	0xFE9
  5292                           wreg	equ	0xFE8
  5293                           indf1	equ	0xFE7
  5294                           postinc1	equ	0xFE6
  5295                           postdec1	equ	0xFE5
  5296                           fsr1h	equ	0xFE2
  5297                           fsr1l	equ	0xFE1
  5298                           indf2	equ	0xFDF
  5299                           postinc2	equ	0xFDE
  5300                           fsr2h	equ	0xFDA
  5301                           fsr2l	equ	0xFD9
  5302                           status	equ	0xFD8
  5303                           
  5304 ;; *************** function _onTimeout *****************
  5305 ;; Defined at:
  5306 ;;		line 140 in file "logic.c"
  5307 ;; Parameters:    Size  Location     Type
  5308 ;;		None
  5309 ;; Auto vars:     Size  Location     Type
  5310 ;;  i               1   18[COMRAM] unsigned char 
  5311 ;; Return value:  Size  Location     Type
  5312 ;;                  1    wreg      void 
  5313 ;; Registers used:
  5314 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5315 ;; Tracked objects:
  5316 ;;		On entry : 0/0
  5317 ;;		On exit  : 0/0
  5318 ;;		Unchanged: 0/0
  5319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5321 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5323 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5324 ;;Total ram usage:        1 bytes
  5325 ;; Hardware stack levels used:    1
  5326 ;; Hardware stack levels required when called:    4
  5327 ;; This function calls:
  5328 ;;		_firstRound
  5329 ;;		_secondRound
  5330 ;; This function is called by:
  5331 ;;		_high_isr
  5332 ;; This function uses a non-reentrant model
  5333 ;;
  5334                           
  5335                           	psect	text18
  5336  003346                     __ptext18:
  5337                           	opt stack 0
  5338  003346                     _onTimeout:
  5339                           	opt stack 19
  5340                           
  5341                           ;logic.c: 142: for(uint8_t i = 0; i < 12; i++)
  5342                           
  5343                           ;incstack = 0
  5344  003346  0E00               	movlw	0
  5345  003348  6E13               	movwf	onTimeout@i,c
  5346  00334A                     i2l3236:
  5347  00334A  0E0B               	movlw	11
  5348  00334C  6413               	cpfsgt	onTimeout@i,c
  5349  00334E  D001               	goto	i2l3240
  5350  003350  D00B               	goto	i2l3246
  5351  003352                     i2l3240:
  5352                           
  5353                           ;logic.c: 143: {
  5354                           ;logic.c: 144: durationLights[i] += 1;
  5355  003352  5013               	movf	onTimeout@i,w,c
  5356  003354  0D01               	mullw	1
  5357  003356  0E18               	movlw	low _durationLights
  5358  003358  24F3               	addwf	prodl,w,c
  5359  00335A  6ED9               	movwf	fsr2l,c
  5360  00335C  0E01               	movlw	high _durationLights
  5361  00335E  20F4               	addwfc	prodh,w,c
  5362  003360  6EDA               	movwf	fsr2h,c
  5363  003362  2ADF               	incf	indf2,f,c
  5364  003364  2A13               	incf	onTimeout@i,f,c
  5365  003366  D7F1               	goto	i2l3236
  5366  003368                     i2l3246:
  5367                           
  5368                           ;logic.c: 145: }
  5369                           ;logic.c: 146: firstRound();
  5370  003368  ECB6  F013         	call	_firstRound	;wreg free
  5371                           
  5372                           ;logic.c: 147: secondRound();
  5373  00336C  ECF4  F00F         	call	_secondRound	;wreg free
  5374  003370  0012               	return		;funcret
  5375  003372                     __end_of_onTimeout:
  5376                           	opt stack 0
  5377                           pclatu	equ	0xFFB
  5378                           pclath	equ	0xFFA
  5379                           tblptru	equ	0xFF8
  5380                           tblptrh	equ	0xFF7
  5381                           tblptrl	equ	0xFF6
  5382                           tablat	equ	0xFF5
  5383                           prodh	equ	0xFF4
  5384                           prodl	equ	0xFF3
  5385                           intcon	equ	0xFF2
  5386                           intcon2	equ	0xFF1
  5387                           intcon3	equ	0xFF0
  5388                           postinc0	equ	0xFEE
  5389                           fsr0h	equ	0xFEA
  5390                           fsr0l	equ	0xFE9
  5391                           wreg	equ	0xFE8
  5392                           indf1	equ	0xFE7
  5393                           postinc1	equ	0xFE6
  5394                           postdec1	equ	0xFE5
  5395                           fsr1h	equ	0xFE2
  5396                           fsr1l	equ	0xFE1
  5397                           indf2	equ	0xFDF
  5398                           postinc2	equ	0xFDE
  5399                           fsr2h	equ	0xFDA
  5400                           fsr2l	equ	0xFD9
  5401                           status	equ	0xFD8
  5402                           
  5403 ;; *************** function _secondRound *****************
  5404 ;; Defined at:
  5405 ;;		line 81 in file "logic.c"
  5406 ;; Parameters:    Size  Location     Type
  5407 ;;		None
  5408 ;; Auto vars:     Size  Location     Type
  5409 ;;  conflict        1   15[COMRAM] unsigned char 
  5410 ;;  j               1   16[COMRAM] unsigned char 
  5411 ;;  waitingUser     1   17[COMRAM] unsigned char 
  5412 ;;  i               1   14[COMRAM] unsigned char 
  5413 ;; Return value:  Size  Location     Type
  5414 ;;                  1    wreg      void 
  5415 ;; Registers used:
  5416 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5417 ;; Tracked objects:
  5418 ;;		On entry : 0/0
  5419 ;;		On exit  : 0/0
  5420 ;;		Unchanged: 0/0
  5421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5423 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5424 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5425 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5426 ;;Total ram usage:        5 bytes
  5427 ;; Hardware stack levels used:    1
  5428 ;; Hardware stack levels required when called:    3
  5429 ;; This function calls:
  5430 ;;		_getConflict
  5431 ;;		_setLight
  5432 ;;		_setWarningLight
  5433 ;;		_shiftPriority
  5434 ;; This function is called by:
  5435 ;;		_onTimeout
  5436 ;; This function uses a non-reentrant model
  5437 ;;
  5438                           
  5439                           	psect	text19
  5440  001FE8                     __ptext19:
  5441                           	opt stack 0
  5442  001FE8                     _secondRound:
  5443                           	opt stack 19
  5444                           
  5445                           ;logic.c: 84: for(uint8_t i = 0; i < numberWaitingUsers; i++)
  5446                           
  5447                           ;incstack = 0
  5448  001FE8  0E00               	movlw	0
  5449  001FEA  6E0F               	movwf	secondRound@i,c
  5450  001FEC  D0B6               	goto	i2l3076
  5451  001FEE                     i2l3026:
  5452                           
  5453                           ;logic.c: 85: {
  5454                           ;logic.c: 87: uint8_t waitingUser = priorityUser[i];
  5455  001FEE  500F               	movf	secondRound@i,w,c
  5456  001FF0  0D01               	mullw	1
  5457  001FF2  0EAF               	movlw	low _priorityUser
  5458  001FF4  24F3               	addwf	prodl,w,c
  5459  001FF6  6ED9               	movwf	fsr2l,c
  5460  001FF8  0E00               	movlw	high _priorityUser
  5461  001FFA  20F4               	addwfc	prodh,w,c
  5462  001FFC  6EDA               	movwf	fsr2h,c
  5463  001FFE  50DF               	movf	indf2,w,c
  5464  002000  6E12               	movwf	secondRound@waitingUser,c
  5465                           
  5466                           ;logic.c: 90: for(uint8_t j = 0; j < 12; j++)
  5467  002002  0E00               	movlw	0
  5468  002004  6E11               	movwf	secondRound@j,c
  5469  002006                     i2l3030:
  5470  002006  0E0B               	movlw	11
  5471  002008  6411               	cpfsgt	secondRound@j,c
  5472  00200A  D001               	goto	i2l3034
  5473  00200C  D0A5               	goto	i2l3074
  5474  00200E                     i2l3034:
  5475                           
  5476                           ;logic.c: 91: {
  5477                           ;logic.c: 93: uint8_t conflict = getConflict(waitingUser, j);
  5478  00200E  C011  F001         	movff	secondRound@j,getConflict@carPersonToLookAt
  5479  002012  5012               	movf	secondRound@waitingUser,w,c
  5480  002014  ECCE  F019         	call	_getConflict
  5481  002018  6E10               	movwf	secondRound@conflict,c
  5482                           
  5483                           ;logic.c: 96: if(conflict == 0)
  5484  00201A  5010               	movf	secondRound@conflict,w,c
  5485  00201C  A4D8               	btfss	status,2,c
  5486  00201E  D01D               	goto	i2l3044
  5487                           
  5488                           ;logic.c: 97: {
  5489                           ;logic.c: 98: if( colorLights[waitingUser] == 0 && durationLights[waitingUser] == 2)
  5490  002020  5012               	movf	secondRound@waitingUser,w,c
  5491  002022  0D01               	mullw	1
  5492  002024  0E0C               	movlw	low _colorLights
  5493  002026  24F3               	addwf	prodl,w,c
  5494  002028  6ED9               	movwf	fsr2l,c
  5495  00202A  0E01               	movlw	high _colorLights
  5496  00202C  20F4               	addwfc	prodh,w,c
  5497  00202E  6EDA               	movwf	fsr2h,c
  5498  002030  50DF               	movf	indf2,w,c
  5499  002032  A4D8               	btfss	status,2,c
  5500  002034  D08F               	goto	i2l3070
  5501  002036  5012               	movf	secondRound@waitingUser,w,c
  5502  002038  0D01               	mullw	1
  5503  00203A  0E18               	movlw	low _durationLights
  5504  00203C  24F3               	addwf	prodl,w,c
  5505  00203E  6ED9               	movwf	fsr2l,c
  5506  002040  0E01               	movlw	high _durationLights
  5507  002042  20F4               	addwfc	prodh,w,c
  5508  002044  6EDA               	movwf	fsr2h,c
  5509  002046  0E02               	movlw	2
  5510  002048  18DE               	xorwf	postinc2,w,c
  5511  00204A  A4D8               	btfss	status,2,c
  5512  00204C  D083               	goto	i2l3070
  5513                           
  5514                           ;logic.c: 99: {
  5515                           ;logic.c: 101: setLight(waitingUser, 3);
  5516  00204E  0E03               	movlw	3
  5517  002050  6E0A               	movwf	setLight@color,c
  5518  002052  5012               	movf	secondRound@waitingUser,w,c
  5519  002054  EC8F  F018         	call	_setLight
  5520                           
  5521                           ;logic.c: 102: }
  5522                           ;logic.c: 103: }
  5523  002058  D07D               	goto	i2l3070
  5524  00205A                     i2l3044:
  5525                           
  5526                           ;logic.c: 106: else if(conflict == 2)
  5527  00205A  0E02               	movlw	2
  5528  00205C  1810               	xorwf	secondRound@conflict,w,c
  5529  00205E  A4D8               	btfss	status,2,c
  5530  002060  D023               	goto	i2l3052
  5531                           
  5532                           ;logic.c: 107: {
  5533                           ;logic.c: 108: if(colorLights[waitingUser] == 0 && durationLights[waitingUser] == 2)
  5534  002062  5012               	movf	secondRound@waitingUser,w,c
  5535  002064  0D01               	mullw	1
  5536  002066  0E0C               	movlw	low _colorLights
  5537  002068  24F3               	addwf	prodl,w,c
  5538  00206A  6ED9               	movwf	fsr2l,c
  5539  00206C  0E01               	movlw	high _colorLights
  5540  00206E  20F4               	addwfc	prodh,w,c
  5541  002070  6EDA               	movwf	fsr2h,c
  5542  002072  50DF               	movf	indf2,w,c
  5543  002074  A4D8               	btfss	status,2,c
  5544  002076  D06E               	goto	i2l3070
  5545  002078  5012               	movf	secondRound@waitingUser,w,c
  5546  00207A  0D01               	mullw	1
  5547  00207C  0E18               	movlw	low _durationLights
  5548  00207E  24F3               	addwf	prodl,w,c
  5549  002080  6ED9               	movwf	fsr2l,c
  5550  002082  0E01               	movlw	high _durationLights
  5551  002084  20F4               	addwfc	prodh,w,c
  5552  002086  6EDA               	movwf	fsr2h,c
  5553  002088  0E02               	movlw	2
  5554  00208A  18DE               	xorwf	postinc2,w,c
  5555  00208C  A4D8               	btfss	status,2,c
  5556  00208E  D062               	goto	i2l3070
  5557                           
  5558                           ;logic.c: 109: {
  5559                           ;logic.c: 111: setWarningLight(j-8, 1);
  5560  002090  0E01               	movlw	1
  5561  002092  6E0C               	movwf	setWarningLight@state,c
  5562  002094  5011               	movf	secondRound@j,w,c
  5563  002096  0FF8               	addlw	248
  5564  002098  EC36  F01A         	call	_setWarningLight
  5565                           
  5566                           ;logic.c: 114: setLight(waitingUser, 3);
  5567  00209C  0E03               	movlw	3
  5568  00209E  6E0A               	movwf	setLight@color,c
  5569  0020A0  5012               	movf	secondRound@waitingUser,w,c
  5570  0020A2  EC8F  F018         	call	_setLight
  5571                           
  5572                           ;logic.c: 116: }
  5573                           ;logic.c: 117: }
  5574  0020A6  D056               	goto	i2l3070
  5575  0020A8                     i2l3052:
  5576                           
  5577                           ;logic.c: 120: else if(conflict == 1)
  5578  0020A8  0410               	decf	secondRound@conflict,w,c
  5579  0020AA  A4D8               	btfss	status,2,c
  5580  0020AC  D053               	goto	i2l3070
  5581                           
  5582                           ;logic.c: 121: {
  5583                           ;logic.c: 123: if(colorLights[j] == 2 && durationLights[j] == 4)
  5584  0020AE  5011               	movf	secondRound@j,w,c
  5585  0020B0  0D01               	mullw	1
  5586  0020B2  0E0C               	movlw	low _colorLights
  5587  0020B4  24F3               	addwf	prodl,w,c
  5588  0020B6  6ED9               	movwf	fsr2l,c
  5589  0020B8  0E01               	movlw	high _colorLights
  5590  0020BA  20F4               	addwfc	prodh,w,c
  5591  0020BC  6EDA               	movwf	fsr2h,c
  5592  0020BE  0E02               	movlw	2
  5593  0020C0  18DE               	xorwf	postinc2,w,c
  5594  0020C2  A4D8               	btfss	status,2,c
  5595  0020C4  D014               	goto	i2l3060
  5596  0020C6  5011               	movf	secondRound@j,w,c
  5597  0020C8  0D01               	mullw	1
  5598  0020CA  0E18               	movlw	low _durationLights
  5599  0020CC  24F3               	addwf	prodl,w,c
  5600  0020CE  6ED9               	movwf	fsr2l,c
  5601  0020D0  0E01               	movlw	high _durationLights
  5602  0020D2  20F4               	addwfc	prodh,w,c
  5603  0020D4  6EDA               	movwf	fsr2h,c
  5604  0020D6  0E04               	movlw	4
  5605  0020D8  18DE               	xorwf	postinc2,w,c
  5606  0020DA  A4D8               	btfss	status,2,c
  5607  0020DC  D008               	goto	i2l3060
  5608                           
  5609                           ;logic.c: 124: {
  5610                           ;logic.c: 126: setLight(j, 1);
  5611  0020DE  0E01               	movlw	1
  5612  0020E0  6E0A               	movwf	setLight@color,c
  5613  0020E2  5011               	movf	secondRound@j,w,c
  5614  0020E4  EC8F  F018         	call	_setLight
  5615                           
  5616                           ;logic.c: 127: shiftPriority();
  5617  0020E8  ECBD  F015         	call	_shiftPriority	;wreg free
  5618                           
  5619                           ;logic.c: 128: }
  5620  0020EC  D033               	goto	i2l3070
  5621  0020EE                     i2l3060:
  5622                           
  5623                           ;logic.c: 130: else if(colorLights[j] == 0 && durationLights[j] == 2 && colorLights[wait
      +                          ingUser] == 0 && durationLights[waitingUser] == 2)
  5624  0020EE  5011               	movf	secondRound@j,w,c
  5625  0020F0  0D01               	mullw	1
  5626  0020F2  0E0C               	movlw	low _colorLights
  5627  0020F4  24F3               	addwf	prodl,w,c
  5628  0020F6  6ED9               	movwf	fsr2l,c
  5629  0020F8  0E01               	movlw	high _colorLights
  5630  0020FA  20F4               	addwfc	prodh,w,c
  5631  0020FC  6EDA               	movwf	fsr2h,c
  5632  0020FE  50DF               	movf	indf2,w,c
  5633  002100  A4D8               	btfss	status,2,c
  5634  002102  D028               	goto	i2l3070
  5635  002104  5011               	movf	secondRound@j,w,c
  5636  002106  0D01               	mullw	1
  5637  002108  0E18               	movlw	low _durationLights
  5638  00210A  24F3               	addwf	prodl,w,c
  5639  00210C  6ED9               	movwf	fsr2l,c
  5640  00210E  0E01               	movlw	high _durationLights
  5641  002110  20F4               	addwfc	prodh,w,c
  5642  002112  6EDA               	movwf	fsr2h,c
  5643  002114  0E02               	movlw	2
  5644  002116  18DE               	xorwf	postinc2,w,c
  5645  002118  A4D8               	btfss	status,2,c
  5646  00211A  D01C               	goto	i2l3070
  5647  00211C  5012               	movf	secondRound@waitingUser,w,c
  5648  00211E  0D01               	mullw	1
  5649  002120  0E0C               	movlw	low _colorLights
  5650  002122  24F3               	addwf	prodl,w,c
  5651  002124  6ED9               	movwf	fsr2l,c
  5652  002126  0E01               	movlw	high _colorLights
  5653  002128  20F4               	addwfc	prodh,w,c
  5654  00212A  6EDA               	movwf	fsr2h,c
  5655  00212C  50DF               	movf	indf2,w,c
  5656  00212E  A4D8               	btfss	status,2,c
  5657  002130  D011               	goto	i2l3070
  5658  002132  5012               	movf	secondRound@waitingUser,w,c
  5659  002134  0D01               	mullw	1
  5660  002136  0E18               	movlw	low _durationLights
  5661  002138  24F3               	addwf	prodl,w,c
  5662  00213A  6ED9               	movwf	fsr2l,c
  5663  00213C  0E01               	movlw	high _durationLights
  5664  00213E  20F4               	addwfc	prodh,w,c
  5665  002140  6EDA               	movwf	fsr2h,c
  5666  002142  0E02               	movlw	2
  5667  002144  18DE               	xorwf	postinc2,w,c
  5668  002146  A4D8               	btfss	status,2,c
  5669  002148  D005               	goto	i2l3070
  5670                           
  5671                           ;logic.c: 131: {
  5672                           ;logic.c: 133: setLight(waitingUser, 3);
  5673  00214A  0E03               	movlw	3
  5674  00214C  6E0A               	movwf	setLight@color,c
  5675  00214E  5012               	movf	secondRound@waitingUser,w,c
  5676  002150  EC8F  F018         	call	_setLight
  5677  002154                     i2l3070:
  5678  002154  2A11               	incf	secondRound@j,f,c
  5679  002156  D757               	goto	i2l3030
  5680  002158                     i2l3074:
  5681  002158  2A0F               	incf	secondRound@i,f,c
  5682  00215A                     i2l3076:
  5683  00215A  505D               	movf	_numberWaitingUsers,w,c
  5684  00215C  5C0F               	subwf	secondRound@i,w,c
  5685  00215E  B0D8               	btfsc	status,0,c
  5686  002160  0012               	return	
  5687  002162  D745               	goto	i2l3026
  5688  002164                     __end_of_secondRound:
  5689                           	opt stack 0
  5690                           pclatu	equ	0xFFB
  5691                           pclath	equ	0xFFA
  5692                           tblptru	equ	0xFF8
  5693                           tblptrh	equ	0xFF7
  5694                           tblptrl	equ	0xFF6
  5695                           tablat	equ	0xFF5
  5696                           prodh	equ	0xFF4
  5697                           prodl	equ	0xFF3
  5698                           intcon	equ	0xFF2
  5699                           intcon2	equ	0xFF1
  5700                           intcon3	equ	0xFF0
  5701                           postinc0	equ	0xFEE
  5702                           fsr0h	equ	0xFEA
  5703                           fsr0l	equ	0xFE9
  5704                           wreg	equ	0xFE8
  5705                           indf1	equ	0xFE7
  5706                           postinc1	equ	0xFE6
  5707                           postdec1	equ	0xFE5
  5708                           fsr1h	equ	0xFE2
  5709                           fsr1l	equ	0xFE1
  5710                           indf2	equ	0xFDF
  5711                           postinc2	equ	0xFDE
  5712                           fsr2h	equ	0xFDA
  5713                           fsr2l	equ	0xFD9
  5714                           status	equ	0xFD8
  5715                           
  5716 ;; *************** function _shiftPriority *****************
  5717 ;; Defined at:
  5718 ;;		line 208 in file "logic.c"
  5719 ;; Parameters:    Size  Location     Type
  5720 ;;		None
  5721 ;; Auto vars:     Size  Location     Type
  5722 ;;  i               1    8[COMRAM] unsigned char 
  5723 ;;  temp            1    7[COMRAM] unsigned char 
  5724 ;; Return value:  Size  Location     Type
  5725 ;;                  1    wreg      void 
  5726 ;; Registers used:
  5727 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5728 ;; Tracked objects:
  5729 ;;		On entry : 0/0
  5730 ;;		On exit  : 0/0
  5731 ;;		Unchanged: 0/0
  5732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5734 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5735 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5736 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5737 ;;Total ram usage:        9 bytes
  5738 ;; Hardware stack levels used:    1
  5739 ;; This function calls:
  5740 ;;		Nothing
  5741 ;; This function is called by:
  5742 ;;		_secondRound
  5743 ;; This function uses a non-reentrant model
  5744 ;;
  5745                           
  5746                           	psect	text20
  5747  002B7A                     __ptext20:
  5748                           	opt stack 0
  5749  002B7A                     _shiftPriority:
  5750                           	opt stack 21
  5751                           
  5752                           ;logic.c: 210: uint8_t temp = priorityUser[0];
  5753                           
  5754                           ;incstack = 0
  5755  002B7A  C0AF  F008         	movff	_priorityUser,shiftPriority@temp
  5756                           
  5757                           ;logic.c: 211: for(uint8_t i = 0; i < numberWaitingUsers-1; i++)
  5758  002B7E  0E00               	movlw	0
  5759  002B80  6E09               	movwf	shiftPriority@i,c
  5760  002B82  D018               	goto	i2l2894
  5761  002B84                     i2l2890:
  5762                           
  5763                           ;logic.c: 212: {
  5764                           ;logic.c: 213: priorityUser[i] = priorityUser[i+1];
  5765  002B84  5009               	movf	shiftPriority@i,w,c
  5766  002B86  6E01               	movwf	??_shiftPriority& (0+255),c
  5767  002B88  6A02               	clrf	(??_shiftPriority+1)& (0+255),c
  5768  002B8A  0E01               	movlw	1
  5769  002B8C  2601               	addwf	??_shiftPriority,f,c
  5770  002B8E  0E00               	movlw	0
  5771  002B90  2202               	addwfc	??_shiftPriority+1,f,c
  5772  002B92  0EAF               	movlw	low _priorityUser
  5773  002B94  2401               	addwf	??_shiftPriority,w,c
  5774  002B96  6ED9               	movwf	fsr2l,c
  5775  002B98  0E00               	movlw	high _priorityUser
  5776  002B9A  2002               	addwfc	??_shiftPriority+1,w,c
  5777  002B9C  6EDA               	movwf	fsr2h,c
  5778  002B9E  5009               	movf	shiftPriority@i,w,c
  5779  002BA0  0D01               	mullw	1
  5780  002BA2  0EAF               	movlw	low _priorityUser
  5781  002BA4  24F3               	addwf	prodl,w,c
  5782  002BA6  6EE1               	movwf	fsr1l,c
  5783  002BA8  0E00               	movlw	high _priorityUser
  5784  002BAA  20F4               	addwfc	prodh,w,c
  5785  002BAC  6EE2               	movwf	fsr1h,c
  5786  002BAE  CFDF FFE7          	movff	indf2,indf1
  5787  002BB2  2A09               	incf	shiftPriority@i,f,c
  5788  002BB4                     i2l2894:
  5789  002BB4  0EFF               	movlw	255
  5790  002BB6  6E01               	movwf	??_shiftPriority& (0+255),c
  5791  002BB8  0EFF               	movlw	255
  5792  002BBA  6E02               	movwf	(??_shiftPriority+1)& (0+255),c
  5793  002BBC  505D               	movf	_numberWaitingUsers,w,c
  5794  002BBE  6E03               	movwf	(??_shiftPriority+2)& (0+255),c
  5795  002BC0  6A04               	clrf	(??_shiftPriority+3)& (0+255),c
  5796  002BC2  5001               	movf	??_shiftPriority,w,c
  5797  002BC4  2603               	addwf	??_shiftPriority+2,f,c
  5798  002BC6  5002               	movf	??_shiftPriority+1,w,c
  5799  002BC8  2204               	addwfc	??_shiftPriority+3,f,c
  5800  002BCA  5009               	movf	shiftPriority@i,w,c
  5801  002BCC  6E05               	movwf	(??_shiftPriority+4)& (0+255),c
  5802  002BCE  6A06               	clrf	(??_shiftPriority+5)& (0+255),c
  5803  002BD0  5003               	movf	??_shiftPriority+2,w,c
  5804  002BD2  5C05               	subwf	??_shiftPriority+4,w,c
  5805  002BD4  5006               	movf	??_shiftPriority+5,w,c
  5806  002BD6  0A80               	xorlw	128
  5807  002BD8  6E07               	movwf	(??_shiftPriority+6)& (0+255),c
  5808  002BDA  5004               	movf	??_shiftPriority+3,w,c
  5809  002BDC  0A80               	xorlw	128
  5810  002BDE  5807               	subwfb	(??_shiftPriority+6)& (0+255),w,c
  5811  002BE0  A0D8               	btfss	status,0,c
  5812  002BE2  D7D0               	goto	i2l2890
  5813                           
  5814                           ;logic.c: 214: }
  5815                           ;logic.c: 215: priorityUser[numberWaitingUsers-1] = temp;
  5816  002BE4  0EFF               	movlw	255
  5817  002BE6  6E01               	movwf	??_shiftPriority& (0+255),c
  5818  002BE8  0EFF               	movlw	255
  5819  002BEA  6E02               	movwf	(??_shiftPriority+1)& (0+255),c
  5820  002BEC  505D               	movf	_numberWaitingUsers,w,c
  5821  002BEE  6E03               	movwf	(??_shiftPriority+2)& (0+255),c
  5822  002BF0  6A04               	clrf	(??_shiftPriority+3)& (0+255),c
  5823  002BF2  5001               	movf	??_shiftPriority,w,c
  5824  002BF4  2603               	addwf	??_shiftPriority+2,f,c
  5825  002BF6  5002               	movf	??_shiftPriority+1,w,c
  5826  002BF8  2204               	addwfc	??_shiftPriority+3,f,c
  5827  002BFA  0EAF               	movlw	low _priorityUser
  5828  002BFC  2403               	addwf	??_shiftPriority+2,w,c
  5829  002BFE  6ED9               	movwf	fsr2l,c
  5830  002C00  0E00               	movlw	high _priorityUser
  5831  002C02  2004               	addwfc	??_shiftPriority+3,w,c
  5832  002C04  6EDA               	movwf	fsr2h,c
  5833  002C06  C008  FFDF         	movff	shiftPriority@temp,indf2
  5834  002C0A  0012               	return		;funcret
  5835  002C0C                     __end_of_shiftPriority:
  5836                           	opt stack 0
  5837                           pclatu	equ	0xFFB
  5838                           pclath	equ	0xFFA
  5839                           tblptru	equ	0xFF8
  5840                           tblptrh	equ	0xFF7
  5841                           tblptrl	equ	0xFF6
  5842                           tablat	equ	0xFF5
  5843                           prodh	equ	0xFF4
  5844                           prodl	equ	0xFF3
  5845                           intcon	equ	0xFF2
  5846                           intcon2	equ	0xFF1
  5847                           intcon3	equ	0xFF0
  5848                           postinc0	equ	0xFEE
  5849                           fsr0h	equ	0xFEA
  5850                           fsr0l	equ	0xFE9
  5851                           wreg	equ	0xFE8
  5852                           indf1	equ	0xFE7
  5853                           postinc1	equ	0xFE6
  5854                           postdec1	equ	0xFE5
  5855                           fsr1h	equ	0xFE2
  5856                           fsr1l	equ	0xFE1
  5857                           indf2	equ	0xFDF
  5858                           postinc2	equ	0xFDE
  5859                           fsr2h	equ	0xFDA
  5860                           fsr2l	equ	0xFD9
  5861                           status	equ	0xFD8
  5862                           
  5863 ;; *************** function _setWarningLight *****************
  5864 ;; Defined at:
  5865 ;;		line 166 in file "logic.c"
  5866 ;; Parameters:    Size  Location     Type
  5867 ;;  light           1    wreg     unsigned char 
  5868 ;;  state           1   11[COMRAM] unsigned char 
  5869 ;; Auto vars:     Size  Location     Type
  5870 ;;  light           1   12[COMRAM] unsigned char 
  5871 ;; Return value:  Size  Location     Type
  5872 ;;                  1    wreg      void 
  5873 ;; Registers used:
  5874 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5875 ;; Tracked objects:
  5876 ;;		On entry : 0/0
  5877 ;;		On exit  : 0/0
  5878 ;;		Unchanged: 0/0
  5879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5880 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5881 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5883 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5884 ;;Total ram usage:        2 bytes
  5885 ;; Hardware stack levels used:    1
  5886 ;; Hardware stack levels required when called:    2
  5887 ;; This function calls:
  5888 ;;		_sendWarningLight
  5889 ;; This function is called by:
  5890 ;;		_secondRound
  5891 ;; This function uses a non-reentrant model
  5892 ;;
  5893                           
  5894                           	psect	text21
  5895  00346C                     __ptext21:
  5896                           	opt stack 0
  5897  00346C                     _setWarningLight:
  5898                           	opt stack 19
  5899                           
  5900                           ;incstack = 0
  5901                           ;setWarningLight@light stored from wreg
  5902  00346C  6E0D               	movwf	setWarningLight@light,c
  5903                           
  5904                           ;logic.c: 169: sendWarningLight(light,state);
  5905  00346E  C00C  F006         	movff	setWarningLight@state,sendWarningLight@state
  5906  003472  500D               	movf	setWarningLight@light,w,c
  5907  003474  ECA2  F017         	call	_sendWarningLight
  5908  003478  0012               	return		;funcret
  5909  00347A                     __end_of_setWarningLight:
  5910                           	opt stack 0
  5911                           pclatu	equ	0xFFB
  5912                           pclath	equ	0xFFA
  5913                           tblptru	equ	0xFF8
  5914                           tblptrh	equ	0xFF7
  5915                           tblptrl	equ	0xFF6
  5916                           tablat	equ	0xFF5
  5917                           prodh	equ	0xFF4
  5918                           prodl	equ	0xFF3
  5919                           intcon	equ	0xFF2
  5920                           intcon2	equ	0xFF1
  5921                           intcon3	equ	0xFF0
  5922                           postinc0	equ	0xFEE
  5923                           fsr0h	equ	0xFEA
  5924                           fsr0l	equ	0xFE9
  5925                           wreg	equ	0xFE8
  5926                           indf1	equ	0xFE7
  5927                           postinc1	equ	0xFE6
  5928                           postdec1	equ	0xFE5
  5929                           fsr1h	equ	0xFE2
  5930                           fsr1l	equ	0xFE1
  5931                           indf2	equ	0xFDF
  5932                           postinc2	equ	0xFDE
  5933                           fsr2h	equ	0xFDA
  5934                           fsr2l	equ	0xFD9
  5935                           status	equ	0xFD8
  5936                           
  5937 ;; *************** function _sendWarningLight *****************
  5938 ;; Defined at:
  5939 ;;		line 115 in file "function.c"
  5940 ;; Parameters:    Size  Location     Type
  5941 ;;  trafficLight    1    wreg     unsigned char 
  5942 ;;  state           1    5[COMRAM] unsigned char 
  5943 ;; Auto vars:     Size  Location     Type
  5944 ;;  trafficLight    1   10[COMRAM] unsigned char 
  5945 ;; Return value:  Size  Location     Type
  5946 ;;                  1    wreg      void 
  5947 ;; Registers used:
  5948 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5949 ;; Tracked objects:
  5950 ;;		On entry : 0/0
  5951 ;;		On exit  : 0/0
  5952 ;;		Unchanged: 0/0
  5953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5954 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5955 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5956 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5957 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5958 ;;Total ram usage:        6 bytes
  5959 ;; Hardware stack levels used:    1
  5960 ;; Hardware stack levels required when called:    1
  5961 ;; This function calls:
  5962 ;;		i2_Can_PutMessage
  5963 ;; This function is called by:
  5964 ;;		_setWarningLight
  5965 ;; This function uses a non-reentrant model
  5966 ;;
  5967                           
  5968                           	psect	text22
  5969  002F44                     __ptext22:
  5970                           	opt stack 0
  5971  002F44                     _sendWarningLight:
  5972                           	opt stack 19
  5973                           
  5974                           ;incstack = 0
  5975                           ;sendWarningLight@trafficLight stored from wreg
  5976  002F44  6E0B               	movwf	sendWarningLight@trafficLight,c
  5977                           
  5978                           ;function.c: 117: messageTx.identifier = ((2<<7) | (trafficLight << 4) | id );
  5979  002F46  0E00               	movlw	0
  5980  002F48  6E07               	movwf	??_sendWarningLight& (0+255),c
  5981  002F4A  0E01               	movlw	1
  5982  002F4C  6E08               	movwf	(??_sendWarningLight+1)& (0+255),c
  5983  002F4E  500B               	movf	sendWarningLight@trafficLight,w,c
  5984  002F50  6E09               	movwf	(??_sendWarningLight+2)& (0+255),c
  5985  002F52  6A0A               	clrf	(??_sendWarningLight+3)& (0+255),c
  5986  002F54  3A09               	swapf	??_sendWarningLight+2,f,c
  5987  002F56  3A0A               	swapf	??_sendWarningLight+3,f,c
  5988  002F58  0EF0               	movlw	240
  5989  002F5A  160A               	andwf	??_sendWarningLight+3,f,c
  5990  002F5C  5009               	movf	??_sendWarningLight+2,w,c
  5991  002F5E  0B0F               	andlw	15
  5992  002F60  120A               	iorwf	??_sendWarningLight+3,f,c
  5993  002F62  0EF0               	movlw	240
  5994  002F64  1609               	andwf	??_sendWarningLight+2,f,c
  5995  002F66  0100               	movlb	0	; () banked
  5996  002F68  51C6               	movf	_id& (0+255),w,b
  5997  002F6A  1209               	iorwf	??_sendWarningLight+2,f,c
  5998  002F6C  0E00               	movlw	0
  5999  002F6E  120A               	iorwf	??_sendWarningLight+3,f,c
  6000  002F70  5007               	movf	??_sendWarningLight,w,c
  6001  002F72  1209               	iorwf	??_sendWarningLight+2,f,c
  6002  002F74  5008               	movf	??_sendWarningLight+1,w,c
  6003  002F76  120A               	iorwf	??_sendWarningLight+3,f,c
  6004  002F78  C009  F0C8         	movff	??_sendWarningLight+2,_messageTx+1
  6005  002F7C  C00A  F0C9         	movff	??_sendWarningLight+3,_messageTx+2
  6006  002F80  0100               	movlb	0	; () banked
  6007  002F82  0E00               	movlw	0
  6008  002F84  BFC9               	btfsc	(_messageTx+2)& (0+255),7,b
  6009  002F86  0EFF               	movlw	-1
  6010  002F88  6FCA               	movwf	(_messageTx+3)& (0+255),b
  6011  002F8A  6FCB               	movwf	(_messageTx+4)& (0+255),b
  6012                           
  6013                           ; BSR set to: 0
  6014                           ;function.c: 118: messageTx.rtr = 0;
  6015  002F8C  0E00               	movlw	0
  6016  002F8E  0100               	movlb	0	; () banked
  6017  002F90  6FD5               	movwf	(_messageTx+14)& (0+255),b
  6018                           
  6019                           ; BSR set to: 0
  6020                           ;function.c: 119: messageTx.dta[0] = state;
  6021  002F92  C006  F0CD         	movff	sendWarningLight@state,_messageTx+6
  6022                           
  6023                           ; BSR set to: 0
  6024                           ;function.c: 120: messageTx.dlc = 1;
  6025  002F96  0E01               	movlw	1
  6026  002F98  0100               	movlb	0	; () banked
  6027  002F9A  6FCC               	movwf	(_messageTx+5)& (0+255),b
  6028                           
  6029                           ; BSR set to: 0
  6030                           ;function.c: 123: Can_PutMessage(&messageTx);
  6031  002F9C  0EC7               	movlw	low _messageTx
  6032  002F9E  6E01               	movwf	i2Can_PutMessage@msgPtr,c
  6033  002FA0  0E00               	movlw	high _messageTx
  6034  002FA2  6E02               	movwf	i2Can_PutMessage@msgPtr+1,c
  6035  002FA4  EC34  F00F         	call	i2_Can_PutMessage	;wreg free
  6036  002FA8  0012               	return		;funcret
  6037  002FAA                     __end_of_sendWarningLight:
  6038                           	opt stack 0
  6039                           pclatu	equ	0xFFB
  6040                           pclath	equ	0xFFA
  6041                           tblptru	equ	0xFF8
  6042                           tblptrh	equ	0xFF7
  6043                           tblptrl	equ	0xFF6
  6044                           tablat	equ	0xFF5
  6045                           prodh	equ	0xFF4
  6046                           prodl	equ	0xFF3
  6047                           intcon	equ	0xFF2
  6048                           intcon2	equ	0xFF1
  6049                           intcon3	equ	0xFF0
  6050                           postinc0	equ	0xFEE
  6051                           fsr0h	equ	0xFEA
  6052                           fsr0l	equ	0xFE9
  6053                           wreg	equ	0xFE8
  6054                           indf1	equ	0xFE7
  6055                           postinc1	equ	0xFE6
  6056                           postdec1	equ	0xFE5
  6057                           fsr1h	equ	0xFE2
  6058                           fsr1l	equ	0xFE1
  6059                           indf2	equ	0xFDF
  6060                           postinc2	equ	0xFDE
  6061                           fsr2h	equ	0xFDA
  6062                           fsr2l	equ	0xFD9
  6063                           status	equ	0xFD8
  6064                           
  6065 ;; *************** function _getConflict *****************
  6066 ;; Defined at:
  6067 ;;		line 218 in file "logic.c"
  6068 ;; Parameters:    Size  Location     Type
  6069 ;;  carPersonCon    1    wreg     unsigned char 
  6070 ;;  carPersonToL    1    0[COMRAM] unsigned char 
  6071 ;; Auto vars:     Size  Location     Type
  6072 ;;  carPersonCon    1    3[COMRAM] unsigned char 
  6073 ;; Return value:  Size  Location     Type
  6074 ;;                  1    wreg      unsigned char 
  6075 ;; Registers used:
  6076 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6077 ;; Tracked objects:
  6078 ;;		On entry : 0/0
  6079 ;;		On exit  : 0/0
  6080 ;;		Unchanged: 0/0
  6081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6082 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6083 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6084 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6085 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6086 ;;Total ram usage:        4 bytes
  6087 ;; Hardware stack levels used:    1
  6088 ;; This function calls:
  6089 ;;		Nothing
  6090 ;; This function is called by:
  6091 ;;		_secondRound
  6092 ;; This function uses a non-reentrant model
  6093 ;;
  6094                           
  6095                           	psect	text23
  6096  00339C                     __ptext23:
  6097                           	opt stack 0
  6098  00339C                     _getConflict:
  6099                           	opt stack 21
  6100                           
  6101                           ;incstack = 0
  6102                           ;getConflict@carPersonConcerned stored from wreg
  6103  00339C  6E04               	movwf	getConflict@carPersonConcerned,c
  6104                           
  6105                           ;logic.c: 220: return conflicts[carPersonConcerned][carPersonToLookAt];
  6106  00339E  5004               	movf	getConflict@carPersonConcerned,w,c
  6107  0033A0  0D0C               	mullw	12
  6108  0033A2  0E00               	movlw	low _conflicts
  6109  0033A4  6E02               	movwf	??_getConflict& (0+255),c
  6110  0033A6  0E02               	movlw	high _conflicts
  6111  0033A8  6E03               	movwf	(??_getConflict+1)& (0+255),c
  6112  0033AA  50F3               	movf	prodl,w,c
  6113  0033AC  2602               	addwf	??_getConflict,f,c
  6114  0033AE  50F4               	movf	prodh,w,c
  6115  0033B0  2203               	addwfc	??_getConflict+1,f,c
  6116  0033B2  5001               	movf	getConflict@carPersonToLookAt,w,c
  6117  0033B4  0D01               	mullw	1
  6118  0033B6  50F3               	movf	prodl,w,c
  6119  0033B8  2402               	addwf	??_getConflict,w,c
  6120  0033BA  6ED9               	movwf	fsr2l,c
  6121  0033BC  50F4               	movf	prodh,w,c
  6122  0033BE  2003               	addwfc	??_getConflict+1,w,c
  6123  0033C0  6EDA               	movwf	fsr2h,c
  6124  0033C2  50DF               	movf	indf2,w,c
  6125  0033C4  0012               	return	
  6126  0033C6                     __end_of_getConflict:
  6127                           	opt stack 0
  6128                           pclatu	equ	0xFFB
  6129                           pclath	equ	0xFFA
  6130                           tblptru	equ	0xFF8
  6131                           tblptrh	equ	0xFF7
  6132                           tblptrl	equ	0xFF6
  6133                           tablat	equ	0xFF5
  6134                           prodh	equ	0xFF4
  6135                           prodl	equ	0xFF3
  6136                           intcon	equ	0xFF2
  6137                           intcon2	equ	0xFF1
  6138                           intcon3	equ	0xFF0
  6139                           postinc0	equ	0xFEE
  6140                           fsr0h	equ	0xFEA
  6141                           fsr0l	equ	0xFE9
  6142                           wreg	equ	0xFE8
  6143                           indf1	equ	0xFE7
  6144                           postinc1	equ	0xFE6
  6145                           postdec1	equ	0xFE5
  6146                           fsr1h	equ	0xFE2
  6147                           fsr1l	equ	0xFE1
  6148                           indf2	equ	0xFDF
  6149                           postinc2	equ	0xFDE
  6150                           fsr2h	equ	0xFDA
  6151                           fsr2l	equ	0xFD9
  6152                           status	equ	0xFD8
  6153                           
  6154 ;; *************** function _firstRound *****************
  6155 ;; Defined at:
  6156 ;;		line 16 in file "logic.c"
  6157 ;; Parameters:    Size  Location     Type
  6158 ;;		None
  6159 ;; Auto vars:     Size  Location     Type
  6160 ;;  duration        1   15[COMRAM] unsigned char 
  6161 ;;  occupancy       1   14[COMRAM] unsigned char 
  6162 ;;  color           1   13[COMRAM] unsigned char 
  6163 ;;  i               1   16[COMRAM] unsigned char 
  6164 ;; Return value:  Size  Location     Type
  6165 ;;                  1    wreg      void 
  6166 ;; Registers used:
  6167 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6168 ;; Tracked objects:
  6169 ;;		On entry : 0/0
  6170 ;;		On exit  : 0/0
  6171 ;;		Unchanged: 0/0
  6172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6174 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6175 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6176 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6177 ;;Total ram usage:        5 bytes
  6178 ;; Hardware stack levels used:    1
  6179 ;; Hardware stack levels required when called:    3
  6180 ;; This function calls:
  6181 ;;		_requestPed
  6182 ;;		_setLight
  6183 ;; This function is called by:
  6184 ;;		_onTimeout
  6185 ;; This function uses a non-reentrant model
  6186 ;;
  6187                           
  6188                           	psect	text24
  6189  00276C                     __ptext24:
  6190                           	opt stack 0
  6191  00276C                     _firstRound:
  6192                           	opt stack 19
  6193                           
  6194                           ;logic.c: 18: for(uint8_t i = 0; i < 12; i++)
  6195                           
  6196                           ;incstack = 0
  6197  00276C  0E00               	movlw	0
  6198  00276E  6E11               	movwf	firstRound@i,c
  6199  002770                     i2l2982:
  6200  002770  0E0B               	movlw	11
  6201  002772  6411               	cpfsgt	firstRound@i,c
  6202  002774  D001               	goto	i2l2986
  6203  002776  0012               	return	
  6204  002778                     i2l2986:
  6205                           
  6206                           ;logic.c: 19: {
  6207                           ;logic.c: 20: uint8_t color = colorLights[i];
  6208  002778  5011               	movf	firstRound@i,w,c
  6209  00277A  0D01               	mullw	1
  6210  00277C  0E0C               	movlw	low _colorLights
  6211  00277E  24F3               	addwf	prodl,w,c
  6212  002780  6ED9               	movwf	fsr2l,c
  6213  002782  0E01               	movlw	high _colorLights
  6214  002784  20F4               	addwfc	prodh,w,c
  6215  002786  6EDA               	movwf	fsr2h,c
  6216  002788  50DF               	movf	indf2,w,c
  6217  00278A  6E0E               	movwf	firstRound@color,c
  6218                           
  6219                           ;logic.c: 21: uint8_t occupancy = occupancyPaths[i];
  6220  00278C  5011               	movf	firstRound@i,w,c
  6221  00278E  0D01               	mullw	1
  6222  002790  0E00               	movlw	low _occupancyPaths
  6223  002792  24F3               	addwf	prodl,w,c
  6224  002794  6ED9               	movwf	fsr2l,c
  6225  002796  0E01               	movlw	high _occupancyPaths
  6226  002798  20F4               	addwfc	prodh,w,c
  6227  00279A  6EDA               	movwf	fsr2h,c
  6228  00279C  50DF               	movf	indf2,w,c
  6229  00279E  6E0F               	movwf	firstRound@occupancy,c
  6230                           
  6231                           ;logic.c: 22: uint8_t duration = durationLights[i];
  6232  0027A0  5011               	movf	firstRound@i,w,c
  6233  0027A2  0D01               	mullw	1
  6234  0027A4  0E18               	movlw	low _durationLights
  6235  0027A6  24F3               	addwf	prodl,w,c
  6236  0027A8  6ED9               	movwf	fsr2l,c
  6237  0027AA  0E01               	movlw	high _durationLights
  6238  0027AC  20F4               	addwfc	prodh,w,c
  6239  0027AE  6EDA               	movwf	fsr2h,c
  6240  0027B0  50DF               	movf	indf2,w,c
  6241  0027B2  6E10               	movwf	firstRound@duration,c
  6242                           
  6243                           ;logic.c: 25: switch (color)
  6244  0027B4  D04D               	goto	i2l3018
  6245  0027B6                     i2l2988:
  6246                           
  6247                           ;logic.c: 32: if(i<8)
  6248  0027B6  0E08               	movlw	8
  6249  0027B8  6011               	cpfslt	firstRound@i,c
  6250  0027BA  D00A               	goto	i2l2994
  6251                           
  6252                           ;logic.c: 33: {
  6253                           ;logic.c: 34: if(duration == 5)
  6254  0027BC  0E05               	movlw	5
  6255  0027BE  1810               	xorwf	firstRound@duration,w,c
  6256  0027C0  A4D8               	btfss	status,2,c
  6257  0027C2  D053               	goto	i2l3020
  6258                           
  6259                           ;logic.c: 35: {
  6260                           ;logic.c: 37: setLight(i,0);
  6261  0027C4  0E00               	movlw	0
  6262  0027C6  6E0A               	movwf	setLight@color,c
  6263  0027C8  5011               	movf	firstRound@i,w,c
  6264  0027CA  EC8F  F018         	call	_setLight
  6265                           
  6266                           ;logic.c: 38: }
  6267                           ;logic.c: 39: }
  6268  0027CE  D04D               	goto	i2l3020
  6269  0027D0                     i2l2994:
  6270                           
  6271                           ;logic.c: 40: else
  6272                           ;logic.c: 41: {
  6273                           ;logic.c: 42: if(duration == 8)
  6274  0027D0  0E08               	movlw	8
  6275  0027D2  1810               	xorwf	firstRound@duration,w,c
  6276  0027D4  A4D8               	btfss	status,2,c
  6277  0027D6  D049               	goto	i2l3020
  6278                           
  6279                           ;logic.c: 43: {
  6280                           ;logic.c: 45: setLight(i,0);
  6281  0027D8  0E00               	movlw	0
  6282  0027DA  6E0A               	movwf	setLight@color,c
  6283  0027DC  5011               	movf	firstRound@i,w,c
  6284  0027DE  EC8F  F018         	call	_setLight
  6285                           
  6286                           ;logic.c: 46: }
  6287                           ;logic.c: 47: }
  6288                           ;logic.c: 48: break;
  6289  0027E2  D043               	goto	i2l3020
  6290  0027E4                     i2l2998:
  6291                           
  6292                           ;logic.c: 52: if(i > 7 && duration == 4)
  6293  0027E4  0E07               	movlw	7
  6294  0027E6  6411               	cpfsgt	firstRound@i,c
  6295  0027E8  D01C               	goto	i2l3006
  6296  0027EA  0E04               	movlw	4
  6297  0027EC  1810               	xorwf	firstRound@duration,w,c
  6298  0027EE  A4D8               	btfss	status,2,c
  6299  0027F0  D018               	goto	i2l3006
  6300                           
  6301                           ;logic.c: 53: {
  6302                           ;logic.c: 55: occupancyPaths[i] = requestPed(i);
  6303  0027F2  5011               	movf	firstRound@i,w,c
  6304  0027F4  EC8C  F016         	call	_requestPed
  6305  0027F8  6E0D               	movwf	??_firstRound& (0+255),c
  6306  0027FA  5011               	movf	firstRound@i,w,c
  6307  0027FC  0D01               	mullw	1
  6308  0027FE  0E00               	movlw	low _occupancyPaths
  6309  002800  24F3               	addwf	prodl,w,c
  6310  002802  6ED9               	movwf	fsr2l,c
  6311  002804  0E01               	movlw	high _occupancyPaths
  6312  002806  20F4               	addwfc	prodh,w,c
  6313  002808  6EDA               	movwf	fsr2h,c
  6314  00280A  C00D  FFDF         	movff	??_firstRound,indf2
  6315                           
  6316                           ;logic.c: 56: occupancy = occupancyPaths[i];
  6317  00280E  5011               	movf	firstRound@i,w,c
  6318  002810  0D01               	mullw	1
  6319  002812  0E00               	movlw	low _occupancyPaths
  6320  002814  24F3               	addwf	prodl,w,c
  6321  002816  6ED9               	movwf	fsr2l,c
  6322  002818  0E01               	movlw	high _occupancyPaths
  6323  00281A  20F4               	addwfc	prodh,w,c
  6324  00281C  6EDA               	movwf	fsr2h,c
  6325  00281E  50DF               	movf	indf2,w,c
  6326  002820  6E0F               	movwf	firstRound@occupancy,c
  6327  002822                     i2l3006:
  6328                           
  6329                           ;logic.c: 57: }
  6330                           ;logic.c: 58: if(duration == 4 && occupancy == 0)
  6331  002822  0E04               	movlw	4
  6332  002824  1810               	xorwf	firstRound@duration,w,c
  6333  002826  A4D8               	btfss	status,2,c
  6334  002828  D020               	goto	i2l3020
  6335  00282A  500F               	movf	firstRound@occupancy,w,c
  6336  00282C  A4D8               	btfss	status,2,c
  6337  00282E  D01D               	goto	i2l3020
  6338                           
  6339                           ;logic.c: 59: {
  6340                           ;logic.c: 61: setLight(i,1);
  6341  002830  0E01               	movlw	1
  6342  002832  6E0A               	movwf	setLight@color,c
  6343  002834  5011               	movf	firstRound@i,w,c
  6344  002836  EC8F  F018         	call	_setLight
  6345                           
  6346                           ;logic.c: 63: }
  6347                           ;logic.c: 64: break;
  6348  00283A  D017               	goto	i2l3020
  6349  00283C                     i2l3012:
  6350                           
  6351                           ;logic.c: 67: if(duration == 2)
  6352  00283C  0E02               	movlw	2
  6353  00283E  1810               	xorwf	firstRound@duration,w,c
  6354  002840  A4D8               	btfss	status,2,c
  6355  002842  D013               	goto	i2l3020
  6356                           
  6357                           ;logic.c: 68: {
  6358                           ;logic.c: 70: setLight(i,2);
  6359  002844  0E02               	movlw	2
  6360  002846  6E0A               	movwf	setLight@color,c
  6361  002848  5011               	movf	firstRound@i,w,c
  6362  00284A  EC8F  F018         	call	_setLight
  6363                           
  6364                           ;logic.c: 77: }
  6365                           
  6366                           ;logic.c: 75: break;
  6367                           
  6368                           ;logic.c: 74: default:
  6369                           
  6370                           ;logic.c: 71: }
  6371                           ;logic.c: 72: break;
  6372  00284E  D00D               	goto	i2l3020
  6373  002850                     i2l3018:
  6374  002850  500E               	movf	firstRound@color,w,c
  6375                           
  6376                           ; Switch size 1, requested type "space"
  6377                           ; Number of cases is 4, Range of values is 0 to 3
  6378                           ; switch strategies available:
  6379                           ; Name         Instructions Cycles
  6380                           ; simple_byte           13     7 (average)
  6381                           ;	Chosen strategy is simple_byte
  6382  002852  0A00               	xorlw	0	; case 0
  6383  002854  B4D8               	btfsc	status,2,c
  6384  002856  D009               	goto	i2l3020
  6385  002858  0A01               	xorlw	1	; case 1
  6386  00285A  B4D8               	btfsc	status,2,c
  6387  00285C  D7AC               	goto	i2l2988
  6388  00285E  0A03               	xorlw	3	; case 2
  6389  002860  B4D8               	btfsc	status,2,c
  6390  002862  D7C0               	goto	i2l2998
  6391  002864  0A01               	xorlw	1	; case 3
  6392  002866  B4D8               	btfsc	status,2,c
  6393  002868  D7E9               	goto	i2l3012
  6394  00286A                     i2l3020:
  6395  00286A  2A11               	incf	firstRound@i,f,c
  6396  00286C  D781               	goto	i2l2982
  6397  00286E                     __end_of_firstRound:
  6398                           	opt stack 0
  6399                           pclatu	equ	0xFFB
  6400                           pclath	equ	0xFFA
  6401                           tblptru	equ	0xFF8
  6402                           tblptrh	equ	0xFF7
  6403                           tblptrl	equ	0xFF6
  6404                           tablat	equ	0xFF5
  6405                           prodh	equ	0xFF4
  6406                           prodl	equ	0xFF3
  6407                           intcon	equ	0xFF2
  6408                           intcon2	equ	0xFF1
  6409                           intcon3	equ	0xFF0
  6410                           postinc0	equ	0xFEE
  6411                           fsr0h	equ	0xFEA
  6412                           fsr0l	equ	0xFE9
  6413                           wreg	equ	0xFE8
  6414                           indf1	equ	0xFE7
  6415                           postinc1	equ	0xFE6
  6416                           postdec1	equ	0xFE5
  6417                           fsr1h	equ	0xFE2
  6418                           fsr1l	equ	0xFE1
  6419                           indf2	equ	0xFDF
  6420                           postinc2	equ	0xFDE
  6421                           fsr2h	equ	0xFDA
  6422                           fsr2l	equ	0xFD9
  6423                           status	equ	0xFD8
  6424                           
  6425 ;; *************** function _setLight *****************
  6426 ;; Defined at:
  6427 ;;		line 150 in file "logic.c"
  6428 ;; Parameters:    Size  Location     Type
  6429 ;;  light           1    wreg     unsigned char 
  6430 ;;  color           1    9[COMRAM] unsigned char 
  6431 ;; Auto vars:     Size  Location     Type
  6432 ;;  light           1   10[COMRAM] unsigned char 
  6433 ;; Return value:  Size  Location     Type
  6434 ;;                  1    wreg      void 
  6435 ;; Registers used:
  6436 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6437 ;; Tracked objects:
  6438 ;;		On entry : 0/0
  6439 ;;		On exit  : 0/0
  6440 ;;		Unchanged: 0/0
  6441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6442 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6443 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6445 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6446 ;;Total ram usage:        2 bytes
  6447 ;; Hardware stack levels used:    1
  6448 ;; Hardware stack levels required when called:    2
  6449 ;; This function calls:
  6450 ;;		_sendPedestrianLight
  6451 ;;		_sendTrafficLight
  6452 ;; This function is called by:
  6453 ;;		_firstRound
  6454 ;;		_secondRound
  6455 ;; This function uses a non-reentrant model
  6456 ;;
  6457                           
  6458                           	psect	text25
  6459  00311E                     __ptext25:
  6460                           	opt stack 0
  6461  00311E                     _setLight:
  6462                           	opt stack 19
  6463                           
  6464                           ;incstack = 0
  6465                           ;setLight@light stored from wreg
  6466  00311E  6E0B               	movwf	setLight@light,c
  6467                           
  6468                           ;logic.c: 152: durationLights[light] = 0;
  6469  003120  500B               	movf	setLight@light,w,c
  6470  003122  0D01               	mullw	1
  6471  003124  0E18               	movlw	low _durationLights
  6472  003126  24F3               	addwf	prodl,w,c
  6473  003128  6ED9               	movwf	fsr2l,c
  6474  00312A  0E01               	movlw	high _durationLights
  6475  00312C  20F4               	addwfc	prodh,w,c
  6476  00312E  6EDA               	movwf	fsr2h,c
  6477  003130  0E00               	movlw	0
  6478  003132  6EDF               	movwf	indf2,c
  6479                           
  6480                           ;logic.c: 153: colorLights[light] = color;
  6481  003134  500B               	movf	setLight@light,w,c
  6482  003136  0D01               	mullw	1
  6483  003138  0E0C               	movlw	low _colorLights
  6484  00313A  24F3               	addwf	prodl,w,c
  6485  00313C  6ED9               	movwf	fsr2l,c
  6486  00313E  0E01               	movlw	high _colorLights
  6487  003140  20F4               	addwfc	prodh,w,c
  6488  003142  6EDA               	movwf	fsr2h,c
  6489  003144  C00A  FFDF         	movff	setLight@color,indf2
  6490                           
  6491                           ;logic.c: 156: if(light < 8){
  6492  003148  0E08               	movlw	8
  6493  00314A  600B               	cpfslt	setLight@light,c
  6494  00314C  D006               	goto	i2l2862
  6495                           
  6496                           ;logic.c: 157: sendTrafficLight(light,color);
  6497  00314E  C00A  F006         	movff	setLight@color,sendTrafficLight@color
  6498  003152  500B               	movf	setLight@light,w,c
  6499  003154  ECBA  F018         	call	_sendTrafficLight
  6500                           
  6501                           ;logic.c: 158: }
  6502  003158  0012               	return	
  6503  00315A                     i2l2862:
  6504                           
  6505                           ;logic.c: 159: else if(light > 7 && light < 12){
  6506  00315A  0E07               	movlw	7
  6507  00315C  640B               	cpfsgt	setLight@light,c
  6508  00315E  0012               	return	
  6509  003160  0E0C               	movlw	12
  6510  003162  600B               	cpfslt	setLight@light,c
  6511  003164  0012               	return	
  6512                           
  6513                           ;logic.c: 160: sendPedestrianLight((light-8),color);
  6514  003166  C00A  F006         	movff	setLight@color,sendPedestrianLight@color
  6515  00316A  500B               	movf	setLight@light,w,c
  6516  00316C  0FF8               	addlw	248
  6517  00316E  EC38  F018         	call	_sendPedestrianLight
  6518  003172  0012               	return	
  6519  003174                     __end_of_setLight:
  6520                           	opt stack 0
  6521                           pclatu	equ	0xFFB
  6522                           pclath	equ	0xFFA
  6523                           tblptru	equ	0xFF8
  6524                           tblptrh	equ	0xFF7
  6525                           tblptrl	equ	0xFF6
  6526                           tablat	equ	0xFF5
  6527                           prodh	equ	0xFF4
  6528                           prodl	equ	0xFF3
  6529                           intcon	equ	0xFF2
  6530                           intcon2	equ	0xFF1
  6531                           intcon3	equ	0xFF0
  6532                           postinc0	equ	0xFEE
  6533                           fsr0h	equ	0xFEA
  6534                           fsr0l	equ	0xFE9
  6535                           wreg	equ	0xFE8
  6536                           indf1	equ	0xFE7
  6537                           postinc1	equ	0xFE6
  6538                           postdec1	equ	0xFE5
  6539                           fsr1h	equ	0xFE2
  6540                           fsr1l	equ	0xFE1
  6541                           indf2	equ	0xFDF
  6542                           postinc2	equ	0xFDE
  6543                           fsr2h	equ	0xFDA
  6544                           fsr2l	equ	0xFD9
  6545                           status	equ	0xFD8
  6546                           
  6547 ;; *************** function _sendTrafficLight *****************
  6548 ;; Defined at:
  6549 ;;		line 82 in file "function.c"
  6550 ;; Parameters:    Size  Location     Type
  6551 ;;  trafficLight    1    wreg     unsigned char 
  6552 ;;  color           1    5[COMRAM] unsigned char 
  6553 ;; Auto vars:     Size  Location     Type
  6554 ;;  trafficLight    1    8[COMRAM] unsigned char 
  6555 ;; Return value:  Size  Location     Type
  6556 ;;                  1    wreg      void 
  6557 ;; Registers used:
  6558 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6559 ;; Tracked objects:
  6560 ;;		On entry : 0/0
  6561 ;;		On exit  : 0/0
  6562 ;;		Unchanged: 0/0
  6563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6564 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6565 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6566 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6567 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6568 ;;Total ram usage:        4 bytes
  6569 ;; Hardware stack levels used:    1
  6570 ;; Hardware stack levels required when called:    1
  6571 ;; This function calls:
  6572 ;;		i2_Can_PutMessage
  6573 ;; This function is called by:
  6574 ;;		_setLight
  6575 ;; This function uses a non-reentrant model
  6576 ;;
  6577                           
  6578                           	psect	text26
  6579  003174                     __ptext26:
  6580                           	opt stack 0
  6581  003174                     _sendTrafficLight:
  6582                           	opt stack 19
  6583                           
  6584                           ;incstack = 0
  6585                           ;sendTrafficLight@trafficLight stored from wreg
  6586  003174  6E09               	movwf	sendTrafficLight@trafficLight,c
  6587                           
  6588                           ;function.c: 85: messageTx.identifier = ((0<<7) | (trafficLight << 4) | id );
  6589  003176  5009               	movf	sendTrafficLight@trafficLight,w,c
  6590  003178  6E07               	movwf	??_sendTrafficLight& (0+255),c
  6591  00317A  6A08               	clrf	(??_sendTrafficLight+1)& (0+255),c
  6592  00317C  3A07               	swapf	??_sendTrafficLight,f,c
  6593  00317E  3A08               	swapf	??_sendTrafficLight+1,f,c
  6594  003180  0EF0               	movlw	240
  6595  003182  1608               	andwf	??_sendTrafficLight+1,f,c
  6596  003184  5007               	movf	??_sendTrafficLight,w,c
  6597  003186  0B0F               	andlw	15
  6598  003188  1208               	iorwf	??_sendTrafficLight+1,f,c
  6599  00318A  0EF0               	movlw	240
  6600  00318C  1607               	andwf	??_sendTrafficLight,f,c
  6601  00318E  0100               	movlb	0	; () banked
  6602  003190  51C6               	movf	_id& (0+255),w,b
  6603  003192  1207               	iorwf	??_sendTrafficLight,f,c
  6604  003194  0E00               	movlw	0
  6605  003196  1208               	iorwf	??_sendTrafficLight+1,f,c
  6606  003198  C007  F0C8         	movff	??_sendTrafficLight,_messageTx+1
  6607  00319C  C008  F0C9         	movff	??_sendTrafficLight+1,_messageTx+2
  6608  0031A0  0100               	movlb	0	; () banked
  6609  0031A2  0E00               	movlw	0
  6610  0031A4  BFC9               	btfsc	(_messageTx+2)& (0+255),7,b
  6611  0031A6  0EFF               	movlw	-1
  6612  0031A8  6FCA               	movwf	(_messageTx+3)& (0+255),b
  6613  0031AA  6FCB               	movwf	(_messageTx+4)& (0+255),b
  6614                           
  6615                           ; BSR set to: 0
  6616                           ;function.c: 86: messageTx.rtr = 0;
  6617  0031AC  0E00               	movlw	0
  6618  0031AE  0100               	movlb	0	; () banked
  6619  0031B0  6FD5               	movwf	(_messageTx+14)& (0+255),b
  6620                           
  6621                           ; BSR set to: 0
  6622                           ;function.c: 87: messageTx.dta[0] = color;
  6623  0031B2  C006  F0CD         	movff	sendTrafficLight@color,_messageTx+6
  6624                           
  6625                           ; BSR set to: 0
  6626                           ;function.c: 88: messageTx.dlc = 1;
  6627  0031B6  0E01               	movlw	1
  6628  0031B8  0100               	movlb	0	; () banked
  6629  0031BA  6FCC               	movwf	(_messageTx+5)& (0+255),b
  6630                           
  6631                           ; BSR set to: 0
  6632                           ;function.c: 91: Can_PutMessage(&messageTx);
  6633  0031BC  0EC7               	movlw	low _messageTx
  6634  0031BE  6E01               	movwf	i2Can_PutMessage@msgPtr,c
  6635  0031C0  0E00               	movlw	high _messageTx
  6636  0031C2  6E02               	movwf	i2Can_PutMessage@msgPtr+1,c
  6637  0031C4  EC34  F00F         	call	i2_Can_PutMessage	;wreg free
  6638  0031C8  0012               	return		;funcret
  6639  0031CA                     __end_of_sendTrafficLight:
  6640                           	opt stack 0
  6641                           pclatu	equ	0xFFB
  6642                           pclath	equ	0xFFA
  6643                           tblptru	equ	0xFF8
  6644                           tblptrh	equ	0xFF7
  6645                           tblptrl	equ	0xFF6
  6646                           tablat	equ	0xFF5
  6647                           prodh	equ	0xFF4
  6648                           prodl	equ	0xFF3
  6649                           intcon	equ	0xFF2
  6650                           intcon2	equ	0xFF1
  6651                           intcon3	equ	0xFF0
  6652                           postinc0	equ	0xFEE
  6653                           fsr0h	equ	0xFEA
  6654                           fsr0l	equ	0xFE9
  6655                           wreg	equ	0xFE8
  6656                           indf1	equ	0xFE7
  6657                           postinc1	equ	0xFE6
  6658                           postdec1	equ	0xFE5
  6659                           fsr1h	equ	0xFE2
  6660                           fsr1l	equ	0xFE1
  6661                           indf2	equ	0xFDF
  6662                           postinc2	equ	0xFDE
  6663                           fsr2h	equ	0xFDA
  6664                           fsr2l	equ	0xFD9
  6665                           status	equ	0xFD8
  6666                           
  6667 ;; *************** function _sendPedestrianLight *****************
  6668 ;; Defined at:
  6669 ;;		line 100 in file "function.c"
  6670 ;; Parameters:    Size  Location     Type
  6671 ;;  trafficLight    1    wreg     unsigned char 
  6672 ;;  color           1    5[COMRAM] unsigned char 
  6673 ;; Auto vars:     Size  Location     Type
  6674 ;;  trafficLight    1    8[COMRAM] unsigned char 
  6675 ;; Return value:  Size  Location     Type
  6676 ;;                  1    wreg      void 
  6677 ;; Registers used:
  6678 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6679 ;; Tracked objects:
  6680 ;;		On entry : 0/0
  6681 ;;		On exit  : 0/0
  6682 ;;		Unchanged: 0/0
  6683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6684 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6685 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6686 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6687 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6688 ;;Total ram usage:        4 bytes
  6689 ;; Hardware stack levels used:    1
  6690 ;; Hardware stack levels required when called:    1
  6691 ;; This function calls:
  6692 ;;		i2_Can_PutMessage
  6693 ;; This function is called by:
  6694 ;;		_setLight
  6695 ;; This function uses a non-reentrant model
  6696 ;;
  6697                           
  6698                           	psect	text27
  6699  003070                     __ptext27:
  6700                           	opt stack 0
  6701  003070                     _sendPedestrianLight:
  6702                           	opt stack 19
  6703                           
  6704                           ;incstack = 0
  6705                           ;sendPedestrianLight@trafficLight stored from wreg
  6706  003070  6E09               	movwf	sendPedestrianLight@trafficLight,c
  6707                           
  6708                           ;function.c: 102: messageTx.identifier = ((1<<7) | (trafficLight << 4) | id );
  6709  003072  5009               	movf	sendPedestrianLight@trafficLight,w,c
  6710  003074  6E07               	movwf	??_sendPedestrianLight& (0+255),c
  6711  003076  6A08               	clrf	(??_sendPedestrianLight+1)& (0+255),c
  6712  003078  3A07               	swapf	??_sendPedestrianLight,f,c
  6713  00307A  3A08               	swapf	??_sendPedestrianLight+1,f,c
  6714  00307C  0EF0               	movlw	240
  6715  00307E  1608               	andwf	??_sendPedestrianLight+1,f,c
  6716  003080  5007               	movf	??_sendPedestrianLight,w,c
  6717  003082  0B0F               	andlw	15
  6718  003084  1208               	iorwf	??_sendPedestrianLight+1,f,c
  6719  003086  0EF0               	movlw	240
  6720  003088  1607               	andwf	??_sendPedestrianLight,f,c
  6721  00308A  0100               	movlb	0	; () banked
  6722  00308C  51C6               	movf	_id& (0+255),w,b
  6723  00308E  1207               	iorwf	??_sendPedestrianLight,f,c
  6724  003090  0E00               	movlw	0
  6725  003092  1208               	iorwf	??_sendPedestrianLight+1,f,c
  6726  003094  8E07               	bsf	??_sendPedestrianLight,7,c
  6727  003096  C007  F0C8         	movff	??_sendPedestrianLight,_messageTx+1
  6728  00309A  C008  F0C9         	movff	??_sendPedestrianLight+1,_messageTx+2
  6729  00309E  0100               	movlb	0	; () banked
  6730  0030A0  0E00               	movlw	0
  6731  0030A2  BFC9               	btfsc	(_messageTx+2)& (0+255),7,b
  6732  0030A4  0EFF               	movlw	-1
  6733  0030A6  6FCA               	movwf	(_messageTx+3)& (0+255),b
  6734  0030A8  6FCB               	movwf	(_messageTx+4)& (0+255),b
  6735                           
  6736                           ; BSR set to: 0
  6737                           ;function.c: 103: messageTx.rtr = 0;
  6738  0030AA  0E00               	movlw	0
  6739  0030AC  0100               	movlb	0	; () banked
  6740  0030AE  6FD5               	movwf	(_messageTx+14)& (0+255),b
  6741                           
  6742                           ; BSR set to: 0
  6743                           ;function.c: 104: messageTx.dta[0] = color;
  6744  0030B0  C006  F0CD         	movff	sendPedestrianLight@color,_messageTx+6
  6745                           
  6746                           ; BSR set to: 0
  6747                           ;function.c: 105: messageTx.dlc = 1;
  6748  0030B4  0E01               	movlw	1
  6749  0030B6  0100               	movlb	0	; () banked
  6750  0030B8  6FCC               	movwf	(_messageTx+5)& (0+255),b
  6751                           
  6752                           ; BSR set to: 0
  6753                           ;function.c: 108: Can_PutMessage(&messageTx);
  6754  0030BA  0EC7               	movlw	low _messageTx
  6755  0030BC  6E01               	movwf	i2Can_PutMessage@msgPtr,c
  6756  0030BE  0E00               	movlw	high _messageTx
  6757  0030C0  6E02               	movwf	i2Can_PutMessage@msgPtr+1,c
  6758  0030C2  EC34  F00F         	call	i2_Can_PutMessage	;wreg free
  6759  0030C6  0012               	return		;funcret
  6760  0030C8                     __end_of_sendPedestrianLight:
  6761                           	opt stack 0
  6762                           pclatu	equ	0xFFB
  6763                           pclath	equ	0xFFA
  6764                           tblptru	equ	0xFF8
  6765                           tblptrh	equ	0xFF7
  6766                           tblptrl	equ	0xFF6
  6767                           tablat	equ	0xFF5
  6768                           prodh	equ	0xFF4
  6769                           prodl	equ	0xFF3
  6770                           intcon	equ	0xFF2
  6771                           intcon2	equ	0xFF1
  6772                           intcon3	equ	0xFF0
  6773                           postinc0	equ	0xFEE
  6774                           fsr0h	equ	0xFEA
  6775                           fsr0l	equ	0xFE9
  6776                           wreg	equ	0xFE8
  6777                           indf1	equ	0xFE7
  6778                           postinc1	equ	0xFE6
  6779                           postdec1	equ	0xFE5
  6780                           fsr1h	equ	0xFE2
  6781                           fsr1l	equ	0xFE1
  6782                           indf2	equ	0xFDF
  6783                           postinc2	equ	0xFDE
  6784                           fsr2h	equ	0xFDA
  6785                           fsr2l	equ	0xFD9
  6786                           status	equ	0xFD8
  6787                           
  6788 ;; *************** function _requestPed *****************
  6789 ;; Defined at:
  6790 ;;		line 126 in file "function.c"
  6791 ;; Parameters:    Size  Location     Type
  6792 ;;  ped             1    wreg     unsigned char 
  6793 ;; Auto vars:     Size  Location     Type
  6794 ;;  ped             1   11[COMRAM] unsigned char 
  6795 ;; Return value:  Size  Location     Type
  6796 ;;                  1    wreg      unsigned char 
  6797 ;; Registers used:
  6798 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6799 ;; Tracked objects:
  6800 ;;		On entry : 0/0
  6801 ;;		On exit  : 0/0
  6802 ;;		Unchanged: 0/0
  6803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6805 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6806 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6807 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6808 ;;Total ram usage:        7 bytes
  6809 ;; Hardware stack levels used:    1
  6810 ;; Hardware stack levels required when called:    1
  6811 ;; This function calls:
  6812 ;;		i2_Can_GetMessage
  6813 ;;		i2_Can_PutMessage
  6814 ;; This function is called by:
  6815 ;;		_firstRound
  6816 ;; This function uses a non-reentrant model
  6817 ;;
  6818                           
  6819                           	psect	text28
  6820  002D18                     __ptext28:
  6821                           	opt stack 0
  6822  002D18                     _requestPed:
  6823                           	opt stack 20
  6824                           
  6825                           ;incstack = 0
  6826                           ;requestPed@ped stored from wreg
  6827  002D18  6E0C               	movwf	requestPed@ped,c
  6828                           
  6829                           ;function.c: 128: messageTx.identifier = ((4<<7) | ((ped-8) << 4) | id );
  6830  002D1A  0E00               	movlw	0
  6831  002D1C  6E06               	movwf	??_requestPed& (0+255),c
  6832  002D1E  0E02               	movlw	2
  6833  002D20  6E07               	movwf	(??_requestPed+1)& (0+255),c
  6834  002D22  0E80               	movlw	128
  6835  002D24  6E08               	movwf	(??_requestPed+2)& (0+255),c
  6836  002D26  0EFF               	movlw	255
  6837  002D28  6E09               	movwf	(??_requestPed+3)& (0+255),c
  6838  002D2A  500C               	movf	requestPed@ped,w,c
  6839  002D2C  6E0A               	movwf	(??_requestPed+4)& (0+255),c
  6840  002D2E  6A0B               	clrf	(??_requestPed+5)& (0+255),c
  6841  002D30  3A0A               	swapf	??_requestPed+4,f,c
  6842  002D32  3A0B               	swapf	??_requestPed+5,f,c
  6843  002D34  0EF0               	movlw	240
  6844  002D36  160B               	andwf	??_requestPed+5,f,c
  6845  002D38  500A               	movf	??_requestPed+4,w,c
  6846  002D3A  0B0F               	andlw	15
  6847  002D3C  120B               	iorwf	??_requestPed+5,f,c
  6848  002D3E  0EF0               	movlw	240
  6849  002D40  160A               	andwf	??_requestPed+4,f,c
  6850  002D42  5008               	movf	??_requestPed+2,w,c
  6851  002D44  260A               	addwf	??_requestPed+4,f,c
  6852  002D46  5009               	movf	??_requestPed+3,w,c
  6853  002D48  220B               	addwfc	??_requestPed+5,f,c
  6854  002D4A  0100               	movlb	0	; () banked
  6855  002D4C  51C6               	movf	_id& (0+255),w,b
  6856  002D4E  120A               	iorwf	??_requestPed+4,f,c
  6857  002D50  0E00               	movlw	0
  6858  002D52  120B               	iorwf	??_requestPed+5,f,c
  6859  002D54  5006               	movf	??_requestPed,w,c
  6860  002D56  120A               	iorwf	??_requestPed+4,f,c
  6861  002D58  5007               	movf	??_requestPed+1,w,c
  6862  002D5A  120B               	iorwf	??_requestPed+5,f,c
  6863  002D5C  C00A  F0C8         	movff	??_requestPed+4,_messageTx+1
  6864  002D60  C00B  F0C9         	movff	??_requestPed+5,_messageTx+2
  6865  002D64  0100               	movlb	0	; () banked
  6866  002D66  0E00               	movlw	0
  6867  002D68  BFC9               	btfsc	(_messageTx+2)& (0+255),7,b
  6868  002D6A  0EFF               	movlw	-1
  6869  002D6C  6FCA               	movwf	(_messageTx+3)& (0+255),b
  6870  002D6E  6FCB               	movwf	(_messageTx+4)& (0+255),b
  6871                           
  6872                           ; BSR set to: 0
  6873                           ;function.c: 129: messageTx.rtr = 1;
  6874  002D70  0E01               	movlw	1
  6875  002D72  0100               	movlb	0	; () banked
  6876  002D74  6FD5               	movwf	(_messageTx+14)& (0+255),b
  6877                           
  6878                           ; BSR set to: 0
  6879                           ;function.c: 132: Can_PutMessage(&messageTx);
  6880  002D76  0EC7               	movlw	low _messageTx
  6881  002D78  6E01               	movwf	i2Can_PutMessage@msgPtr,c
  6882  002D7A  0E00               	movlw	high _messageTx
  6883  002D7C  6E02               	movwf	i2Can_PutMessage@msgPtr+1,c
  6884  002D7E  EC34  F00F         	call	i2_Can_PutMessage	;wreg free
  6885  002D82                     i2l2874:
  6886  002D82  0ED8               	movlw	low _message
  6887  002D84  6E01               	movwf	i2Can_GetMessage@msgPtr,c
  6888  002D86  0E00               	movlw	high _message
  6889  002D88  6E02               	movwf	i2Can_GetMessage@msgPtr+1,c
  6890  002D8A  EC6F  F011         	call	i2_Can_GetMessage	;wreg free
  6891  002D8E  0900               	iorlw	0
  6892  002D90  A4D8               	btfss	status,2,c
  6893  002D92  D7F7               	goto	i2l2874
  6894                           
  6895                           ;function.c: 137: return message.dta[0];
  6896  002D94  0100               	movlb	0	; () banked
  6897  002D96  51DE               	movf	(_message+6)& (0+255),w,b
  6898  002D98  0012               	return	
  6899  002D9A                     __end_of_requestPed:
  6900                           	opt stack 0
  6901                           pclatu	equ	0xFFB
  6902                           pclath	equ	0xFFA
  6903                           tblptru	equ	0xFF8
  6904                           tblptrh	equ	0xFF7
  6905                           tblptrl	equ	0xFF6
  6906                           tablat	equ	0xFF5
  6907                           prodh	equ	0xFF4
  6908                           prodl	equ	0xFF3
  6909                           intcon	equ	0xFF2
  6910                           intcon2	equ	0xFF1
  6911                           intcon3	equ	0xFF0
  6912                           postinc0	equ	0xFEE
  6913                           fsr0h	equ	0xFEA
  6914                           fsr0l	equ	0xFE9
  6915                           wreg	equ	0xFE8
  6916                           indf1	equ	0xFE7
  6917                           postinc1	equ	0xFE6
  6918                           postdec1	equ	0xFE5
  6919                           fsr1h	equ	0xFE2
  6920                           fsr1l	equ	0xFE1
  6921                           indf2	equ	0xFDF
  6922                           postinc2	equ	0xFDE
  6923                           fsr2h	equ	0xFDA
  6924                           fsr2l	equ	0xFD9
  6925                           status	equ	0xFD8
  6926                           
  6927 ;; *************** function i2_Can_PutMessage *****************
  6928 ;; Defined at:
  6929 ;;		line 200 in file "can.c"
  6930 ;; Parameters:    Size  Location     Type
  6931 ;;  msgPtr          2    0[COMRAM] PTR struct CANMESSAGE
  6932 ;;		 -> messageTx(17), 
  6933 ;; Auto vars:     Size  Location     Type
  6934 ;;  Can_PutMessa    1    4[COMRAM] unsigned char 
  6935 ;; Return value:  Size  Location     Type
  6936 ;;                  1    wreg      unsigned char 
  6937 ;; Registers used:
  6938 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6939 ;; Tracked objects:
  6940 ;;		On entry : 0/0
  6941 ;;		On exit  : 0/0
  6942 ;;		Unchanged: 0/0
  6943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6944 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6945 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6946 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6947 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6948 ;;Total ram usage:        5 bytes
  6949 ;; Hardware stack levels used:    1
  6950 ;; This function calls:
  6951 ;;		Nothing
  6952 ;; This function is called by:
  6953 ;;		_sendTrafficLight
  6954 ;;		_sendPedestrianLight
  6955 ;;		_sendWarningLight
  6956 ;;		_requestPed
  6957 ;; This function uses a non-reentrant model
  6958 ;;
  6959                           
  6960                           	psect	text29
  6961  001E68                     __ptext29:
  6962                           	opt stack 0
  6963  001E68                     i2_Can_PutMessage:
  6964                           	opt stack 19
  6965                           
  6966                           ;can.c: 202: uint8_t i;
  6967                           ;can.c: 204: if((txBufferCount) < 4)
  6968                           
  6969                           ; BSR set to: 0
  6970                           ;incstack = 0
  6971  001E68  0E04               	movlw	4
  6972  001E6A  0100               	movlb	0	; () banked
  6973  001E6C  61C1               	cpfslt	_txBufferCount& (0+255),b
  6974  001E6E  0012               	return	
  6975                           
  6976                           ; BSR set to: 0
  6977                           ;can.c: 205: {
  6978                           ;can.c: 206: txBuffer[txBufferPtrIn].dlc = msgPtr->dlc;
  6979  001E70  EE20 F005          	lfsr	2,5
  6980  001E74  5001               	movf	i2Can_PutMessage@msgPtr,w,c
  6981  001E76  26D9               	addwf	fsr2l,f,c
  6982  001E78  5002               	movf	i2Can_PutMessage@msgPtr+1,w,c
  6983  001E7A  22DA               	addwfc	fsr2h,f,c
  6984  001E7C  0100               	movlb	0	; () banked
  6985  001E7E  51C2               	movf	_txBufferPtrIn& (0+255),w,b
  6986  001E80  0D11               	mullw	17
  6987  001E82  0E05               	movlw	5
  6988  001E84  26F3               	addwf	prodl,f,c
  6989  001E86  0E00               	movlw	0
  6990  001E88  22F4               	addwfc	prodh,f,c
  6991  001E8A  0E24               	movlw	low _txBuffer
  6992  001E8C  24F3               	addwf	prodl,w,c
  6993  001E8E  6EE1               	movwf	fsr1l,c
  6994  001E90  0E01               	movlw	high _txBuffer
  6995  001E92  20F4               	addwfc	prodh,w,c
  6996  001E94  6EE2               	movwf	fsr1h,c
  6997  001E96  CFDF FFE7          	movff	indf2,indf1
  6998                           
  6999                           ;can.c: 207: txBuffer[txBufferPtrIn].extended_identifier = msgPtr->extended_identifier;
  7000  001E9A  C001  FFD9         	movff	i2Can_PutMessage@msgPtr,fsr2l
  7001  001E9E  C002  FFDA         	movff	i2Can_PutMessage@msgPtr+1,fsr2h
  7002  001EA2  0100               	movlb	0	; () banked
  7003  001EA4  51C2               	movf	_txBufferPtrIn& (0+255),w,b
  7004  001EA6  0D11               	mullw	17
  7005  001EA8  0E24               	movlw	low _txBuffer
  7006  001EAA  24F3               	addwf	prodl,w,c
  7007  001EAC  6EE1               	movwf	fsr1l,c
  7008  001EAE  0E01               	movlw	high _txBuffer
  7009  001EB0  20F4               	addwfc	prodh,w,c
  7010  001EB2  6EE2               	movwf	fsr1h,c
  7011  001EB4  CFDF FFE7          	movff	indf2,indf1
  7012                           
  7013                           ;can.c: 208: txBuffer[txBufferPtrIn].filhit = msgPtr->filhit;
  7014  001EB8  EE20 F00F          	lfsr	2,15
  7015  001EBC  5001               	movf	i2Can_PutMessage@msgPtr,w,c
  7016  001EBE  26D9               	addwf	fsr2l,f,c
  7017  001EC0  5002               	movf	i2Can_PutMessage@msgPtr+1,w,c
  7018  001EC2  22DA               	addwfc	fsr2h,f,c
  7019  001EC4  0100               	movlb	0	; () banked
  7020  001EC6  51C2               	movf	_txBufferPtrIn& (0+255),w,b
  7021  001EC8  0D11               	mullw	17
  7022  001ECA  0E0F               	movlw	15
  7023  001ECC  26F3               	addwf	prodl,f,c
  7024  001ECE  0E00               	movlw	0
  7025  001ED0  22F4               	addwfc	prodh,f,c
  7026  001ED2  0E24               	movlw	low _txBuffer
  7027  001ED4  24F3               	addwf	prodl,w,c
  7028  001ED6  6EE1               	movwf	fsr1l,c
  7029  001ED8  0E01               	movlw	high _txBuffer
  7030  001EDA  20F4               	addwfc	prodh,w,c
  7031  001EDC  6EE2               	movwf	fsr1h,c
  7032  001EDE  CFDF FFE7          	movff	indf2,indf1
  7033                           
  7034                           ;can.c: 209: txBuffer[txBufferPtrIn].identifier = msgPtr->identifier;
  7035  001EE2  EE20 F001          	lfsr	2,1
  7036  001EE6  5001               	movf	i2Can_PutMessage@msgPtr,w,c
  7037  001EE8  26D9               	addwf	fsr2l,f,c
  7038  001EEA  5002               	movf	i2Can_PutMessage@msgPtr+1,w,c
  7039  001EEC  22DA               	addwfc	fsr2h,f,c
  7040  001EEE  0100               	movlb	0	; () banked
  7041  001EF0  51C2               	movf	_txBufferPtrIn& (0+255),w,b
  7042  001EF2  0D11               	mullw	17
  7043  001EF4  0E01               	movlw	1
  7044  001EF6  26F3               	addwf	prodl,f,c
  7045  001EF8  0E00               	movlw	0
  7046  001EFA  22F4               	addwfc	prodh,f,c
  7047  001EFC  0E24               	movlw	low _txBuffer
  7048  001EFE  24F3               	addwf	prodl,w,c
  7049  001F00  6EE1               	movwf	fsr1l,c
  7050  001F02  0E01               	movlw	high _txBuffer
  7051  001F04  20F4               	addwfc	prodh,w,c
  7052  001F06  6EE2               	movwf	fsr1h,c
  7053  001F08  CFDE FFE6          	movff	postinc2,postinc1
  7054  001F0C  CFDE FFE6          	movff	postinc2,postinc1
  7055  001F10  CFDE FFE6          	movff	postinc2,postinc1
  7056  001F14  CFDE FFE6          	movff	postinc2,postinc1
  7057                           
  7058                           ;can.c: 210: txBuffer[txBufferPtrIn].rtr = msgPtr->rtr;
  7059  001F18  EE20 F00E          	lfsr	2,14
  7060  001F1C  5001               	movf	i2Can_PutMessage@msgPtr,w,c
  7061  001F1E  26D9               	addwf	fsr2l,f,c
  7062  001F20  5002               	movf	i2Can_PutMessage@msgPtr+1,w,c
  7063  001F22  22DA               	addwfc	fsr2h,f,c
  7064  001F24  0100               	movlb	0	; () banked
  7065  001F26  51C2               	movf	_txBufferPtrIn& (0+255),w,b
  7066  001F28  0D11               	mullw	17
  7067  001F2A  0E0E               	movlw	14
  7068  001F2C  26F3               	addwf	prodl,f,c
  7069  001F2E  0E00               	movlw	0
  7070  001F30  22F4               	addwfc	prodh,f,c
  7071  001F32  0E24               	movlw	low _txBuffer
  7072  001F34  24F3               	addwf	prodl,w,c
  7073  001F36  6EE1               	movwf	fsr1l,c
  7074  001F38  0E01               	movlw	high _txBuffer
  7075  001F3A  20F4               	addwfc	prodh,w,c
  7076  001F3C  6EE2               	movwf	fsr1h,c
  7077  001F3E  CFDF FFE7          	movff	indf2,indf1
  7078                           
  7079                           ;can.c: 211: txBuffer[txBufferPtrIn].txPrio = msgPtr->txPrio;
  7080  001F42  EE20 F010          	lfsr	2,16
  7081  001F46  5001               	movf	i2Can_PutMessage@msgPtr,w,c
  7082  001F48  26D9               	addwf	fsr2l,f,c
  7083  001F4A  5002               	movf	i2Can_PutMessage@msgPtr+1,w,c
  7084  001F4C  22DA               	addwfc	fsr2h,f,c
  7085  001F4E  0100               	movlb	0	; () banked
  7086  001F50  51C2               	movf	_txBufferPtrIn& (0+255),w,b
  7087  001F52  0D11               	mullw	17
  7088  001F54  0E10               	movlw	16
  7089  001F56  26F3               	addwf	prodl,f,c
  7090  001F58  0E00               	movlw	0
  7091  001F5A  22F4               	addwfc	prodh,f,c
  7092  001F5C  0E24               	movlw	low _txBuffer
  7093  001F5E  24F3               	addwf	prodl,w,c
  7094  001F60  6EE1               	movwf	fsr1l,c
  7095  001F62  0E01               	movlw	high _txBuffer
  7096  001F64  20F4               	addwfc	prodh,w,c
  7097  001F66  6EE2               	movwf	fsr1h,c
  7098  001F68  CFDF FFE7          	movff	indf2,indf1
  7099                           
  7100                           ; BSR set to: 0
  7101                           ;can.c: 212: for(i=0;i< msgPtr->dlc;i++)
  7102  001F6C  0E00               	movlw	0
  7103  001F6E  6E05               	movwf	i2Can_PutMessage@i,c
  7104  001F70  D026               	goto	i2l2400
  7105  001F72                     i2l2396:
  7106                           
  7107                           ; BSR set to: 0
  7108                           ;can.c: 213: {
  7109                           ;can.c: 214: txBuffer[txBufferPtrIn].dta[i] = msgPtr->dta[i];
  7110  001F72  5005               	movf	i2Can_PutMessage@i,w,c
  7111  001F74  0D01               	mullw	1
  7112  001F76  0E06               	movlw	6
  7113  001F78  26F3               	addwf	prodl,f,c
  7114  001F7A  0E00               	movlw	0
  7115  001F7C  22F4               	addwfc	prodh,f,c
  7116  001F7E  50F3               	movf	prodl,w,c
  7117  001F80  2401               	addwf	i2Can_PutMessage@msgPtr,w,c
  7118  001F82  6ED9               	movwf	fsr2l,c
  7119  001F84  50F4               	movf	prodh,w,c
  7120  001F86  2002               	addwfc	i2Can_PutMessage@msgPtr+1,w,c
  7121  001F88  6EDA               	movwf	fsr2h,c
  7122  001F8A  5005               	movf	i2Can_PutMessage@i,w,c
  7123  001F8C  0D01               	mullw	1
  7124  001F8E  0E06               	movlw	6
  7125  001F90  26F3               	addwf	prodl,f,c
  7126  001F92  0E00               	movlw	0
  7127  001F94  22F4               	addwfc	prodh,f,c
  7128  001F96  0E24               	movlw	low _txBuffer
  7129  001F98  6E03               	movwf	??i2_Can_PutMessage& (0+255),c
  7130  001F9A  0E01               	movlw	high _txBuffer
  7131  001F9C  6E04               	movwf	(??i2_Can_PutMessage+1)& (0+255),c
  7132  001F9E  50F3               	movf	prodl,w,c
  7133  001FA0  2603               	addwf	??i2_Can_PutMessage,f,c
  7134  001FA2  50F4               	movf	prodh,w,c
  7135  001FA4  2204               	addwfc	??i2_Can_PutMessage+1,f,c
  7136  001FA6  0100               	movlb	0	; () banked
  7137  001FA8  51C2               	movf	_txBufferPtrIn& (0+255),w,b
  7138  001FAA  0D11               	mullw	17
  7139  001FAC  50F3               	movf	prodl,w,c
  7140  001FAE  2403               	addwf	??i2_Can_PutMessage,w,c
  7141  001FB0  6EE1               	movwf	fsr1l,c
  7142  001FB2  50F4               	movf	prodh,w,c
  7143  001FB4  2004               	addwfc	??i2_Can_PutMessage+1,w,c
  7144  001FB6  6EE2               	movwf	fsr1h,c
  7145  001FB8  CFDF FFE7          	movff	indf2,indf1
  7146                           
  7147                           ; BSR set to: 0
  7148  001FBC  2A05               	incf	i2Can_PutMessage@i,f,c
  7149  001FBE                     i2l2400:
  7150                           
  7151                           ; BSR set to: 0
  7152  001FBE  EE20 F005          	lfsr	2,5
  7153  001FC2  5001               	movf	i2Can_PutMessage@msgPtr,w,c
  7154  001FC4  26D9               	addwf	fsr2l,f,c
  7155  001FC6  5002               	movf	i2Can_PutMessage@msgPtr+1,w,c
  7156  001FC8  22DA               	addwfc	fsr2h,f,c
  7157  001FCA  50DE               	movf	postinc2,w,c
  7158  001FCC  5C05               	subwf	i2Can_PutMessage@i,w,c
  7159  001FCE  A0D8               	btfss	status,0,c
  7160  001FD0  D7D0               	goto	i2l2396
  7161                           
  7162                           ; BSR set to: 0
  7163                           ;can.c: 215: }
  7164                           ;can.c: 216: INT3IE = 0;
  7165  001FD2  9AF0               	bcf	intcon3,5,c	;volatile
  7166                           
  7167                           ; BSR set to: 0
  7168                           ;can.c: 217: txBufferCount++;
  7169  001FD4  0100               	movlb	0	; () banked
  7170  001FD6  2BC1               	incf	_txBufferCount& (0+255),f,b
  7171                           
  7172                           ; BSR set to: 0
  7173                           ;can.c: 218: txBufferPtrIn = (txBufferPtrIn + 1) % 4;
  7174  001FD8  0100               	movlb	0	; () banked
  7175  001FDA  29C2               	incf	_txBufferPtrIn& (0+255),w,b
  7176  001FDC  0B03               	andlw	3
  7177  001FDE  0100               	movlb	0	; () banked
  7178  001FE0  6FC2               	movwf	_txBufferPtrIn& (0+255),b
  7179                           
  7180                           ; BSR set to: 0
  7181                           ;can.c: 219: INT3IE = 1;
  7182  001FE2  8AF0               	bsf	intcon3,5,c	;volatile
  7183                           
  7184                           ; BSR set to: 0
  7185                           ;can.c: 220: INT3IF = 1;
  7186  001FE4  84F0               	bsf	intcon3,2,c	;volatile
  7187                           
  7188                           ; BSR set to: 0
  7189                           ;can.c: 223: else
  7190                           ;can.c: 224: {
  7191                           ;can.c: 225: return 1;
  7192                           ;	Return value of i2_Can_PutMessage is never used
  7193                           
  7194                           ; BSR set to: 0
  7195                           ;can.c: 222: }
  7196                           
  7197                           ; BSR set to: 0
  7198                           ;can.c: 221: return 0;
  7199                           ;	Return value of i2_Can_PutMessage is never used
  7200  001FE6  0012               	return	
  7201  001FE8                     __end_ofi2_Can_PutMessage:
  7202                           	opt stack 0
  7203                           pclatu	equ	0xFFB
  7204                           pclath	equ	0xFFA
  7205                           tblptru	equ	0xFF8
  7206                           tblptrh	equ	0xFF7
  7207                           tblptrl	equ	0xFF6
  7208                           tablat	equ	0xFF5
  7209                           prodh	equ	0xFF4
  7210                           prodl	equ	0xFF3
  7211                           intcon	equ	0xFF2
  7212                           intcon2	equ	0xFF1
  7213                           intcon3	equ	0xFF0
  7214                           postinc0	equ	0xFEE
  7215                           fsr0h	equ	0xFEA
  7216                           fsr0l	equ	0xFE9
  7217                           wreg	equ	0xFE8
  7218                           indf1	equ	0xFE7
  7219                           postinc1	equ	0xFE6
  7220                           postdec1	equ	0xFE5
  7221                           fsr1h	equ	0xFE2
  7222                           fsr1l	equ	0xFE1
  7223                           indf2	equ	0xFDF
  7224                           postinc2	equ	0xFDE
  7225                           fsr2h	equ	0xFDA
  7226                           fsr2l	equ	0xFD9
  7227                           status	equ	0xFD8
  7228                           
  7229 ;; *************** function i2_Can_GetMessage *****************
  7230 ;; Defined at:
  7231 ;;		line 169 in file "can.c"
  7232 ;; Parameters:    Size  Location     Type
  7233 ;;  msgPtr          2    0[COMRAM] PTR struct CANMESSAGE
  7234 ;;		 -> message(17), 
  7235 ;; Auto vars:     Size  Location     Type
  7236 ;;  Can_GetMessa    1    4[COMRAM] unsigned char 
  7237 ;; Return value:  Size  Location     Type
  7238 ;;                  1    wreg      unsigned char 
  7239 ;; Registers used:
  7240 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7241 ;; Tracked objects:
  7242 ;;		On entry : 0/0
  7243 ;;		On exit  : 0/0
  7244 ;;		Unchanged: 0/0
  7245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7246 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7247 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7248 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7249 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7250 ;;Total ram usage:        5 bytes
  7251 ;; Hardware stack levels used:    1
  7252 ;; This function calls:
  7253 ;;		Nothing
  7254 ;; This function is called by:
  7255 ;;		_requestPed
  7256 ;; This function uses a non-reentrant model
  7257 ;;
  7258                           
  7259                           	psect	text30
  7260  0022DE                     __ptext30:
  7261                           	opt stack 0
  7262  0022DE                     i2_Can_GetMessage:
  7263                           	opt stack 20
  7264                           
  7265                           ;can.c: 171: uint8_t i;
  7266                           ;can.c: 172: if(rxBufferCount > 0)
  7267                           
  7268                           ; BSR set to: 0
  7269                           ;incstack = 0
  7270  0022DE  5059               	movf	_rxBufferCount,w,c
  7271  0022E0  B4D8               	btfsc	status,2,c
  7272  0022E2  D0A6               	goto	i2l2624
  7273                           
  7274                           ;can.c: 173: {
  7275                           ;can.c: 174: msgPtr->dlc = rxBuffer[rxBufferPtrOut].dlc;
  7276  0022E4  0100               	movlb	0	; () banked
  7277  0022E6  51C3               	movf	_rxBufferPtrOut& (0+255),w,b
  7278  0022E8  0D11               	mullw	17
  7279  0022EA  0E05               	movlw	5
  7280  0022EC  26F3               	addwf	prodl,f,c
  7281  0022EE  0E00               	movlw	0
  7282  0022F0  22F4               	addwfc	prodh,f,c
  7283  0022F2  0E68               	movlw	low _rxBuffer
  7284  0022F4  24F3               	addwf	prodl,w,c
  7285  0022F6  6ED9               	movwf	fsr2l,c
  7286  0022F8  0E01               	movlw	high _rxBuffer
  7287  0022FA  20F4               	addwfc	prodh,w,c
  7288  0022FC  6EDA               	movwf	fsr2h,c
  7289  0022FE  EE10 F005          	lfsr	1,5
  7290  002302  5001               	movf	i2Can_GetMessage@msgPtr,w,c
  7291  002304  26E1               	addwf	fsr1l,f,c
  7292  002306  5002               	movf	i2Can_GetMessage@msgPtr+1,w,c
  7293  002308  22E2               	addwfc	fsr1h,f,c
  7294  00230A  CFDF FFE7          	movff	indf2,indf1
  7295                           
  7296                           ;can.c: 175: msgPtr->extended_identifier = rxBuffer[rxBufferPtrOut].extended_identifier;
  7297  00230E  0100               	movlb	0	; () banked
  7298  002310  51C3               	movf	_rxBufferPtrOut& (0+255),w,b
  7299  002312  0D11               	mullw	17
  7300  002314  0E68               	movlw	low _rxBuffer
  7301  002316  24F3               	addwf	prodl,w,c
  7302  002318  6ED9               	movwf	fsr2l,c
  7303  00231A  0E01               	movlw	high _rxBuffer
  7304  00231C  20F4               	addwfc	prodh,w,c
  7305  00231E  6EDA               	movwf	fsr2h,c
  7306  002320  C001  FFE1         	movff	i2Can_GetMessage@msgPtr,fsr1l
  7307  002324  C002  FFE2         	movff	i2Can_GetMessage@msgPtr+1,fsr1h
  7308  002328  CFDF FFE7          	movff	indf2,indf1
  7309                           
  7310                           ;can.c: 176: msgPtr->filhit = rxBuffer[rxBufferPtrOut].filhit;
  7311  00232C  0100               	movlb	0	; () banked
  7312  00232E  51C3               	movf	_rxBufferPtrOut& (0+255),w,b
  7313  002330  0D11               	mullw	17
  7314  002332  0E0F               	movlw	15
  7315  002334  26F3               	addwf	prodl,f,c
  7316  002336  0E00               	movlw	0
  7317  002338  22F4               	addwfc	prodh,f,c
  7318  00233A  0E68               	movlw	low _rxBuffer
  7319  00233C  24F3               	addwf	prodl,w,c
  7320  00233E  6ED9               	movwf	fsr2l,c
  7321  002340  0E01               	movlw	high _rxBuffer
  7322  002342  20F4               	addwfc	prodh,w,c
  7323  002344  6EDA               	movwf	fsr2h,c
  7324  002346  EE10 F00F          	lfsr	1,15
  7325  00234A  5001               	movf	i2Can_GetMessage@msgPtr,w,c
  7326  00234C  26E1               	addwf	fsr1l,f,c
  7327  00234E  5002               	movf	i2Can_GetMessage@msgPtr+1,w,c
  7328  002350  22E2               	addwfc	fsr1h,f,c
  7329  002352  CFDF FFE7          	movff	indf2,indf1
  7330                           
  7331                           ;can.c: 177: msgPtr->identifier = rxBuffer[rxBufferPtrOut].identifier;
  7332  002356  0100               	movlb	0	; () banked
  7333  002358  51C3               	movf	_rxBufferPtrOut& (0+255),w,b
  7334  00235A  0D11               	mullw	17
  7335  00235C  0E01               	movlw	1
  7336  00235E  26F3               	addwf	prodl,f,c
  7337  002360  0E00               	movlw	0
  7338  002362  22F4               	addwfc	prodh,f,c
  7339  002364  0E68               	movlw	low _rxBuffer
  7340  002366  24F3               	addwf	prodl,w,c
  7341  002368  6ED9               	movwf	fsr2l,c
  7342  00236A  0E01               	movlw	high _rxBuffer
  7343  00236C  20F4               	addwfc	prodh,w,c
  7344  00236E  6EDA               	movwf	fsr2h,c
  7345  002370  EE10 F001          	lfsr	1,1
  7346  002374  5001               	movf	i2Can_GetMessage@msgPtr,w,c
  7347  002376  26E1               	addwf	fsr1l,f,c
  7348  002378  5002               	movf	i2Can_GetMessage@msgPtr+1,w,c
  7349  00237A  22E2               	addwfc	fsr1h,f,c
  7350  00237C  CFDE FFE6          	movff	postinc2,postinc1
  7351  002380  CFDE FFE6          	movff	postinc2,postinc1
  7352  002384  CFDE FFE6          	movff	postinc2,postinc1
  7353  002388  CFDE FFE6          	movff	postinc2,postinc1
  7354                           
  7355                           ;can.c: 178: msgPtr->rtr = rxBuffer[rxBufferPtrOut].rtr;
  7356  00238C  0100               	movlb	0	; () banked
  7357  00238E  51C3               	movf	_rxBufferPtrOut& (0+255),w,b
  7358  002390  0D11               	mullw	17
  7359  002392  0E0E               	movlw	14
  7360  002394  26F3               	addwf	prodl,f,c
  7361  002396  0E00               	movlw	0
  7362  002398  22F4               	addwfc	prodh,f,c
  7363  00239A  0E68               	movlw	low _rxBuffer
  7364  00239C  24F3               	addwf	prodl,w,c
  7365  00239E  6ED9               	movwf	fsr2l,c
  7366  0023A0  0E01               	movlw	high _rxBuffer
  7367  0023A2  20F4               	addwfc	prodh,w,c
  7368  0023A4  6EDA               	movwf	fsr2h,c
  7369  0023A6  EE10 F00E          	lfsr	1,14
  7370  0023AA  5001               	movf	i2Can_GetMessage@msgPtr,w,c
  7371  0023AC  26E1               	addwf	fsr1l,f,c
  7372  0023AE  5002               	movf	i2Can_GetMessage@msgPtr+1,w,c
  7373  0023B0  22E2               	addwfc	fsr1h,f,c
  7374  0023B2  CFDF FFE7          	movff	indf2,indf1
  7375                           
  7376                           ; BSR set to: 0
  7377                           ;can.c: 179: for(i=0;i< msgPtr->dlc;i++)
  7378  0023B6  0E00               	movlw	0
  7379  0023B8  6E05               	movwf	i2Can_GetMessage@i,c
  7380  0023BA  D026               	goto	i2l2614
  7381  0023BC                     i2l2610:
  7382                           
  7383                           ; BSR set to: 0
  7384                           ;can.c: 180: {
  7385                           ;can.c: 181: msgPtr->dta[i] = rxBuffer[rxBufferPtrOut].dta[i];
  7386  0023BC  5005               	movf	i2Can_GetMessage@i,w,c
  7387  0023BE  0D01               	mullw	1
  7388  0023C0  0E06               	movlw	6
  7389  0023C2  26F3               	addwf	prodl,f,c
  7390  0023C4  0E00               	movlw	0
  7391  0023C6  22F4               	addwfc	prodh,f,c
  7392  0023C8  0E68               	movlw	low _rxBuffer
  7393  0023CA  6E03               	movwf	??i2_Can_GetMessage& (0+255),c
  7394  0023CC  0E01               	movlw	high _rxBuffer
  7395  0023CE  6E04               	movwf	(??i2_Can_GetMessage+1)& (0+255),c
  7396  0023D0  50F3               	movf	prodl,w,c
  7397  0023D2  2603               	addwf	??i2_Can_GetMessage,f,c
  7398  0023D4  50F4               	movf	prodh,w,c
  7399  0023D6  2204               	addwfc	??i2_Can_GetMessage+1,f,c
  7400  0023D8  0100               	movlb	0	; () banked
  7401  0023DA  51C3               	movf	_rxBufferPtrOut& (0+255),w,b
  7402  0023DC  0D11               	mullw	17
  7403  0023DE  50F3               	movf	prodl,w,c
  7404  0023E0  2403               	addwf	??i2_Can_GetMessage,w,c
  7405  0023E2  6ED9               	movwf	fsr2l,c
  7406  0023E4  50F4               	movf	prodh,w,c
  7407  0023E6  2004               	addwfc	??i2_Can_GetMessage+1,w,c
  7408  0023E8  6EDA               	movwf	fsr2h,c
  7409  0023EA  5005               	movf	i2Can_GetMessage@i,w,c
  7410  0023EC  0D01               	mullw	1
  7411  0023EE  0E06               	movlw	6
  7412  0023F0  26F3               	addwf	prodl,f,c
  7413  0023F2  0E00               	movlw	0
  7414  0023F4  22F4               	addwfc	prodh,f,c
  7415  0023F6  50F3               	movf	prodl,w,c
  7416  0023F8  2401               	addwf	i2Can_GetMessage@msgPtr,w,c
  7417  0023FA  6EE1               	movwf	fsr1l,c
  7418  0023FC  50F4               	movf	prodh,w,c
  7419  0023FE  2002               	addwfc	i2Can_GetMessage@msgPtr+1,w,c
  7420  002400  6EE2               	movwf	fsr1h,c
  7421  002402  CFDF FFE7          	movff	indf2,indf1
  7422                           
  7423                           ; BSR set to: 0
  7424  002406  2A05               	incf	i2Can_GetMessage@i,f,c
  7425  002408                     i2l2614:
  7426                           
  7427                           ; BSR set to: 0
  7428  002408  EE20 F005          	lfsr	2,5
  7429  00240C  5001               	movf	i2Can_GetMessage@msgPtr,w,c
  7430  00240E  26D9               	addwf	fsr2l,f,c
  7431  002410  5002               	movf	i2Can_GetMessage@msgPtr+1,w,c
  7432  002412  22DA               	addwfc	fsr2h,f,c
  7433  002414  50DE               	movf	postinc2,w,c
  7434  002416  5C05               	subwf	i2Can_GetMessage@i,w,c
  7435  002418  A0D8               	btfss	status,0,c
  7436  00241A  D7D0               	goto	i2l2610
  7437                           
  7438                           ; BSR set to: 0
  7439                           ;can.c: 182: }
  7440                           ;can.c: 183: INT3IE = 0;
  7441  00241C  9AF0               	bcf	intcon3,5,c	;volatile
  7442                           
  7443                           ; BSR set to: 0
  7444                           ;can.c: 184: rxBufferPtrOut = (rxBufferPtrOut + 1) % 4;
  7445  00241E  0100               	movlb	0	; () banked
  7446  002420  29C3               	incf	_rxBufferPtrOut& (0+255),w,b
  7447  002422  0B03               	andlw	3
  7448  002424  0100               	movlb	0	; () banked
  7449  002426  6FC3               	movwf	_rxBufferPtrOut& (0+255),b
  7450                           
  7451                           ; BSR set to: 0
  7452                           ;can.c: 185: rxBufferCount--;
  7453  002428  0659               	decf	_rxBufferCount,f,c
  7454                           
  7455                           ; BSR set to: 0
  7456                           ;can.c: 186: INT3IE = 1;
  7457  00242A  8AF0               	bsf	intcon3,5,c	;volatile
  7458                           
  7459                           ;can.c: 187: return 0;
  7460  00242C  0E00               	movlw	0
  7461                           
  7462                           ; BSR set to: 0
  7463  00242E  0012               	return	
  7464  002430                     i2l2624:
  7465                           
  7466                           ;can.c: 188: }
  7467                           ;can.c: 189: return 1;
  7468  002430  0E01               	movlw	1
  7469  002432  0012               	return	
  7470  002434                     __end_ofi2_Can_GetMessage:
  7471                           	opt stack 0
  7472                           pclatu	equ	0xFFB
  7473                           pclath	equ	0xFFA
  7474                           tblptru	equ	0xFF8
  7475                           tblptrh	equ	0xFF7
  7476                           tblptrl	equ	0xFF6
  7477                           tablat	equ	0xFF5
  7478                           prodh	equ	0xFF4
  7479                           prodl	equ	0xFF3
  7480                           intcon	equ	0xFF2
  7481                           intcon2	equ	0xFF1
  7482                           intcon3	equ	0xFF0
  7483                           postinc0	equ	0xFEE
  7484                           fsr0h	equ	0xFEA
  7485                           fsr0l	equ	0xFE9
  7486                           wreg	equ	0xFE8
  7487                           indf1	equ	0xFE7
  7488                           postinc1	equ	0xFE6
  7489                           postdec1	equ	0xFE5
  7490                           fsr1h	equ	0xFE2
  7491                           fsr1l	equ	0xFE1
  7492                           indf2	equ	0xFDF
  7493                           postinc2	equ	0xFDE
  7494                           fsr2h	equ	0xFDA
  7495                           fsr2l	equ	0xFD9
  7496                           status	equ	0xFD8
  7497                           
  7498 ;; *************** function _Can_Isr *****************
  7499 ;; Defined at:
  7500 ;;		line 50 in file "can.c"
  7501 ;; Parameters:    Size  Location     Type
  7502 ;;		None
  7503 ;; Auto vars:     Size  Location     Type
  7504 ;;  retCode         1   72[COMRAM] unsigned char 
  7505 ;; Return value:  Size  Location     Type
  7506 ;;                  1    wreg      void 
  7507 ;; Registers used:
  7508 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7509 ;; Tracked objects:
  7510 ;;		On entry : 0/0
  7511 ;;		On exit  : 0/0
  7512 ;;		Unchanged: 0/0
  7513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7515 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7516 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7517 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7518 ;;Total ram usage:        2 bytes
  7519 ;; Hardware stack levels used:    1
  7520 ;; Hardware stack levels required when called:    6
  7521 ;; This function calls:
  7522 ;;		_Can_GetStatus
  7523 ;;		_Can_OutBufferStatus
  7524 ;;		_Can_ReadInBuffer
  7525 ;;		_Can_WriteOutBuffer
  7526 ;; This function is called by:
  7527 ;;		_high_isr
  7528 ;; This function uses a non-reentrant model
  7529 ;;
  7530                           
  7531                           	psect	text31
  7532  0031CA                     __ptext31:
  7533                           	opt stack 0
  7534  0031CA                     _Can_Isr:
  7535                           	opt stack 17
  7536                           
  7537                           ;can.c: 52: static uint8_t nbTxBuf=3;
  7538                           ;can.c: 53: uint8_t retCode;
  7539                           ;can.c: 55: retCode = Can_GetStatus();
  7540                           
  7541                           ;incstack = 0
  7542  0031CA  EC07  F018         	call	_Can_GetStatus	;wreg free
  7543  0031CE  6E49               	movwf	Can_Isr@retCode,c
  7544                           
  7545                           ;can.c: 57: if((retCode & 0x03) != 0)
  7546  0031D0  C049  F048         	movff	Can_Isr@retCode,??_Can_Isr
  7547  0031D4  0E03               	movlw	3
  7548  0031D6  1648               	andwf	??_Can_Isr,f,c
  7549  0031D8  A4D8               	btfss	status,2,c
  7550                           
  7551                           ;can.c: 58: {
  7552                           ;can.c: 59: Can_ReadInBuffer();
  7553  0031DA  EC09  F019         	call	_Can_ReadInBuffer	;wreg free
  7554                           
  7555                           ;can.c: 60: }
  7556                           ;can.c: 62: if((retCode & 0x1C) != 0)
  7557  0031DE  C049  F048         	movff	Can_Isr@retCode,??_Can_Isr
  7558  0031E2  0E1C               	movlw	28
  7559  0031E4  1648               	andwf	??_Can_Isr,f,c
  7560  0031E6  B4D8               	btfsc	status,2,c
  7561  0031E8  D00B               	goto	i2l3230
  7562                           
  7563                           ;can.c: 63: {
  7564                           ;can.c: 64: if((retCode & 0x10) != 0)
  7565  0031EA  B849               	btfsc	Can_Isr@retCode,4,c
  7566                           
  7567                           ;can.c: 65: {
  7568                           ;can.c: 66: nbTxBuf++;
  7569  0031EC  2A5E               	incf	Can_Isr@nbTxBuf,f,c
  7570                           
  7571                           ;can.c: 67: }
  7572                           ;can.c: 68: if((retCode & 0x08) != 0)
  7573  0031EE  B649               	btfsc	Can_Isr@retCode,3,c
  7574                           
  7575                           ;can.c: 69: {
  7576                           ;can.c: 70: nbTxBuf++;
  7577  0031F0  2A5E               	incf	Can_Isr@nbTxBuf,f,c
  7578                           
  7579                           ;can.c: 71: }
  7580                           ;can.c: 72: if((retCode & 0x04) != 0)
  7581  0031F2  A449               	btfss	Can_Isr@retCode,2,c
  7582  0031F4  D005               	goto	i2l3230
  7583                           
  7584                           ;can.c: 73: {
  7585                           ;can.c: 74: nbTxBuf++;
  7586  0031F6  2A5E               	incf	Can_Isr@nbTxBuf,f,c
  7587                           
  7588                           ;can.c: 75: }
  7589                           ;can.c: 76: }
  7590                           ;can.c: 78: while((Can_OutBufferStatus() != 0) && (nbTxBuf != 0))
  7591  0031F8  D003               	goto	i2l3230
  7592  0031FA                     i2l3226:
  7593                           
  7594                           ;can.c: 79: {
  7595                           ;can.c: 80: Can_WriteOutBuffer();
  7596  0031FA  EC1A  F01A         	call	_Can_WriteOutBuffer	;wreg free
  7597                           
  7598                           ;can.c: 81: nbTxBuf--;
  7599  0031FE  065E               	decf	Can_Isr@nbTxBuf,f,c
  7600  003200                     i2l3230:
  7601  003200  EC3D  F01A         	call	_Can_OutBufferStatus	;wreg free
  7602  003204  0900               	iorlw	0
  7603  003206  B4D8               	btfsc	status,2,c
  7604  003208  0012               	return	
  7605  00320A  505E               	movf	Can_Isr@nbTxBuf,w,c
  7606  00320C  B4D8               	btfsc	status,2,c
  7607  00320E  0012               	return	
  7608  003210  D7F4               	goto	i2l3226
  7609  003212                     __end_of_Can_Isr:
  7610                           	opt stack 0
  7611                           pclatu	equ	0xFFB
  7612                           pclath	equ	0xFFA
  7613                           tblptru	equ	0xFF8
  7614                           tblptrh	equ	0xFF7
  7615                           tblptrl	equ	0xFF6
  7616                           tablat	equ	0xFF5
  7617                           prodh	equ	0xFF4
  7618                           prodl	equ	0xFF3
  7619                           intcon	equ	0xFF2
  7620                           intcon2	equ	0xFF1
  7621                           intcon3	equ	0xFF0
  7622                           postinc0	equ	0xFEE
  7623                           fsr0h	equ	0xFEA
  7624                           fsr0l	equ	0xFE9
  7625                           wreg	equ	0xFE8
  7626                           indf1	equ	0xFE7
  7627                           postinc1	equ	0xFE6
  7628                           postdec1	equ	0xFE5
  7629                           fsr1h	equ	0xFE2
  7630                           fsr1l	equ	0xFE1
  7631                           indf2	equ	0xFDF
  7632                           postinc2	equ	0xFDE
  7633                           fsr2h	equ	0xFDA
  7634                           fsr2l	equ	0xFD9
  7635                           status	equ	0xFD8
  7636                           
  7637 ;; *************** function _Can_WriteOutBuffer *****************
  7638 ;; Defined at:
  7639 ;;		line 127 in file "can.c"
  7640 ;; Parameters:    Size  Location     Type
  7641 ;;		None
  7642 ;; Auto vars:     Size  Location     Type
  7643 ;;		None
  7644 ;; Return value:  Size  Location     Type
  7645 ;;                  1    wreg      unsigned char 
  7646 ;; Registers used:
  7647 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7648 ;; Tracked objects:
  7649 ;;		On entry : 0/0
  7650 ;;		On exit  : 0/0
  7651 ;;		Unchanged: 0/0
  7652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7656 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7657 ;;Total ram usage:        0 bytes
  7658 ;; Hardware stack levels used:    1
  7659 ;; Hardware stack levels required when called:    5
  7660 ;; This function calls:
  7661 ;;		_Can_SendMessage
  7662 ;; This function is called by:
  7663 ;;		_Can_Isr
  7664 ;; This function uses a non-reentrant model
  7665 ;;
  7666                           
  7667                           	psect	text32
  7668  003434                     __ptext32:
  7669                           	opt stack 0
  7670  003434                     _Can_WriteOutBuffer:
  7671                           	opt stack 17
  7672                           
  7673                           ;can.c: 129: Can_SendMessage(&txBuffer[txBufferPtrOut]);
  7674                           
  7675                           ;incstack = 0
  7676  003434  5058               	movf	_txBufferPtrOut,w,c
  7677  003436  0D11               	mullw	17
  7678  003438  0E24               	movlw	low _txBuffer
  7679  00343A  24F3               	addwf	prodl,w,c
  7680  00343C  6E36               	movwf	Can_SendMessage@msg,c
  7681  00343E  0E01               	movlw	high _txBuffer
  7682  003440  20F4               	addwfc	prodh,w,c
  7683  003442  6E37               	movwf	Can_SendMessage@msg+1,c
  7684  003444  ECD5  F017         	call	_Can_SendMessage	;wreg free
  7685                           
  7686                           ;can.c: 130: txBufferPtrOut = (txBufferPtrOut + 1) % 4;
  7687  003448  2858               	incf	_txBufferPtrOut,w,c
  7688  00344A  0B03               	andlw	3
  7689  00344C  6E58               	movwf	_txBufferPtrOut,c
  7690                           
  7691                           ;can.c: 131: txBufferCount--;
  7692  00344E  0100               	movlb	0	; () banked
  7693  003450  07C1               	decf	_txBufferCount& (0+255),f,b
  7694  003452  0012               	return	
  7695  003454                     __end_of_Can_WriteOutBuffer:
  7696                           	opt stack 0
  7697                           pclatu	equ	0xFFB
  7698                           pclath	equ	0xFFA
  7699                           tblptru	equ	0xFF8
  7700                           tblptrh	equ	0xFF7
  7701                           tblptrl	equ	0xFF6
  7702                           tablat	equ	0xFF5
  7703                           prodh	equ	0xFF4
  7704                           prodl	equ	0xFF3
  7705                           intcon	equ	0xFF2
  7706                           intcon2	equ	0xFF1
  7707                           intcon3	equ	0xFF0
  7708                           postinc0	equ	0xFEE
  7709                           fsr0h	equ	0xFEA
  7710                           fsr0l	equ	0xFE9
  7711                           wreg	equ	0xFE8
  7712                           indf1	equ	0xFE7
  7713                           postinc1	equ	0xFE6
  7714                           postdec1	equ	0xFE5
  7715                           fsr1h	equ	0xFE2
  7716                           fsr1l	equ	0xFE1
  7717                           indf2	equ	0xFDF
  7718                           postinc2	equ	0xFDE
  7719                           fsr2h	equ	0xFDA
  7720                           fsr2l	equ	0xFD9
  7721                           status	equ	0xFD8
  7722                           
  7723 ;; *************** function _Can_SendMessage *****************
  7724 ;; Defined at:
  7725 ;;		line 426 in file "can.c"
  7726 ;; Parameters:    Size  Location     Type
  7727 ;;  msg             2   53[COMRAM] PTR const struct CANMESS
  7728 ;;		 -> txBuffer(68), 
  7729 ;; Auto vars:     Size  Location     Type
  7730 ;;  buf             4   55[COMRAM] unsigned char [4]
  7731 ;;  txbuf_n         1   60[COMRAM] unsigned char 
  7732 ;;  res             1   59[COMRAM] unsigned char 
  7733 ;; Return value:  Size  Location     Type
  7734 ;;                  1    wreg      unsigned char 
  7735 ;; Registers used:
  7736 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7737 ;; Tracked objects:
  7738 ;;		On entry : 0/0
  7739 ;;		On exit  : 0/0
  7740 ;;		Unchanged: 0/0
  7741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7742 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7743 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7745 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7746 ;;Total ram usage:        8 bytes
  7747 ;; Hardware stack levels used:    1
  7748 ;; Hardware stack levels required when called:    4
  7749 ;; This function calls:
  7750 ;;		_Mcp2515GetNextFreeTXBuf
  7751 ;;		_Mcp2515WriteCanMsg
  7752 ;;		i2_Spi_Write
  7753 ;; This function is called by:
  7754 ;;		_Can_WriteOutBuffer
  7755 ;; This function uses a non-reentrant model
  7756 ;;
  7757                           
  7758                           	psect	text33
  7759  002FAA                     __ptext33:
  7760                           	opt stack 0
  7761  002FAA                     _Can_SendMessage:
  7762                           	opt stack 17
  7763  002FAA                     
  7764                           ;can.c: 433: {
  7765                           ;can.c: 434: res = Mcp2515GetNextFreeTXBuf(&txbuf_n);
  7766  002FAA  0E3D               	movlw	low Can_SendMessage@txbuf_n
  7767  002FAC  6E13               	movwf	Mcp2515GetNextFreeTXBuf@txbuf_n,c
  7768  002FAE  0E00               	movlw	high Can_SendMessage@txbuf_n
  7769  002FB0  6E14               	movwf	Mcp2515GetNextFreeTXBuf@txbuf_n+1,c
  7770  002FB2  EC06  F016         	call	_Mcp2515GetNextFreeTXBuf	;wreg free
  7771  002FB6  6E3C               	movwf	Can_SendMessage@res,c
  7772                           
  7773                           ;can.c: 436: } while (res == (2));
  7774  002FB8  0E02               	movlw	2
  7775  002FBA  183C               	xorwf	Can_SendMessage@res,w,c
  7776  002FBC  B4D8               	btfsc	status,2,c
  7777  002FBE  D7F5               	goto	i2l2716
  7778                           
  7779                           ;can.c: 438: if (res != (2))
  7780  002FC0  0E02               	movlw	2
  7781  002FC2  183C               	xorwf	Can_SendMessage@res,w,c
  7782  002FC4  B4D8               	btfsc	status,2,c
  7783  002FC6  0012               	return	
  7784                           
  7785                           ;can.c: 439: {
  7786                           ;can.c: 440: Mcp2515WriteCanMsg( txbuf_n, msg);
  7787  002FC8  C036  F024         	movff	Can_SendMessage@msg,Mcp2515WriteCanMsg@msg
  7788  002FCC  C037  F025         	movff	Can_SendMessage@msg+1,Mcp2515WriteCanMsg@msg+1
  7789  002FD0  503D               	movf	Can_SendMessage@txbuf_n,w,c
  7790  002FD2  EC1A  F012         	call	_Mcp2515WriteCanMsg
  7791                           
  7792                           ;can.c: 441: buf[0] = 0x02;
  7793  002FD6  0E02               	movlw	2
  7794  002FD8  6E38               	movwf	Can_SendMessage@buf,c
  7795                           
  7796                           ;can.c: 442: buf[1] = txbuf_n-1;
  7797  002FDA  043D               	decf	Can_SendMessage@txbuf_n,w,c
  7798  002FDC  6E39               	movwf	Can_SendMessage@buf+1,c
  7799                           
  7800                           ;can.c: 443: buf[2] = 0x08 | msg->txPrio;
  7801  002FDE  EE20 F010          	lfsr	2,16
  7802  002FE2  5036               	movf	Can_SendMessage@msg,w,c
  7803  002FE4  26D9               	addwf	fsr2l,f,c
  7804  002FE6  5037               	movf	Can_SendMessage@msg+1,w,c
  7805  002FE8  22DA               	addwfc	fsr2h,f,c
  7806  002FEA  50DF               	movf	indf2,w,c
  7807  002FEC  0908               	iorlw	8
  7808  002FEE  6E3A               	movwf	Can_SendMessage@buf+2,c
  7809                           
  7810                           ;can.c: 444: Spi_Write(buf,3);
  7811  002FF0  0E38               	movlw	low Can_SendMessage@buf
  7812  002FF2  6E0D               	movwf	i2Spi_Write@tx,c
  7813  002FF4  0E00               	movlw	high Can_SendMessage@buf
  7814  002FF6  6E0E               	movwf	i2Spi_Write@tx+1,c
  7815  002FF8  0E03               	movlw	3
  7816  002FFA  6E0F               	movwf	i2Spi_Write@size,c
  7817  002FFC  0E00               	movlw	0
  7818  002FFE  6E10               	movwf	i2Spi_Write@size+1,c
  7819  003000  0E00               	movlw	0
  7820  003002  6E11               	movwf	i2Spi_Write@size+2,c
  7821  003004  0E00               	movlw	0
  7822  003006  6E12               	movwf	i2Spi_Write@size+3,c
  7823  003008  ECE3  F019         	call	i2_Spi_Write	;wreg free
  7824                           
  7825                           ;can.c: 447: else
  7826                           ;can.c: 448: {
  7827                           ;can.c: 449: return (2);
  7828                           ;	Return value of _Can_SendMessage is never used
  7829                           
  7830                           ;can.c: 446: }
  7831                           
  7832                           ;can.c: 445: return (0);
  7833                           ;	Return value of _Can_SendMessage is never used
  7834  00300C  0012               	return	
  7835  00300E                     __end_of_Can_SendMessage:
  7836                           	opt stack 0
  7837                           pclatu	equ	0xFFB
  7838                           pclath	equ	0xFFA
  7839                           tblptru	equ	0xFF8
  7840                           tblptrh	equ	0xFF7
  7841                           tblptrl	equ	0xFF6
  7842                           tablat	equ	0xFF5
  7843                           prodh	equ	0xFF4
  7844                           prodl	equ	0xFF3
  7845                           intcon	equ	0xFF2
  7846                           intcon2	equ	0xFF1
  7847                           intcon3	equ	0xFF0
  7848                           postinc0	equ	0xFEE
  7849                           fsr0h	equ	0xFEA
  7850                           fsr0l	equ	0xFE9
  7851                           wreg	equ	0xFE8
  7852                           indf1	equ	0xFE7
  7853                           postinc1	equ	0xFE6
  7854                           postdec1	equ	0xFE5
  7855                           fsr1h	equ	0xFE2
  7856                           fsr1l	equ	0xFE1
  7857                           indf2	equ	0xFDF
  7858                           postinc2	equ	0xFDE
  7859                           fsr2h	equ	0xFDA
  7860                           fsr2l	equ	0xFD9
  7861                           status	equ	0xFD8
  7862                           
  7863 ;; *************** function _Mcp2515WriteCanMsg *****************
  7864 ;; Defined at:
  7865 ;;		line 272 in file "mcp2515.c"
  7866 ;; Parameters:    Size  Location     Type
  7867 ;;  buffer_sidh_    1    wreg     const unsigned char 
  7868 ;;  msg             2   35[COMRAM] PTR const struct CANMESS
  7869 ;;		 -> txBuffer(68), 
  7870 ;; Auto vars:     Size  Location     Type
  7871 ;;  buffer_sidh_    1   49[COMRAM] const unsigned char 
  7872 ;;  buf            10   39[COMRAM] unsigned char [10]
  7873 ;;  i               1   52[COMRAM] unsigned char 
  7874 ;;  mcp_addr        1   51[COMRAM] unsigned char 
  7875 ;;  dlc             1   50[COMRAM] unsigned char 
  7876 ;; Return value:  Size  Location     Type
  7877 ;;                  1    wreg      void 
  7878 ;; Registers used:
  7879 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7880 ;; Tracked objects:
  7881 ;;		On entry : 0/0
  7882 ;;		On exit  : 0/0
  7883 ;;		Unchanged: 0/0
  7884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7885 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7886 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7887 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7888 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7889 ;;Total ram usage:       18 bytes
  7890 ;; Hardware stack levels used:    1
  7891 ;; Hardware stack levels required when called:    3
  7892 ;; This function calls:
  7893 ;;		i2_Mcp2515WriteCanId
  7894 ;;		i2_Spi_Write
  7895 ;; This function is called by:
  7896 ;;		_Can_SendMessage
  7897 ;; This function uses a non-reentrant model
  7898 ;;
  7899                           
  7900                           	psect	text34
  7901  002434                     __ptext34:
  7902                           	opt stack 0
  7903  002434                     _Mcp2515WriteCanMsg:
  7904                           	opt stack 17
  7905                           
  7906                           ;incstack = 0
  7907                           ;Mcp2515WriteCanMsg@buffer_sidh_addr stored from wreg
  7908  002434  6E32               	movwf	Mcp2515WriteCanMsg@buffer_sidh_addr,c
  7909                           
  7910                           ;mcp2515.c: 275: uint8_t mcp_addr, i, dlc;
  7911                           ;mcp2515.c: 276: uint8_t buf[10];
  7912                           ;mcp2515.c: 277: mcp_addr = buffer_sidh_addr;
  7913  002436  C032  F034         	movff	Mcp2515WriteCanMsg@buffer_sidh_addr,Mcp2515WriteCanMsg@mcp_addr
  7914                           
  7915                           ;mcp2515.c: 279: buf[0] = 0x02;
  7916  00243A  0E02               	movlw	2
  7917  00243C  6E28               	movwf	Mcp2515WriteCanMsg@buf,c
  7918                           
  7919                           ;mcp2515.c: 280: buf[1] = mcp_addr+5;
  7920  00243E  5034               	movf	Mcp2515WriteCanMsg@mcp_addr,w,c
  7921  002440  0F05               	addlw	5
  7922  002442  6E29               	movwf	Mcp2515WriteCanMsg@buf+1,c
  7923                           
  7924                           ;mcp2515.c: 282: for(i=0;i<msg->dlc;i++)
  7925  002444  0E00               	movlw	0
  7926  002446  6E35               	movwf	Mcp2515WriteCanMsg@i,c
  7927  002448  D01C               	goto	i2l2514
  7928  00244A                     i2l2510:
  7929                           
  7930                           ;mcp2515.c: 283: {
  7931                           ;mcp2515.c: 284: buf[i+2] = msg->dta[i];
  7932  00244A  5035               	movf	Mcp2515WriteCanMsg@i,w,c
  7933  00244C  0D01               	mullw	1
  7934  00244E  0E06               	movlw	6
  7935  002450  26F3               	addwf	prodl,f,c
  7936  002452  0E00               	movlw	0
  7937  002454  22F4               	addwfc	prodh,f,c
  7938  002456  50F3               	movf	prodl,w,c
  7939  002458  2424               	addwf	Mcp2515WriteCanMsg@msg,w,c
  7940  00245A  6ED9               	movwf	fsr2l,c
  7941  00245C  50F4               	movf	prodh,w,c
  7942  00245E  2025               	addwfc	Mcp2515WriteCanMsg@msg+1,w,c
  7943  002460  6EDA               	movwf	fsr2h,c
  7944  002462  5035               	movf	Mcp2515WriteCanMsg@i,w,c
  7945  002464  6E26               	movwf	??_Mcp2515WriteCanMsg& (0+255),c
  7946  002466  6A27               	clrf	(??_Mcp2515WriteCanMsg+1)& (0+255),c
  7947  002468  0E02               	movlw	2
  7948  00246A  2626               	addwf	??_Mcp2515WriteCanMsg,f,c
  7949  00246C  0E00               	movlw	0
  7950  00246E  2227               	addwfc	??_Mcp2515WriteCanMsg+1,f,c
  7951  002470  0E28               	movlw	low Mcp2515WriteCanMsg@buf
  7952  002472  2426               	addwf	??_Mcp2515WriteCanMsg,w,c
  7953  002474  6EE1               	movwf	fsr1l,c
  7954  002476  0E00               	movlw	high Mcp2515WriteCanMsg@buf
  7955  002478  2027               	addwfc	??_Mcp2515WriteCanMsg+1,w,c
  7956  00247A  6EE2               	movwf	fsr1h,c
  7957  00247C  CFDF FFE7          	movff	indf2,indf1
  7958  002480  2A35               	incf	Mcp2515WriteCanMsg@i,f,c
  7959  002482                     i2l2514:
  7960  002482  EE20 F005          	lfsr	2,5
  7961  002486  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  7962  002488  26D9               	addwf	fsr2l,f,c
  7963  00248A  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  7964  00248C  22DA               	addwfc	fsr2h,f,c
  7965  00248E  50DE               	movf	postinc2,w,c
  7966  002490  5C35               	subwf	Mcp2515WriteCanMsg@i,w,c
  7967  002492  A0D8               	btfss	status,0,c
  7968  002494  D7DA               	goto	i2l2510
  7969                           
  7970                           ;mcp2515.c: 285: }
  7971                           ;mcp2515.c: 286: Spi_Write(buf,msg->dlc + 2);
  7972  002496  0E28               	movlw	low Mcp2515WriteCanMsg@buf
  7973  002498  6E0D               	movwf	i2Spi_Write@tx,c
  7974  00249A  0E00               	movlw	high Mcp2515WriteCanMsg@buf
  7975  00249C  6E0E               	movwf	i2Spi_Write@tx+1,c
  7976  00249E  EE20 F005          	lfsr	2,5
  7977  0024A2  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  7978  0024A4  26D9               	addwf	fsr2l,f,c
  7979  0024A6  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  7980  0024A8  22DA               	addwfc	fsr2h,f,c
  7981  0024AA  50DF               	movf	indf2,w,c
  7982  0024AC  6E26               	movwf	??_Mcp2515WriteCanMsg& (0+255),c
  7983  0024AE  6A27               	clrf	(??_Mcp2515WriteCanMsg+1)& (0+255),c
  7984  0024B0  0E02               	movlw	2
  7985  0024B2  2626               	addwf	??_Mcp2515WriteCanMsg,f,c
  7986  0024B4  0E00               	movlw	0
  7987  0024B6  2227               	addwfc	??_Mcp2515WriteCanMsg+1,f,c
  7988  0024B8  C026  F00F         	movff	??_Mcp2515WriteCanMsg,i2Spi_Write@size
  7989  0024BC  C027  F010         	movff	??_Mcp2515WriteCanMsg+1,i2Spi_Write@size+1
  7990  0024C0  0E00               	movlw	0
  7991  0024C2  BE10               	btfsc	i2Spi_Write@size+1,7,c
  7992  0024C4  0EFF               	movlw	-1
  7993  0024C6  6E11               	movwf	i2Spi_Write@size+2,c
  7994  0024C8  6E12               	movwf	i2Spi_Write@size+3,c
  7995  0024CA  ECE3  F019         	call	i2_Spi_Write	;wreg free
  7996                           
  7997                           ;mcp2515.c: 288: Mcp2515WriteCanId( mcp_addr,
  7998                           ;mcp2515.c: 289: msg->extended_identifier,
  7999                           ;mcp2515.c: 290: msg->identifier );
  8000  0024CE  C024  FFD9         	movff	Mcp2515WriteCanMsg@msg,fsr2l
  8001  0024D2  C025  FFDA         	movff	Mcp2515WriteCanMsg@msg+1,fsr2h
  8002  0024D6  50DF               	movf	indf2,w,c
  8003  0024D8  6E13               	movwf	i2Mcp2515WriteCanId@ext,c
  8004  0024DA  EE20 F001          	lfsr	2,1
  8005  0024DE  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  8006  0024E0  26D9               	addwf	fsr2l,f,c
  8007  0024E2  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  8008  0024E4  22DA               	addwfc	fsr2h,f,c
  8009  0024E6  CFDE F014          	movff	postinc2,i2Mcp2515WriteCanId@can_id
  8010  0024EA  CFDE F015          	movff	postinc2,i2Mcp2515WriteCanId@can_id+1
  8011  0024EE  CFDE F016          	movff	postinc2,i2Mcp2515WriteCanId@can_id+2
  8012  0024F2  CFDE F017          	movff	postinc2,i2Mcp2515WriteCanId@can_id+3
  8013  0024F6  5034               	movf	Mcp2515WriteCanMsg@mcp_addr,w,c
  8014  0024F8  EC15  F015         	call	i2_Mcp2515WriteCanId
  8015                           
  8016                           ;mcp2515.c: 291: dlc = msg->dlc;
  8017  0024FC  EE20 F005          	lfsr	2,5
  8018  002500  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  8019  002502  26D9               	addwf	fsr2l,f,c
  8020  002504  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  8021  002506  22DA               	addwfc	fsr2h,f,c
  8022  002508  50DF               	movf	indf2,w,c
  8023  00250A  6E33               	movwf	Mcp2515WriteCanMsg@dlc,c
  8024                           
  8025                           ;mcp2515.c: 293: if ( msg->rtr == 1)
  8026  00250C  EE20 F00E          	lfsr	2,14
  8027  002510  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  8028  002512  26D9               	addwf	fsr2l,f,c
  8029  002514  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  8030  002516  22DA               	addwfc	fsr2h,f,c
  8031  002518  04DE               	decf	postinc2,w,c
  8032  00251A  A4D8               	btfss	status,2,c
  8033  00251C  D009               	goto	i2l2524
  8034                           
  8035                           ;mcp2515.c: 294: {
  8036                           ;mcp2515.c: 295: dlc = msg->dlc | 0x40;
  8037  00251E  EE20 F005          	lfsr	2,5
  8038  002522  5024               	movf	Mcp2515WriteCanMsg@msg,w,c
  8039  002524  26D9               	addwf	fsr2l,f,c
  8040  002526  5025               	movf	Mcp2515WriteCanMsg@msg+1,w,c
  8041  002528  22DA               	addwfc	fsr2h,f,c
  8042  00252A  50DF               	movf	indf2,w,c
  8043  00252C  0940               	iorlw	64
  8044  00252E  6E33               	movwf	Mcp2515WriteCanMsg@dlc,c
  8045  002530                     i2l2524:
  8046                           
  8047                           ;mcp2515.c: 296: }
  8048                           ;mcp2515.c: 297: buf[0] = 0x02;
  8049  002530  0E02               	movlw	2
  8050  002532  6E28               	movwf	Mcp2515WriteCanMsg@buf,c
  8051                           
  8052                           ;mcp2515.c: 298: buf[1] = mcp_addr+4;
  8053  002534  5034               	movf	Mcp2515WriteCanMsg@mcp_addr,w,c
  8054  002536  0F04               	addlw	4
  8055  002538  6E29               	movwf	Mcp2515WriteCanMsg@buf+1,c
  8056                           
  8057                           ;mcp2515.c: 299: buf[2] = dlc;
  8058  00253A  C033  F02A         	movff	Mcp2515WriteCanMsg@dlc,Mcp2515WriteCanMsg@buf+2
  8059                           
  8060                           ;mcp2515.c: 300: Spi_Write(buf,3);
  8061  00253E  0E28               	movlw	low Mcp2515WriteCanMsg@buf
  8062  002540  6E0D               	movwf	i2Spi_Write@tx,c
  8063  002542  0E00               	movlw	high Mcp2515WriteCanMsg@buf
  8064  002544  6E0E               	movwf	i2Spi_Write@tx+1,c
  8065  002546  0E03               	movlw	3
  8066  002548  6E0F               	movwf	i2Spi_Write@size,c
  8067  00254A  0E00               	movlw	0
  8068  00254C  6E10               	movwf	i2Spi_Write@size+1,c
  8069  00254E  0E00               	movlw	0
  8070  002550  6E11               	movwf	i2Spi_Write@size+2,c
  8071  002552  0E00               	movlw	0
  8072  002554  6E12               	movwf	i2Spi_Write@size+3,c
  8073  002556  ECE3  F019         	call	i2_Spi_Write	;wreg free
  8074  00255A  0012               	return		;funcret
  8075  00255C                     __end_of_Mcp2515WriteCanMsg:
  8076                           	opt stack 0
  8077                           pclatu	equ	0xFFB
  8078                           pclath	equ	0xFFA
  8079                           tblptru	equ	0xFF8
  8080                           tblptrh	equ	0xFF7
  8081                           tblptrl	equ	0xFF6
  8082                           tablat	equ	0xFF5
  8083                           prodh	equ	0xFF4
  8084                           prodl	equ	0xFF3
  8085                           intcon	equ	0xFF2
  8086                           intcon2	equ	0xFF1
  8087                           intcon3	equ	0xFF0
  8088                           postinc0	equ	0xFEE
  8089                           fsr0h	equ	0xFEA
  8090                           fsr0l	equ	0xFE9
  8091                           wreg	equ	0xFE8
  8092                           indf1	equ	0xFE7
  8093                           postinc1	equ	0xFE6
  8094                           postdec1	equ	0xFE5
  8095                           fsr1h	equ	0xFE2
  8096                           fsr1l	equ	0xFE1
  8097                           indf2	equ	0xFDF
  8098                           postinc2	equ	0xFDE
  8099                           fsr2h	equ	0xFDA
  8100                           fsr2l	equ	0xFD9
  8101                           status	equ	0xFD8
  8102                           
  8103 ;; *************** function i2_Mcp2515WriteCanId *****************
  8104 ;; Defined at:
  8105 ;;		line 233 in file "mcp2515.c"
  8106 ;; Parameters:    Size  Location     Type
  8107 ;;  mcp_addr        1    wreg     unsigned char 
  8108 ;;  ext             1   18[COMRAM] unsigned char 
  8109 ;;  can_id          4   19[COMRAM] unsigned long 
  8110 ;; Auto vars:     Size  Location     Type
  8111 ;;  mcp_addr        1   26[COMRAM] unsigned char 
  8112 ;;  Mcp2515Write    6   27[COMRAM] unsigned char [6]
  8113 ;;  Mcp2515Write    2   33[COMRAM] unsigned int 
  8114 ;; Return value:  Size  Location     Type
  8115 ;;                  1    wreg      void 
  8116 ;; Registers used:
  8117 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8118 ;; Tracked objects:
  8119 ;;		On entry : 0/0
  8120 ;;		On exit  : 0/0
  8121 ;;		Unchanged: 0/0
  8122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8123 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8124 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8125 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8126 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8127 ;;Total ram usage:       17 bytes
  8128 ;; Hardware stack levels used:    1
  8129 ;; Hardware stack levels required when called:    2
  8130 ;; This function calls:
  8131 ;;		i2_Spi_Write
  8132 ;; This function is called by:
  8133 ;;		_Mcp2515WriteCanMsg
  8134 ;; This function uses a non-reentrant model
  8135 ;;
  8136                           
  8137                           	psect	text35
  8138  002A2A                     __ptext35:
  8139                           	opt stack 0
  8140  002A2A                     i2_Mcp2515WriteCanId:
  8141                           	opt stack 17
  8142                           
  8143                           ;incstack = 0
  8144                           ;i2Mcp2515WriteCanId@mcp_addr stored from wreg
  8145  002A2A  6E1B               	movwf	i2Mcp2515WriteCanId@mcp_addr,c
  8146                           
  8147                           ;mcp2515.c: 235: uint16_t canid;
  8148                           ;mcp2515.c: 236: uint8_t buf[6];
  8149                           ;mcp2515.c: 238: canid = (uint16_t)(can_id & 0x0FFFF);
  8150  002A2C  C014  F022         	movff	i2Mcp2515WriteCanId@can_id,i2Mcp2515WriteCanId@canid
  8151  002A30  C015  F023         	movff	i2Mcp2515WriteCanId@can_id+1,i2Mcp2515WriteCanId@canid+1
  8152                           
  8153                           ;mcp2515.c: 240: buf[0] = 0x02;
  8154  002A34  0E02               	movlw	2
  8155  002A36  6E1C               	movwf	i2Mcp2515WriteCanId@buf,c
  8156                           
  8157                           ;mcp2515.c: 241: buf[1] = mcp_addr;
  8158  002A38  C01B  F01D         	movff	i2Mcp2515WriteCanId@mcp_addr,i2Mcp2515WriteCanId@buf+1
  8159                           
  8160                           ;mcp2515.c: 243: if ( ext == 1)
  8161  002A3C  0413               	decf	i2Mcp2515WriteCanId@ext,w,c
  8162  002A3E  A4D8               	btfss	status,2,c
  8163  002A40  D025               	goto	i2l2436
  8164                           
  8165                           ;mcp2515.c: 244: {
  8166                           ;mcp2515.c: 245: buf[3+2] = (uint8_t) (canid & 0xFF);
  8167  002A42  C022  F021         	movff	i2Mcp2515WriteCanId@canid,i2Mcp2515WriteCanId@buf+5
  8168                           
  8169                           ;mcp2515.c: 246: buf[2+2] = (uint8_t) (canid >> 8);
  8170  002A46  5023               	movf	i2Mcp2515WriteCanId@canid+1,w,c
  8171  002A48  6E20               	movwf	i2Mcp2515WriteCanId@buf+4,c
  8172                           
  8173                           ;mcp2515.c: 247: canid = (uint16_t)( can_id / 0x10000L );
  8174  002A4A  C016  F022         	movff	i2Mcp2515WriteCanId@can_id+2,i2Mcp2515WriteCanId@canid
  8175  002A4E  C017  F023         	movff	i2Mcp2515WriteCanId@can_id+3,i2Mcp2515WriteCanId@canid+1
  8176                           
  8177                           ;mcp2515.c: 248: buf[1+2] = (uint8_t) (canid & 0x03);
  8178  002A52  5022               	movf	i2Mcp2515WriteCanId@canid,w,c
  8179  002A54  0B03               	andlw	3
  8180  002A56  6E1F               	movwf	i2Mcp2515WriteCanId@buf+3,c
  8181                           
  8182                           ;mcp2515.c: 249: buf[1+2] += (uint8_t) ((canid & 0x1C )*8);
  8183  002A58  C022  F018         	movff	i2Mcp2515WriteCanId@canid,??i2_Mcp2515WriteCanId
  8184  002A5C  0E1C               	movlw	28
  8185  002A5E  1618               	andwf	??i2_Mcp2515WriteCanId,f,c
  8186  002A60  90D8               	bcf	status,0,c
  8187  002A62  3618               	rlcf	??i2_Mcp2515WriteCanId,f,c
  8188  002A64  90D8               	bcf	status,0,c
  8189  002A66  3618               	rlcf	??i2_Mcp2515WriteCanId,f,c
  8190  002A68  90D8               	bcf	status,0,c
  8191  002A6A  3418               	rlcf	??i2_Mcp2515WriteCanId,w,c
  8192  002A6C  261F               	addwf	i2Mcp2515WriteCanId@buf+3,f,c
  8193                           
  8194                           ;mcp2515.c: 250: buf[1+2] |= 0x08;
  8195  002A6E  861F               	bsf	i2Mcp2515WriteCanId@buf+3,3,c
  8196                           
  8197                           ;mcp2515.c: 251: buf[0+2] = (uint8_t) (canid / 32 );
  8198  002A70  C022  F018         	movff	i2Mcp2515WriteCanId@canid,??i2_Mcp2515WriteCanId
  8199  002A74  C023  F019         	movff	i2Mcp2515WriteCanId@canid+1,??i2_Mcp2515WriteCanId+1
  8200  002A78  0E05               	movlw	5
  8201  002A7A  6E1A               	movwf	(??i2_Mcp2515WriteCanId+2)& (0+255),c
  8202  002A7C                     i2u143_45:
  8203  002A7C  90D8               	bcf	status,0,c
  8204  002A7E  3219               	rrcf	??i2_Mcp2515WriteCanId+1,f,c
  8205  002A80  3218               	rrcf	??i2_Mcp2515WriteCanId,f,c
  8206  002A82  2E1A               	decfsz	(??i2_Mcp2515WriteCanId+2)& (0+255),f,c
  8207  002A84  D7FB               	goto	i2u143_45
  8208  002A86  5018               	movf	??i2_Mcp2515WriteCanId,w,c
  8209  002A88  6E1E               	movwf	i2Mcp2515WriteCanId@buf+2,c
  8210                           
  8211                           ;mcp2515.c: 252: }
  8212  002A8A  D01F               	goto	i2l2442
  8213  002A8C                     i2l2436:
  8214                           
  8215                           ;mcp2515.c: 254: else
  8216                           ;mcp2515.c: 255: {
  8217                           ;mcp2515.c: 256: buf[0+2] = (uint8_t) (canid >> 3);
  8218  002A8C  C022  F018         	movff	i2Mcp2515WriteCanId@canid,??i2_Mcp2515WriteCanId
  8219  002A90  C023  F019         	movff	i2Mcp2515WriteCanId@canid+1,??i2_Mcp2515WriteCanId+1
  8220  002A94  90D8               	bcf	status,0,c
  8221  002A96  3219               	rrcf	??i2_Mcp2515WriteCanId+1,f,c
  8222  002A98  3218               	rrcf	??i2_Mcp2515WriteCanId,f,c
  8223  002A9A  90D8               	bcf	status,0,c
  8224  002A9C  3219               	rrcf	??i2_Mcp2515WriteCanId+1,f,c
  8225  002A9E  3218               	rrcf	??i2_Mcp2515WriteCanId,f,c
  8226  002AA0  90D8               	bcf	status,0,c
  8227  002AA2  3219               	rrcf	??i2_Mcp2515WriteCanId+1,f,c
  8228  002AA4  3218               	rrcf	??i2_Mcp2515WriteCanId,f,c
  8229  002AA6  5018               	movf	??i2_Mcp2515WriteCanId,w,c
  8230  002AA8  6E1E               	movwf	i2Mcp2515WriteCanId@buf+2,c
  8231                           
  8232                           ;mcp2515.c: 257: buf[1+2] = (uint8_t) ((canid & 0x07 )*32);
  8233  002AAA  C022  F018         	movff	i2Mcp2515WriteCanId@canid,??i2_Mcp2515WriteCanId
  8234  002AAE  0E07               	movlw	7
  8235  002AB0  1618               	andwf	??i2_Mcp2515WriteCanId,f,c
  8236  002AB2  0E05               	movlw	5
  8237  002AB4  6E19               	movwf	(??i2_Mcp2515WriteCanId+1)& (0+255),c
  8238  002AB6                     i2u144_45:
  8239  002AB6  90D8               	bcf	status,0,c
  8240  002AB8  3618               	rlcf	??i2_Mcp2515WriteCanId,f,c
  8241  002ABA  2E19               	decfsz	(??i2_Mcp2515WriteCanId+1)& (0+255),f,c
  8242  002ABC  D7FC               	goto	i2u144_45
  8243  002ABE  5018               	movf	??i2_Mcp2515WriteCanId,w,c
  8244  002AC0  6E1F               	movwf	i2Mcp2515WriteCanId@buf+3,c
  8245                           
  8246                           ;mcp2515.c: 258: buf[3+2] = 0;
  8247  002AC2  0E00               	movlw	0
  8248  002AC4  6E21               	movwf	i2Mcp2515WriteCanId@buf+5,c
  8249                           
  8250                           ;mcp2515.c: 259: buf[2+2] = 0;
  8251  002AC6  0E00               	movlw	0
  8252  002AC8  6E20               	movwf	i2Mcp2515WriteCanId@buf+4,c
  8253  002ACA                     i2l2442:
  8254                           
  8255                           ;mcp2515.c: 260: }
  8256                           ;mcp2515.c: 261: Spi_Write(buf,6);
  8257  002ACA  0E1C               	movlw	low i2Mcp2515WriteCanId@buf
  8258  002ACC  6E0D               	movwf	i2Spi_Write@tx,c
  8259  002ACE  0E00               	movlw	high i2Mcp2515WriteCanId@buf
  8260  002AD0  6E0E               	movwf	i2Spi_Write@tx+1,c
  8261  002AD2  0E06               	movlw	6
  8262  002AD4  6E0F               	movwf	i2Spi_Write@size,c
  8263  002AD6  0E00               	movlw	0
  8264  002AD8  6E10               	movwf	i2Spi_Write@size+1,c
  8265  002ADA  0E00               	movlw	0
  8266  002ADC  6E11               	movwf	i2Spi_Write@size+2,c
  8267  002ADE  0E00               	movlw	0
  8268  002AE0  6E12               	movwf	i2Spi_Write@size+3,c
  8269  002AE2  ECE3  F019         	call	i2_Spi_Write	;wreg free
  8270  002AE6  0012               	return		;funcret
  8271  002AE8                     __end_ofi2_Mcp2515WriteCanId:
  8272                           	opt stack 0
  8273                           pclatu	equ	0xFFB
  8274                           pclath	equ	0xFFA
  8275                           tblptru	equ	0xFF8
  8276                           tblptrh	equ	0xFF7
  8277                           tblptrl	equ	0xFF6
  8278                           tablat	equ	0xFF5
  8279                           prodh	equ	0xFF4
  8280                           prodl	equ	0xFF3
  8281                           intcon	equ	0xFF2
  8282                           intcon2	equ	0xFF1
  8283                           intcon3	equ	0xFF0
  8284                           postinc0	equ	0xFEE
  8285                           fsr0h	equ	0xFEA
  8286                           fsr0l	equ	0xFE9
  8287                           wreg	equ	0xFE8
  8288                           indf1	equ	0xFE7
  8289                           postinc1	equ	0xFE6
  8290                           postdec1	equ	0xFE5
  8291                           fsr1h	equ	0xFE2
  8292                           fsr1l	equ	0xFE1
  8293                           indf2	equ	0xFDF
  8294                           postinc2	equ	0xFDE
  8295                           fsr2h	equ	0xFDA
  8296                           fsr2l	equ	0xFD9
  8297                           status	equ	0xFD8
  8298                           
  8299 ;; *************** function _Mcp2515GetNextFreeTXBuf *****************
  8300 ;; Defined at:
  8301 ;;		line 311 in file "mcp2515.c"
  8302 ;; Parameters:    Size  Location     Type
  8303 ;;  txbuf_n         2   18[COMRAM] PTR unsigned char 
  8304 ;;		 -> Can_SendMessage@txbuf_n(1), 
  8305 ;; Auto vars:     Size  Location     Type
  8306 ;;  buf             3   24[COMRAM] unsigned char [3]
  8307 ;;  ctrlregs        3   21[COMRAM] unsigned char [3]
  8308 ;;  i               1   27[COMRAM] unsigned char 
  8309 ;; Return value:  Size  Location     Type
  8310 ;;                  1    wreg      unsigned char 
  8311 ;; Registers used:
  8312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8313 ;; Tracked objects:
  8314 ;;		On entry : 0/0
  8315 ;;		On exit  : 0/0
  8316 ;;		Unchanged: 0/0
  8317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8318 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8319 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8320 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8321 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8322 ;;Total ram usage:       10 bytes
  8323 ;; Hardware stack levels used:    1
  8324 ;; Hardware stack levels required when called:    2
  8325 ;; This function calls:
  8326 ;;		_Spi_ReadWrite
  8327 ;; This function is called by:
  8328 ;;		_Can_SendMessage
  8329 ;; This function uses a non-reentrant model
  8330 ;;
  8331                           
  8332                           	psect	text36
  8333  002C0C                     __ptext36:
  8334                           	opt stack 0
  8335  002C0C                     _Mcp2515GetNextFreeTXBuf:
  8336                           	opt stack 18
  8337                           
  8338                           ;mcp2515.c: 313: uint8_t i;
  8339                           ;mcp2515.c: 314: uint8_t ctrlregs[(3)] = {0x30,0x40,0x50};
  8340                           
  8341                           ;incstack = 0
  8342  002C0C  C0F7  F016         	movff	Mcp2515GetNextFreeTXBuf@F8153,Mcp2515GetNextFreeTXBuf@ctrlregs
  8343  002C10  C0F8  F017         	movff	Mcp2515GetNextFreeTXBuf@F8153+1,Mcp2515GetNextFreeTXBuf@ctrlregs+1
  8344  002C14  C0F9  F018         	movff	Mcp2515GetNextFreeTXBuf@F8153+2,Mcp2515GetNextFreeTXBuf@ctrlregs+2
  8345                           
  8346                           ;mcp2515.c: 315: uint8_t buf[3];
  8347                           ;mcp2515.c: 316: *txbuf_n = 0x00;
  8348  002C18  C013  FFD9         	movff	Mcp2515GetNextFreeTXBuf@txbuf_n,fsr2l
  8349  002C1C  C014  FFDA         	movff	Mcp2515GetNextFreeTXBuf@txbuf_n+1,fsr2h
  8350  002C20  0E00               	movlw	0
  8351  002C22  6EDF               	movwf	indf2,c
  8352                           
  8353                           ;mcp2515.c: 319: for (i=0; i<(3); i++)
  8354  002C24  0E00               	movlw	0
  8355  002C26  6E1C               	movwf	Mcp2515GetNextFreeTXBuf@i,c
  8356  002C28                     i2l2476:
  8357  002C28  0E02               	movlw	2
  8358  002C2A  641C               	cpfsgt	Mcp2515GetNextFreeTXBuf@i,c
  8359  002C2C  D001               	goto	i2l2480
  8360  002C2E  D030               	goto	i2l2498
  8361  002C30                     i2l2480:
  8362                           
  8363                           ;mcp2515.c: 320: {
  8364                           ;mcp2515.c: 321: buf[0] = 0x03;
  8365  002C30  0E03               	movlw	3
  8366  002C32  6E19               	movwf	Mcp2515GetNextFreeTXBuf@buf,c
  8367                           
  8368                           ;mcp2515.c: 322: buf[1] = ctrlregs[i];
  8369  002C34  501C               	movf	Mcp2515GetNextFreeTXBuf@i,w,c
  8370  002C36  0D01               	mullw	1
  8371  002C38  0E16               	movlw	low Mcp2515GetNextFreeTXBuf@ctrlregs
  8372  002C3A  24F3               	addwf	prodl,w,c
  8373  002C3C  6ED9               	movwf	fsr2l,c
  8374  002C3E  0E00               	movlw	high Mcp2515GetNextFreeTXBuf@ctrlregs
  8375  002C40  20F4               	addwfc	prodh,w,c
  8376  002C42  6EDA               	movwf	fsr2h,c
  8377  002C44  50DF               	movf	indf2,w,c
  8378  002C46  6E1A               	movwf	Mcp2515GetNextFreeTXBuf@buf+1,c
  8379                           
  8380                           ;mcp2515.c: 323: Spi_ReadWrite(buf,3);
  8381  002C48  0E19               	movlw	low Mcp2515GetNextFreeTXBuf@buf
  8382  002C4A  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  8383  002C4C  0E00               	movlw	high Mcp2515GetNextFreeTXBuf@buf
  8384  002C4E  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  8385  002C50  0E03               	movlw	3
  8386  002C52  6E0F               	movwf	Spi_ReadWrite@size,c
  8387  002C54  0E00               	movlw	0
  8388  002C56  6E10               	movwf	Spi_ReadWrite@size+1,c
  8389  002C58  0E00               	movlw	0
  8390  002C5A  6E11               	movwf	Spi_ReadWrite@size+2,c
  8391  002C5C  0E00               	movlw	0
  8392  002C5E  6E12               	movwf	Spi_ReadWrite@size+3,c
  8393  002C60  ECF6  F019         	call	_Spi_ReadWrite	;wreg free
  8394                           
  8395                           ;mcp2515.c: 325: if ( (buf[2] & 0x08) == 0 )
  8396  002C64  B61B               	btfsc	Mcp2515GetNextFreeTXBuf@buf+2,3,c
  8397  002C66  D012               	goto	i2l2494
  8398                           
  8399                           ;mcp2515.c: 326: {
  8400                           ;mcp2515.c: 327: *txbuf_n = ctrlregs[i]+1;
  8401  002C68  501C               	movf	Mcp2515GetNextFreeTXBuf@i,w,c
  8402  002C6A  0D01               	mullw	1
  8403  002C6C  0E16               	movlw	low Mcp2515GetNextFreeTXBuf@ctrlregs
  8404  002C6E  24F3               	addwf	prodl,w,c
  8405  002C70  6ED9               	movwf	fsr2l,c
  8406  002C72  0E00               	movlw	high Mcp2515GetNextFreeTXBuf@ctrlregs
  8407  002C74  20F4               	addwfc	prodh,w,c
  8408  002C76  6EDA               	movwf	fsr2h,c
  8409  002C78  50DF               	movf	indf2,w,c
  8410  002C7A  6E15               	movwf	??_Mcp2515GetNextFreeTXBuf& (0+255),c
  8411  002C7C  2815               	incf	??_Mcp2515GetNextFreeTXBuf,w,c
  8412  002C7E  C013  FFD9         	movff	Mcp2515GetNextFreeTXBuf@txbuf_n,fsr2l
  8413  002C82  C014  FFDA         	movff	Mcp2515GetNextFreeTXBuf@txbuf_n+1,fsr2h
  8414  002C86  6EDF               	movwf	indf2,c
  8415                           
  8416                           ;mcp2515.c: 328: return (0);
  8417  002C88  0E00               	movlw	0
  8418  002C8A  0012               	return	
  8419  002C8C                     i2l2494:
  8420  002C8C  2A1C               	incf	Mcp2515GetNextFreeTXBuf@i,f,c
  8421  002C8E  D7CC               	goto	i2l2476
  8422  002C90                     i2l2498:
  8423                           
  8424                           ;mcp2515.c: 329: }
  8425                           ;mcp2515.c: 330: }
  8426                           ;mcp2515.c: 331: return (2);
  8427  002C90  0E02               	movlw	2
  8428  002C92  0012               	return	
  8429  002C94                     __end_of_Mcp2515GetNextFreeTXBuf:
  8430                           	opt stack 0
  8431                           pclatu	equ	0xFFB
  8432                           pclath	equ	0xFFA
  8433                           tblptru	equ	0xFF8
  8434                           tblptrh	equ	0xFF7
  8435                           tblptrl	equ	0xFF6
  8436                           tablat	equ	0xFF5
  8437                           prodh	equ	0xFF4
  8438                           prodl	equ	0xFF3
  8439                           intcon	equ	0xFF2
  8440                           intcon2	equ	0xFF1
  8441                           intcon3	equ	0xFF0
  8442                           postinc0	equ	0xFEE
  8443                           fsr0h	equ	0xFEA
  8444                           fsr0l	equ	0xFE9
  8445                           wreg	equ	0xFE8
  8446                           indf1	equ	0xFE7
  8447                           postinc1	equ	0xFE6
  8448                           postdec1	equ	0xFE5
  8449                           fsr1h	equ	0xFE2
  8450                           fsr1l	equ	0xFE1
  8451                           indf2	equ	0xFDF
  8452                           postinc2	equ	0xFDE
  8453                           fsr2h	equ	0xFDA
  8454                           fsr2l	equ	0xFD9
  8455                           status	equ	0xFD8
  8456                           
  8457 ;; *************** function _Can_ReadInBuffer *****************
  8458 ;; Defined at:
  8459 ;;		line 94 in file "can.c"
  8460 ;; Parameters:    Size  Location     Type
  8461 ;;		None
  8462 ;; Auto vars:     Size  Location     Type
  8463 ;;  i               1   70[COMRAM] unsigned char 
  8464 ;;  rdStatus        1   69[COMRAM] unsigned char 
  8465 ;;  error           1   68[COMRAM] unsigned char 
  8466 ;; Return value:  Size  Location     Type
  8467 ;;                  1    wreg      unsigned char 
  8468 ;; Registers used:
  8469 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8470 ;; Tracked objects:
  8471 ;;		On entry : 0/0
  8472 ;;		On exit  : 0/0
  8473 ;;		Unchanged: 0/0
  8474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8476 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8478 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8479 ;;Total ram usage:        3 bytes
  8480 ;; Hardware stack levels used:    1
  8481 ;; Hardware stack levels required when called:    5
  8482 ;; This function calls:
  8483 ;;		_Can_ReadMessage
  8484 ;; This function is called by:
  8485 ;;		_Can_Isr
  8486 ;; This function uses a non-reentrant model
  8487 ;;
  8488                           
  8489                           	psect	text37
  8490  003212                     __ptext37:
  8491                           	opt stack 0
  8492  003212                     _Can_ReadInBuffer:
  8493                           	opt stack 17
  8494                           
  8495                           ;can.c: 96: uint8_t i;
  8496                           ;can.c: 97: uint8_t error=0;
  8497                           
  8498                           ;incstack = 0
  8499  003212  0E00               	movlw	0
  8500  003214  6E45               	movwf	Can_ReadInBuffer@error,c
  8501                           
  8502                           ;can.c: 98: uint8_t rdStatus;
  8503                           ;can.c: 100: for(i=0;i<2;i++)
  8504  003216  0E00               	movlw	0
  8505  003218  6E47               	movwf	Can_ReadInBuffer@i,c
  8506  00321A                     i2l2932:
  8507  00321A  0E01               	movlw	1
  8508  00321C  6447               	cpfsgt	Can_ReadInBuffer@i,c
  8509  00321E  D001               	goto	i2l2936
  8510  003220  0012               	return	
  8511  003222                     i2l2936:
  8512                           
  8513                           ;can.c: 101: {
  8514                           ;can.c: 102: rdStatus = Can_ReadMessage(&rxBuffer[rxBufferPtrIn]);
  8515  003222  505A               	movf	_rxBufferPtrIn,w,c
  8516  003224  0D11               	mullw	17
  8517  003226  0E68               	movlw	low _rxBuffer
  8518  003228  24F3               	addwf	prodl,w,c
  8519  00322A  6E3F               	movwf	Can_ReadMessage@msg,c
  8520  00322C  0E01               	movlw	high _rxBuffer
  8521  00322E  20F4               	addwfc	prodh,w,c
  8522  003230  6E40               	movwf	Can_ReadMessage@msg+1,c
  8523  003232  EC37  F014         	call	_Can_ReadMessage	;wreg free
  8524  003236  6E46               	movwf	Can_ReadInBuffer@rdStatus,c
  8525                           
  8526                           ;can.c: 103: if((rxBufferCount) < 4)
  8527  003238  0E04               	movlw	4
  8528  00323A  6059               	cpfslt	_rxBufferCount,c
  8529  00323C  D008               	goto	i2l2946
  8530                           
  8531                           ;can.c: 104: {
  8532                           ;can.c: 105: if(rdStatus == (0))
  8533  00323E  5046               	movf	Can_ReadInBuffer@rdStatus,w,c
  8534  003240  A4D8               	btfss	status,2,c
  8535  003242  D007               	goto	i2l2948
  8536                           
  8537                           ;can.c: 106: {
  8538                           ;can.c: 107: rxBufferCount++;
  8539  003244  2A59               	incf	_rxBufferCount,f,c
  8540                           
  8541                           ;can.c: 108: rxBufferPtrIn = (rxBufferPtrIn + 1) % 4;
  8542  003246  285A               	incf	_rxBufferPtrIn,w,c
  8543  003248  0B03               	andlw	3
  8544  00324A  6E5A               	movwf	_rxBufferPtrIn,c
  8545                           
  8546                           ;can.c: 109: }
  8547                           ;can.c: 110: }
  8548  00324C  D002               	goto	i2l2948
  8549  00324E                     i2l2946:
  8550                           
  8551                           ;can.c: 111: else
  8552                           ;can.c: 112: {
  8553                           ;can.c: 113: error = 1;
  8554  00324E  0E01               	movlw	1
  8555  003250  6E45               	movwf	Can_ReadInBuffer@error,c
  8556  003252                     i2l2948:
  8557  003252  2A47               	incf	Can_ReadInBuffer@i,f,c
  8558  003254  D7E2               	goto	i2l2932
  8559  003256                     __end_of_Can_ReadInBuffer:
  8560                           	opt stack 0
  8561                           pclatu	equ	0xFFB
  8562                           pclath	equ	0xFFA
  8563                           tblptru	equ	0xFF8
  8564                           tblptrh	equ	0xFF7
  8565                           tblptrl	equ	0xFF6
  8566                           tablat	equ	0xFF5
  8567                           prodh	equ	0xFF4
  8568                           prodl	equ	0xFF3
  8569                           intcon	equ	0xFF2
  8570                           intcon2	equ	0xFF1
  8571                           intcon3	equ	0xFF0
  8572                           postinc0	equ	0xFEE
  8573                           fsr0h	equ	0xFEA
  8574                           fsr0l	equ	0xFE9
  8575                           wreg	equ	0xFE8
  8576                           indf1	equ	0xFE7
  8577                           postinc1	equ	0xFE6
  8578                           postdec1	equ	0xFE5
  8579                           fsr1h	equ	0xFE2
  8580                           fsr1l	equ	0xFE1
  8581                           indf2	equ	0xFDF
  8582                           postinc2	equ	0xFDE
  8583                           fsr2h	equ	0xFDA
  8584                           fsr2l	equ	0xFD9
  8585                           status	equ	0xFD8
  8586                           
  8587 ;; *************** function _Can_ReadMessage *****************
  8588 ;; Defined at:
  8589 ;;		line 372 in file "can.c"
  8590 ;; Parameters:    Size  Location     Type
  8591 ;;  msg             2   62[COMRAM] PTR struct CANMESSAGE
  8592 ;;		 -> rxBuffer(68), 
  8593 ;; Auto vars:     Size  Location     Type
  8594 ;;  buf             4   64[COMRAM] unsigned char [4]
  8595 ;; Return value:  Size  Location     Type
  8596 ;;                  1    wreg      unsigned char 
  8597 ;; Registers used:
  8598 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8599 ;; Tracked objects:
  8600 ;;		On entry : 0/0
  8601 ;;		On exit  : 0/0
  8602 ;;		Unchanged: 0/0
  8603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8604 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8605 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8607 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8608 ;;Total ram usage:        6 bytes
  8609 ;; Hardware stack levels used:    1
  8610 ;; Hardware stack levels required when called:    4
  8611 ;; This function calls:
  8612 ;;		_Mcp2515ReadCanMsg
  8613 ;;		_Spi_ReadWrite
  8614 ;;		i2_Spi_Write
  8615 ;; This function is called by:
  8616 ;;		_Can_ReadInBuffer
  8617 ;; This function uses a non-reentrant model
  8618 ;;
  8619                           
  8620                           	psect	text38
  8621  00286E                     __ptext38:
  8622                           	opt stack 0
  8623  00286E                     _Can_ReadMessage:
  8624                           	opt stack 17
  8625                           
  8626                           ;can.c: 374: uint8_t buf[4];
  8627                           ;can.c: 376: buf[0] = 0xA0;
  8628                           
  8629                           ;incstack = 0
  8630  00286E  0EA0               	movlw	160
  8631  002870  6E41               	movwf	Can_ReadMessage@buf,c
  8632                           
  8633                           ;can.c: 377: Spi_ReadWrite(buf,2);
  8634  002872  0E41               	movlw	low Can_ReadMessage@buf
  8635  002874  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  8636  002876  0E00               	movlw	high Can_ReadMessage@buf
  8637  002878  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  8638  00287A  0E02               	movlw	2
  8639  00287C  6E0F               	movwf	Spi_ReadWrite@size,c
  8640  00287E  0E00               	movlw	0
  8641  002880  6E10               	movwf	Spi_ReadWrite@size+1,c
  8642  002882  0E00               	movlw	0
  8643  002884  6E11               	movwf	Spi_ReadWrite@size+2,c
  8644  002886  0E00               	movlw	0
  8645  002888  6E12               	movwf	Spi_ReadWrite@size+3,c
  8646  00288A  ECF6  F019         	call	_Spi_ReadWrite	;wreg free
  8647                           
  8648                           ;can.c: 379: if ( buf[1] & (1<<0) )
  8649  00288E  A042               	btfss	Can_ReadMessage@buf+1,0,c
  8650  002890  D034               	goto	i2l247
  8651                           
  8652                           ;can.c: 380: {
  8653                           ;can.c: 381: Mcp2515ReadCanMsg( (0x61), msg);
  8654  002892  C03F  F030         	movff	Can_ReadMessage@msg,Mcp2515ReadCanMsg@msg
  8655  002896  C040  F031         	movff	Can_ReadMessage@msg+1,Mcp2515ReadCanMsg@msg+1
  8656  00289A  0E61               	movlw	97
  8657  00289C  ECAE  F012         	call	_Mcp2515ReadCanMsg
  8658                           
  8659                           ;can.c: 382: buf[0] = 0x05;
  8660  0028A0  0E05               	movlw	5
  8661  0028A2  6E41               	movwf	Can_ReadMessage@buf,c
  8662                           
  8663                           ;can.c: 383: buf[1] = 0x2C;
  8664  0028A4  0E2C               	movlw	44
  8665  0028A6  6E42               	movwf	Can_ReadMessage@buf+1,c
  8666                           
  8667                           ;can.c: 384: buf[2] = 0x01;
  8668  0028A8  0E01               	movlw	1
  8669  0028AA  6E43               	movwf	Can_ReadMessage@buf+2,c
  8670                           
  8671                           ;can.c: 385: buf[3] = 0;
  8672  0028AC  0E00               	movlw	0
  8673  0028AE  6E44               	movwf	Can_ReadMessage@buf+3,c
  8674                           
  8675                           ;can.c: 386: Spi_Write(buf,4);
  8676  0028B0  0E41               	movlw	low Can_ReadMessage@buf
  8677  0028B2  6E0D               	movwf	i2Spi_Write@tx,c
  8678  0028B4  0E00               	movlw	high Can_ReadMessage@buf
  8679  0028B6  6E0E               	movwf	i2Spi_Write@tx+1,c
  8680  0028B8  0E04               	movlw	4
  8681  0028BA  6E0F               	movwf	i2Spi_Write@size,c
  8682  0028BC  0E00               	movlw	0
  8683  0028BE  6E10               	movwf	i2Spi_Write@size+1,c
  8684  0028C0  0E00               	movlw	0
  8685  0028C2  6E11               	movwf	i2Spi_Write@size+2,c
  8686  0028C4  0E00               	movlw	0
  8687  0028C6  6E12               	movwf	i2Spi_Write@size+3,c
  8688  0028C8  ECE3  F019         	call	i2_Spi_Write	;wreg free
  8689                           
  8690                           ;can.c: 387: buf[0] = 0x05;
  8691  0028CC  0E05               	movlw	5
  8692  0028CE  6E41               	movwf	Can_ReadMessage@buf,c
  8693                           
  8694                           ;can.c: 388: buf[1] = 0x2B;
  8695  0028D0  0E2B               	movlw	43
  8696  0028D2  6E42               	movwf	Can_ReadMessage@buf+1,c
  8697                           
  8698                           ;can.c: 389: buf[2] = 0x01;
  8699  0028D4  0E01               	movlw	1
  8700  0028D6  6E43               	movwf	Can_ReadMessage@buf+2,c
  8701                           
  8702                           ;can.c: 390: buf[3] = 0xFF;
  8703  0028D8  6844               	setf	Can_ReadMessage@buf+3,c
  8704                           
  8705                           ;can.c: 391: Spi_Write(buf,4);
  8706  0028DA  0E41               	movlw	low Can_ReadMessage@buf
  8707  0028DC  6E0D               	movwf	i2Spi_Write@tx,c
  8708  0028DE  0E00               	movlw	high Can_ReadMessage@buf
  8709  0028E0  6E0E               	movwf	i2Spi_Write@tx+1,c
  8710  0028E2  0E04               	movlw	4
  8711  0028E4  6E0F               	movwf	i2Spi_Write@size,c
  8712  0028E6  0E00               	movlw	0
  8713  0028E8  6E10               	movwf	i2Spi_Write@size+1,c
  8714  0028EA  0E00               	movlw	0
  8715  0028EC  6E11               	movwf	i2Spi_Write@size+2,c
  8716  0028EE  0E00               	movlw	0
  8717  0028F0  6E12               	movwf	i2Spi_Write@size+3,c
  8718  0028F2  ECE3  F019         	call	i2_Spi_Write	;wreg free
  8719  0028F6                     i2l2680:
  8720                           
  8721                           ;can.c: 392: return (0);
  8722  0028F6  0E00               	movlw	0
  8723  0028F8  0012               	return	
  8724  0028FA                     i2l247:
  8725                           
  8726                           ;can.c: 395: else if ( buf[1] & (1<<1) )
  8727  0028FA  A242               	btfss	Can_ReadMessage@buf+1,1,c
  8728  0028FC  D033               	goto	i2l2712
  8729                           
  8730                           ;can.c: 396: {
  8731                           ;can.c: 398: Mcp2515ReadCanMsg( (0x71), msg);
  8732  0028FE  C03F  F030         	movff	Can_ReadMessage@msg,Mcp2515ReadCanMsg@msg
  8733  002902  C040  F031         	movff	Can_ReadMessage@msg+1,Mcp2515ReadCanMsg@msg+1
  8734  002906  0E71               	movlw	113
  8735  002908  ECAE  F012         	call	_Mcp2515ReadCanMsg
  8736                           
  8737                           ;can.c: 399: buf[0] = 0x05;
  8738  00290C  0E05               	movlw	5
  8739  00290E  6E41               	movwf	Can_ReadMessage@buf,c
  8740                           
  8741                           ;can.c: 400: buf[1] = 0x2C;
  8742  002910  0E2C               	movlw	44
  8743  002912  6E42               	movwf	Can_ReadMessage@buf+1,c
  8744                           
  8745                           ;can.c: 401: buf[2] = 0x02;
  8746  002914  0E02               	movlw	2
  8747  002916  6E43               	movwf	Can_ReadMessage@buf+2,c
  8748                           
  8749                           ;can.c: 402: buf[3] = 0;
  8750  002918  0E00               	movlw	0
  8751  00291A  6E44               	movwf	Can_ReadMessage@buf+3,c
  8752                           
  8753                           ;can.c: 403: Spi_Write(buf,4);
  8754  00291C  0E41               	movlw	low Can_ReadMessage@buf
  8755  00291E  6E0D               	movwf	i2Spi_Write@tx,c
  8756  002920  0E00               	movlw	high Can_ReadMessage@buf
  8757  002922  6E0E               	movwf	i2Spi_Write@tx+1,c
  8758  002924  0E04               	movlw	4
  8759  002926  6E0F               	movwf	i2Spi_Write@size,c
  8760  002928  0E00               	movlw	0
  8761  00292A  6E10               	movwf	i2Spi_Write@size+1,c
  8762  00292C  0E00               	movlw	0
  8763  00292E  6E11               	movwf	i2Spi_Write@size+2,c
  8764  002930  0E00               	movlw	0
  8765  002932  6E12               	movwf	i2Spi_Write@size+3,c
  8766  002934  ECE3  F019         	call	i2_Spi_Write	;wreg free
  8767                           
  8768                           ;can.c: 404: buf[0] = 0x05;
  8769  002938  0E05               	movlw	5
  8770  00293A  6E41               	movwf	Can_ReadMessage@buf,c
  8771                           
  8772                           ;can.c: 405: buf[1] = 0x2B;
  8773  00293C  0E2B               	movlw	43
  8774  00293E  6E42               	movwf	Can_ReadMessage@buf+1,c
  8775                           
  8776                           ;can.c: 406: buf[2] = 0x02;
  8777  002940  0E02               	movlw	2
  8778  002942  6E43               	movwf	Can_ReadMessage@buf+2,c
  8779                           
  8780                           ;can.c: 407: buf[3] = 0xFF;
  8781  002944  6844               	setf	Can_ReadMessage@buf+3,c
  8782                           
  8783                           ;can.c: 408: Spi_Write(buf,4);
  8784  002946  0E41               	movlw	low Can_ReadMessage@buf
  8785  002948  6E0D               	movwf	i2Spi_Write@tx,c
  8786  00294A  0E00               	movlw	high Can_ReadMessage@buf
  8787  00294C  6E0E               	movwf	i2Spi_Write@tx+1,c
  8788  00294E  0E04               	movlw	4
  8789  002950  6E0F               	movwf	i2Spi_Write@size,c
  8790  002952  0E00               	movlw	0
  8791  002954  6E10               	movwf	i2Spi_Write@size+1,c
  8792  002956  0E00               	movlw	0
  8793  002958  6E11               	movwf	i2Spi_Write@size+2,c
  8794  00295A  0E00               	movlw	0
  8795  00295C  6E12               	movwf	i2Spi_Write@size+3,c
  8796  00295E  ECE3  F019         	call	i2_Spi_Write	;wreg free
  8797  002962  D7C9               	goto	i2l2680
  8798  002964                     i2l2712:
  8799                           
  8800                           ;can.c: 410: }
  8801                           ;can.c: 412: return (4);
  8802  002964  0E04               	movlw	4
  8803  002966  0012               	return	
  8804  002968                     __end_of_Can_ReadMessage:
  8805                           	opt stack 0
  8806                           pclatu	equ	0xFFB
  8807                           pclath	equ	0xFFA
  8808                           tblptru	equ	0xFF8
  8809                           tblptrh	equ	0xFF7
  8810                           tblptrl	equ	0xFF6
  8811                           tablat	equ	0xFF5
  8812                           prodh	equ	0xFF4
  8813                           prodl	equ	0xFF3
  8814                           intcon	equ	0xFF2
  8815                           intcon2	equ	0xFF1
  8816                           intcon3	equ	0xFF0
  8817                           postinc0	equ	0xFEE
  8818                           fsr0h	equ	0xFEA
  8819                           fsr0l	equ	0xFE9
  8820                           wreg	equ	0xFE8
  8821                           indf1	equ	0xFE7
  8822                           postinc1	equ	0xFE6
  8823                           postdec1	equ	0xFE5
  8824                           fsr1h	equ	0xFE2
  8825                           fsr1l	equ	0xFE1
  8826                           indf2	equ	0xFDF
  8827                           postinc2	equ	0xFDE
  8828                           fsr2h	equ	0xFDA
  8829                           fsr2l	equ	0xFD9
  8830                           status	equ	0xFD8
  8831                           
  8832 ;; *************** function i2_Spi_Write *****************
  8833 ;; Defined at:
  8834 ;;		line 332 in file "can.c"
  8835 ;; Parameters:    Size  Location     Type
  8836 ;;  tx              2   12[COMRAM] PTR unsigned char 
  8837 ;;		 -> Mcp2515WriteCanMsg@buf(10), Mcp2515WriteCanId@buf(6), Mcp2515Sleep@cmdMask4(3), Mcp2515_Init@cmdWrite3(3), 
  8838 ;;		 -> Mcp2515_Init@cmdMask4(4), Mcp2515_Reset@cmd(1), Can_SendMessage@buf(4), Can_ReadMessage@buf(4), 
  8839 ;;  size            4   14[COMRAM] unsigned long 
  8840 ;; Auto vars:     Size  Location     Type
  8841 ;;		None
  8842 ;; Return value:  Size  Location     Type
  8843 ;;                  1    wreg      void 
  8844 ;; Registers used:
  8845 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8846 ;; Tracked objects:
  8847 ;;		On entry : 0/0
  8848 ;;		On exit  : 0/0
  8849 ;;		Unchanged: 0/0
  8850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8851 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8854 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8855 ;;Total ram usage:        6 bytes
  8856 ;; Hardware stack levels used:    1
  8857 ;; Hardware stack levels required when called:    1
  8858 ;; This function calls:
  8859 ;;		i2_SPIRW
  8860 ;; This function is called by:
  8861 ;;		_Can_ReadMessage
  8862 ;;		_Can_SendMessage
  8863 ;;		_Mcp2515WriteCanMsg
  8864 ;;		i2_Mcp2515WriteCanId
  8865 ;; This function uses a non-reentrant model
  8866 ;;
  8867                           
  8868                           	psect	text39
  8869  0033C6                     __ptext39:
  8870                           	opt stack 0
  8871  0033C6                     i2_Spi_Write:
  8872                           	opt stack 19
  8873                           
  8874                           ;can.c: 334: SPIRW(tx, 0, size);
  8875                           
  8876                           ;incstack = 0
  8877  0033C6  C00D  F001         	movff	i2Spi_Write@tx,i2SPIRW@tx
  8878  0033CA  C00E  F002         	movff	i2Spi_Write@tx+1,i2SPIRW@tx+1
  8879  0033CE  0E00               	movlw	0
  8880  0033D0  6E03               	movwf	i2SPIRW@rx,c
  8881  0033D2  0E00               	movlw	0
  8882  0033D4  6E04               	movwf	i2SPIRW@rx+1,c
  8883  0033D6  C00F  F005         	movff	i2Spi_Write@size,i2SPIRW@size
  8884  0033DA  C010  F006         	movff	i2Spi_Write@size+1,i2SPIRW@size+1
  8885  0033DE  C011  F007         	movff	i2Spi_Write@size+2,i2SPIRW@size+2
  8886  0033E2  C012  F008         	movff	i2Spi_Write@size+3,i2SPIRW@size+3
  8887  0033E6  EC3A  F017         	call	i2_SPIRW	;wreg free
  8888  0033EA  0012               	return		;funcret
  8889  0033EC                     __end_ofi2_Spi_Write:
  8890                           	opt stack 0
  8891                           pclatu	equ	0xFFB
  8892                           pclath	equ	0xFFA
  8893                           tblptru	equ	0xFF8
  8894                           tblptrh	equ	0xFF7
  8895                           tblptrl	equ	0xFF6
  8896                           tablat	equ	0xFF5
  8897                           prodh	equ	0xFF4
  8898                           prodl	equ	0xFF3
  8899                           intcon	equ	0xFF2
  8900                           intcon2	equ	0xFF1
  8901                           intcon3	equ	0xFF0
  8902                           postinc0	equ	0xFEE
  8903                           fsr0h	equ	0xFEA
  8904                           fsr0l	equ	0xFE9
  8905                           wreg	equ	0xFE8
  8906                           indf1	equ	0xFE7
  8907                           postinc1	equ	0xFE6
  8908                           postdec1	equ	0xFE5
  8909                           fsr1h	equ	0xFE2
  8910                           fsr1l	equ	0xFE1
  8911                           indf2	equ	0xFDF
  8912                           postinc2	equ	0xFDE
  8913                           fsr2h	equ	0xFDA
  8914                           fsr2l	equ	0xFD9
  8915                           status	equ	0xFD8
  8916                           
  8917 ;; *************** function _Mcp2515ReadCanMsg *****************
  8918 ;; Defined at:
  8919 ;;		line 194 in file "mcp2515.c"
  8920 ;; Parameters:    Size  Location     Type
  8921 ;;  mcp_addr        1    wreg     const unsigned char 
  8922 ;;  msg             2   47[COMRAM] PTR struct CANMESSAGE
  8923 ;;		 -> rxBuffer(68), 
  8924 ;; Auto vars:     Size  Location     Type
  8925 ;;  mcp_addr        1   61[COMRAM] const unsigned char 
  8926 ;;  cmd            10   51[COMRAM] unsigned char [10]
  8927 ;; Return value:  Size  Location     Type
  8928 ;;                  1    wreg      void 
  8929 ;; Registers used:
  8930 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8931 ;; Tracked objects:
  8932 ;;		On entry : 0/0
  8933 ;;		On exit  : 0/0
  8934 ;;		Unchanged: 0/0
  8935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8936 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8937 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8938 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8939 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8940 ;;Total ram usage:       15 bytes
  8941 ;; Hardware stack levels used:    1
  8942 ;; Hardware stack levels required when called:    3
  8943 ;; This function calls:
  8944 ;;		_Mcp2515ReadCanId
  8945 ;;		_Spi_ReadWrite
  8946 ;;		_memcpy
  8947 ;; This function is called by:
  8948 ;;		_Can_ReadMessage
  8949 ;; This function uses a non-reentrant model
  8950 ;;
  8951                           
  8952                           	psect	text40
  8953  00255C                     __ptext40:
  8954                           	opt stack 0
  8955  00255C                     _Mcp2515ReadCanMsg:
  8956                           	opt stack 17
  8957                           
  8958                           ;incstack = 0
  8959                           ;Mcp2515ReadCanMsg@mcp_addr stored from wreg
  8960  00255C  6E3E               	movwf	Mcp2515ReadCanMsg@mcp_addr,c
  8961                           
  8962                           ;mcp2515.c: 197: uint8_t cmd[10];
  8963                           ;mcp2515.c: 202: Mcp2515ReadCanId( mcp_addr, &(msg->extended_identifier),
  8964                           ;mcp2515.c: 203: &(msg->identifier) );
  8965  00255E  C030  F013         	movff	Mcp2515ReadCanMsg@msg,Mcp2515ReadCanId@ext
  8966  002562  C031  F014         	movff	Mcp2515ReadCanMsg@msg+1,Mcp2515ReadCanId@ext+1
  8967  002566  0E01               	movlw	1
  8968  002568  2430               	addwf	Mcp2515ReadCanMsg@msg,w,c
  8969  00256A  6E15               	movwf	Mcp2515ReadCanId@can_id,c
  8970  00256C  0E00               	movlw	0
  8971  00256E  2031               	addwfc	Mcp2515ReadCanMsg@msg+1,w,c
  8972  002570  6E16               	movwf	Mcp2515ReadCanId@can_id+1,c
  8973  002572  503E               	movf	Mcp2515ReadCanMsg@mcp_addr,w,c
  8974  002574  EC8B  F00D         	call	_Mcp2515ReadCanId
  8975                           
  8976                           ;mcp2515.c: 205: cmd[0] = 0x03;
  8977  002578  0E03               	movlw	3
  8978  00257A  6E34               	movwf	Mcp2515ReadCanMsg@cmd,c
  8979                           
  8980                           ;mcp2515.c: 206: cmd[1] = mcp_addr-1;
  8981  00257C  043E               	decf	Mcp2515ReadCanMsg@mcp_addr,w,c
  8982  00257E  6E35               	movwf	Mcp2515ReadCanMsg@cmd+1,c
  8983                           
  8984                           ;mcp2515.c: 207: Spi_ReadWrite(cmd,3);
  8985  002580  0E34               	movlw	low Mcp2515ReadCanMsg@cmd
  8986  002582  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  8987  002584  0E00               	movlw	high Mcp2515ReadCanMsg@cmd
  8988  002586  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  8989  002588  0E03               	movlw	3
  8990  00258A  6E0F               	movwf	Spi_ReadWrite@size,c
  8991  00258C  0E00               	movlw	0
  8992  00258E  6E10               	movwf	Spi_ReadWrite@size+1,c
  8993  002590  0E00               	movlw	0
  8994  002592  6E11               	movwf	Spi_ReadWrite@size+2,c
  8995  002594  0E00               	movlw	0
  8996  002596  6E12               	movwf	Spi_ReadWrite@size+3,c
  8997  002598  ECF6  F019         	call	_Spi_ReadWrite	;wreg free
  8998                           
  8999                           ;mcp2515.c: 208: msg->rtr = 0;
  9000  00259C  EE20 F00E          	lfsr	2,14
  9001  0025A0  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  9002  0025A2  26D9               	addwf	fsr2l,f,c
  9003  0025A4  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  9004  0025A6  22DA               	addwfc	fsr2h,f,c
  9005  0025A8  0E00               	movlw	0
  9006  0025AA  6EDF               	movwf	indf2,c
  9007                           
  9008                           ;mcp2515.c: 209: if (cmd[2] & 0x08)
  9009  0025AC  A636               	btfss	Mcp2515ReadCanMsg@cmd+2,3,c
  9010  0025AE  D008               	goto	i2l2458
  9011                           
  9012                           ;mcp2515.c: 210: {
  9013                           ;mcp2515.c: 211: msg->rtr = 1;
  9014  0025B0  EE20 F00E          	lfsr	2,14
  9015  0025B4  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  9016  0025B6  26D9               	addwf	fsr2l,f,c
  9017  0025B8  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  9018  0025BA  22DA               	addwfc	fsr2h,f,c
  9019  0025BC  0E01               	movlw	1
  9020  0025BE  6EDF               	movwf	indf2,c
  9021  0025C0                     i2l2458:
  9022                           
  9023                           ;mcp2515.c: 212: }
  9024                           ;mcp2515.c: 214: cmd[0] = 0x03;
  9025  0025C0  0E03               	movlw	3
  9026  0025C2  6E34               	movwf	Mcp2515ReadCanMsg@cmd,c
  9027                           
  9028                           ;mcp2515.c: 215: cmd[1] = mcp_addr+4;
  9029  0025C4  503E               	movf	Mcp2515ReadCanMsg@mcp_addr,w,c
  9030  0025C6  0F04               	addlw	4
  9031  0025C8  6E35               	movwf	Mcp2515ReadCanMsg@cmd+1,c
  9032                           
  9033                           ;mcp2515.c: 216: Spi_ReadWrite(cmd,3);
  9034  0025CA  0E34               	movlw	low Mcp2515ReadCanMsg@cmd
  9035  0025CC  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  9036  0025CE  0E00               	movlw	high Mcp2515ReadCanMsg@cmd
  9037  0025D0  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  9038  0025D2  0E03               	movlw	3
  9039  0025D4  6E0F               	movwf	Spi_ReadWrite@size,c
  9040  0025D6  0E00               	movlw	0
  9041  0025D8  6E10               	movwf	Spi_ReadWrite@size+1,c
  9042  0025DA  0E00               	movlw	0
  9043  0025DC  6E11               	movwf	Spi_ReadWrite@size+2,c
  9044  0025DE  0E00               	movlw	0
  9045  0025E0  6E12               	movwf	Spi_ReadWrite@size+3,c
  9046  0025E2  ECF6  F019         	call	_Spi_ReadWrite	;wreg free
  9047                           
  9048                           ;mcp2515.c: 217: msg->dlc = cmd[2] & 0x0F;
  9049  0025E6  EE20 F005          	lfsr	2,5
  9050  0025EA  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  9051  0025EC  26D9               	addwf	fsr2l,f,c
  9052  0025EE  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  9053  0025F0  22DA               	addwfc	fsr2h,f,c
  9054  0025F2  5036               	movf	Mcp2515ReadCanMsg@cmd+2,w,c
  9055  0025F4  0B0F               	andlw	15
  9056  0025F6  6EDF               	movwf	indf2,c
  9057                           
  9058                           ;mcp2515.c: 219: cmd[0] = 0x03;
  9059  0025F8  0E03               	movlw	3
  9060  0025FA  6E34               	movwf	Mcp2515ReadCanMsg@cmd,c
  9061                           
  9062                           ;mcp2515.c: 220: cmd[1] = mcp_addr+5;
  9063  0025FC  503E               	movf	Mcp2515ReadCanMsg@mcp_addr,w,c
  9064  0025FE  0F05               	addlw	5
  9065  002600  6E35               	movwf	Mcp2515ReadCanMsg@cmd+1,c
  9066                           
  9067                           ;mcp2515.c: 221: Spi_ReadWrite(cmd,msg->dlc + 2);
  9068  002602  0E34               	movlw	low Mcp2515ReadCanMsg@cmd
  9069  002604  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  9070  002606  0E00               	movlw	high Mcp2515ReadCanMsg@cmd
  9071  002608  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  9072  00260A  EE20 F005          	lfsr	2,5
  9073  00260E  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  9074  002610  26D9               	addwf	fsr2l,f,c
  9075  002612  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  9076  002614  22DA               	addwfc	fsr2h,f,c
  9077  002616  50DF               	movf	indf2,w,c
  9078  002618  6E32               	movwf	??_Mcp2515ReadCanMsg& (0+255),c
  9079  00261A  6A33               	clrf	(??_Mcp2515ReadCanMsg+1)& (0+255),c
  9080  00261C  0E02               	movlw	2
  9081  00261E  2632               	addwf	??_Mcp2515ReadCanMsg,f,c
  9082  002620  0E00               	movlw	0
  9083  002622  2233               	addwfc	??_Mcp2515ReadCanMsg+1,f,c
  9084  002624  C032  F00F         	movff	??_Mcp2515ReadCanMsg,Spi_ReadWrite@size
  9085  002628  C033  F010         	movff	??_Mcp2515ReadCanMsg+1,Spi_ReadWrite@size+1
  9086  00262C  0E00               	movlw	0
  9087  00262E  BE10               	btfsc	Spi_ReadWrite@size+1,7,c
  9088  002630  0EFF               	movlw	-1
  9089  002632  6E11               	movwf	Spi_ReadWrite@size+2,c
  9090  002634  6E12               	movwf	Spi_ReadWrite@size+3,c
  9091  002636  ECF6  F019         	call	_Spi_ReadWrite	;wreg free
  9092                           
  9093                           ;mcp2515.c: 222: memcpy((void *)msg->dta,(const void *)&cmd[2],msg->dlc);
  9094  00263A  0E06               	movlw	6
  9095  00263C  2430               	addwf	Mcp2515ReadCanMsg@msg,w,c
  9096  00263E  6E01               	movwf	memcpy@d1,c
  9097  002640  0E00               	movlw	0
  9098  002642  2031               	addwfc	Mcp2515ReadCanMsg@msg+1,w,c
  9099  002644  6E02               	movwf	memcpy@d1+1,c
  9100  002646  0E36               	movlw	low (Mcp2515ReadCanMsg@cmd+2)
  9101  002648  6E03               	movwf	memcpy@s1,c
  9102  00264A  0E00               	movlw	high (Mcp2515ReadCanMsg@cmd+2)
  9103  00264C  6E04               	movwf	memcpy@s1+1,c
  9104  00264E  EE20 F005          	lfsr	2,5
  9105  002652  5030               	movf	Mcp2515ReadCanMsg@msg,w,c
  9106  002654  26D9               	addwf	fsr2l,f,c
  9107  002656  5031               	movf	Mcp2515ReadCanMsg@msg+1,w,c
  9108  002658  22DA               	addwfc	fsr2h,f,c
  9109  00265A  50DF               	movf	indf2,w,c
  9110  00265C  6E32               	movwf	??_Mcp2515ReadCanMsg& (0+255),c
  9111  00265E  5032               	movf	??_Mcp2515ReadCanMsg,w,c
  9112  002660  6E05               	movwf	memcpy@n,c
  9113  002662  6A06               	clrf	memcpy@n+1,c
  9114  002664  EC2B  F019         	call	_memcpy	;wreg free
  9115  002668  0012               	return		;funcret
  9116  00266A                     __end_of_Mcp2515ReadCanMsg:
  9117                           	opt stack 0
  9118                           pclatu	equ	0xFFB
  9119                           pclath	equ	0xFFA
  9120                           tblptru	equ	0xFF8
  9121                           tblptrh	equ	0xFF7
  9122                           tblptrl	equ	0xFF6
  9123                           tablat	equ	0xFF5
  9124                           prodh	equ	0xFF4
  9125                           prodl	equ	0xFF3
  9126                           intcon	equ	0xFF2
  9127                           intcon2	equ	0xFF1
  9128                           intcon3	equ	0xFF0
  9129                           postinc0	equ	0xFEE
  9130                           fsr0h	equ	0xFEA
  9131                           fsr0l	equ	0xFE9
  9132                           wreg	equ	0xFE8
  9133                           indf1	equ	0xFE7
  9134                           postinc1	equ	0xFE6
  9135                           postdec1	equ	0xFE5
  9136                           fsr1h	equ	0xFE2
  9137                           fsr1l	equ	0xFE1
  9138                           indf2	equ	0xFDF
  9139                           postinc2	equ	0xFDE
  9140                           fsr2h	equ	0xFDA
  9141                           fsr2l	equ	0xFD9
  9142                           status	equ	0xFD8
  9143                           
  9144 ;; *************** function _memcpy *****************
  9145 ;; Defined at:
  9146 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\memcpy.c"
  9147 ;; Parameters:    Size  Location     Type
  9148 ;;  d1              2    0[COMRAM] PTR void 
  9149 ;;		 -> rxBuffer(68), 
  9150 ;;  s1              2    2[COMRAM] PTR const void 
  9151 ;;		 -> Mcp2515ReadCanMsg@cmd(10), 
  9152 ;;  n               2    4[COMRAM] unsigned int 
  9153 ;; Auto vars:     Size  Location     Type
  9154 ;;  s               2    8[COMRAM] PTR const unsigned char 
  9155 ;;		 -> Mcp2515ReadCanMsg@cmd(10), 
  9156 ;;  d               2    6[COMRAM] PTR unsigned char 
  9157 ;;		 -> rxBuffer(68), 
  9158 ;;  tmp             1   10[COMRAM] unsigned char 
  9159 ;; Return value:  Size  Location     Type
  9160 ;;                  2    0[COMRAM] PTR void 
  9161 ;; Registers used:
  9162 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9163 ;; Tracked objects:
  9164 ;;		On entry : 0/0
  9165 ;;		On exit  : 0/0
  9166 ;;		Unchanged: 0/0
  9167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9168 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9169 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9171 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9172 ;;Total ram usage:       11 bytes
  9173 ;; Hardware stack levels used:    1
  9174 ;; This function calls:
  9175 ;;		Nothing
  9176 ;; This function is called by:
  9177 ;;		_Mcp2515ReadCanMsg
  9178 ;; This function uses a non-reentrant model
  9179 ;;
  9180                           
  9181                           	psect	text41
  9182  003256                     __ptext41:
  9183                           	opt stack 0
  9184  003256                     _memcpy:
  9185                           	opt stack 19
  9186                           
  9187                           ;incstack = 0
  9188  003256  C003  F009         	movff	memcpy@s1,memcpy@s
  9189  00325A  C004  F00A         	movff	memcpy@s1+1,memcpy@s+1
  9190  00325E  C001  F007         	movff	memcpy@d1,memcpy@d
  9191  003262  C002  F008         	movff	memcpy@d1+1,memcpy@d+1
  9192  003266  D010               	goto	i2l2388
  9193  003268                     i2l2380:
  9194  003268  C009  FFD9         	movff	memcpy@s,fsr2l
  9195  00326C  C00A  FFDA         	movff	memcpy@s+1,fsr2h
  9196  003270  50DF               	movf	indf2,w,c
  9197  003272  6E0B               	movwf	memcpy@tmp,c
  9198  003274  4A09               	infsnz	memcpy@s,f,c
  9199  003276  2A0A               	incf	memcpy@s+1,f,c
  9200  003278  C007  FFD9         	movff	memcpy@d,fsr2l
  9201  00327C  C008  FFDA         	movff	memcpy@d+1,fsr2h
  9202  003280  C00B  FFDF         	movff	memcpy@tmp,indf2
  9203  003284  4A07               	infsnz	memcpy@d,f,c
  9204  003286  2A08               	incf	memcpy@d+1,f,c
  9205  003288                     i2l2388:
  9206  003288  0605               	decf	memcpy@n,f,c
  9207  00328A  A0D8               	btfss	status,0,c
  9208  00328C  0606               	decf	memcpy@n+1,f,c
  9209  00328E  2805               	incf	memcpy@n,w,c
  9210  003290  E1EB               	bnz	i2l2380
  9211  003292  2806               	incf	memcpy@n+1,w,c
  9212  003294  B4D8               	btfsc	status,2,c
  9213  003296  0012               	return	
  9214  003298  D7E7               	goto	i2l2380
  9215  00329A                     __end_of_memcpy:
  9216                           	opt stack 0
  9217                           pclatu	equ	0xFFB
  9218                           pclath	equ	0xFFA
  9219                           tblptru	equ	0xFF8
  9220                           tblptrh	equ	0xFF7
  9221                           tblptrl	equ	0xFF6
  9222                           tablat	equ	0xFF5
  9223                           prodh	equ	0xFF4
  9224                           prodl	equ	0xFF3
  9225                           intcon	equ	0xFF2
  9226                           intcon2	equ	0xFF1
  9227                           intcon3	equ	0xFF0
  9228                           postinc0	equ	0xFEE
  9229                           fsr0h	equ	0xFEA
  9230                           fsr0l	equ	0xFE9
  9231                           wreg	equ	0xFE8
  9232                           indf1	equ	0xFE7
  9233                           postinc1	equ	0xFE6
  9234                           postdec1	equ	0xFE5
  9235                           fsr1h	equ	0xFE2
  9236                           fsr1l	equ	0xFE1
  9237                           indf2	equ	0xFDF
  9238                           postinc2	equ	0xFDE
  9239                           fsr2h	equ	0xFDA
  9240                           fsr2l	equ	0xFD9
  9241                           status	equ	0xFD8
  9242                           
  9243 ;; *************** function _Mcp2515ReadCanId *****************
  9244 ;; Defined at:
  9245 ;;		line 164 in file "mcp2515.c"
  9246 ;; Parameters:    Size  Location     Type
  9247 ;;  mcp_addr        1    wreg     const unsigned char 
  9248 ;;  ext             2   18[COMRAM] PTR unsigned char 
  9249 ;;		 -> rxBuffer(68), 
  9250 ;;  can_id          2   20[COMRAM] PTR unsigned long 
  9251 ;;		 -> rxBuffer(68), 
  9252 ;; Auto vars:     Size  Location     Type
  9253 ;;  mcp_addr        1   40[COMRAM] const unsigned char 
  9254 ;;  msg             6   41[COMRAM] unsigned char [6]
  9255 ;; Return value:  Size  Location     Type
  9256 ;;                  1    wreg      void 
  9257 ;; Registers used:
  9258 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9259 ;; Tracked objects:
  9260 ;;		On entry : 0/0
  9261 ;;		On exit  : 0/0
  9262 ;;		Unchanged: 0/0
  9263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9264 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9265 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9266 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9267 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9268 ;;Total ram usage:       29 bytes
  9269 ;; Hardware stack levels used:    1
  9270 ;; Hardware stack levels required when called:    2
  9271 ;; This function calls:
  9272 ;;		_Spi_ReadWrite
  9273 ;; This function is called by:
  9274 ;;		_Mcp2515ReadCanMsg
  9275 ;; This function uses a non-reentrant model
  9276 ;;
  9277                           
  9278                           	psect	text42
  9279  001B16                     __ptext42:
  9280                           	opt stack 0
  9281  001B16                     _Mcp2515ReadCanId:
  9282                           	opt stack 17
  9283                           
  9284                           ;incstack = 0
  9285                           ;Mcp2515ReadCanId@mcp_addr stored from wreg
  9286  001B16  6E29               	movwf	Mcp2515ReadCanId@mcp_addr,c
  9287                           
  9288                           ;mcp2515.c: 167: uint8_t msg[]={0x03,0,0,0,0,0};
  9289  001B18  EE20  F0E9         	lfsr	2,Mcp2515ReadCanId@F8123
  9290  001B1C  EE10  F02A         	lfsr	1,Mcp2515ReadCanId@msg
  9291  001B20  0E05               	movlw	5
  9292  001B22                     i2u134_41:
  9293  001B22  CFDB FFE3          	movff	plusw2,plusw1
  9294  001B26  06E8               	decf	wreg,f,c
  9295  001B28  E2FC               	bc	i2u134_41
  9296                           
  9297                           ;mcp2515.c: 169: msg[1] = mcp_addr;
  9298  001B2A  C029  F02B         	movff	Mcp2515ReadCanId@mcp_addr,Mcp2515ReadCanId@msg+1
  9299                           
  9300                           ;mcp2515.c: 170: *ext = 0;
  9301  001B2E  C013  FFD9         	movff	Mcp2515ReadCanId@ext,fsr2l
  9302  001B32  C014  FFDA         	movff	Mcp2515ReadCanId@ext+1,fsr2h
  9303  001B36  0E00               	movlw	0
  9304  001B38  6EDF               	movwf	indf2,c
  9305                           
  9306                           ;mcp2515.c: 171: *can_id = 0;
  9307  001B3A  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  9308  001B3E  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  9309  001B42  6ADE               	clrf	postinc2,c
  9310  001B44  6ADE               	clrf	postinc2,c
  9311  001B46  6ADE               	clrf	postinc2,c
  9312  001B48  6ADD               	clrf	postdec2,c
  9313                           
  9314                           ;mcp2515.c: 172: Spi_ReadWrite(msg,sizeof(msg));
  9315  001B4A  0E2A               	movlw	low Mcp2515ReadCanId@msg
  9316  001B4C  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  9317  001B4E  0E00               	movlw	high Mcp2515ReadCanId@msg
  9318  001B50  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  9319  001B52  0E06               	movlw	6
  9320  001B54  6E0F               	movwf	Spi_ReadWrite@size,c
  9321  001B56  0E00               	movlw	0
  9322  001B58  6E10               	movwf	Spi_ReadWrite@size+1,c
  9323  001B5A  0E00               	movlw	0
  9324  001B5C  6E11               	movwf	Spi_ReadWrite@size+2,c
  9325  001B5E  0E00               	movlw	0
  9326  001B60  6E12               	movwf	Spi_ReadWrite@size+3,c
  9327  001B62  ECF6  F019         	call	_Spi_ReadWrite	;wreg free
  9328                           
  9329                           ;mcp2515.c: 174: *can_id = (msg[0+2]<<3) + (msg[1+2]>>5);
  9330  001B66  C02D  F017         	movff	Mcp2515ReadCanId@msg+3,??_Mcp2515ReadCanId
  9331  001B6A  0E05               	movlw	5
  9332  001B6C  6E18               	movwf	(??_Mcp2515ReadCanId+1)& (0+255),c
  9333  001B6E                     i2u135_45:
  9334  001B6E  90D8               	bcf	status,0,c
  9335  001B70  3217               	rrcf	??_Mcp2515ReadCanId,f,c
  9336  001B72  2E18               	decfsz	(??_Mcp2515ReadCanId+1)& (0+255),f,c
  9337  001B74  D7FC               	goto	i2u135_45
  9338  001B76  502C               	movf	Mcp2515ReadCanId@msg+2,w,c
  9339  001B78  6E19               	movwf	(??_Mcp2515ReadCanId+2)& (0+255),c
  9340  001B7A  6A1A               	clrf	(??_Mcp2515ReadCanId+3)& (0+255),c
  9341  001B7C  90D8               	bcf	status,0,c
  9342  001B7E  3619               	rlcf	??_Mcp2515ReadCanId+2,f,c
  9343  001B80  361A               	rlcf	??_Mcp2515ReadCanId+3,f,c
  9344  001B82  90D8               	bcf	status,0,c
  9345  001B84  3619               	rlcf	??_Mcp2515ReadCanId+2,f,c
  9346  001B86  361A               	rlcf	??_Mcp2515ReadCanId+3,f,c
  9347  001B88  90D8               	bcf	status,0,c
  9348  001B8A  3619               	rlcf	??_Mcp2515ReadCanId+2,f,c
  9349  001B8C  361A               	rlcf	??_Mcp2515ReadCanId+3,f,c
  9350  001B8E  5017               	movf	??_Mcp2515ReadCanId,w,c
  9351  001B90  2419               	addwf	??_Mcp2515ReadCanId+2,w,c
  9352  001B92  6E1B               	movwf	(??_Mcp2515ReadCanId+4)& (0+255),c
  9353  001B94  0E00               	movlw	0
  9354  001B96  201A               	addwfc	??_Mcp2515ReadCanId+3,w,c
  9355  001B98  6E1C               	movwf	(??_Mcp2515ReadCanId+5)& (0+255),c
  9356  001B9A  6A1D               	clrf	(??_Mcp2515ReadCanId+6)& (0+255),c
  9357  001B9C  BE1C               	btfsc	(??_Mcp2515ReadCanId+5)& (0+255),7,c
  9358  001B9E  061D               	decf	(??_Mcp2515ReadCanId+6)& (0+255),f,c
  9359  001BA0  501D               	movf	(??_Mcp2515ReadCanId+6)& (0+255),w,c
  9360  001BA2  6E1E               	movwf	(??_Mcp2515ReadCanId+7)& (0+255),c
  9361  001BA4  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  9362  001BA8  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  9363  001BAC  C01B  FFDE         	movff	??_Mcp2515ReadCanId+4,postinc2
  9364  001BB0  C01C  FFDE         	movff	??_Mcp2515ReadCanId+5,postinc2
  9365  001BB4  C01D  FFDE         	movff	??_Mcp2515ReadCanId+6,postinc2
  9366  001BB8  C01E  FFDE         	movff	??_Mcp2515ReadCanId+7,postinc2
  9367                           
  9368                           ;mcp2515.c: 176: if ( (msg[1+2] & 0x08) == 0x08 )
  9369  001BBC  A62D               	btfss	Mcp2515ReadCanId@msg+3,3,c
  9370  001BBE  0012               	return	
  9371                           
  9372                           ;mcp2515.c: 177: {
  9373                           ;mcp2515.c: 179: *can_id = (*can_id<<2) + (msg[1+2] & 0x03);
  9374  001BC0  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  9375  001BC4  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  9376  001BC8  CFDE F017          	movff	postinc2,??_Mcp2515ReadCanId
  9377  001BCC  CFDE F018          	movff	postinc2,??_Mcp2515ReadCanId+1
  9378  001BD0  CFDE F019          	movff	postinc2,??_Mcp2515ReadCanId+2
  9379  001BD4  CFDE F01A          	movff	postinc2,??_Mcp2515ReadCanId+3
  9380  001BD8  0E02               	movlw	2
  9381  001BDA                     i2u137_45:
  9382  001BDA  90D8               	bcf	status,0,c
  9383  001BDC  3617               	rlcf	??_Mcp2515ReadCanId,f,c
  9384  001BDE  3618               	rlcf	??_Mcp2515ReadCanId+1,f,c
  9385  001BE0  3619               	rlcf	??_Mcp2515ReadCanId+2,f,c
  9386  001BE2  361A               	rlcf	??_Mcp2515ReadCanId+3,f,c
  9387  001BE4  2EE8               	decfsz	wreg,f,c
  9388  001BE6  D7F9               	goto	i2u137_45
  9389  001BE8  C02D  F01B         	movff	Mcp2515ReadCanId@msg+3,??_Mcp2515ReadCanId+4
  9390  001BEC  0E03               	movlw	3
  9391  001BEE  161B               	andwf	??_Mcp2515ReadCanId+4,f,c
  9392  001BF0  501B               	movf	??_Mcp2515ReadCanId+4,w,c
  9393  001BF2  2417               	addwf	??_Mcp2515ReadCanId,w,c
  9394  001BF4  6E1C               	movwf	(??_Mcp2515ReadCanId+5)& (0+255),c
  9395  001BF6  0E00               	movlw	0
  9396  001BF8  2018               	addwfc	??_Mcp2515ReadCanId+1,w,c
  9397  001BFA  6E1D               	movwf	(??_Mcp2515ReadCanId+6)& (0+255),c
  9398  001BFC  0E00               	movlw	0
  9399  001BFE  2019               	addwfc	??_Mcp2515ReadCanId+2,w,c
  9400  001C00  6E1E               	movwf	(??_Mcp2515ReadCanId+7)& (0+255),c
  9401  001C02  0E00               	movlw	0
  9402  001C04  201A               	addwfc	??_Mcp2515ReadCanId+3,w,c
  9403  001C06  6E1F               	movwf	(??_Mcp2515ReadCanId+8)& (0+255),c
  9404  001C08  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  9405  001C0C  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  9406  001C10  C01C  FFDE         	movff	??_Mcp2515ReadCanId+5,postinc2
  9407  001C14  C01D  FFDE         	movff	??_Mcp2515ReadCanId+6,postinc2
  9408  001C18  C01E  FFDE         	movff	??_Mcp2515ReadCanId+7,postinc2
  9409  001C1C  C01F  FFDE         	movff	??_Mcp2515ReadCanId+8,postinc2
  9410                           
  9411                           ;mcp2515.c: 180: *can_id <<= 16;
  9412  001C20  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  9413  001C24  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  9414  001C28  0E10               	movlw	16
  9415  001C2A                     i2u138_45:
  9416  001C2A  90D8               	bcf	status,0,c
  9417  001C2C  36DE               	rlcf	postinc2,f,c
  9418  001C2E  36DE               	rlcf	postinc2,f,c
  9419  001C30  36DE               	rlcf	postinc2,f,c
  9420  001C32  36DD               	rlcf	postdec2,f,c
  9421  001C34  06D9               	decf	fsr2l,f,c
  9422  001C36  06D9               	decf	fsr2l,f,c
  9423  001C38  2EE8               	decfsz	wreg,f,c
  9424  001C3A  D7F7               	goto	i2u138_45
  9425                           
  9426                           ;mcp2515.c: 181: *can_id = *can_id +(msg[2+2]<<8) + msg[3+2];
  9427  001C3C  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  9428  001C40  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  9429  001C44  CFDE F017          	movff	postinc2,??_Mcp2515ReadCanId
  9430  001C48  CFDE F018          	movff	postinc2,??_Mcp2515ReadCanId+1
  9431  001C4C  CFDE F019          	movff	postinc2,??_Mcp2515ReadCanId+2
  9432  001C50  CFDE F01A          	movff	postinc2,??_Mcp2515ReadCanId+3
  9433  001C54  502E               	movf	Mcp2515ReadCanId@msg+4,w,c
  9434  001C56  6E1C               	movwf	(??_Mcp2515ReadCanId+5)& (0+255),c
  9435  001C58  6A1B               	clrf	(??_Mcp2515ReadCanId+4)& (0+255),c
  9436  001C5A  C01B  F01D         	movff	??_Mcp2515ReadCanId+4,??_Mcp2515ReadCanId+6
  9437  001C5E  C01C  F01E         	movff	??_Mcp2515ReadCanId+5,??_Mcp2515ReadCanId+7
  9438  001C62  0E00               	movlw	0
  9439  001C64  BE1E               	btfsc	(??_Mcp2515ReadCanId+7)& (0+255),7,c
  9440  001C66  0EFF               	movlw	255
  9441  001C68  6E1F               	movwf	(??_Mcp2515ReadCanId+8)& (0+255),c
  9442  001C6A  6E20               	movwf	(??_Mcp2515ReadCanId+9)& (0+255),c
  9443  001C6C  502F               	movf	Mcp2515ReadCanId@msg+5,w,c
  9444  001C6E  241D               	addwf	??_Mcp2515ReadCanId+6,w,c
  9445  001C70  6E21               	movwf	(??_Mcp2515ReadCanId+10)& (0+255),c
  9446  001C72  0E00               	movlw	0
  9447  001C74  201E               	addwfc	??_Mcp2515ReadCanId+7,w,c
  9448  001C76  6E22               	movwf	(??_Mcp2515ReadCanId+11)& (0+255),c
  9449  001C78  0E00               	movlw	0
  9450  001C7A  201F               	addwfc	??_Mcp2515ReadCanId+8,w,c
  9451  001C7C  6E23               	movwf	(??_Mcp2515ReadCanId+12)& (0+255),c
  9452  001C7E  0E00               	movlw	0
  9453  001C80  2020               	addwfc	??_Mcp2515ReadCanId+9,w,c
  9454  001C82  6E24               	movwf	(??_Mcp2515ReadCanId+13)& (0+255),c
  9455  001C84  5017               	movf	??_Mcp2515ReadCanId,w,c
  9456  001C86  2421               	addwf	??_Mcp2515ReadCanId+10,w,c
  9457  001C88  6E25               	movwf	(??_Mcp2515ReadCanId+14)& (0+255),c
  9458  001C8A  5018               	movf	??_Mcp2515ReadCanId+1,w,c
  9459  001C8C  2022               	addwfc	??_Mcp2515ReadCanId+11,w,c
  9460  001C8E  6E26               	movwf	(??_Mcp2515ReadCanId+15)& (0+255),c
  9461  001C90  5019               	movf	??_Mcp2515ReadCanId+2,w,c
  9462  001C92  2023               	addwfc	??_Mcp2515ReadCanId+12,w,c
  9463  001C94  6E27               	movwf	(??_Mcp2515ReadCanId+16)& (0+255),c
  9464  001C96  501A               	movf	??_Mcp2515ReadCanId+3,w,c
  9465  001C98  2024               	addwfc	??_Mcp2515ReadCanId+13,w,c
  9466  001C9A  6E28               	movwf	(??_Mcp2515ReadCanId+17)& (0+255),c
  9467  001C9C  C015  FFD9         	movff	Mcp2515ReadCanId@can_id,fsr2l
  9468  001CA0  C016  FFDA         	movff	Mcp2515ReadCanId@can_id+1,fsr2h
  9469  001CA4  C025  FFDE         	movff	??_Mcp2515ReadCanId+14,postinc2
  9470  001CA8  C026  FFDE         	movff	??_Mcp2515ReadCanId+15,postinc2
  9471  001CAC  C027  FFDE         	movff	??_Mcp2515ReadCanId+16,postinc2
  9472  001CB0  C028  FFDE         	movff	??_Mcp2515ReadCanId+17,postinc2
  9473                           
  9474                           ;mcp2515.c: 182: *ext = 1;
  9475  001CB4  C013  FFD9         	movff	Mcp2515ReadCanId@ext,fsr2l
  9476  001CB8  C014  FFDA         	movff	Mcp2515ReadCanId@ext+1,fsr2h
  9477  001CBC  0E01               	movlw	1
  9478  001CBE  6EDF               	movwf	indf2,c
  9479  001CC0  0012               	return	
  9480  001CC2                     __end_of_Mcp2515ReadCanId:
  9481                           	opt stack 0
  9482                           pclatu	equ	0xFFB
  9483                           pclath	equ	0xFFA
  9484                           tblptru	equ	0xFF8
  9485                           tblptrh	equ	0xFF7
  9486                           tblptrl	equ	0xFF6
  9487                           tablat	equ	0xFF5
  9488                           prodh	equ	0xFF4
  9489                           prodl	equ	0xFF3
  9490                           intcon	equ	0xFF2
  9491                           intcon2	equ	0xFF1
  9492                           intcon3	equ	0xFF0
  9493                           postinc0	equ	0xFEE
  9494                           fsr0h	equ	0xFEA
  9495                           fsr0l	equ	0xFE9
  9496                           wreg	equ	0xFE8
  9497                           indf1	equ	0xFE7
  9498                           postinc1	equ	0xFE6
  9499                           postdec1	equ	0xFE5
  9500                           plusw1	equ	0xFE3
  9501                           fsr1h	equ	0xFE2
  9502                           fsr1l	equ	0xFE1
  9503                           indf2	equ	0xFDF
  9504                           postinc2	equ	0xFDE
  9505                           postdec2	equ	0xFDD
  9506                           plusw2	equ	0xFDB
  9507                           fsr2h	equ	0xFDA
  9508                           fsr2l	equ	0xFD9
  9509                           status	equ	0xFD8
  9510                           
  9511 ;; *************** function _Can_OutBufferStatus *****************
  9512 ;; Defined at:
  9513 ;;		line 156 in file "can.c"
  9514 ;; Parameters:    Size  Location     Type
  9515 ;;		None
  9516 ;; Auto vars:     Size  Location     Type
  9517 ;;		None
  9518 ;; Return value:  Size  Location     Type
  9519 ;;                  1    wreg      unsigned char 
  9520 ;; Registers used:
  9521 ;;		wreg, status,2
  9522 ;; Tracked objects:
  9523 ;;		On entry : 0/0
  9524 ;;		On exit  : 0/0
  9525 ;;		Unchanged: 0/0
  9526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9530 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9531 ;;Total ram usage:        0 bytes
  9532 ;; Hardware stack levels used:    1
  9533 ;; This function calls:
  9534 ;;		Nothing
  9535 ;; This function is called by:
  9536 ;;		_Can_Isr
  9537 ;; This function uses a non-reentrant model
  9538 ;;
  9539                           
  9540                           	psect	text43
  9541  00347A                     __ptext43:
  9542                           	opt stack 0
  9543  00347A                     _Can_OutBufferStatus:
  9544                           	opt stack 22
  9545                           
  9546                           ;can.c: 158: return txBufferCount;
  9547                           
  9548                           ;incstack = 0
  9549  00347A  0100               	movlb	0	; () banked
  9550  00347C  51C1               	movf	_txBufferCount& (0+255),w,b
  9551  00347E  0012               	return	
  9552  003480                     __end_of_Can_OutBufferStatus:
  9553                           	opt stack 0
  9554                           pclatu	equ	0xFFB
  9555                           pclath	equ	0xFFA
  9556                           tblptru	equ	0xFF8
  9557                           tblptrh	equ	0xFF7
  9558                           tblptrl	equ	0xFF6
  9559                           tablat	equ	0xFF5
  9560                           prodh	equ	0xFF4
  9561                           prodl	equ	0xFF3
  9562                           intcon	equ	0xFF2
  9563                           intcon2	equ	0xFF1
  9564                           intcon3	equ	0xFF0
  9565                           postinc0	equ	0xFEE
  9566                           fsr0h	equ	0xFEA
  9567                           fsr0l	equ	0xFE9
  9568                           wreg	equ	0xFE8
  9569                           indf1	equ	0xFE7
  9570                           postinc1	equ	0xFE6
  9571                           postdec1	equ	0xFE5
  9572                           plusw1	equ	0xFE3
  9573                           fsr1h	equ	0xFE2
  9574                           fsr1l	equ	0xFE1
  9575                           indf2	equ	0xFDF
  9576                           postinc2	equ	0xFDE
  9577                           postdec2	equ	0xFDD
  9578                           plusw2	equ	0xFDB
  9579                           fsr2h	equ	0xFDA
  9580                           fsr2l	equ	0xFD9
  9581                           status	equ	0xFD8
  9582                           
  9583 ;; *************** function _Can_GetStatus *****************
  9584 ;; Defined at:
  9585 ;;		line 349 in file "can.c"
  9586 ;; Parameters:    Size  Location     Type
  9587 ;;		None
  9588 ;; Auto vars:     Size  Location     Type
  9589 ;;  msg4            4   18[COMRAM] unsigned char [4]
  9590 ;;  msg             3   22[COMRAM] unsigned char [3]
  9591 ;;  status          1   25[COMRAM] unsigned char 
  9592 ;; Return value:  Size  Location     Type
  9593 ;;                  1    wreg      unsigned char 
  9594 ;; Registers used:
  9595 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9596 ;; Tracked objects:
  9597 ;;		On entry : 0/0
  9598 ;;		On exit  : 0/0
  9599 ;;		Unchanged: 0/0
  9600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9602 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9604 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9605 ;;Total ram usage:        8 bytes
  9606 ;; Hardware stack levels used:    1
  9607 ;; Hardware stack levels required when called:    2
  9608 ;; This function calls:
  9609 ;;		_Spi_ReadWrite
  9610 ;; This function is called by:
  9611 ;;		_Can_Isr
  9612 ;; This function uses a non-reentrant model
  9613 ;;
  9614                           
  9615                           	psect	text44
  9616  00300E                     __ptext44:
  9617                           	opt stack 0
  9618  00300E                     _Can_GetStatus:
  9619                           	opt stack 20
  9620                           
  9621                           ;can.c: 351: uint8_t status;
  9622                           ;can.c: 352: uint8_t msg[]={0x03,0x2C,0};
  9623                           
  9624                           ; BSR set to: 0
  9625                           ;incstack = 0
  9626  00300E  C0FD  F017         	movff	Can_GetStatus@F8262,Can_GetStatus@msg
  9627  003012  C0FE  F018         	movff	Can_GetStatus@F8262+1,Can_GetStatus@msg+1
  9628  003016  C0FF  F019         	movff	Can_GetStatus@F8262+2,Can_GetStatus@msg+2
  9629                           
  9630                           ;can.c: 353: uint8_t msg4[]={0x05,0x2C,0x1C,0};
  9631  00301A  C0F3  F013         	movff	Can_GetStatus@F8264,Can_GetStatus@msg4
  9632  00301E  C0F4  F014         	movff	Can_GetStatus@F8264+1,Can_GetStatus@msg4+1
  9633  003022  C0F5  F015         	movff	Can_GetStatus@F8264+2,Can_GetStatus@msg4+2
  9634  003026  C0F6  F016         	movff	Can_GetStatus@F8264+3,Can_GetStatus@msg4+3
  9635                           
  9636                           ;can.c: 355: Spi_ReadWrite(msg,sizeof(msg));
  9637  00302A  0E17               	movlw	low Can_GetStatus@msg
  9638  00302C  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  9639  00302E  0E00               	movlw	high Can_GetStatus@msg
  9640  003030  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  9641  003032  0E03               	movlw	3
  9642  003034  6E0F               	movwf	Spi_ReadWrite@size,c
  9643  003036  0E00               	movlw	0
  9644  003038  6E10               	movwf	Spi_ReadWrite@size+1,c
  9645  00303A  0E00               	movlw	0
  9646  00303C  6E11               	movwf	Spi_ReadWrite@size+2,c
  9647  00303E  0E00               	movlw	0
  9648  003040  6E12               	movwf	Spi_ReadWrite@size+3,c
  9649  003042  ECF6  F019         	call	_Spi_ReadWrite	;wreg free
  9650                           
  9651                           ;can.c: 356: status = msg[2];
  9652  003046  C019  F01A         	movff	Can_GetStatus@msg+2,Can_GetStatus@status
  9653                           
  9654                           ;can.c: 357: msg4[2] = status & 0x1C;
  9655  00304A  501A               	movf	Can_GetStatus@status,w,c
  9656  00304C  0B1C               	andlw	28
  9657  00304E  6E15               	movwf	Can_GetStatus@msg4+2,c
  9658                           
  9659                           ;can.c: 358: Spi_ReadWrite(msg4,sizeof(msg4));
  9660  003050  0E13               	movlw	low Can_GetStatus@msg4
  9661  003052  6E0D               	movwf	Spi_ReadWrite@rx_tx,c
  9662  003054  0E00               	movlw	high Can_GetStatus@msg4
  9663  003056  6E0E               	movwf	Spi_ReadWrite@rx_tx+1,c
  9664  003058  0E04               	movlw	4
  9665  00305A  6E0F               	movwf	Spi_ReadWrite@size,c
  9666  00305C  0E00               	movlw	0
  9667  00305E  6E10               	movwf	Spi_ReadWrite@size+1,c
  9668  003060  0E00               	movlw	0
  9669  003062  6E11               	movwf	Spi_ReadWrite@size+2,c
  9670  003064  0E00               	movlw	0
  9671  003066  6E12               	movwf	Spi_ReadWrite@size+3,c
  9672  003068  ECF6  F019         	call	_Spi_ReadWrite	;wreg free
  9673                           
  9674                           ;can.c: 359: return status;
  9675  00306C  501A               	movf	Can_GetStatus@status,w,c
  9676  00306E  0012               	return	
  9677  003070                     __end_of_Can_GetStatus:
  9678                           	opt stack 0
  9679                           pclatu	equ	0xFFB
  9680                           pclath	equ	0xFFA
  9681                           tblptru	equ	0xFF8
  9682                           tblptrh	equ	0xFF7
  9683                           tblptrl	equ	0xFF6
  9684                           tablat	equ	0xFF5
  9685                           prodh	equ	0xFF4
  9686                           prodl	equ	0xFF3
  9687                           intcon	equ	0xFF2
  9688                           intcon2	equ	0xFF1
  9689                           intcon3	equ	0xFF0
  9690                           postinc0	equ	0xFEE
  9691                           fsr0h	equ	0xFEA
  9692                           fsr0l	equ	0xFE9
  9693                           wreg	equ	0xFE8
  9694                           indf1	equ	0xFE7
  9695                           postinc1	equ	0xFE6
  9696                           postdec1	equ	0xFE5
  9697                           plusw1	equ	0xFE3
  9698                           fsr1h	equ	0xFE2
  9699                           fsr1l	equ	0xFE1
  9700                           indf2	equ	0xFDF
  9701                           postinc2	equ	0xFDE
  9702                           postdec2	equ	0xFDD
  9703                           plusw2	equ	0xFDB
  9704                           fsr2h	equ	0xFDA
  9705                           fsr2l	equ	0xFD9
  9706                           status	equ	0xFD8
  9707                           
  9708 ;; *************** function _Spi_ReadWrite *****************
  9709 ;; Defined at:
  9710 ;;		line 319 in file "can.c"
  9711 ;; Parameters:    Size  Location     Type
  9712 ;;  rx_tx           2   12[COMRAM] PTR unsigned char 
  9713 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515ReadCanMsg@cmd(10), Mcp2515ReadCanId@msg(6), Can_ReadMessage@buf(4), 
  9714 ;;		 -> Can_GetStatus@msg4(4), Can_GetStatus@msg(3), 
  9715 ;;  size            4   14[COMRAM] unsigned long 
  9716 ;; Auto vars:     Size  Location     Type
  9717 ;;		None
  9718 ;; Return value:  Size  Location     Type
  9719 ;;                  1    wreg      void 
  9720 ;; Registers used:
  9721 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9722 ;; Tracked objects:
  9723 ;;		On entry : 0/0
  9724 ;;		On exit  : 0/0
  9725 ;;		Unchanged: 0/0
  9726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9727 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9730 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9731 ;;Total ram usage:        6 bytes
  9732 ;; Hardware stack levels used:    1
  9733 ;; Hardware stack levels required when called:    1
  9734 ;; This function calls:
  9735 ;;		i2_SPIRW
  9736 ;; This function is called by:
  9737 ;;		_Can_GetStatus
  9738 ;;		_Can_ReadMessage
  9739 ;;		_Mcp2515ReadCanId
  9740 ;;		_Mcp2515ReadCanMsg
  9741 ;;		_Mcp2515GetNextFreeTXBuf
  9742 ;; This function uses a non-reentrant model
  9743 ;;
  9744                           
  9745                           	psect	text45
  9746  0033EC                     __ptext45:
  9747                           	opt stack 0
  9748  0033EC                     _Spi_ReadWrite:
  9749                           	opt stack 18
  9750                           
  9751                           ;can.c: 321: SPIRW(rx_tx, rx_tx, size);
  9752                           
  9753                           ;incstack = 0
  9754  0033EC  C00D  F001         	movff	Spi_ReadWrite@rx_tx,i2SPIRW@tx
  9755  0033F0  C00E  F002         	movff	Spi_ReadWrite@rx_tx+1,i2SPIRW@tx+1
  9756  0033F4  C00D  F003         	movff	Spi_ReadWrite@rx_tx,i2SPIRW@rx
  9757  0033F8  C00E  F004         	movff	Spi_ReadWrite@rx_tx+1,i2SPIRW@rx+1
  9758  0033FC  C00F  F005         	movff	Spi_ReadWrite@size,i2SPIRW@size
  9759  003400  C010  F006         	movff	Spi_ReadWrite@size+1,i2SPIRW@size+1
  9760  003404  C011  F007         	movff	Spi_ReadWrite@size+2,i2SPIRW@size+2
  9761  003408  C012  F008         	movff	Spi_ReadWrite@size+3,i2SPIRW@size+3
  9762  00340C  EC3A  F017         	call	i2_SPIRW	;wreg free
  9763  003410  0012               	return		;funcret
  9764  003412                     __end_of_Spi_ReadWrite:
  9765                           	opt stack 0
  9766                           pclatu	equ	0xFFB
  9767                           pclath	equ	0xFFA
  9768                           tblptru	equ	0xFF8
  9769                           tblptrh	equ	0xFF7
  9770                           tblptrl	equ	0xFF6
  9771                           tablat	equ	0xFF5
  9772                           prodh	equ	0xFF4
  9773                           prodl	equ	0xFF3
  9774                           intcon	equ	0xFF2
  9775                           intcon2	equ	0xFF1
  9776                           intcon3	equ	0xFF0
  9777                           postinc0	equ	0xFEE
  9778                           fsr0h	equ	0xFEA
  9779                           fsr0l	equ	0xFE9
  9780                           wreg	equ	0xFE8
  9781                           indf1	equ	0xFE7
  9782                           postinc1	equ	0xFE6
  9783                           postdec1	equ	0xFE5
  9784                           plusw1	equ	0xFE3
  9785                           fsr1h	equ	0xFE2
  9786                           fsr1l	equ	0xFE1
  9787                           indf2	equ	0xFDF
  9788                           postinc2	equ	0xFDE
  9789                           postdec2	equ	0xFDD
  9790                           plusw2	equ	0xFDB
  9791                           fsr2h	equ	0xFDA
  9792                           fsr2l	equ	0xFD9
  9793                           status	equ	0xFD8
  9794                           
  9795 ;; *************** function i2_SPIRW *****************
  9796 ;; Defined at:
  9797 ;;		line 293 in file "can.c"
  9798 ;; Parameters:    Size  Location     Type
  9799 ;;  tx              2    0[COMRAM] PTR const unsigned char 
  9800 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515WriteCanMsg@buf(10), Mcp2515WriteCanId@buf(6), Mcp2515ReadCanMsg@cmd(10),
      + 
  9801 ;;		 -> Mcp2515ReadCanId@msg(6), Mcp2515Sleep@cmdMask4(3), Mcp2515_Init@cmdWrite3(3), Mcp2515_Init@cmdMask4(4), 
  9802 ;;		 -> Mcp2515_Reset@cmd(1), Can_SendMessage@buf(4), Can_ReadMessage@buf(4), Can_GetStatus@msg4(4), 
  9803 ;;		 -> Can_GetStatus@msg(3), 
  9804 ;;  rx              2    2[COMRAM] PTR unsigned char 
  9805 ;;		 -> Mcp2515GetNextFreeTXBuf@buf(3), Mcp2515ReadCanMsg@cmd(10), Mcp2515ReadCanId@msg(6), Can_ReadMessage@buf(4), 
  9806 ;;		 -> Can_GetStatus@msg4(4), Can_GetStatus@msg(3), NULL(0), 
  9807 ;;  size            4    4[COMRAM] unsigned long 
  9808 ;; Auto vars:     Size  Location     Type
  9809 ;;  SPIRW           4    8[COMRAM] unsigned long 
  9810 ;; Return value:  Size  Location     Type
  9811 ;;                  1    wreg      void 
  9812 ;; Registers used:
  9813 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9814 ;; Tracked objects:
  9815 ;;		On entry : 0/0
  9816 ;;		On exit  : 0/0
  9817 ;;		Unchanged: 0/0
  9818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9819 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9820 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9822 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9823 ;;Total ram usage:       12 bytes
  9824 ;; Hardware stack levels used:    1
  9825 ;; This function calls:
  9826 ;;		Nothing
  9827 ;; This function is called by:
  9828 ;;		_Spi_ReadWrite
  9829 ;;		i2_Spi_Write
  9830 ;; This function uses a non-reentrant model
  9831 ;;
  9832                           
  9833                           	psect	text46
  9834  002E74                     __ptext46:
  9835                           	opt stack 0
  9836  002E74                     i2_SPIRW:
  9837                           	opt stack 19
  9838                           
  9839                           ;can.c: 295: uint32_t i;
  9840                           ;can.c: 297: SSPCON1 = 0b00111010;
  9841                           
  9842                           ;incstack = 0
  9843  002E74  0E3A               	movlw	58
  9844  002E76  6EC6               	movwf	4038,c	;volatile
  9845                           
  9846                           ;can.c: 299: LATD1 = 0;
  9847  002E78  928C               	bcf	3980,1,c	;volatile
  9848                           
  9849                           ;can.c: 300: for(i=0;i<size;i++)
  9850  002E7A  0E00               	movlw	0
  9851  002E7C  6E09               	movwf	i2SPIRW@i,c
  9852  002E7E  0E00               	movlw	0
  9853  002E80  6E0A               	movwf	i2SPIRW@i+1,c
  9854  002E82  0E00               	movlw	0
  9855  002E84  6E0B               	movwf	i2SPIRW@i+2,c
  9856  002E86  0E00               	movlw	0
  9857  002E88  6E0C               	movwf	i2SPIRW@i+3,c
  9858  002E8A  D01D               	goto	i2l2338
  9859  002E8C                     i2l2330:
  9860                           
  9861                           ;can.c: 301: {
  9862                           ;can.c: 302: SSPBUF = tx[i];
  9863  002E8C  5009               	movf	i2SPIRW@i,w,c
  9864  002E8E  2401               	addwf	i2SPIRW@tx,w,c
  9865  002E90  6ED9               	movwf	fsr2l,c
  9866  002E92  500A               	movf	i2SPIRW@i+1,w,c
  9867  002E94  2002               	addwfc	i2SPIRW@tx+1,w,c
  9868  002E96  6EDA               	movwf	fsr2h,c
  9869  002E98  50DF               	movf	indf2,w,c
  9870  002E9A  6EC9               	movwf	4041,c	;volatile
  9871  002E9C                     i2l226:
  9872  002E9C  A69E               	btfss	3998,3,c	;volatile
  9873  002E9E  D7FE               	goto	i2l226
  9874                           
  9875                           ;can.c: 304: SSP1IF = 0;
  9876  002EA0  969E               	bcf	3998,3,c	;volatile
  9877                           
  9878                           ;can.c: 305: if(rx != 0)
  9879  002EA2  5003               	movf	i2SPIRW@rx,w,c
  9880  002EA4  1004               	iorwf	i2SPIRW@rx+1,w,c
  9881  002EA6  B4D8               	btfsc	status,2,c
  9882  002EA8  D008               	goto	i2l2336
  9883                           
  9884                           ;can.c: 306: rx[i] = SSPBUF;
  9885  002EAA  5009               	movf	i2SPIRW@i,w,c
  9886  002EAC  2403               	addwf	i2SPIRW@rx,w,c
  9887  002EAE  6ED9               	movwf	fsr2l,c
  9888  002EB0  500A               	movf	i2SPIRW@i+1,w,c
  9889  002EB2  2004               	addwfc	i2SPIRW@rx+1,w,c
  9890  002EB4  6EDA               	movwf	fsr2h,c
  9891  002EB6  CFC9 FFDF          	movff	4041,indf2	;volatile
  9892  002EBA                     i2l2336:
  9893  002EBA  0E01               	movlw	1
  9894  002EBC  2609               	addwf	i2SPIRW@i,f,c
  9895  002EBE  0E00               	movlw	0
  9896  002EC0  220A               	addwfc	i2SPIRW@i+1,f,c
  9897  002EC2  220B               	addwfc	i2SPIRW@i+2,f,c
  9898  002EC4  220C               	addwfc	i2SPIRW@i+3,f,c
  9899  002EC6                     i2l2338:
  9900  002EC6  5005               	movf	i2SPIRW@size,w,c
  9901  002EC8  5C09               	subwf	i2SPIRW@i,w,c
  9902  002ECA  5006               	movf	i2SPIRW@size+1,w,c
  9903  002ECC  580A               	subwfb	i2SPIRW@i+1,w,c
  9904  002ECE  5007               	movf	i2SPIRW@size+2,w,c
  9905  002ED0  580B               	subwfb	i2SPIRW@i+2,w,c
  9906  002ED2  5008               	movf	i2SPIRW@size+3,w,c
  9907  002ED4  580C               	subwfb	i2SPIRW@i+3,w,c
  9908  002ED6  A0D8               	btfss	status,0,c
  9909  002ED8  D7D9               	goto	i2l2330
  9910                           
  9911                           ;can.c: 307: }
  9912                           ;can.c: 308: LATD1 = 1;
  9913  002EDA  828C               	bsf	3980,1,c	;volatile
  9914  002EDC  0012               	return		;funcret
  9915  002EDE                     __end_ofi2_SPIRW:
  9916                           	opt stack 0
  9917                           pclatu	equ	0xFFB
  9918                           pclath	equ	0xFFA
  9919                           tblptru	equ	0xFF8
  9920                           tblptrh	equ	0xFF7
  9921                           tblptrl	equ	0xFF6
  9922                           tablat	equ	0xFF5
  9923                           prodh	equ	0xFF4
  9924                           prodl	equ	0xFF3
  9925                           intcon	equ	0xFF2
  9926                           intcon2	equ	0xFF1
  9927                           intcon3	equ	0xFF0
  9928                           postinc0	equ	0xFEE
  9929                           fsr0h	equ	0xFEA
  9930                           fsr0l	equ	0xFE9
  9931                           wreg	equ	0xFE8
  9932                           indf1	equ	0xFE7
  9933                           postinc1	equ	0xFE6
  9934                           postdec1	equ	0xFE5
  9935                           plusw1	equ	0xFE3
  9936                           fsr1h	equ	0xFE2
  9937                           fsr1l	equ	0xFE1
  9938                           indf2	equ	0xFDF
  9939                           postinc2	equ	0xFDE
  9940                           postdec2	equ	0xFDD
  9941                           plusw2	equ	0xFDB
  9942                           fsr2h	equ	0xFDA
  9943                           fsr2l	equ	0xFD9
  9944                           status	equ	0xFD8
  9945                           pclatu	equ	0xFFB
  9946                           pclath	equ	0xFFA
  9947                           tblptru	equ	0xFF8
  9948                           tblptrh	equ	0xFF7
  9949                           tblptrl	equ	0xFF6
  9950                           tablat	equ	0xFF5
  9951                           prodh	equ	0xFF4
  9952                           prodl	equ	0xFF3
  9953                           intcon	equ	0xFF2
  9954                           intcon2	equ	0xFF1
  9955                           intcon3	equ	0xFF0
  9956                           postinc0	equ	0xFEE
  9957                           fsr0h	equ	0xFEA
  9958                           fsr0l	equ	0xFE9
  9959                           wreg	equ	0xFE8
  9960                           indf1	equ	0xFE7
  9961                           postinc1	equ	0xFE6
  9962                           postdec1	equ	0xFE5
  9963                           plusw1	equ	0xFE3
  9964                           fsr1h	equ	0xFE2
  9965                           fsr1l	equ	0xFE1
  9966                           indf2	equ	0xFDF
  9967                           postinc2	equ	0xFDE
  9968                           postdec2	equ	0xFDD
  9969                           plusw2	equ	0xFDB
  9970                           fsr2h	equ	0xFDA
  9971                           fsr2l	equ	0xFD9
  9972                           status	equ	0xFD8
  9973                           
  9974                           	psect	rparam
  9975  0000                     pclatu	equ	0xFFB
  9976                           pclath	equ	0xFFA
  9977                           tblptru	equ	0xFF8
  9978                           tblptrh	equ	0xFF7
  9979                           tblptrl	equ	0xFF6
  9980                           tablat	equ	0xFF5
  9981                           prodh	equ	0xFF4
  9982                           prodl	equ	0xFF3
  9983                           intcon	equ	0xFF2
  9984                           intcon2	equ	0xFF1
  9985                           intcon3	equ	0xFF0
  9986                           postinc0	equ	0xFEE
  9987                           fsr0h	equ	0xFEA
  9988                           fsr0l	equ	0xFE9
  9989                           wreg	equ	0xFE8
  9990                           indf1	equ	0xFE7
  9991                           postinc1	equ	0xFE6
  9992                           postdec1	equ	0xFE5
  9993                           plusw1	equ	0xFE3
  9994                           fsr1h	equ	0xFE2
  9995                           fsr1l	equ	0xFE1
  9996                           indf2	equ	0xFDF
  9997                           postinc2	equ	0xFDE
  9998                           postdec2	equ	0xFDD
  9999                           plusw2	equ	0xFDB
 10000                           fsr2h	equ	0xFDA
 10001                           fsr2l	equ	0xFD9
 10002                           status	equ	0xFD8
 10003                           
 10004                           	psect	temp
 10005  00005F                     btemp:
 10006                           	opt stack 0
 10007  00005F                     	ds	1
 10008  0000                     int$flags	set	btemp
 10009                           pclatu	equ	0xFFB
 10010                           pclath	equ	0xFFA
 10011                           tblptru	equ	0xFF8
 10012                           tblptrh	equ	0xFF7
 10013                           tblptrl	equ	0xFF6
 10014                           tablat	equ	0xFF5
 10015                           prodh	equ	0xFF4
 10016                           prodl	equ	0xFF3
 10017                           intcon	equ	0xFF2
 10018                           intcon2	equ	0xFF1
 10019                           intcon3	equ	0xFF0
 10020                           postinc0	equ	0xFEE
 10021                           fsr0h	equ	0xFEA
 10022                           fsr0l	equ	0xFE9
 10023                           wreg	equ	0xFE8
 10024                           indf1	equ	0xFE7
 10025                           postinc1	equ	0xFE6
 10026                           postdec1	equ	0xFE5
 10027                           plusw1	equ	0xFE3
 10028                           fsr1h	equ	0xFE2
 10029                           fsr1l	equ	0xFE1
 10030                           indf2	equ	0xFDF
 10031                           postinc2	equ	0xFDE
 10032                           postdec2	equ	0xFDD
 10033                           plusw2	equ	0xFDB
 10034                           fsr2h	equ	0xFDA
 10035                           fsr2l	equ	0xFD9
 10036                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    63
    Data        24
    BSS         413
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     87      94
    BANK0           160     79     160
    BANK1           256      0     205
    BANK2           256      0     144
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           22      0       0

Pointer List with Targets:

    memcpy@d1	PTR void  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    memcpy@s1	PTR const void  size(2) Largest target is 10
		 -> Mcp2515ReadCanMsg@cmd(COMRAM[10]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 10
		 -> Mcp2515ReadCanMsg@cmd(COMRAM[10]), 

    Mcp2515GetNextFreeTXBuf@txbuf_n	PTR unsigned char  size(2) Largest target is 1
		 -> Can_SendMessage@txbuf_n(COMRAM[1]), 

    Mcp2515WriteCanMsg@msg	PTR const struct CANMESSAGE size(2) Largest target is 68
		 -> txBuffer(BANK1[68]), 

    sp__memcpy	PTR void  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Mcp2515ReadCanMsg@msg	PTR struct CANMESSAGE size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Mcp2515ReadCanId@can_id	PTR unsigned long  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Mcp2515ReadCanId@ext	PTR unsigned char  size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Mcp2515_Init@filterCfg	PTR struct CANFILTER size(2) Largest target is 33
		 -> filter(BANK1[33]), 

    Mcp2515_Init@speedCfg	PTR const struct CANSPEED size(2) Largest target is 7
		 -> canSpeed125k(CODE[7]), 

    Can_SendMessage@msg	PTR const struct CANMESSAGE size(2) Largest target is 68
		 -> txBuffer(BANK1[68]), 

    Can_ReadMessage@msg	PTR struct CANMESSAGE size(2) Largest target is 68
		 -> rxBuffer(BANK1[68]), 

    Spi_Write@tx	PTR unsigned char  size(2) Largest target is 10
		 -> Mcp2515WriteCanMsg@buf(COMRAM[10]), Mcp2515WriteCanId@buf(BANK0[6]), Mcp2515Sleep@cmdMask4(COMRAM[3]), Mcp2515_Init@cmdWrite3(BANK0[3]), 
		 -> Mcp2515_Init@cmdMask4(BANK0[4]), Mcp2515_Reset@cmd(BANK0[1]), Can_SendMessage@buf(COMRAM[4]), Can_ReadMessage@buf(COMRAM[4]), 

    Spi_ReadWrite@rx_tx	PTR unsigned char  size(2) Largest target is 10
		 -> Mcp2515GetNextFreeTXBuf@buf(COMRAM[3]), Mcp2515ReadCanMsg@cmd(COMRAM[10]), Mcp2515ReadCanId@msg(COMRAM[6]), Can_ReadMessage@buf(COMRAM[4]), 
		 -> Can_GetStatus@msg4(COMRAM[4]), Can_GetStatus@msg(COMRAM[3]), 

    SPIRW@rx	PTR unsigned char  size(2) Largest target is 10
		 -> Mcp2515GetNextFreeTXBuf@buf(COMRAM[3]), Mcp2515ReadCanMsg@cmd(COMRAM[10]), Mcp2515ReadCanId@msg(COMRAM[6]), Can_ReadMessage@buf(COMRAM[4]), 
		 -> Can_GetStatus@msg4(COMRAM[4]), Can_GetStatus@msg(COMRAM[3]), NULL(NULL[0]), 

    SPIRW@tx	PTR const unsigned char  size(2) Largest target is 10
		 -> Mcp2515GetNextFreeTXBuf@buf(COMRAM[3]), Mcp2515WriteCanMsg@buf(COMRAM[10]), Mcp2515WriteCanId@buf(BANK0[6]), Mcp2515ReadCanMsg@cmd(COMRAM[10]), 
		 -> Mcp2515ReadCanId@msg(COMRAM[6]), Mcp2515Sleep@cmdMask4(COMRAM[3]), Mcp2515_Init@cmdWrite3(BANK0[3]), Mcp2515_Init@cmdMask4(BANK0[4]), 
		 -> Mcp2515_Reset@cmd(BANK0[1]), Can_SendMessage@buf(COMRAM[4]), Can_ReadMessage@buf(COMRAM[4]), Can_GetStatus@msg4(COMRAM[4]), 
		 -> Can_GetStatus@msg(COMRAM[3]), 

    Can_Init@filterCfg	PTR struct CANFILTER size(2) Largest target is 33
		 -> filter(BANK1[33]), 

    Can_Init@speedCfg	PTR const struct CANSPEED size(2) Largest target is 7
		 -> canSpeed125k(CODE[7]), 

    Can_PutMessage@msgPtr	PTR struct CANMESSAGE size(2) Largest target is 17
		 -> messageTx(BANK0[17]), 

    Can_GetMessage@msgPtr	PTR struct CANMESSAGE size(2) Largest target is 17
		 -> message(BANK0[17]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_Can_Isr
    _onTimeout->_secondRound
    _secondRound->_setWarningLight
    _setWarningLight->_sendWarningLight
    _sendWarningLight->i2_Can_PutMessage
    _firstRound->_requestPed
    _setLight->_sendPedestrianLight
    _setLight->_sendTrafficLight
    _sendTrafficLight->i2_Can_PutMessage
    _sendPedestrianLight->i2_Can_PutMessage
    _requestPed->i2_Can_GetMessage
    _requestPed->i2_Can_PutMessage
    _Can_Isr->_Can_ReadInBuffer
    _Can_WriteOutBuffer->_Can_SendMessage
    _Can_SendMessage->_Mcp2515WriteCanMsg
    _Mcp2515WriteCanMsg->i2_Mcp2515WriteCanId
    i2_Mcp2515WriteCanId->i2_Spi_Write
    _Mcp2515GetNextFreeTXBuf->_Spi_ReadWrite
    _Can_ReadInBuffer->_Can_ReadMessage
    _Can_ReadMessage->_Mcp2515ReadCanMsg
    i2_Spi_Write->i2_SPIRW
    _Mcp2515ReadCanMsg->_Mcp2515ReadCanId
    _Mcp2515ReadCanId->_Spi_ReadWrite
    _Can_GetStatus->_Spi_ReadWrite
    _Spi_ReadWrite->i2_SPIRW

Critical Paths under _main in BANK0

    _init->_Can_Init
    _readID->_Can_GetMessage
    _readID->_Can_PutMessage
    _readConflictInfo->___wmul
    _Can_Init->_Mcp2515_Init
    _Mcp2515_Init->_Mcp2515WriteCanId
    _Mcp2515_Reset->_Spi_Write
    _Mcp2515WriteCanId->_Spi_Write
    _Spi_Write->_SPIRW

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                15    10      5   20048
                                             64 BANK0     15    10      5
                     _Can_GetMessage
                       _decrPriority
                               _init
                          _initLogic
                        _setPriority
 ---------------------------------------------------------------------------------
 (1) _setPriority                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initLogic                                            1     1      0     134
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0   18695
                           _Can_Init
                   _readConflictInfo
                             _readID
 ---------------------------------------------------------------------------------
 (2) _readID                                               1     1      0    1188
                                              5 BANK0      1     1      0
                     _Can_GetMessage
                     _Can_PutMessage
                          _resetData
 ---------------------------------------------------------------------------------
 (2) _readConflictInfo                                    10    10      0    2309
                                              6 BANK0     10    10      0
                     _Can_GetMessage
                     _Can_PutMessage
                             ___wmul
                          _resetData
 ---------------------------------------------------------------------------------
 (3) _resetData                                            2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     767
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _Can_PutMessage                                       5     3      2     596
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (3) _Can_GetMessage                                       5     3      2     500
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _Can_Init                                             4     0      4   15198
                                             60 BANK0      4     0      4
                       _Mcp2515_Init
 ---------------------------------------------------------------------------------
 (3) _Mcp2515_Init                                        25    21      4   14850
                                             35 BANK0     25    21      4
                  _Mcp2515WriteCanId
                      _Mcp2515_Reset
                          _Spi_Write
 ---------------------------------------------------------------------------------
 (4) _Mcp2515_Reset                                        5     5      0    3781
                                             18 BANK0      5     5      0
                          _Spi_Write
 ---------------------------------------------------------------------------------
 (4) _Mcp2515WriteCanId                                   17    12      5    5581
                                             18 BANK0     17    12      5
                          _Spi_Write
 ---------------------------------------------------------------------------------
 (4) _Spi_Write                                            6     0      6    3710
                                             12 BANK0      6     0      6
                              _SPIRW
 ---------------------------------------------------------------------------------
 (5) _SPIRW                                               12     4      8     534
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _decrPriority                                         5     5      0     268
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _high_isr                                            14    14      0   21331
                                             73 COMRAM    14    14      0
                            _Can_Isr
                          _onTimeout
 ---------------------------------------------------------------------------------
 (8) _onTimeout                                            1     1      0    6015
                                             18 COMRAM     1     1      0
                         _firstRound
                        _secondRound
 ---------------------------------------------------------------------------------
 (9) _secondRound                                          5     5      0    3097
                                             13 COMRAM     5     5      0
                        _getConflict
                           _setLight
                    _setWarningLight
                      _shiftPriority
 ---------------------------------------------------------------------------------
 (10) _shiftPriority                                       9     9      0      91
                                              0 COMRAM     9     9      0
 ---------------------------------------------------------------------------------
 (10) _setWarningLight                                     2     1      1     588
                                             11 COMRAM     2     1      1
                   _sendWarningLight
 ---------------------------------------------------------------------------------
 (11) _sendWarningLight                                    6     5      1     468
                                              5 COMRAM     6     5      1
                   i2_Can_PutMessage
 ---------------------------------------------------------------------------------
 (10) _getConflict                                         4     3      1     120
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (9) _firstRound                                           5     5      0    2850
                                             12 COMRAM     5     5      0
                         _requestPed
                           _setLight
 ---------------------------------------------------------------------------------
 (10) _setLight                                            2     1      1    1764
                                              9 COMRAM     2     1      1
                _sendPedestrianLight
                   _sendTrafficLight
 ---------------------------------------------------------------------------------
 (11) _sendTrafficLight                                    4     3      1     468
                                              5 COMRAM     4     3      1
                   i2_Can_PutMessage
 ---------------------------------------------------------------------------------
 (11) _sendPedestrianLight                                 4     3      1     468
                                              5 COMRAM     4     3      1
                   i2_Can_PutMessage
 ---------------------------------------------------------------------------------
 (10) _requestPed                                          7     7      0     618
                                              5 COMRAM     7     7      0
                   i2_Can_GetMessage
                   i2_Can_PutMessage
 ---------------------------------------------------------------------------------
 (12) i2_Can_PutMessage                                    5     3      2     348
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (11) i2_Can_GetMessage                                    5     3      2     248
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (8) _Can_Isr                                              2     2      0   15316
                                             71 COMRAM     2     2      0
                      _Can_GetStatus
                _Can_OutBufferStatus
                   _Can_ReadInBuffer
                 _Can_WriteOutBuffer
 ---------------------------------------------------------------------------------
 (9) _Can_WriteOutBuffer                                   0     0      0    5689
                    _Can_SendMessage
 ---------------------------------------------------------------------------------
 (10) _Can_SendMessage                                     8     6      2    5689
                                             53 COMRAM     8     6      2
            _Mcp2515GetNextFreeTXBuf
                 _Mcp2515WriteCanMsg
                        i2_Spi_Write
 ---------------------------------------------------------------------------------
 (11) _Mcp2515WriteCanMsg                                 18    16      2    2682
                                             35 COMRAM    18    16      2
                i2_Mcp2515WriteCanId
                        i2_Spi_Write
 ---------------------------------------------------------------------------------
 (12) i2_Mcp2515WriteCanId                                17    12      5    1333
                                             18 COMRAM    17    12      5
                        i2_Spi_Write
 ---------------------------------------------------------------------------------
 (11) _Mcp2515GetNextFreeTXBuf                            10     8      2    1927
                                             18 COMRAM    10     8      2
                      _Spi_ReadWrite
 ---------------------------------------------------------------------------------
 (9) _Can_ReadInBuffer                                     3     3      0    7772
                                             68 COMRAM     3     3      0
                    _Can_ReadMessage
 ---------------------------------------------------------------------------------
 (10) _Can_ReadMessage                                     6     4      2    7695
                                             62 COMRAM     6     4      2
                  _Mcp2515ReadCanMsg
                      _Spi_ReadWrite
                        i2_Spi_Write
 ---------------------------------------------------------------------------------
 (11) i2_Spi_Write                                         6     0      6     772
                                             12 COMRAM     6     0      6
                            i2_SPIRW
 ---------------------------------------------------------------------------------
 (11) _Mcp2515ReadCanMsg                                  15    13      2    4754
                                             47 COMRAM    15    13      2
                   _Mcp2515ReadCanId
                      _Spi_ReadWrite
                             _memcpy
 ---------------------------------------------------------------------------------
 (12) _memcpy                                             11     5      6     371
                                              0 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (12) _Mcp2515ReadCanId                                   29    25      4    2157
                                             18 COMRAM    29    25      4
                      _Spi_ReadWrite
 ---------------------------------------------------------------------------------
 (9) _Can_OutBufferStatus                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _Can_GetStatus                                        8     8      0    1744
                                             18 COMRAM     8     8      0
                      _Spi_ReadWrite
 ---------------------------------------------------------------------------------
 (12) _Spi_ReadWrite                                       6     0      6    1594
                                             12 COMRAM     6     0      6
                            i2_SPIRW
 ---------------------------------------------------------------------------------
 (12) i2_SPIRW                                            12     4      8     312
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Can_GetMessage
   _decrPriority
   _init
     _Can_Init
       _Mcp2515_Init
         _Mcp2515WriteCanId
           _Spi_Write
             _SPIRW
         _Mcp2515_Reset
           _Spi_Write
             _SPIRW
         _Spi_Write
           _SPIRW
     _readConflictInfo
       _Can_GetMessage
       _Can_PutMessage
       ___wmul
       _resetData
     _readID
       _Can_GetMessage
       _Can_PutMessage
       _resetData
   _initLogic
   _setPriority

 _high_isr (ROOT)
   _Can_Isr
     _Can_GetStatus
       _Spi_ReadWrite
         i2_SPIRW
     _Can_OutBufferStatus
     _Can_ReadInBuffer
       _Can_ReadMessage
         _Mcp2515ReadCanMsg
           _Mcp2515ReadCanId
             _Spi_ReadWrite
               i2_SPIRW
           _Spi_ReadWrite
             i2_SPIRW
           _memcpy
         _Spi_ReadWrite
           i2_SPIRW
         i2_Spi_Write
           i2_SPIRW
     _Can_WriteOutBuffer
       _Can_SendMessage
         _Mcp2515GetNextFreeTXBuf
           _Spi_ReadWrite
             i2_SPIRW
         _Mcp2515WriteCanMsg
           i2_Mcp2515WriteCanId
             i2_Spi_Write
               i2_SPIRW
           i2_Spi_Write
             i2_SPIRW
         i2_Spi_Write
           i2_SPIRW
   _onTimeout
     _firstRound
       _requestPed
         i2_Can_GetMessage
         i2_Can_PutMessage
       _setLight
         _sendPedestrianLight
           i2_Can_PutMessage
         _sendTrafficLight
           i2_Can_PutMessage
     _secondRound
       _getConflict
       _setLight
         _sendPedestrianLight
           i2_Can_PutMessage
         _sendTrafficLight
           i2_Can_PutMessage
       _setWarningLight
         _sendWarningLight
           i2_Can_PutMessage
       _shiftPriority

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F15      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      90       9       56.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      CD       7       80.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4F      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     57      5E       1      100.0%
BITBANK15           16      0       0      35        0.0%
BANK15              16      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     25B      12        0.0%
DATA                 0      0     25B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Thu May 24 15:50:09 2018

     getConflict@carPersonConcerned 0004                         i2_Spi_Write 33C6  
                  i2_Can_GetMessage 22DE                   i2Can_PutMessage@i 0005  
                                _id 00C6                 ___wmul@multiplicand 0062  
                       __CFG_BORV$2 000000                __end_of_decrPriority 2A2A  
                     i2Spi_Write@tx 000D                        __CFG_CP0$OFF 000000  
                      __CFG_CP1$OFF 000000                        __CFG_CP2$OFF 000000  
                      __CFG_CP3$OFF 000000                        __CFG_CP4$OFF 000000  
                      __CFG_CP5$OFF 000000                        __CFG_CP6$OFF 000000  
                      __CFG_CP7$OFF 000000                                 l304 2F42  
                               l226 2B1A                                 l578 1960  
                               l598 32D6                                 _GIE 007F97  
                      __CFG_CPB$OFF 000000                                 _RB3 007C0B  
                      __CFG_CPD$OFF 000000        __size_of_sendPedestrianLight 0058  
                               fsr2 000FD9                                 prod 000FF3  
                               wreg 000FE8                                l3104 167C  
                              l3122 1948                                l3116 171E  
                              l3108 16E4                                l3300 1A9E  
                              l2350 2B44                                l2344 2B02  
                              l2352 2B52                                l3160 2DA0  
                              l3400 1AFE                                l3312 1AD0  
                              l3304 1AA8                                l3402 1B0A  
                              l3180 29A4                                l3172 2978  
                              l3164 2DAA                                l3308 1ACA  
                              l3252 196A                                l3086 30FA  
                              l3270 1A08                                l3318 1AE4  
                              l3192 2A18                                l3176 2982  
                              l2800 1460                                l3264 19E6  
                              l3186 29F0                                l2538 2F18  
                              l2634 224C                                l3282 1A3A  
                              l3274 1A12                                l3258 19BE  
                              l3196 2A1E                                l2572 2748  
                              l2900 32A4                                l2566 26F0  
                              l2814 14EA                                l2638 22AE  
                              l2742 1DD8                                l3294 1A7C  
                              l3286 1A4E                                l3278 1A34  
                              l2840 15B0                                l2648 22DA  
                              l2904 32BA                                l2746 1E3A  
                              l2828 1564                                l2796 1456  
                              _CKE1 007E3E                                _CKP1 007E34  
                              u2110 167A                                u2130 171C  
                              u2145 1920                                u1545 26D8  
                              u2370 19AE                                u1555 2728  
                     __CFG_DEBUG$ON 000000                                u2375 19A2  
                              u1665 10C8                                u1675 1188  
                              u1685 1256                                _PEIE 007F96  
                              _TMR0 000FD6                        __CFG_WDTPS$1 000000  
                              _TXIF 007CF4               Mcp2515ReadCanId@F8123 00E9  
                   __end_ofi2_SPIRW 2EDE                Mcp2515ReadCanMsg@cmd 0034  
              Mcp2515ReadCanMsg@msg 0030                                _main 1962  
                              _init 2C94                                fsr0h 000FEA  
                              fsr1h 000FE2                                fsr2h 000FDA  
                              fsr0l 000FE9                                indf1 000FE7  
                              indf2 000FDF                                fsr1l 000FE1  
                              fsr2l 000FD9                                btemp 005F  
                   __end_of_Can_Isr 3212                                prodh 000FF4  
                              prodl 000FF3                                start 00A4  
                     __CFG_IESO$OFF 000000            __end_of_Mcp2515ReadCanId 1CC2  
                     __CFG_MCLRE$ON 000000               __size_of_Mcp2515_Init 060C  
                      ___param_bank 000000                     i2Spi_Write@size 000F  
          __size_of_Can_ReadMessage 00FA                  Can_ReadMessage@buf 0041  
                Can_ReadMessage@msg 003F           Mcp2515WriteCanId@mcp_addr 007A  
                             ?_main 00A0                               ?_init 0001  
                             _BRGH1 007D62                               _CREN1 007D5C  
                             _LATD1 007C61                               _LATG0 007C78  
                             _LATF6 007C76                               _LATF7 007C77  
                             i2l226 2E9C                               i2l247 28FA  
                             i2l291 0068                               i2l288 0052  
                     _Can_GetStatus 300E                               _PLLEN 007CDE  
                   firstRound@color 000E                               _SPEN1 007D5F  
                             _SPIRW 2AE8                               _SSPIF 007CF3  
                             _TXEN1 007D65                               _SYNC1 007D64  
                             _TXREG 000FAD                       __CFG_WRT0$OFF 000000  
                     __CFG_WRT1$OFF 000000                       __CFG_WRT2$OFF 000000  
                     __CFG_WRT3$OFF 000000                       __CFG_WRT4$OFF 000000  
                    __CFG_EBRT0$OFF 000000                       __CFG_WRT5$OFF 000000  
                    __CFG_EBRT1$OFF 000000                       __CFG_WRT6$OFF 000000  
                    __CFG_EBRT2$OFF 000000                       __CFG_WRT7$OFF 000000  
                    __CFG_EBRT3$OFF 000000                      __CFG_EBRT4$OFF 000000  
                    __CFG_FCMEN$OFF 000000                      __CFG_EBRT5$OFF 000000  
                    __CFG_EBRT6$OFF 000000                      __CFG_EBRT7$OFF 000000  
                     __CFG_WRTB$OFF 000000                       __CFG_WRTC$OFF 000000  
                     __CFG_WRTD$OFF 000000                      __CFG_EBRTB$OFF 000000  
                             _nbTx0 00C0                               _nbTx1 00BF  
                             _nbTx2 00BE                               main@i 00AC  
                    __CFG_BOREN$OFF 000000                               pclath 000FFA  
                             tablat 000FF5                    __end_of_Can_Init 3310  
                      _Mcp2515_Init 1042             __size_of_Can_PutMessage 01A6  
                             plusw1 000FE3                               plusw2 000FDB  
                             status 000FD8                setPriority@carPerson 0060  
          __end_of_readConflictInfo 1962            ?_Mcp2515GetNextFreeTXBuf 0013  
                       firstRound@i 0011                     __initialization 2E08  
            __size_of_Mcp2515_Reset 0066              Mcp2515ReadCanId@can_id 0015  
                      __end_of_main 1B16                        __end_of_init 2D18  
          __end_of_Can_ReadInBuffer 3256            __size_of_Can_SendMessage 0064  
             Can_ReadInBuffer@error 0045                        _canSpeed100k 101D  
                      _canSpeed125k 1039                        _canSpeed250k 1016  
                      _canSpeed500k 100F                        _canSpeed800k 1008  
                  i2_Can_PutMessage 1E68                              ??_main 00A5  
              __size_of_getConflict 002A                              ??_init 00A0  
          Can_ReadInBuffer@rdStatus 0046                      ?_Can_GetStatus 0001  
             __end_of_Spi_ReadWrite 3412                       __activetblptr 000003  
                      ?_secondRound 0001                      __CFG_PLLCFG$ON 000000  
                            ?_SPIRW 0060                      __CFG_RETEN$OFF 000000  
                _numberWaitingUsers 005D                           ??i2_SPIRW 0009  
                    _Can_GetMessage 2164                              SPIRW@i 0068  
                            _BRG161 007B2B        sendTrafficLight@trafficLight 0009  
                         ??_Can_Isr 0048                main@isAlreadyWaiting 00AB  
                      ?_setPriority 0001                              _INT3IE 007F85  
                            _INT3IF 007F82                     __CFG_BBSIZ$BB1K 000000  
                            i2l3012 283C                              i2l3020 286A  
                            i2l3006 2822                              i2l3030 2006  
                            i2l2400 1FBE                              i2l2330 2E8C  
                            i2l3018 2850                              i2l3034 200E  
                            i2l3026 1FEE                              i2l3060 20EE  
                            i2l3052 20A8                              i2l3044 205A  
                            i2l2510 244A                              i2l3230 3200  
                            i2l3070 2154                              i2l2336 2EBA  
                            i2l3240 3352                              i2l2338 2EC6  
                            i2l2442 2ACA                              i2l2514 2482  
                            i2l3226 31FA                              i2l2610 23BC  
                            i2l3074 2158                              i2l2380 3268  
                            i2l2436 2A8C                              i2l2524 2530  
                            i2l3076 215A                              i2l3236 334A  
                            i2l2614 2408                              i2l3246 3368  
                    __CFG_WDTEN$OFF 000000                              i2l2712 2964  
                            i2l2480 2C30                              i2l2624 2430  
                            i2l2458 25C0                              i2l2388 3288  
                            i2l2476 2C28                              i2l2716 2FAA  
                            i2l2396 1F72                              i2l2494 2C8C  
                            i2l2680 28F6                              i2l2498 2C90  
                            i2l2932 321A                              i2l2862 315A  
                            i2l2936 3222                              i2l2946 324E  
                            i2l2874 2D82                              i2l2890 2B84  
                            i2l2948 3252                              i2l2982 2770  
                            i2l2894 2BB4                              i2l2994 27D0  
                            i2l2986 2778                              i2l2988 27B6  
                            i2l2998 27E4                              _OSCCON 000FD3  
            Mcp2515WriteCanId@canid 0081                              _TMR0IE 007F95  
                            _SPBRG1 000FAF                              _TMR0IF 007F92  
                            _SSP1IF 007CF3                              _TRISC3 007CA3  
                            _TRISD1 007CA9                              _TRISC4 007CA4  
                            _TRISC5 007CA5                              _SSPEN1 007E35  
                            _TRISG0 007CC0                              _TRISF6 007CBE  
                            _TRISF7 007CBF                              _SSPBUF 000FC9  
                 ?_sendTrafficLight 0006                      __CFG_PWRTEN$ON 000000  
                    __CFG_XINST$OFF 000000                   ?_sendWarningLight 0006  
                ??_sendTrafficLight 0007            __size_of_setWarningLight 000E  
                  __end_of_high_isr 00A4               __size_of_decrPriority 00C2  
             sendTrafficLight@color 0006                  ??_sendWarningLight 0007  
                            ___wmul 3310     Mcp2515GetNextFreeTXBuf@ctrlregs 0016  
                    __CFG_STVREN$ON 000000                              _filter 01AC  
                            _readID 30C8                              _memcpy 3256  
                            clear_0 2E40                              clear_1 2E4C  
                            clear_2 2E58                   ??_Can_ReadMessage 0041  
                  __end_of_setLight 3174                  __size_of_Spi_Write 002A  
                 Can_GetStatus@msg4 0013                        __pdataCOMRAM 005E  
      getConflict@carPersonToLookAt 0001                    decrPriority@user 0062  
            __end_of_Can_GetMessage 22DE                  Can_SendMessage@buf 0038  
                Can_SendMessage@msg 0036                  Can_SendMessage@res 003C  
                      __mediumconst 0000                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
                     _Mcp2515_Reset 2EDE               __end_of_shiftPriority 2C0C  
                    _rxBufferPtrOut 00C3            __end_ofi2_Can_GetMessage 2434  
                   __CFG_BORPWR$LOW 000000     __end_of_Mcp2515GetNextFreeTXBuf 2C94  
                        __accesstop 0060             __end_of__initialization 2E6A  
                      _decrPriority 2968                       ___rparam_used 000001  
               _sendPedestrianLight 3070        __size_ofi2_Mcp2515WriteCanId 00BE  
                      readID@retVal 0065                       __end_of_SPIRW 2B7A  
         Mcp2515ReadCanMsg@mcp_addr 003E                      __pcstackCOMRAM 0001  
                      __pidataBANK0 3454                        ?i2_Spi_Write 000D  
                     decrPriority@i 0064                     ??_Can_GetStatus 0013  
                         ?_Can_Init 009C                       _canSpeed1000k 1001  
              ?_sendPedestrianLight 0006                   ??_Can_SendMessage 0038  
                           ??_SPIRW 0068                      ?_Mcp2515_Reset 0001  
              Mcp2515WriteCanId@buf 007B                     ?_Can_GetMessage 0060  
              Mcp2515WriteCanId@ext 0072          __end_of_Mcp2515WriteCanMsg 255C  
       __size_of_Can_WriteOutBuffer 0020        __size_of_Can_OutBufferStatus 0006  
                        __pbssBANK0 00AF                          __pbssBANK1 0100  
                        __pbssBANK2 0200                      _Can_PutMessage 1CC2  
                __size_of_initLogic 006E                   __end_of_Spi_Write 339C  
                __size_of_onTimeout 002C                   ?_Mcp2515ReadCanId 0013  
                __CFG_CCP2MX$PORTBE 000000                     Can_PutMessage@i 0064  
                ??_Mcp2515ReadCanId 0017                             ?___wmul 0060  
                           SPIRW@rx 0062                             SPIRW@tx 0060  
                           ?_readID 0001                             ?_memcpy 0001  
                __size_of_resetData 003E                   ??_setWarningLight 000D  
                        ??_Can_Init 00A0               ??_sendPedestrianLight 0007  
                           _INTEDG3 007F8B                   Spi_ReadWrite@size 000F  
           Mcp2515WriteCanId@can_id 0073                __size_of_secondRound 017C  
                           i2_SPIRW 2E74                             _SPBRGH1 000FD4  
                    shiftPriority@i 0009                             _SSPCON1 000FC6  
            __end_of_Can_PutMessage 1E68                           SPIRW@size 0064  
                         ?_high_isr 0001                             _Can_Isr 31CA  
                     setLight@color 000A                       setLight@light 000B  
              Can_GetMessage@msgPtr 0060            __end_ofi2_Can_PutMessage 1FE8  
                        _bottomLeft 00C4                __size_of_setPriority 0022  
                        _firstRound 276C                   ?_readConflictInfo 0001  
                         ?_setLight 000A                             __Hparam 0000  
            i2Can_PutMessage@msgPtr 0001                             __Lparam 0000  
                ??_readConflictInfo 0066                     __size_of___wmul 0036  
                 ?_Can_ReadInBuffer 0001                        __psmallconst 1000  
                       Spi_Write@tx 006C                     __size_of_readID 0056  
                           __pcinit 2E08                     __size_of_memcpy 0044  
                           __ramtop 1000                  ??_Can_ReadInBuffer 0045  
                           __ptext0 1962                             __ptext1 3412  
                           __ptext2 2D9A                             __ptext3 2C94  
                           __ptext4 30C8                             __ptext5 164E  
                           __ptext6 329A                             __ptext7 3310  
                           __ptext8 1CC2                             __ptext9 2164  
                         _T0CONbits 000FD5                     ??_Mcp2515_Reset 0072  
                 __end_of_initLogic 2E08    __size_of_Mcp2515GetNextFreeTXBuf 0088  
                Can_GetStatus@F8262 00FD                  Can_GetStatus@F8264 00F3  
                 __end_of_onTimeout 3372                             _message 00D8  
                 __CFG_MSSPMSK$MSK7 000000                             _topLeft 00C5  
                 i2Can_GetMessage@i 0005                             main@cmd 00A9  
                   ?_Can_PutMessage 0060                          ??_high_isr 004A  
                __CFG_INTOSCSEL$LOW 000000               Mcp2515_Init@cmdWrite3 0099  
              end_of_initialization 2E6A                           i2SPIRW@rx 0003  
                         i2SPIRW@tx 0001                   __end_of_resetData 32D8  
                           memcpy@d 0007                             memcpy@n 0005  
                           memcpy@s 0009                 __end_of_canSpeed10k 1039  
               __end_of_canSpeed20k 1032                 __end_of_canSpeed50k 102B  
                        ??_setLight 000B                     _Can_ReadMessage 286E  
             Mcp2515_Init@filterCfg 0085                             postdec1 000FE5  
                           postdec2 000FDD                      Mcp2515_Reset@i 0073  
                           postinc0 000FEE                             postinc1 000FE6  
                           postinc2 000FDE                          _requestPed 2D18  
                     ??_getConflict 0002                __size_ofi2_Spi_Write 0026  
         __size_of_sendTrafficLight 0056                 firstRound@occupancy 000F  
                  __CFG_FOSC$INTIO2 000000           __size_of_sendWarningLight 0066  
               i2_Mcp2515WriteCanId 2A2A                      _txBufferPtrOut 0058  
      sendWarningLight@trafficLight 000B                   ?i2_Can_GetMessage 0001  
               Mcp2515ReadCanId@ext 0013                 Mcp2515ReadCanId@msg 002A  
                ??i2_Can_GetMessage 0003                         ?_firstRound 0001  
              ?i2_Mcp2515WriteCanId 0013              __size_of_Spi_ReadWrite 0026  
      Mcp2515GetNextFreeTXBuf@F8153 00F7                     _Can_SendMessage 2FAA  
               _Can_OutBufferStatus 347A         i2Mcp2515WriteCanId@mcp_addr 001B  
             sendWarningLight@state 0006                      __end_of___wmul 3346  
                     __pidataCOMRAM 3480                    ??_Can_GetMessage 0062  
                    __end_of_readID 311E                      __end_of_memcpy 329A  
               __end_of_getConflict 33C6                 start_initialization 2E08  
                 __size_of_Can_Init 0038            Mcp2515ReadCanId@mcp_addr 0029  
                    _durationLights 0118            i2Mcp2515WriteCanId@canid 0022  
                       _canSpeed10k 1032                         _canSpeed20k 102B  
                       _canSpeed50k 1024                ?_Can_OutBufferStatus 0001  
           __end_of_Can_ReadMessage 2968                          initLogic@i 0060  
             ??i2_Mcp2515WriteCanId 0018                  _Mcp2515WriteCanMsg 2434  
        Mcp2515GetNextFreeTXBuf@buf 0019                     _setWarningLight 346C  
          Mcp2515GetNextFreeTXBuf@i 001C                      _occupancyPaths 0100  
                         _Spi_Write 3372                            ??___wmul 0064  
                       ?_requestPed 0001                 ?_Mcp2515WriteCanMsg 0024  
            __size_of_shiftPriority 0092               Mcp2515WriteCanMsg@dlc 0033  
             Mcp2515WriteCanMsg@buf 0028               Mcp2515WriteCanMsg@msg 0024  
                       __pdataBANK0 00E9                            ??_readID 0065  
                  Can_GetStatus@msg 0017                            ??_memcpy 0007  
                        onTimeout@i 0013                       _rxBufferCount 0059  
                     _rxBufferPtrIn 005A             _Mcp2515GetNextFreeTXBuf 2C0C  
             __end_of_Can_GetStatus 3070                       _Spi_ReadWrite 33EC  
         __size_of_Mcp2515ReadCanId 01AC                 __size_of_firstRound 0102  
                       __pbssCOMRAM 0058          __end_of_Can_WriteOutBuffer 3454  
                     __pcstackBANK0 0060                            ?i2_SPIRW 0001  
             ??_Can_OutBufferStatus 0001                ??_Mcp2515WriteCanMsg 0026  
              decrPriority@modified 0063                            ?_Can_Isr 0001  
                     ?_Mcp2515_Init 0083                       Spi_Write@size 006E  
                 __size_of_high_isr 009C                 Mcp2515WriteCanMsg@i 0035  
           __end_of_Can_SendMessage 300E                   _Mcp2515ReadCanMsg 255C  
                 ?i2_Can_PutMessage 0001                  ?_Mcp2515ReadCanMsg 0030  
                ??i2_Can_PutMessage 0003              secondRound@waitingUser 0012  
                         __pintcode 0008                   __size_of_setLight 0056  
                        ?_Spi_Write 006C         __end_of_sendPedestrianLight 30C8  
                       _getConflict 339C                 ??_Mcp2515ReadCanMsg 0032  
                         _conflicts 0200                    _sendTrafficLight 3174  
                     ??_secondRound 000E                      ?_Spi_ReadWrite 000D  
         __size_of_readConflictInfo 0314                         __smallconst 1000  
                  ??_Can_PutMessage 0062                    _sendWarningLight 2F44  
                    __size_of_SPIRW 0092                   Mcp2515_Init@F8112 00EF  
                 Mcp2515_Init@F8114 00FA                          resetData@i 0060  
            Can_SendMessage@txbuf_n 003D                        secondRound@i 000F  
                      secondRound@j 0011                           _initLogic 2D9A  
         __size_of_Can_ReadInBuffer 0044                           _onTimeout 3346  
                     _shiftPriority 2B7A          Mcp2515WriteCanMsg@mcp_addr 0034  
                     ??_setPriority 0060                      ??_Mcp2515_Init 0087  
               __size_of_requestPed 0082           __end_of_Mcp2515ReadCanMsg 266A  
                         _messageTx 00C7             __end_of_setWarningLight 347A  
              Mcp2515_Init@cmdMask4 0095                    ?_Can_ReadMessage 003F  
                    ___wmul@product 0064                            i2SPIRW@i 0009  
                         _resetData 329A                            i2u134_41 1B22  
                          i2u135_45 1B6E                            i2u143_45 2A7C  
                          i2u144_45 2AB6                            i2u137_45 1BDA  
                          i2u138_45 1C2A                  Spi_ReadWrite@rx_tx 000D  
                     Mcp2515_Init@i 0094           i2Mcp2515WriteCanId@can_id 0014  
                 Mcp2515Sleep@F8117 00BB                         _colorLights 010C  
         ??_Mcp2515GetNextFreeTXBuf 0015                  firstRound@duration 0010  
                     _txBufferCount 00C1                           main@i_120 00AD  
                          _Can_Init 32D8                   ___wmul@multiplier 0060  
                     _txBufferPtrIn 00C2                    __CFG_SOSCSEL$LOW 000000  
              Mcp2515_Init@speedCfg 0083                     Can_GetMessage@i 0064  
             __end_of_Mcp2515_Reset 2F44  Mcp2515WriteCanMsg@buffer_sidh_addr 0032  
              setWarningLight@light 000D                          ?_initLogic 0001  
              setWarningLight@state 000C            sendPedestrianLight@color 0006  
                    ?_shiftPriority 0001                    __size_ofi2_SPIRW 006A  
               __end_of_secondRound 2164                          ?_onTimeout 0001  
                       _bottomRight 005C                           copy_data0 2E1C  
                       i2SPIRW@size 0005                    __size_of_Can_Isr 0048  
                     ?_decrPriority 0001                    ?_Can_SendMessage 0036  
                      ??_firstRound 000D                          ?_resetData 0001  
               __end_of_setPriority 3434                   _Mcp2515WriteCanId 266A  
                          __Hrparam 0000                           memcpy@tmp 000B  
                          __Lrparam 0000                Can_PutMessage@msgPtr 0060  
                ?_Mcp2515WriteCanId 0072                       ??i2_Spi_Write 0013  
               secondRound@conflict 0010                         ??_Spi_Write 0072  
         __size_ofi2_Can_GetMessage 0156                     ??_Spi_ReadWrite 0013  
               ??_Mcp2515WriteCanId 0077               __end_of_canSpeed1000k 1008  
    Mcp2515GetNextFreeTXBuf@txbuf_n 0013                    _Mcp2515ReadCanId 1B16  
                __end_of_firstRound 286E                            __ptext10 32D8  
                          __ptext11 1042                            __ptext20 2B7A  
                          __ptext12 2EDE                            __ptext21 346C  
                          __ptext13 266A                            __ptext30 22DE  
                          __ptext22 2F44                            __ptext14 3372  
                          __ptext31 31CA                            __ptext23 339C  
                          __ptext15 2AE8                            __ptext40 255C  
                          __ptext32 3434                            __ptext24 276C  
                          __ptext16 2968                            __ptext41 3256  
                          __ptext33 2FAA                            __ptext25 311E  
                          __ptext42 1B16                            __ptext34 2434  
                          __ptext26 3174                            __ptext18 3346  
                          __ptext43 347A                            __ptext35 2A2A  
                          __ptext27 3070                            __ptext19 1FE8  
                          __ptext44 300E                            __ptext36 2C0C  
                          __ptext28 2D18                            __ptext45 33EC  
                          __ptext37 3212                            __ptext29 1E68  
                          __ptext46 2E74                            __ptext38 286E  
                          __ptext39 33C6                            _high_isr 0008  
                    ??_decrPriority 0060          __size_of_Mcp2515ReadCanMsg 010E  
                 Can_Init@filterCfg 009E                    ?_setWarningLight 000C  
                     __size_of_main 01B4                       __size_of_init 0084  
         __end_of_Mcp2515WriteCanId 276C                       requestPed@ped 000C  
                          _setLight 311E                 __CFG_RTCOSC$SOSCREF 000000  
                          _rxBuffer 0168                            _txBuffer 0124  
                      ??_requestPed 0006                            int$flags 005F  
                          _topRight 005B                   readConflictInfo@i 006C  
                 readConflictInfo@j 006E                            main@argc 00A0  
                          main@argv 00A2                __end_of_Mcp2515_Init 164E  
   sendPedestrianLight@trafficLight 0009                            main@user 00AE  
                  Mcp2515_Reset@cmd 0072                 __end_ofi2_Spi_Write 33EC  
                  _readConflictInfo 164E                         _secondRound 1FE8  
            i2Mcp2515WriteCanId@buf 001C              i2Mcp2515WriteCanId@ext 0013  
                   ??_shiftPriority 0001                            memcpy@d1 0001  
                          memcpy@s1 0003                         ??_initLogic 0060  
                  _Can_ReadInBuffer 3212                         ??_onTimeout 0013  
               Can_GetStatus@status 001A         __end_ofi2_Mcp2515WriteCanId 2AE8  
              __end_of_canSpeed100k 1024                __end_of_canSpeed125k 1040  
              __end_of_canSpeed250k 101D                __end_of_canSpeed500k 1016  
                          intlevel2 0000                __end_of_canSpeed800k 100F  
                       _setPriority 3412                  __end_of_requestPed 2D9A  
                _Can_WriteOutBuffer 3434            __end_of_sendTrafficLight 31CA  
                       ??_resetData 0060            __end_of_sendWarningLight 2FAA  
               ?_Can_WriteOutBuffer 0001                        ?_getConflict 0001  
                 Can_ReadInBuffer@i 0047                    Can_Init@speedCfg 009C  
         __size_ofi2_Can_PutMessage 0180         __end_of_Can_OutBufferStatus 3480  
              ??_Can_WriteOutBuffer 003E             __size_of_Can_GetMessage 017A  
       __size_of_Mcp2515WriteCanMsg 0128              i2Can_GetMessage@msgPtr 0001  
                      _priorityUser 00AF                   shiftPriority@temp 0008  
        __size_of_Mcp2515WriteCanId 0102                      Can_Isr@nbTxBuf 005E  
            __size_of_Can_GetStatus 0062                      Can_Isr@retCode 0049  
